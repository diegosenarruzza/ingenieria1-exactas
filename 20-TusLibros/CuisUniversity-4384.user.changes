

----STARTUP---- (29 November 2020 15:19:15) as /mnt/sdb5/Ingenieria1/CuisUniversity (copy)/CuisUniversity-4384.image!


TestCase subclass: #FacadeTusLibrosTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #FacadeTusLibrosTest category: 'TusLibros' stamp: 'DS 11/29/2020 15:19:48'!
TestCase subclass: #FacadeTusLibrosTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #FacadeTusLibros category: 'TusLibros' stamp: 'DS 11/29/2020 15:20:10'!
Object subclass: #FacadeTusLibros
	instanceVariableNames: 'authenticator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!FacadeTusLibrosTest methodsFor: 'no messages' stamp: 'DS 11/29/2020 15:19:55'!
test01CreateCartHaveEmptyList

	| tusLibros cartID authenticator |

	authenticator := Dictionary with: 1 -> 'password'.
	tusLibros := FacadeTusLibros with: authenticator.
	cartID := tusLibros createCartForUser: 1 withPassword: 'password'.

	self assert: (Dictionary new) equals: (tusLibros listCartFor: cartID).! !
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'DS 11/29/2020 15:20:21'!
test02CannotCreateCartWithInvalidPassword

	| tusLibros authenticator |

	authenticator := Dictionary with: 1 -> 'password'.
	tusLibros := FacadeTusLibros with: authenticator.

	self should: [		tusLibros createCartForUser: 1 withPassword: 'bad password'.		]
		raise: Error
		withMessageText: FacadeTusLibros badAuthenticationErrorDescription.! !
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'DS 11/29/2020 15:20:26'!
test03CannotCreateCartWithUnknownUser

	| tusLibros authenticator |

	authenticator := Dictionary with: 1 -> 'password'.
	tusLibros := FacadeTusLibros with: authenticator.

	self should: [		tusLibros createCartForUser: 2 withPassword: 'password'.		]
		raise: Error
		withMessageText: FacadeTusLibros badAuthenticationErrorDescription.! !
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'DS 11/29/2020 15:20:38' prior: 50880611!
test03CannotCreateCartWithUnknownUser

	| tusLibros authenticator |

	authenticator := Dictionary with: 1 -> 'password'.
	tusLibros := FacadeTusLibros with: authenticator.

	self should: [		tusLibros createCartForUser: 2 withPassword: 'password'.		]
		raise: Error
		withMessageText: FacadeTusLibros badAuthenticationErrorDescription.! !
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'DS 11/29/2020 15:20:48' prior: 50880625!
test03CannotCreateCartWithUnknownUser

	| tusLibros authenticator |

	authenticator := Dictionary with: 1 -> 'password'.
	tusLibros := FacadeTusLibros with: authenticator.

	self should: [		tusLibros createCartForUser: 2 withPassword: 'password'.		]
		raise: Error
		withMessageText: FacadeTusLibros badAuthenticationErrorDescription.! !
!FacadeTusLibros methodsFor: 'no messages' stamp: 'DS 11/29/2020 15:21:04'!
initializeWith: anAuthenticator 

	authenticator := anAuthenticator.! !
!FacadeTusLibros methodsFor: 'as yet unclassified' stamp: 'DS 11/29/2020 15:21:10'!
listCartFor: aCartID

	^Dictionary new.! !
!FacadeTusLibros methodsFor: 'as yet unclassified' stamp: 'DS 11/29/2020 15:21:17'!
createCartForUser: anID withPassword: aPassword

	authenticator at: anID ifAbsent: [self error: self class badAuthenticationErrorDescription ].
	((authenticator at: anID) = aPassword) ifFalse: [self error: self class badAuthenticationErrorDescription].

! !
!FacadeTusLibros class methodsFor: 'no messages' stamp: 'DS 11/29/2020 15:21:28'!
with: anAuthenticator

	^self new initializeWith: anAuthenticator.! !
!FacadeTusLibros class methodsFor: 'as yet unclassified' stamp: 'DS 11/29/2020 15:21:33'!
badAuthenticationErrorDescription

	^'Dont exist an user with this password'.! !

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'DS 11/29/2020 15:21:36'!
PASSED!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 11/29/2020 15:21:36'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/29/2020 15:21:36'!
PASSED!

----STARTUP---- (29 November 2020 15:23:47) as /mnt/sdb5/Ingenieria1/CuisUniversity/CuisUniversity-4384.image!


----End fileIn of /mnt/sdb5/Ingenieria1/CuisUniversity/TusLibros.st----!

----STARTUP---- (29 November 2020 15:29:50) as D:\facultad\Smalltalk\windows64\CuisUniversity-4384.image!


!classRemoval: #Cashier stamp: 'FedericoSabatini 11/29/2020 15:29:53'!
Object subclass: #Cashier
	instanceVariableNames: 'cart catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!

!classRemoval: #Cart stamp: 'FedericoSabatini 11/29/2020 15:29:53'!
Object subclass: #Cart
	instanceVariableNames: 'books catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!

!classRemoval: #CashierTest stamp: 'FedericoSabatini 11/29/2020 15:29:54'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!

!classRemoval: #CartTest stamp: 'FedericoSabatini 11/29/2020 15:29:55'!
TestCase subclass: #CartTest
	instanceVariableNames: 'catalog isbn1 isbn2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!

!classDefinition: #CartTest category: 'TusLibros-Solucion' stamp: 'FedericoSabatini 11/29/2020 15:29:55'!
TestCase subclass: #CartTest
	instanceVariableNames: 'catalog isbn1 isbn2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!

!classDefinition: #CartTest category: 'TusLibros-Solucion' stamp: 'FedericoSabatini 11/29/2020 15:29:55'!
TestCase subclass: #CartTest
	instanceVariableNames: 'catalog isbn1 isbn2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!
!CartTest methodsFor: 'setup' stamp: 'FedericoSabatini 11/19/2020 19:20:29' overrides: 16927572!
setUp

	catalog := Dictionary new.
	isbn1 := 100000.
	isbn2 := 100001.! !
!CartTest methodsFor: 'adding' stamp: 'DS 11/19/2020 00:26:21'!
test01NewCartIsEmpty
	
	| aCart |

	aCart := Cart with: catalog.
	
	self assert: aCart isEmpty.! !
!CartTest methodsFor: 'adding' stamp: 'FedericoSabatini 11/19/2020 19:21:40'!
test02CartShouldHaveOneOfABookWhenAddingIt
	
	|  aCart |

	catalog at: isbn1 put: 100.

	aCart := Cart with: catalog.
	aCart add: 1 of: isbn1.
	
	self deny: aCart isEmpty.
	self assert: 1 equals: (aCart howManyOf: isbn1).! !
!CartTest methodsFor: 'adding' stamp: 'FedericoSabatini 11/19/2020 19:21:59'!
test03CartShouldHaveManyBooksWhenAddingMany
	
	| aCart |

	catalog at: isbn1 put: 100.
	catalog at: isbn2 put: 100.

	aCart := Cart with: catalog.
	aCart add: 5 of: isbn1.
	aCart add: 2 of: isbn2.
	
	self assert: 5 equals: (aCart howManyOf: isbn1).
	self assert: 2 equals: (aCart howManyOf: isbn2).! !
!CartTest methodsFor: 'adding' stamp: 'FedericoSabatini 11/19/2020 19:22:11'!
test04CanNotAddABookOutOfCatalog
	
	| aCart |

	catalog at: isbn2 put: 100.
	aCart := Cart with: catalog.

	self should: [ aCart add: 1 of: isbn1. ]
		raise: Error
		withMessageText: Cart bookIsOutOfCatalogErrorDescription.! !
!CartTest methodsFor: 'adding' stamp: 'FedericoSabatini 11/19/2020 19:22:24'!
test05CanNotAddLessThanOneBook
	
	| aCart |

	catalog at: isbn2 put: 100.
	aCart := Cart with: catalog.

	self should: [ aCart add: -1 of: isbn2. ]
		raise: Error
		withMessageText: Cart canNotAddLessThanOneBookErrorDescription.! !
!CartTest methodsFor: 'list' stamp: 'DS 11/18/2020 00:50:03'!
test06NewCartHaveEmptyList

	| aCart |

	aCart := Cart with: catalog.

	self assert: aCart list isEmpty.! !
!CartTest methodsFor: 'list' stamp: 'FedericoSabatini 11/19/2020 19:22:36'!
test07CartShouldHaveListWithOneOfABookWhenAddingIt

	| aCart |

	catalog at: isbn1 put: 100.

	aCart := Cart with: catalog.
	aCart add: 1 of: isbn1.

	self assert: (Dictionary newFromPairs: {isbn1. 1} ) equals: aCart list.! !
!CartTest methodsFor: 'list' stamp: 'FedericoSabatini 11/19/2020 19:22:48'!
test08CartShouldHaveListWithManyBooksWhenAddingMany

	| aCart |

	catalog at: isbn1 put: 100.
	catalog at: isbn2 put: 100.

	aCart := Cart with: catalog.
	aCart add: 2 of: isbn1.
	aCart add: 1 of: isbn2.

	self assert: (Dictionary newFromPairs: {isbn1. 2. isbn2. 1}) equals: aCart list.! !
!CartTest methodsFor: 'list' stamp: 'FedericoSabatini 11/19/2020 19:23:00'!
test09ModifyCartListShouldNotModifyTheCart

	| aCart list |

	catalog at: isbn1 put: 100.
	catalog at: isbn2 put: 100.

	aCart := Cart with: catalog.
	aCart add: 1 of: isbn1.
	aCart add: 1 of: isbn2.
	
	list := aCart list.
	list removeKey: isbn1.

	self assert: (Dictionary newFromPairs: {isbn1. 1. isbn2. 1}) equals: aCart list.! !

!classDefinition: #CashierTest category: 'TusLibros-Solucion' stamp: 'FedericoSabatini 11/29/2020 15:29:56'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!

!classDefinition: #CashierTest category: 'TusLibros-Solucion' stamp: 'FedericoSabatini 11/29/2020 15:29:56'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!
!CashierTest methodsFor: 'tests' stamp: 'DS 11/19/2020 21:06:01'!
test01CannotInitializeCashierWithEmptyCart

	| aCart aCatalog |

	aCatalog := Dictionary new.
	aCart := Cart with: aCatalog.

	self should: [Cashier for: aCart ]
		raise: Error
		withMessageText: Cashier creatingCashierWithEmptyCartErrorDescription.
		! !
!CashierTest methodsFor: 'tests' stamp: 'DS 11/19/2020 21:07:30'!
test02CashierPriceShouldBeEqualToACartWithOneElement

	| aCashier aCart aCatalog book |

	book := 100001.

	aCatalog := Dictionary new.
	aCatalog at: book put: 200.
	
	aCart := Cart with: aCatalog.
	aCart add: 1 of: book.
	
	aCashier := Cashier for: aCart.
	
	self assert: 200 equals: aCashier purchaseCost.
	
	
	
		! !
!CashierTest methodsFor: 'tests' stamp: 'DS 11/19/2020 21:06:17'!
test03CashierPriceShouldBeEqualToACartWithManyElements

	| aCashier aCart aCatalog book book2 |
	
	book := 100001.
	book2 := 100002.
	
	aCatalog := Dictionary new.
	aCatalog at: book put: 200.
	aCatalog at: book2 put: 300.
	
	aCart := Cart with: aCatalog.
	aCart add: 1 of: book.
	aCart add: 1 of: book2.
	
	aCashier := Cashier for: aCart.

	self assert: 500 equals: aCashier purchaseCost.
	
	
	
		! !
!CashierTest methodsFor: 'tests' stamp: 'DS 11/19/2020 21:10:34'!
test04CashierPriceShouldBeEqualToACartWithManyOfSameElements

	| aCashier aCart aCatalog book |
	
	book := 100001.
	
	aCatalog := Dictionary new.
	aCatalog at: book put: 200.

	aCart := Cart with: aCatalog.
	aCart add: 4 of: book.
	
	aCashier := Cashier for: aCart.
	
	self assert: 800 equals: aCashier purchaseCost.
	
	
	
		! !
!CashierTest methodsFor: 'tests' stamp: 'DS 11/19/2020 21:06:27'!
test05

	| aCreditCard aCashier aCart aCatalog book |
	
	aCreditCard := 90012225123.
	book := 100001.
	
	aCatalog := Dictionary new.
	aCatalog at: book put: 200.

	aCart := Cart with: aCatalog.
	aCart add: 4 of: book.
	
	aCashier := Cashier for: aCart.
	
	self should: [aCashier checkoutWith: aCreditCard]
		raise: Error
		withMessageText: Cashier invalidCreditCardErrorDescription.
	
	
	
		! !

!classDefinition: #CreditCardTest category: 'TusLibros-Solucion' stamp: 'FedericoSabatini 11/29/2020 15:29:56'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!

!classDefinition: #CreditCardTest category: 'TusLibros-Solucion' stamp: 'FedericoSabatini 11/29/2020 15:29:56'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!
!CreditCardTest methodsFor: 'tests' stamp: 'DS 11/19/2020 21:48:08'!
test01

	| number expirationDate owner |
	
	number := '123412341234123'.
	expirationDate  := February, 2021.
	owner := 'FedeSaba S.A.'.

	self should: [ CreditCard withNumber: number withExpirationDate: expirationDate andOwner: owner. ]
		raise: Error
		withMessageText: CreditCard invalidNumberErrorDescription.! !
!CreditCardTest methodsFor: 'tests' stamp: 'DS 11/19/2020 21:53:01'!
test02

	| number expirationDate owner |
	
	number := '123412341234123a'.
	expirationDate  := February, 2021.
	owner := 'FedeSaba S.A.'.

	self should: [ CreditCard withNumber: number withExpirationDate: expirationDate andOwner: owner. ]
		raise: Error
		withMessageText: CreditCard invalidNumberErrorDescription.! !
!CreditCardTest methodsFor: 'tests' stamp: 'DS 11/19/2020 21:52:24'!
test03

	| number expirationDate owner |
	
	number := '1234123412341234'.
	expirationDate  := February, 2021.
	owner := ''.

	self should: [ CreditCard withNumber: number withExpirationDate: expirationDate andOwner: owner. ]
		raise: Error
		withMessageText: CreditCard invalidOwnerErrorDescription.! !
!CreditCardTest methodsFor: 'tests' stamp: 'DS 11/19/2020 22:08:17'!
test04

	| number expirationDate owner |
	
	number := '1234123412341234'.
	expirationDate  := 'Verano del 92'.
	owner := 'Fede Saba S.A.'.

	self should: [ CreditCard withNumber: number withExpirationDate: expirationDate andOwner: owner. ]
		raise: Error
		withMessageText: CreditCard invalidExpirationDateErrorDescription.! !

!classDefinition: #Cart category: 'TusLibros-Solucion' stamp: 'FedericoSabatini 11/29/2020 15:29:56'!
Object subclass: #Cart
	instanceVariableNames: 'books catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!

!classDefinition: #Cart category: 'TusLibros-Solucion' stamp: 'FedericoSabatini 11/29/2020 15:29:57'!
Object subclass: #Cart
	instanceVariableNames: 'books catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!
!Cart methodsFor: 'initialization' stamp: 'DS 11/18/2020 00:13:25'!
initializeWith: aCatalog 

	catalog := aCatalog.
	books := Bag new.! !
!Cart methodsFor: 'adding' stamp: 'FedericoSabatini 11/19/2020 19:19:22'!
add: aQuantity of: aBook

	(aQuantity > 0) ifFalse: [ self signalCanNotAddLessThanOneBook ].
	(catalog includesKey: aBook) ifFalse: [ self signalBookIsOutOfCatalog ].
	
	books add: aBook withOccurrences: aQuantity.! !
!Cart methodsFor: 'private accesing' stamp: 'DS 11/19/2020 21:03:02'!
catalog

	^catalog.! !
!Cart methodsFor: 'accessing' stamp: 'DS 11/19/2020 00:25:39'!
howManyOf: aBook

	^books occurrencesOf: aBook.! !
!Cart methodsFor: 'accessing' stamp: 'DS 11/19/2020 00:07:22'!
list

	^books contents copy.! !
!Cart methodsFor: 'testing' stamp: 'DS 11/19/2020 00:24:22'!
isEmpty

	^books isEmpty.! !
!Cart methodsFor: 'errors' stamp: 'DS 11/18/2020 00:38:43'!
signalBookIsOutOfCatalog

	^ self error: self class bookIsOutOfCatalogErrorDescription! !
!Cart methodsFor: 'errors' stamp: 'DS 11/18/2020 23:53:35'!
signalCanNotAddLessThanOneBook

	^ self error: self class canNotAddLessThanOneBookErrorDescription! !

!classDefinition: 'Cart class' category: 'TusLibros-Solucion' stamp: 'FedericoSabatini 11/29/2020 15:29:57'!
Cart class
	instanceVariableNames: ''!

!classDefinition: 'Cart class' category: 'TusLibros-Solucion' stamp: 'FedericoSabatini 11/29/2020 15:29:57'!
Cart class
	instanceVariableNames: ''!
!Cart class methodsFor: 'instance creation' stamp: 'DS 11/18/2020 00:12:34'!
with: aCatalog

	^self new initializeWith: aCatalog.! !
!Cart class methodsFor: 'error descriptions' stamp: 'DS 11/18/2020 00:26:48'!
bookIsOutOfCatalogErrorDescription

	^'The book you are trying to add is out of catalog'.! !
!Cart class methodsFor: 'error descriptions' stamp: 'DS 11/18/2020 23:51:26'!
canNotAddLessThanOneBookErrorDescription

	^'Can not add less than one book'.! !

!classDefinition: #Cashier category: 'TusLibros-Solucion' stamp: 'FedericoSabatini 11/29/2020 15:29:57'!
Object subclass: #Cashier
	instanceVariableNames: 'cart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!

!classDefinition: #Cashier category: 'TusLibros-Solucion' stamp: 'FedericoSabatini 11/29/2020 15:29:57'!
Object subclass: #Cashier
	instanceVariableNames: 'cart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!
!Cashier methodsFor: 'initialization' stamp: 'DS 11/19/2020 21:05:44'!
initializeFor: aCart

	cart := aCart.! !
!Cashier methodsFor: 'checkout' stamp: 'FedericoSabatini 11/19/2020 20:02:46'!
checkoutWith: aCreditCard
	self error: self class invalidCreditCardErrorDescription.! !
!Cashier methodsFor: 'checkout' stamp: 'DS 11/19/2020 21:03:50'!
purchaseCost

	| purchaseSum |

	purchaseSum := 0.
	cart list keysAndValuesDo: [ :aKey :aValue | purchaseSum := purchaseSum + (cart catalog at: aKey) * aValue].
	^purchaseSum.
	
	! !

!classDefinition: 'Cashier class' category: 'TusLibros-Solucion' stamp: 'FedericoSabatini 11/29/2020 15:29:58'!
Cashier class
	instanceVariableNames: ''!

!classDefinition: 'Cashier class' category: 'TusLibros-Solucion' stamp: 'FedericoSabatini 11/29/2020 15:29:58'!
Cashier class
	instanceVariableNames: ''!
!Cashier class methodsFor: 'error descriptions' stamp: 'FedericoSabatini 11/19/2020 19:04:16'!
creatingCashierWithEmptyCartErrorDescription
	^'Cannot create a cashier from an empty Cart'! !
!Cashier class methodsFor: 'error descriptions' stamp: 'FedericoSabatini 11/19/2020 19:58:33'!
invalidCreditCardErrorDescription
	^'Invalid Credit Card error description'! !
!Cashier class methodsFor: 'assertions' stamp: 'DS 11/19/2020 21:05:24'!
assertEmptyCart: aCart

	^ aCart isEmpty ifTrue: [self error: self creatingCashierWithEmptyCartErrorDescription ]! !
!Cashier class methodsFor: 'instance creation' stamp: 'DS 11/19/2020 21:05:24'!
for: aCart

	self assertEmptyCart: aCart.

	^self new initializeFor: aCart.! !

!classDefinition: #CreditCard category: 'TusLibros-Solucion' stamp: 'FedericoSabatini 11/29/2020 15:29:58'!
Object subclass: #CreditCard
	instanceVariableNames: 'creditCardNumber expirationDate owner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!

!classDefinition: #CreditCard category: 'TusLibros-Solucion' stamp: 'FedericoSabatini 11/29/2020 15:29:58'!
Object subclass: #CreditCard
	instanceVariableNames: 'creditCardNumber expirationDate owner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!
!CreditCard methodsFor: 'initialization' stamp: 'DS 11/19/2020 21:48:01'!
initializeWithNumber: aCreditCardNumber withExpirationDate: anExpirationDate andOwner: anOwner

	creditCardNumber := aCreditCardNumber.
	expirationDate := anExpirationDate.
	owner := anOwner.! !

!classDefinition: 'CreditCard class' category: 'TusLibros-Solucion' stamp: 'FedericoSabatini 11/29/2020 15:29:58'!
CreditCard class
	instanceVariableNames: ''!

!classDefinition: 'CreditCard class' category: 'TusLibros-Solucion' stamp: 'FedericoSabatini 11/29/2020 15:29:58'!
CreditCard class
	instanceVariableNames: ''!
!CreditCard class methodsFor: 'assertions' stamp: 'DS 11/19/2020 22:12:26'!
assertValidCreditCardNumber: aCreditCardNumber

	^(aCreditCardNumber size < 16
		or: [ aCreditCardNumber asArray anySatisfy: [:aNumber | aNumber isDigit not] ]
	) ifTrue: [	self error: self invalidNumberErrorDescription].! !
!CreditCard class methodsFor: 'assertions' stamp: 'DS 11/19/2020 22:12:34'!
assertValidFormatExpirationDate: anExpirationDate

	^ (anExpirationDate isKindOf: GregorianMonthOfYear) ifFalse: [self error: self invalidExpirationDateErrorDescription ].! !
!CreditCard class methodsFor: 'assertions' stamp: 'DS 11/19/2020 22:12:37'!
assertValidOwner: anOwner

	^ anOwner ifEmpty: [self error: self invalidOwnerErrorDescription].! !
!CreditCard class methodsFor: 'instance creation' stamp: 'DS 11/19/2020 22:10:46'!
withNumber: aCreditCardNumber withExpirationDate: anExpirationDate andOwner: anOwner

	self assertValidCreditCardNumber: aCreditCardNumber.
	self assertValidOwner: anOwner.
	self assertValidFormatExpirationDate: anExpirationDate.

	^self new initializeWithNumber: aCreditCardNumber withExpirationDate: anExpirationDate andOwner: anOwner.! !
!CreditCard class methodsFor: 'error descriptions' stamp: 'DS 11/19/2020 22:08:48'!
invalidExpirationDateErrorDescription

	^'Invalid format of Expiration Date'.! !
!CreditCard class methodsFor: 'error descriptions' stamp: 'DS 11/19/2020 21:45:36'!
invalidNumberErrorDescription

	^'Invalid number of credit card'.! !
!CreditCard class methodsFor: 'error descriptions' stamp: 'DS 11/19/2020 21:50:24'!
invalidOwnerErrorDescription

	^'Owner can not be empty'.! !

!classRemoval: #Cashier stamp: 'FedericoSabatini 11/29/2020 15:29:59'!
Object subclass: #Cashier
	instanceVariableNames: 'cart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!

!classRemoval: #Cart stamp: 'FedericoSabatini 11/29/2020 15:29:59'!
Object subclass: #Cart
	instanceVariableNames: 'books catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!

!classRemoval: #CashierTest stamp: 'FedericoSabatini 11/29/2020 15:30:00'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!

!classRemoval: #CartTest stamp: 'FedericoSabatini 11/29/2020 15:30:00'!
TestCase subclass: #CartTest
	instanceVariableNames: 'catalog isbn1 isbn2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!

!classDefinition: #CartTest category: 'TusLibros-Solucion' stamp: 'FedericoSabatini 11/29/2020 15:30:00'!
TestCase subclass: #CartTest
	instanceVariableNames: 'catalog isbn1 isbn2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!

!classDefinition: #CartTest category: 'TusLibros-Solucion' stamp: 'FedericoSabatini 11/29/2020 15:30:01'!
TestCase subclass: #CartTest
	instanceVariableNames: 'catalog isbn1 isbn2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!
!CartTest methodsFor: 'setup' stamp: 'FedericoSabatini 11/19/2020 19:20:29' overrides: 16927572!
setUp

	catalog := Dictionary new.
	isbn1 := 100000.
	isbn2 := 100001.! !
!CartTest methodsFor: 'adding' stamp: 'DS 11/19/2020 00:26:21'!
test01NewCartIsEmpty
	
	| aCart |

	aCart := Cart with: catalog.
	
	self assert: aCart isEmpty.! !
!CartTest methodsFor: 'adding' stamp: 'FedericoSabatini 11/19/2020 19:21:40'!
test02CartShouldHaveOneOfABookWhenAddingIt
	
	|  aCart |

	catalog at: isbn1 put: 100.

	aCart := Cart with: catalog.
	aCart add: 1 of: isbn1.
	
	self deny: aCart isEmpty.
	self assert: 1 equals: (aCart howManyOf: isbn1).! !
!CartTest methodsFor: 'adding' stamp: 'FedericoSabatini 11/19/2020 19:21:59'!
test03CartShouldHaveManyBooksWhenAddingMany
	
	| aCart |

	catalog at: isbn1 put: 100.
	catalog at: isbn2 put: 100.

	aCart := Cart with: catalog.
	aCart add: 5 of: isbn1.
	aCart add: 2 of: isbn2.
	
	self assert: 5 equals: (aCart howManyOf: isbn1).
	self assert: 2 equals: (aCart howManyOf: isbn2).! !
!CartTest methodsFor: 'adding' stamp: 'FedericoSabatini 11/19/2020 19:22:11'!
test04CanNotAddABookOutOfCatalog
	
	| aCart |

	catalog at: isbn2 put: 100.
	aCart := Cart with: catalog.

	self should: [ aCart add: 1 of: isbn1. ]
		raise: Error
		withMessageText: Cart bookIsOutOfCatalogErrorDescription.! !
!CartTest methodsFor: 'adding' stamp: 'FedericoSabatini 11/19/2020 19:22:24'!
test05CanNotAddLessThanOneBook
	
	| aCart |

	catalog at: isbn2 put: 100.
	aCart := Cart with: catalog.

	self should: [ aCart add: -1 of: isbn2. ]
		raise: Error
		withMessageText: Cart canNotAddLessThanOneBookErrorDescription.! !
!CartTest methodsFor: 'list' stamp: 'DS 11/18/2020 00:50:03'!
test06NewCartHaveEmptyList

	| aCart |

	aCart := Cart with: catalog.

	self assert: aCart list isEmpty.! !
!CartTest methodsFor: 'list' stamp: 'FedericoSabatini 11/19/2020 19:22:36'!
test07CartShouldHaveListWithOneOfABookWhenAddingIt

	| aCart |

	catalog at: isbn1 put: 100.

	aCart := Cart with: catalog.
	aCart add: 1 of: isbn1.

	self assert: (Dictionary newFromPairs: {isbn1. 1} ) equals: aCart list.! !
!CartTest methodsFor: 'list' stamp: 'FedericoSabatini 11/19/2020 19:22:48'!
test08CartShouldHaveListWithManyBooksWhenAddingMany

	| aCart |

	catalog at: isbn1 put: 100.
	catalog at: isbn2 put: 100.

	aCart := Cart with: catalog.
	aCart add: 2 of: isbn1.
	aCart add: 1 of: isbn2.

	self assert: (Dictionary newFromPairs: {isbn1. 2. isbn2. 1}) equals: aCart list.! !
!CartTest methodsFor: 'list' stamp: 'FedericoSabatini 11/19/2020 19:23:00'!
test09ModifyCartListShouldNotModifyTheCart

	| aCart list |

	catalog at: isbn1 put: 100.
	catalog at: isbn2 put: 100.

	aCart := Cart with: catalog.
	aCart add: 1 of: isbn1.
	aCart add: 1 of: isbn2.
	
	list := aCart list.
	list removeKey: isbn1.

	self assert: (Dictionary newFromPairs: {isbn1. 1. isbn2. 1}) equals: aCart list.! !

!classDefinition: #CashierTest category: 'TusLibros-Solucion' stamp: 'FedericoSabatini 11/29/2020 15:30:01'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!

!classDefinition: #CashierTest category: 'TusLibros-Solucion' stamp: 'FedericoSabatini 11/29/2020 15:30:01'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!
!CashierTest methodsFor: 'tests' stamp: 'DS 11/19/2020 21:06:01'!
test01CannotInitializeCashierWithEmptyCart

	| aCart aCatalog |

	aCatalog := Dictionary new.
	aCart := Cart with: aCatalog.

	self should: [Cashier for: aCart ]
		raise: Error
		withMessageText: Cashier creatingCashierWithEmptyCartErrorDescription.
		! !
!CashierTest methodsFor: 'tests' stamp: 'DS 11/19/2020 21:07:30'!
test02CashierPriceShouldBeEqualToACartWithOneElement

	| aCashier aCart aCatalog book |

	book := 100001.

	aCatalog := Dictionary new.
	aCatalog at: book put: 200.
	
	aCart := Cart with: aCatalog.
	aCart add: 1 of: book.
	
	aCashier := Cashier for: aCart.
	
	self assert: 200 equals: aCashier purchaseCost.
	
	
	
		! !
!CashierTest methodsFor: 'tests' stamp: 'DS 11/19/2020 21:06:17'!
test03CashierPriceShouldBeEqualToACartWithManyElements

	| aCashier aCart aCatalog book book2 |
	
	book := 100001.
	book2 := 100002.
	
	aCatalog := Dictionary new.
	aCatalog at: book put: 200.
	aCatalog at: book2 put: 300.
	
	aCart := Cart with: aCatalog.
	aCart add: 1 of: book.
	aCart add: 1 of: book2.
	
	aCashier := Cashier for: aCart.

	self assert: 500 equals: aCashier purchaseCost.
	
	
	
		! !
!CashierTest methodsFor: 'tests' stamp: 'DS 11/19/2020 21:10:34'!
test04CashierPriceShouldBeEqualToACartWithManyOfSameElements

	| aCashier aCart aCatalog book |
	
	book := 100001.
	
	aCatalog := Dictionary new.
	aCatalog at: book put: 200.

	aCart := Cart with: aCatalog.
	aCart add: 4 of: book.
	
	aCashier := Cashier for: aCart.
	
	self assert: 800 equals: aCashier purchaseCost.
	
	
	
		! !
!CashierTest methodsFor: 'tests' stamp: 'DS 11/19/2020 21:06:27'!
test05

	| aCreditCard aCashier aCart aCatalog book |
	
	aCreditCard := 90012225123.
	book := 100001.
	
	aCatalog := Dictionary new.
	aCatalog at: book put: 200.

	aCart := Cart with: aCatalog.
	aCart add: 4 of: book.
	
	aCashier := Cashier for: aCart.
	
	self should: [aCashier checkoutWith: aCreditCard]
		raise: Error
		withMessageText: Cashier invalidCreditCardErrorDescription.
	
	
	
		! !

!classDefinition: #CreditCardTest category: 'TusLibros-Solucion' stamp: 'FedericoSabatini 11/29/2020 15:30:02'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!

!classDefinition: #CreditCardTest category: 'TusLibros-Solucion' stamp: 'FedericoSabatini 11/29/2020 15:30:02'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!
!CreditCardTest methodsFor: 'tests' stamp: 'DS 11/19/2020 21:48:08' prior: 50877559!
test01

	| number expirationDate owner |
	
	number := '123412341234123'.
	expirationDate  := February, 2021.
	owner := 'FedeSaba S.A.'.

	self should: [ CreditCard withNumber: number withExpirationDate: expirationDate andOwner: owner. ]
		raise: Error
		withMessageText: CreditCard invalidNumberErrorDescription.! !
!CreditCardTest methodsFor: 'tests' stamp: 'DS 11/19/2020 21:53:01' prior: 50877572!
test02

	| number expirationDate owner |
	
	number := '123412341234123a'.
	expirationDate  := February, 2021.
	owner := 'FedeSaba S.A.'.

	self should: [ CreditCard withNumber: number withExpirationDate: expirationDate andOwner: owner. ]
		raise: Error
		withMessageText: CreditCard invalidNumberErrorDescription.! !
!CreditCardTest methodsFor: 'tests' stamp: 'DS 11/19/2020 21:52:24' prior: 50877585!
test03

	| number expirationDate owner |
	
	number := '1234123412341234'.
	expirationDate  := February, 2021.
	owner := ''.

	self should: [ CreditCard withNumber: number withExpirationDate: expirationDate andOwner: owner. ]
		raise: Error
		withMessageText: CreditCard invalidOwnerErrorDescription.! !
!CreditCardTest methodsFor: 'tests' stamp: 'DS 11/19/2020 22:08:17' prior: 50877597!
test04

	| number expirationDate owner |
	
	number := '1234123412341234'.
	expirationDate  := 'Verano del 92'.
	owner := 'Fede Saba S.A.'.

	self should: [ CreditCard withNumber: number withExpirationDate: expirationDate andOwner: owner. ]
		raise: Error
		withMessageText: CreditCard invalidExpirationDateErrorDescription.! !

!classDefinition: #Cart category: 'TusLibros-Solucion' stamp: 'FedericoSabatini 11/29/2020 15:30:02'!
Object subclass: #Cart
	instanceVariableNames: 'books catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!

!classDefinition: #Cart category: 'TusLibros-Solucion' stamp: 'FedericoSabatini 11/29/2020 15:30:02'!
Object subclass: #Cart
	instanceVariableNames: 'books catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!
!Cart methodsFor: 'initialization' stamp: 'DS 11/18/2020 00:13:25'!
initializeWith: aCatalog 

	catalog := aCatalog.
	books := Bag new.! !
!Cart methodsFor: 'adding' stamp: 'FedericoSabatini 11/19/2020 19:19:22'!
add: aQuantity of: aBook

	(aQuantity > 0) ifFalse: [ self signalCanNotAddLessThanOneBook ].
	(catalog includesKey: aBook) ifFalse: [ self signalBookIsOutOfCatalog ].
	
	books add: aBook withOccurrences: aQuantity.! !
!Cart methodsFor: 'private accesing' stamp: 'DS 11/19/2020 21:03:02'!
catalog

	^catalog.! !
!Cart methodsFor: 'accessing' stamp: 'DS 11/19/2020 00:25:39'!
howManyOf: aBook

	^books occurrencesOf: aBook.! !
!Cart methodsFor: 'accessing' stamp: 'DS 11/19/2020 00:07:22'!
list

	^books contents copy.! !
!Cart methodsFor: 'testing' stamp: 'DS 11/19/2020 00:24:22'!
isEmpty

	^books isEmpty.! !
!Cart methodsFor: 'errors' stamp: 'DS 11/18/2020 00:38:43'!
signalBookIsOutOfCatalog

	^ self error: self class bookIsOutOfCatalogErrorDescription! !
!Cart methodsFor: 'errors' stamp: 'DS 11/18/2020 23:53:35'!
signalCanNotAddLessThanOneBook

	^ self error: self class canNotAddLessThanOneBookErrorDescription! !

!classDefinition: 'Cart class' category: 'TusLibros-Solucion' stamp: 'FedericoSabatini 11/29/2020 15:30:03'!
Cart class
	instanceVariableNames: ''!

!classDefinition: 'Cart class' category: 'TusLibros-Solucion' stamp: 'FedericoSabatini 11/29/2020 15:30:03'!
Cart class
	instanceVariableNames: ''!
!Cart class methodsFor: 'instance creation' stamp: 'DS 11/18/2020 00:12:34'!
with: aCatalog

	^self new initializeWith: aCatalog.! !
!Cart class methodsFor: 'error descriptions' stamp: 'DS 11/18/2020 00:26:48'!
bookIsOutOfCatalogErrorDescription

	^'The book you are trying to add is out of catalog'.! !
!Cart class methodsFor: 'error descriptions' stamp: 'DS 11/18/2020 23:51:26'!
canNotAddLessThanOneBookErrorDescription

	^'Can not add less than one book'.! !

!classDefinition: #Cashier category: 'TusLibros-Solucion' stamp: 'FedericoSabatini 11/29/2020 15:30:03'!
Object subclass: #Cashier
	instanceVariableNames: 'cart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!

!classDefinition: #Cashier category: 'TusLibros-Solucion' stamp: 'FedericoSabatini 11/29/2020 15:30:03'!
Object subclass: #Cashier
	instanceVariableNames: 'cart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!
!Cashier methodsFor: 'initialization' stamp: 'DS 11/19/2020 21:05:44'!
initializeFor: aCart

	cart := aCart.! !
!Cashier methodsFor: 'checkout' stamp: 'FedericoSabatini 11/19/2020 20:02:46'!
checkoutWith: aCreditCard
	self error: self class invalidCreditCardErrorDescription.! !
!Cashier methodsFor: 'checkout' stamp: 'DS 11/19/2020 21:03:50'!
purchaseCost

	| purchaseSum |

	purchaseSum := 0.
	cart list keysAndValuesDo: [ :aKey :aValue | purchaseSum := purchaseSum + (cart catalog at: aKey) * aValue].
	^purchaseSum.
	
	! !

!classDefinition: 'Cashier class' category: 'TusLibros-Solucion' stamp: 'FedericoSabatini 11/29/2020 15:30:03'!
Cashier class
	instanceVariableNames: ''!

!classDefinition: 'Cashier class' category: 'TusLibros-Solucion' stamp: 'FedericoSabatini 11/29/2020 15:30:03'!
Cashier class
	instanceVariableNames: ''!
!Cashier class methodsFor: 'error descriptions' stamp: 'FedericoSabatini 11/19/2020 19:04:16'!
creatingCashierWithEmptyCartErrorDescription
	^'Cannot create a cashier from an empty Cart'! !
!Cashier class methodsFor: 'error descriptions' stamp: 'FedericoSabatini 11/19/2020 19:58:33'!
invalidCreditCardErrorDescription
	^'Invalid Credit Card error description'! !
!Cashier class methodsFor: 'assertions' stamp: 'DS 11/19/2020 21:05:24'!
assertEmptyCart: aCart

	^ aCart isEmpty ifTrue: [self error: self creatingCashierWithEmptyCartErrorDescription ]! !
!Cashier class methodsFor: 'instance creation' stamp: 'DS 11/19/2020 21:05:24'!
for: aCart

	self assertEmptyCart: aCart.

	^self new initializeFor: aCart.! !

!classDefinition: #CreditCard category: 'TusLibros-Solucion' stamp: 'FedericoSabatini 11/29/2020 15:30:04'!
Object subclass: #CreditCard
	instanceVariableNames: 'creditCardNumber expirationDate owner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!

!classDefinition: #CreditCard category: 'TusLibros-Solucion' stamp: 'FedericoSabatini 11/29/2020 15:30:04'!
Object subclass: #CreditCard
	instanceVariableNames: 'creditCardNumber expirationDate owner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!
!CreditCard methodsFor: 'initialization' stamp: 'DS 11/19/2020 21:48:01' prior: 50877772!
initializeWithNumber: aCreditCardNumber withExpirationDate: anExpirationDate andOwner: anOwner

	creditCardNumber := aCreditCardNumber.
	expirationDate := anExpirationDate.
	owner := anOwner.! !

!classDefinition: 'CreditCard class' category: 'TusLibros-Solucion' stamp: 'FedericoSabatini 11/29/2020 15:30:04'!
CreditCard class
	instanceVariableNames: ''!

!classDefinition: 'CreditCard class' category: 'TusLibros-Solucion' stamp: 'FedericoSabatini 11/29/2020 15:30:04'!
CreditCard class
	instanceVariableNames: ''!
!CreditCard class methodsFor: 'assertions' stamp: 'DS 11/19/2020 22:12:26' prior: 50877791!
assertValidCreditCardNumber: aCreditCardNumber

	^(aCreditCardNumber size < 16
		or: [ aCreditCardNumber asArray anySatisfy: [:aNumber | aNumber isDigit not] ]
	) ifTrue: [	self error: self invalidNumberErrorDescription].! !
!CreditCard class methodsFor: 'assertions' stamp: 'DS 11/19/2020 22:12:34' prior: 50877801!
assertValidFormatExpirationDate: anExpirationDate

	^ (anExpirationDate isKindOf: GregorianMonthOfYear) ifFalse: [self error: self invalidExpirationDateErrorDescription ].! !
!CreditCard class methodsFor: 'assertions' stamp: 'DS 11/19/2020 22:12:37' prior: 50877809!
assertValidOwner: anOwner

	^ anOwner ifEmpty: [self error: self invalidOwnerErrorDescription].! !
!CreditCard class methodsFor: 'instance creation' stamp: 'DS 11/19/2020 22:10:46' prior: 50877815!
withNumber: aCreditCardNumber withExpirationDate: anExpirationDate andOwner: anOwner

	self assertValidCreditCardNumber: aCreditCardNumber.
	self assertValidOwner: anOwner.
	self assertValidFormatExpirationDate: anExpirationDate.

	^self new initializeWithNumber: aCreditCardNumber withExpirationDate: anExpirationDate andOwner: anOwner.! !
!CreditCard class methodsFor: 'error descriptions' stamp: 'DS 11/19/2020 22:08:48' prior: 50877829!
invalidExpirationDateErrorDescription

	^'Invalid format of Expiration Date'.! !
!CreditCard class methodsFor: 'error descriptions' stamp: 'DS 11/19/2020 21:45:36' prior: 50877835!
invalidNumberErrorDescription

	^'Invalid number of credit card'.! !
!CreditCard class methodsFor: 'error descriptions' stamp: 'DS 11/19/2020 21:50:24' prior: 50877840!
invalidOwnerErrorDescription

	^'Owner can not be empty'.! !

!classRemoval: #CreditCard stamp: 'FedericoSabatini 11/29/2020 15:30:04'!
Object subclass: #CreditCard
	instanceVariableNames: 'creditCardNumber expirationDate owner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!

----STARTUP---- (29 November 2020 15:30:07) as D:\facultad\Smalltalk\windows64\CuisUniversity-4384.image!


!classRemoval: #Cashier stamp: 'FedericoSabatini 11/29/2020 15:30:15'!
Object subclass: #Cashier
	instanceVariableNames: 'cart catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!

!classRemoval: #Cart stamp: 'FedericoSabatini 11/29/2020 15:30:16'!
Object subclass: #Cart
	instanceVariableNames: 'books catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!

!classRemoval: #CashierTest stamp: 'FedericoSabatini 11/29/2020 15:30:16'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!

!classRemoval: #CartTest stamp: 'FedericoSabatini 11/29/2020 15:30:16'!
TestCase subclass: #CartTest
	instanceVariableNames: 'catalog isbn1 isbn2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!

----End fileIn of D:\facultad\Smalltalk\windows64\TusLibros-Solucion.st----!

!classRemoval: #StoreTestObjectsFactory stamp: 'FedericoSabatini 11/29/2020 15:33:27'!
Object subclass: #StoreTestObjectsFactory
	instanceVariableNames: 'today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!

!classRemoval: #Sale stamp: 'FedericoSabatini 11/29/2020 15:33:27'!
Object subclass: #Sale
	instanceVariableNames: 'total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!

!classRemoval: #FacadeTusLibros stamp: 'FedericoSabatini 11/29/2020 15:33:28'!
Object subclass: #FacadeTusLibros
	instanceVariableNames: 'authenticator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!

!classRemoval: #CreditCard stamp: 'FedericoSabatini 11/29/2020 15:33:28'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!

!classRemoval: #Cashier stamp: 'FedericoSabatini 11/29/2020 15:33:29'!
Object subclass: #Cashier
	instanceVariableNames: 'cart salesBook merchantProcessor creditCard total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!

!classRemoval: #Cart stamp: 'FedericoSabatini 11/29/2020 15:33:29'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!

!classRemoval: #FacadeTusLibrosTest stamp: 'FedericoSabatini 11/29/2020 15:33:29'!
TestCase subclass: #FacadeTusLibrosTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!

!classRemoval: #CashierTest stamp: 'FedericoSabatini 11/29/2020 15:33:30'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectsFactory debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!

!classRemoval: #CartTest stamp: 'FedericoSabatini 11/29/2020 15:33:30'!
TestCase subclass: #CartTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!

----End fileIn of D:\facultad\Smalltalk\windows64\TusLibros-33.st----!

Object subclass: #FacadeTusLibros
	instanceVariableNames: 'expiration'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #FacadeTusLibros category: 'TusLibros' stamp: 'FedericoSabatini 11/29/2020 15:36:02'!
Object subclass: #FacadeTusLibros
	instanceVariableNames: 'expiration'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

TestCase subclass: #FacadeTusLibrosTest
	instanceVariableNames: 'expiration'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #FacadeTusLibrosTest category: 'TusLibros' stamp: 'FedericoSabatini 11/29/2020 15:36:07'!
TestCase subclass: #FacadeTusLibrosTest
	instanceVariableNames: 'expiration'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!FacadeTusLibrosTest methodsFor: 'nil' stamp: 'FedericoSabatini 11/29/2020 15:36:28'!
test01CreateCartHaveEmptyList

    | tusLibros cartID authenticator |

    authenticator := Dictionary with: 1 -> 'password'.
    tusLibros := FacadeTusLibros with: authenticator.
    cartID := tusLibros createCartForUser: 1 withPassword: 'password'.

    self assert: (Dictionary new) equals: (tusLibros listCartFor: cartID).! !

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'FedericoSabatini 11/29/2020 15:36:30'!
ERROR!
!FacadeTusLibros class methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/29/2020 15:36:49'!
with: aDictionary 
	self shouldBeImplemented.! !
!FacadeTusLibros class methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/29/2020 15:37:01' prior: 50879863!
with: anAuthenticator

    ^self new initializeWith: anAuthenticator.! !

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'FedericoSabatini 11/29/2020 15:37:04'!
ERROR!

!classDefinition: #FacadeTusLibros category: 'TusLibros' stamp: 'FedericoSabatini 11/29/2020 15:37:24'!
Object subclass: #FacadeTusLibros
	instanceVariableNames: 'expiration authenticator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!FacadeTusLibros methodsFor: 'initialization' stamp: 'FedericoSabatini 11/29/2020 15:37:24'!
initializeWith: anAuthenticator 
	self shouldBeImplemented.
	authenticator := anAuthenticator.! !
!FacadeTusLibros methodsFor: 'initialization' stamp: 'FedericoSabatini 11/29/2020 15:37:28' prior: 50879886!
initializeWith: anAuthenticator 
	authenticator := anAuthenticator.! !

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'FedericoSabatini 11/29/2020 15:37:29'!
ERROR!
!FacadeTusLibros methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/29/2020 15:37:37'!
createCartForUser: aSmallInteger withPassword: aString 
	self shouldBeImplemented.! !
!FacadeTusLibros methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/29/2020 15:37:53' prior: 50879902!
createCartForUser: anID withPassword: aPassword 

    authenticator at: anID ifAbsent: [self error: self class badAuthenticationErrorDescription ].
    ((authenticator at: anID) = aPassword) ifFalse: [self error: self class badAuthenticationErrorDescription].! !

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'FedericoSabatini 11/29/2020 15:37:59'!
ERROR!
!FacadeTusLibros methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/29/2020 15:38:07'!
listCartFor: aFacadeTusLibros 
	self shouldBeImplemented.! !
!FacadeTusLibros methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/29/2020 15:38:18' prior: 50879924!
listCartFor: aCartID

    ^Dictionary new.! !

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'FedericoSabatini 11/29/2020 15:38:22'!
PASSED!

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'FedericoSabatini 11/29/2020 15:38:22'!
PASSED!
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/29/2020 15:38:49'!
test02CannotCreateCartWithInvalidPassword

    | tusLibros authenticator |

    authenticator := Dictionary with: 1 -> 'password'.
    tusLibros := FacadeTusLibros with: authenticator.

    self should: [        tusLibros createCartForUser: 1 withPassword: 'bad password'.        ]
        raise: Error
        withMessageText: FacadeTusLibros badAuthenticationErrorDescription.! !

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'FedericoSabatini 11/29/2020 15:38:51'!
ERROR!
!FacadeTusLibros class methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/29/2020 15:38:57'!
badAuthenticationErrorDescription
	self shouldBeImplemented.! !
!FacadeTusLibros class methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/29/2020 15:39:11' prior: 50879962!
badAuthenticationErrorDescription

    ^'Dont exist an user with this password'.! !

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'FedericoSabatini 11/29/2020 15:39:12'!
PASSED!

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'FedericoSabatini 11/29/2020 15:39:12'!
PASSED!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'FedericoSabatini 11/29/2020 15:39:12'!
PASSED!
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/29/2020 15:39:34' prior: 50879942!
test02CannotCreateCartWithInvalidPassword

    | tusLibros authenticator |

    authenticator := Dictionary with: 1 -> 'password'.
    tusLibros := FacadeTusLibros with: authenticator.

    self should: [tusLibros createCartForUser: 1 withPassword: 'bad password'.]
        raise: Error
        withMessageText: FacadeTusLibros badAuthenticationErrorDescription.! !
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/29/2020 15:39:43'!
test03CannotCreateCartWithUnknownUser

    | tusLibros authenticator |

    authenticator := Dictionary with: 1 -> 'password'.
    tusLibros := FacadeTusLibros with: authenticator.

    self should: [ tusLibros createCartForUser: 2 withPassword: 'password'. ]
        raise: Error
        withMessageText: FacadeTusLibros badAuthenticationErrorDescription.! !

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'FedericoSabatini 11/29/2020 15:39:44'!
PASSED!

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'FedericoSabatini 11/29/2020 15:39:44'!
PASSED!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'FedericoSabatini 11/29/2020 15:39:44'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'FedericoSabatini 11/29/2020 15:39:45'!
PASSED!
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/29/2020 15:39:49' prior: 50879987!
test02CannotCreateCartWithInvalidPassword

    | tusLibros authenticator |

    authenticator := Dictionary with: 1 -> 'password'.
    tusLibros := FacadeTusLibros with: authenticator.

    self should: [ tusLibros createCartForUser: 1 withPassword: 'bad password'.]
        raise: Error
        withMessageText: FacadeTusLibros badAuthenticationErrorDescription.! !

----SNAPSHOT----(29 November 2020 15:40:59) CuisUniversity-4384.image priorSource: 17381765!
!FacadeTusLibros methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/29/2020 15:45:06' prior: 50879909!
createCartForUser: anID withPassword: aPassword 

	authenticator at: anID ifAbsent: [self error: self class badAuthenticationErrorDescription ].
	((authenticator at: anID) = aPassword) ifFalse: [self error: self class badAuthenticationErrorDescription].
   ! !
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/29/2020 15:48:04'!
test04

	| tusLibros cartID authenticator |

	authenticator := Dictionary with: 1 -> 'password'.
	tusLibros := FacadeTusLibros with: authenticator.
	cartID := tusLibros createCartForUser: 1 withPassword: 'password'.

	self assert: (Dictionary new) equals: (tusLibros listCartFor: cartID).! !
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/29/2020 15:48:19' prior: 50879845!
test01CreateCartHaveEmptyList

	| tusLibros cartID authenticator |

	authenticator := Dictionary with: 1 -> 'password'.
	tusLibros := FacadeTusLibros with: authenticator.
	cartID := tusLibros createCartForUser: 1 withPassword: 'password'.

	self assert: (Dictionary new) equals: (tusLibros listCartFor: cartID).! !
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/29/2020 15:48:40' prior: 50880002!
test03CannotCreateCartWithUnknownUser

	| tusLibros authenticator |

	authenticator := Dictionary with: 1 -> 'password'.
	tusLibros := FacadeTusLibros with: authenticator.

	self should: [ tusLibros createCartForUser: 2 withPassword: 'password'. ]
		raise: Error
		withMessageText: FacadeTusLibros badAuthenticationErrorDescription.! !
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/29/2020 15:48:46' prior: 50880033!
test02CannotCreateCartWithInvalidPassword

    | tusLibros authenticator |

    authenticator := Dictionary with: 1 -> 'password'.
    tusLibros := FacadeTusLibros with: authenticator.

	self should: [ tusLibros createCartForUser: 1 withPassword: 'bad password'.]
        raise: Error
        withMessageText: FacadeTusLibros badAuthenticationErrorDescription.! !
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/29/2020 15:48:51' prior: 50880105!
test02CannotCreateCartWithInvalidPassword

    | tusLibros authenticator |

    authenticator := Dictionary with: 1 -> 'password'.
    tusLibros := FacadeTusLibros with: authenticator.

	self should: [ tusLibros createCartForUser: 1 withPassword: 'bad password'.]
		raise: Error
 		withMessageText: FacadeTusLibros badAuthenticationErrorDescription.! !
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/29/2020 15:48:53' prior: 50880121!
test02CannotCreateCartWithInvalidPassword

    | tusLibros authenticator |

    authenticator := Dictionary with: 1 -> 'password'.
	tusLibros := FacadeTusLibros with: authenticator.

	self should: [ tusLibros createCartForUser: 1 withPassword: 'bad password'.]
		raise: Error
 		withMessageText: FacadeTusLibros badAuthenticationErrorDescription.! !
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/29/2020 15:48:55' prior: 50880136!
test02CannotCreateCartWithInvalidPassword

    | tusLibros authenticator |

	authenticator := Dictionary with: 1 -> 'password'.
	tusLibros := FacadeTusLibros with: authenticator.

	self should: [ tusLibros createCartForUser: 1 withPassword: 'bad password'.]
		raise: Error
 		withMessageText: FacadeTusLibros badAuthenticationErrorDescription.! !
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/29/2020 15:48:58' prior: 50880151!
test02CannotCreateCartWithInvalidPassword

	| tusLibros authenticator |

	authenticator := Dictionary with: 1 -> 'password'.
	tusLibros := FacadeTusLibros with: authenticator.

	self should: [ tusLibros createCartForUser: 1 withPassword: 'bad password'.]
		raise: Error
 		withMessageText: FacadeTusLibros badAuthenticationErrorDescription.! !
!FacadeTusLibros methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/29/2020 15:49:07' prior: 50879930!
listCartFor: aCartID

	^Dictionary new.! !
!FacadeTusLibros methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/29/2020 15:49:14' prior: 50880051!
createCartForUser: anID withPassword: aPassword 

	authenticator at: anID ifAbsent: [self error: self class badAuthenticationErrorDescription ].
	((authenticator at: anID) = aPassword) ifFalse: [self error: self class badAuthenticationErrorDescription].
   ! !
!FacadeTusLibros methodsFor: 'initialization' stamp: 'FedericoSabatini 11/29/2020 15:49:18' prior: 50879893!
initializeWith: anAuthenticator 
	authenticator := anAuthenticator.! !

!classDefinition: #FacadeTusLibrosTest category: 'TusLibros' stamp: 'FedericoSabatini 11/29/2020 15:50:56'!
TestCase subclass: #FacadeTusLibrosTest
	instanceVariableNames: 'expiration testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!FacadeTusLibrosTest methodsFor: 'nil' stamp: 'FedericoSabatini 11/29/2020 15:50:54' overrides: 16927572!
setUp
	testObjectsFactory := StoreTestObjectsFactory new.! !
!FacadeTusLibros methodsFor: 'create - auth' stamp: 'FedericoSabatini 11/29/2020 15:52:05' prior: 50880186!
createCartForUser: anID withPassword: aPassword 

	authenticator at: anID ifAbsent: [self error: self class badAuthenticationErrorDescription ].
	((authenticator at: anID) = aPassword) ifFalse: [self error: self class badAuthenticationErrorDescription].
   	^1! !
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/29/2020 15:54:17' prior: 50880063!
test04

	| tusLibros cartID authenticator |

	authenticator := Dictionary with: 1 -> 'password'.
	tusLibros := FacadeTusLibros with: authenticator.
	cartID := tusLibros createCartForUser: 1 withPassword: 'password'.

	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	 
	self assert: (Dictionary new) equals: (tusLibros listCartFor: cartID).! !
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/29/2020 15:55:39' prior: 50880231!
test04

	| tusLibros cartID authenticator expectedCartList |

	authenticator := Dictionary with: 1 -> 'password'.
	tusLibros := FacadeTusLibros with: authenticator.
	cartID := tusLibros createCartForUser: 1 withPassword: 'password'.

	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	 
	expectedCartList := Dictionary with: 1 -> testObjectsFactory itemSellByTheStore.
	
	
	self assert: expectedCartList equals: (tusLibros listCartFor: cartID).! !
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/29/2020 15:55:53' prior: 50880247!
test04

	| tusLibros cartID authenticator expectedCartList |

	expectedCartList := Dictionary with: 1 -> testObjectsFactory itemSellByTheStore.

	authenticator := Dictionary with: 1 -> 'password'.
	tusLibros := FacadeTusLibros with: authenticator.
	cartID := tusLibros createCartForUser: 1 withPassword: 'password'.

	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	self assert: expectedCartList equals: (tusLibros listCartFor: cartID).! !

!testRun: #FacadeTusLibrosTest #test04 stamp: 'FedericoSabatini 11/29/2020 15:55:54'!
ERROR!
!FacadeTusLibros methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/29/2020 15:56:03'!
addToCart: aSmallInteger aQuantity: aSmallInteger2 of: aString 
	self shouldBeImplemented.! !
!FacadeTusLibros methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/29/2020 15:56:26' prior: 50880287!
addToCart: aCartID aQuantity: aQuantity of: anItem
	
	! !

!classDefinition: #FacadeTusLibros category: 'TusLibros' stamp: 'FedericoSabatini 11/29/2020 16:00:28'!
Object subclass: #FacadeTusLibros
	instanceVariableNames: 'expiration authenticator cart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!FacadeTusLibros methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/29/2020 16:00:24' prior: 50880294!
addToCart: aCartID aQuantity: aQuantity of: anItem
	
	cart add: aQuantity of: anItem.
	! !

!testRun: #FacadeTusLibrosTest #test04 stamp: 'FedericoSabatini 11/29/2020 16:00:30'!
ERROR!
!FacadeTusLibros methodsFor: 'initialization' stamp: 'FedericoSabatini 11/29/2020 16:00:46' prior: 50880198!
initializeWith: anAuthenticator 
	authenticator := anAuthenticator.
	cart := Cart new.! !

!testRun: #FacadeTusLibrosTest #test04 stamp: 'FedericoSabatini 11/29/2020 16:00:50'!
ERROR!
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/29/2020 16:01:59' prior: 50880266!
test04

	| tusLibros cartID authenticator expectedCartList |

	expectedCartList := Dictionary with: 1 -> testObjectsFactory itemSellByTheStore.

	authenticator := Dictionary with: 1 -> 'password'.
	tusLibros := FacadeTusLibros with: authenticator and: testObjectsFactory defaultCatalog.
	
	cartID := tusLibros createCartForUser: 1 withPassword: 'password'.

	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	self assert: expectedCartList equals: (tusLibros listCartFor: cartID).! !
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/29/2020 16:02:04' prior: 50880328!
test04

	| tusLibros cartID authenticator expectedCartList |

	expectedCartList := Dictionary with: 1 -> testObjectsFactory itemSellByTheStore.

	authenticator := Dictionary with: 1 -> 'password'.
	tusLibros := FacadeTusLibros with: authenticator and: (testObjectsFactory defaultCatalog).
	
	cartID := tusLibros createCartForUser: 1 withPassword: 'password'.

	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	self assert: expectedCartList equals: (tusLibros listCartFor: cartID).! !
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/29/2020 16:02:11' prior: 50880348!
test04

	| tusLibros cartID authenticator expectedCartList |

	expectedCartList := Dictionary with: 1 -> testObjectsFactory itemSellByTheStore.

	authenticator := Dictionary with: 1 -> 'password'.
	tusLibros := FacadeTusLibros with: authenticator and: testObjectsFactory defaultCatalog.
	
	cartID := tusLibros createCartForUser: 1 withPassword: 'password'.

	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	self assert: expectedCartList equals: (tusLibros listCartFor: cartID).! !

!testRun: #FacadeTusLibrosTest #test04 stamp: 'FedericoSabatini 11/29/2020 16:02:16'!
ERROR!
!FacadeTusLibros class methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/29/2020 16:02:31'!
with: aDictionary and: aDictionary2 
	self shouldBeImplemented.! !
!FacadeTusLibros class methodsFor: 'instance creation' stamp: 'FedericoSabatini 11/29/2020 16:03:10' prior: 50880391!
with: anAuthenticator and: aCatalog 
	^self new initializeWith: anAuthenticator and: aCatalog.! !

!methodRemoval: FacadeTusLibros class #with: stamp: 'FedericoSabatini 11/29/2020 16:03:20'!
with: anAuthenticator

    ^self new initializeWith: anAuthenticator.!

!testRun: #FacadeTusLibrosTest #test04 stamp: 'FedericoSabatini 11/29/2020 16:03:26'!
ERROR!

!classDefinition: #FacadeTusLibros category: 'TusLibros' stamp: 'FedericoSabatini 11/29/2020 16:03:32'!
Object subclass: #FacadeTusLibros
	instanceVariableNames: 'expiration authenticator cart catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!FacadeTusLibros methodsFor: 'initialization' stamp: 'FedericoSabatini 11/29/2020 16:03:32'!
initializeWith: anAuthenticator and: aCatalog 
	self shouldBeImplemented.
	authenticator := anAuthenticator.
	catalog := aCatalog.! !
!FacadeTusLibros methodsFor: 'initialization' stamp: 'FedericoSabatini 11/29/2020 16:03:36' prior: 50880420!
initializeWith: anAuthenticator and: aCatalog 

	authenticator := anAuthenticator.
	catalog := aCatalog.! !

!testRun: #FacadeTusLibrosTest #test04 stamp: 'FedericoSabatini 11/29/2020 16:03:37'!
ERROR!
!FacadeTusLibros methodsFor: 'initialization' stamp: 'FedericoSabatini 11/29/2020 16:03:47' prior: 50880428!
initializeWith: anAuthenticator and: aCatalog 

	authenticator := anAuthenticator.
	catalog := aCatalog.
		cart := Cart new.! !
!FacadeTusLibros methodsFor: 'initialization' stamp: 'FedericoSabatini 11/29/2020 16:03:49' prior: 50880438!
initializeWith: anAuthenticator and: aCatalog 

	authenticator := anAuthenticator.
	catalog := aCatalog.
	cart := Cart new.! !

!methodRemoval: FacadeTusLibros #initializeWith: stamp: 'FedericoSabatini 11/29/2020 16:03:52'!
initializeWith: anAuthenticator 
	authenticator := anAuthenticator.
	cart := Cart new.!

!testRun: #FacadeTusLibrosTest #test04 stamp: 'FedericoSabatini 11/29/2020 16:03:56'!
ERROR!
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/29/2020 16:04:09' prior: 50880090!
test03CannotCreateCartWithUnknownUser

	| tusLibros authenticator |

	authenticator := Dictionary with: 1 -> 'password'.
	tusLibros := FacadeTusLibros with: authenticator and: testObjectsFactory defaultCatalog.

	self should: [ tusLibros createCartForUser: 2 withPassword: 'password'. ]
		raise: Error
		withMessageText: FacadeTusLibros badAuthenticationErrorDescription.! !
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/29/2020 16:04:14' prior: 50880166!
test02CannotCreateCartWithInvalidPassword

	| tusLibros authenticator |

	authenticator := Dictionary with: 1 -> 'password'.
	tusLibros := FacadeTusLibros with: authenticator and: testObjectsFactory defaultCatalog.

	self should: [ tusLibros createCartForUser: 1 withPassword: 'bad password'.]
		raise: Error
 		withMessageText: FacadeTusLibros badAuthenticationErrorDescription.! !
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/29/2020 16:04:17' prior: 50880076!
test01CreateCartHaveEmptyList

	| tusLibros cartID authenticator |

	authenticator := Dictionary with: 1 -> 'password'.
	tusLibros := FacadeTusLibros with: authenticator and: testObjectsFactory defaultCatalog.
	cartID := tusLibros createCartForUser: 1 withPassword: 'password'.

	self assert: (Dictionary new) equals: (tusLibros listCartFor: cartID).! !
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/29/2020 16:04:20' prior: 50880495!
test01CreateCartHaveEmptyList

	| tusLibros cartID authenticator |

	authenticator := Dictionary with: 1 -> 'password'.
	tusLibros := FacadeTusLibros with: authenticator and: testObjectsFactory defaultCatalog.
	
	cartID := tusLibros createCartForUser: 1 withPassword: 'password'.

	self assert: (Dictionary new) equals: (tusLibros listCartFor: cartID).! !

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'FedericoSabatini 11/29/2020 16:04:23'!
PASSED!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'FedericoSabatini 11/29/2020 16:04:23'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'FedericoSabatini 11/29/2020 16:04:23'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04 stamp: 'FedericoSabatini 11/29/2020 16:04:23'!
ERROR!

!testRun: #FacadeTusLibrosTest #test04 stamp: 'FedericoSabatini 11/29/2020 16:04:23'!
ERROR!

!testRun: #FacadeTusLibrosTest #test04 stamp: 'FedericoSabatini 11/29/2020 16:04:31'!
ERROR!
!FacadeTusLibros methodsFor: 'initialization' stamp: 'FedericoSabatini 11/29/2020 16:05:00' prior: 50880446!
initializeWith: anAuthenticator and: aCatalog 

	authenticator := anAuthenticator.
	catalog := aCatalog.
	cart := Cart with: aCatalog.! !
!FacadeTusLibros methodsFor: 'initialization' stamp: 'FedericoSabatini 11/29/2020 16:05:27' prior: 50880546!
initializeWith: anAuthenticator and: aCatalog 

	authenticator := anAuthenticator.
	catalog := aCatalog.
	cart := Cart acceptingItemsOf: aCatalog.! !
!FacadeTusLibros methodsFor: 'initialization' stamp: 'FedericoSabatini 11/29/2020 16:05:33' prior: 50880554!
initializeWith: anAuthenticator and: aCatalog 

	authenticator := anAuthenticator.
	cart := Cart acceptingItemsOf: aCatalog.! !

Object subclass: #FacadeTusLibros
	instanceVariableNames: 'expiration authenticator cart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #FacadeTusLibros category: 'TusLibros' stamp: 'FedericoSabatini 11/29/2020 16:05:46'!
Object subclass: #FacadeTusLibros
	instanceVariableNames: 'expiration authenticator cart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #FacadeTusLibrosTest #test04 stamp: 'FedericoSabatini 11/29/2020 16:05:49'!
FAILURE!
!FacadeTusLibros methodsFor: 'list' stamp: 'FedericoSabatini 11/29/2020 16:06:19' prior: 50880181!
listCartFor: aCartID

	^cart list.! !

!testRun: #FacadeTusLibrosTest #test04 stamp: 'FedericoSabatini 11/29/2020 16:06:22'!
ERROR!
!Cart methodsFor: 'accesing' stamp: 'FedericoSabatini 11/29/2020 16:08:56'!
items
	
	^items copy.! !

!testRun: #FacadeTusLibrosTest #test04 stamp: 'FedericoSabatini 11/29/2020 16:09:02'!
ERROR!
!FacadeTusLibros methodsFor: 'list' stamp: 'FedericoSabatini 11/29/2020 16:09:17' prior: 50880587!
listCartFor: aCartID

	^cart items.! !

!testRun: #FacadeTusLibrosTest #test04 stamp: 'FedericoSabatini 11/29/2020 16:09:21'!
FAILURE!
!Cart methodsFor: 'accesing' stamp: 'FedericoSabatini 11/29/2020 16:15:43' prior: 50880594!
items
	
	| ocurrences |
	
	ocurrences := Dictionary new.
	! !

----End fileIn of D:\facultad\Smalltalk\windows64\Packages\TerseGuide.pck.st----!
!Cart methodsFor: 'accesing' stamp: 'FedericoSabatini 11/29/2020 16:21:50' prior: 50880609!
items
	
	| ocurrences |
	
	ocurrences := Dictionary new.
	
	items do: [ :item | (ocurrences includesKey: item) 
		ifTrue: [ocurrences at: item put: (ocurrences at: item + 1)] 
		ifFalse: [ocurrences at: item put: 1]].! !
!Cart methodsFor: 'accesing' stamp: 'FedericoSabatini 11/29/2020 16:22:06' prior: 50883550!
items
	
	| ocurrences |
	
	ocurrences := Dictionary new.
	
	items do: [ :item | (ocurrences includesKey: item) 
		ifTrue: [ocurrences at: item put: (ocurrences at: item + 1)] 
		ifFalse: [ocurrences at: item put: 1]].
	
	^ocurrences.! !

!testRun: #FacadeTusLibrosTest #test04 stamp: 'FedericoSabatini 11/29/2020 16:22:18'!
FAILURE!
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/29/2020 16:22:43' prior: 50880368!
test04

	| tusLibros cartID authenticator expectedCartList |

	expectedCartList := Dictionary with: testObjectsFactory itemSellByTheStore -> 1.

	authenticator := Dictionary with: 1 -> 'password'.
	tusLibros := FacadeTusLibros with: authenticator and: testObjectsFactory defaultCatalog.
	
	cartID := tusLibros createCartForUser: 1 withPassword: 'password'.

	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	self assert: expectedCartList equals: (tusLibros listCartFor: cartID).! !

!testRun: #FacadeTusLibrosTest #test04 stamp: 'FedericoSabatini 11/29/2020 16:22:44'!
PASSED!

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'FedericoSabatini 11/29/2020 16:22:44'!
PASSED!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'FedericoSabatini 11/29/2020 16:22:44'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'FedericoSabatini 11/29/2020 16:22:44'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04 stamp: 'FedericoSabatini 11/29/2020 16:22:44'!
PASSED!
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/29/2020 16:23:28' prior: 50883575!
test04

	| tusLibros cartID authenticator expectedCartList |

	expectedCartList := Dictionary with: testObjectsFactory itemSellByTheStore -> 1.

	authenticator := Dictionary with: 1 -> 'password'.
	tusLibros := FacadeTusLibros with: authenticator and: testObjectsFactory defaultCatalog.
	
	cartID := tusLibros createCartForUser: 1 withPassword: 'password'.

	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	self assert: expectedCartList equals: (tusLibros listCartFor: cartID).! !
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/29/2020 16:24:47'!
test05

	| tusLibros cartID cartID2 authenticator expectedCartList |

	expectedCartList := Dictionary with: testObjectsFactory itemSellByTheStore -> 1.

	authenticator := Dictionary with: 1 -> 'pass' with: 2 -> 'pass'.
	tusLibros := FacadeTusLibros with: authenticator and: testObjectsFactory defaultCatalog.
	
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	cartID2 := tusLibros createCartForUser: 2 withPassword: 'pass'.

	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	self assert: expectedCartList equals: (tusLibros listCartFor: cartID).! !
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/29/2020 16:24:56'!
test06

	| tusLibros cartID cartID2 authenticator expectedCartList |

	expectedCartList := Dictionary with: testObjectsFactory itemSellByTheStore -> 1.

	authenticator := Dictionary with: 1 -> 'pass' with: 2 -> 'pass'.
	tusLibros := FacadeTusLibros with: authenticator and: testObjectsFactory defaultCatalog.
	
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	cartID2 := tusLibros createCartForUser: 2 withPassword: 'pass'.

	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	self assert: expectedCartList equals: (tusLibros listCartFor: cartID).! !
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/29/2020 16:25:02' prior: 50883633!
test05

	| tusLibros cartID authenticator expectedCartList |

	expectedCartList := Dictionary with: testObjectsFactory itemSellByTheStore -> 1.

	authenticator := Dictionary with: 1 -> 'password'.
	tusLibros := FacadeTusLibros with: authenticator and: testObjectsFactory defaultCatalog.
	
	cartID := tusLibros createCartForUser: 1 withPassword: 'password'.

	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	self assert: expectedCartList equals: (tusLibros listCartFor: cartID).! !
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/29/2020 16:25:44'!
test04CannotCreate2CartWithSameID

	| tusLibros cartID authenticator expectedCartList |

	expectedCartList := Dictionary with: testObjectsFactory itemSellByTheStore -> 1.

	authenticator := Dictionary with: 1 -> 'password'.
	tusLibros := FacadeTusLibros with: authenticator and: testObjectsFactory defaultCatalog.
	
	cartID := tusLibros createCartForUser: 1 withPassword: 'password'.

	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	self assert: expectedCartList equals: (tusLibros listCartFor: cartID).! !

!methodRemoval: FacadeTusLibrosTest #test04 stamp: 'FedericoSabatini 11/29/2020 16:25:48'!
test04

	| tusLibros cartID authenticator expectedCartList |

	expectedCartList := Dictionary with: testObjectsFactory itemSellByTheStore -> 1.

	authenticator := Dictionary with: 1 -> 'password'.
	tusLibros := FacadeTusLibros with: authenticator and: testObjectsFactory defaultCatalog.
	
	cartID := tusLibros createCartForUser: 1 withPassword: 'password'.

	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	self assert: expectedCartList equals: (tusLibros listCartFor: cartID).!
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/29/2020 16:26:13'!
test04CannotAssignSameIDForDiferentCarts

	| tusLibros cartID authenticator expectedCartList |

	expectedCartList := Dictionary with: testObjectsFactory itemSellByTheStore -> 1.

	authenticator := Dictionary with: 1 -> 'password'.
	tusLibros := FacadeTusLibros with: authenticator and: testObjectsFactory defaultCatalog.
	
	cartID := tusLibros createCartForUser: 1 withPassword: 'password'.

	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	self assert: expectedCartList equals: (tusLibros listCartFor: cartID).! !
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/29/2020 16:26:20'!
test04CannotAssignSameIDForDifferentCarts

	| tusLibros cartID authenticator expectedCartList |

	expectedCartList := Dictionary with: testObjectsFactory itemSellByTheStore -> 1.

	authenticator := Dictionary with: 1 -> 'password'.
	tusLibros := FacadeTusLibros with: authenticator and: testObjectsFactory defaultCatalog.
	
	cartID := tusLibros createCartForUser: 1 withPassword: 'password'.

	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	self assert: expectedCartList equals: (tusLibros listCartFor: cartID).! !

!methodRemoval: FacadeTusLibrosTest #test04CannotAssignSameIDForDiferentCarts stamp: 'FedericoSabatini 11/29/2020 16:26:23'!
test04CannotAssignSameIDForDiferentCarts

	| tusLibros cartID authenticator expectedCartList |

	expectedCartList := Dictionary with: testObjectsFactory itemSellByTheStore -> 1.

	authenticator := Dictionary with: 1 -> 'password'.
	tusLibros := FacadeTusLibros with: authenticator and: testObjectsFactory defaultCatalog.
	
	cartID := tusLibros createCartForUser: 1 withPassword: 'password'.

	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	self assert: expectedCartList equals: (tusLibros listCartFor: cartID).!

!methodRemoval: FacadeTusLibrosTest #test04CannotCreate2CartWithSameID stamp: 'FedericoSabatini 11/29/2020 16:26:27'!
test04CannotCreate2CartWithSameID

	| tusLibros cartID authenticator expectedCartList |

	expectedCartList := Dictionary with: testObjectsFactory itemSellByTheStore -> 1.

	authenticator := Dictionary with: 1 -> 'password'.
	tusLibros := FacadeTusLibros with: authenticator and: testObjectsFactory defaultCatalog.
	
	cartID := tusLibros createCartForUser: 1 withPassword: 'password'.

	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	self assert: expectedCartList equals: (tusLibros listCartFor: cartID).!
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/29/2020 16:27:48' prior: 50883759!
test04CannotAssignSameIDForDifferentCarts

	| tusLibros cartID cartID2 authenticator expectedCartList |

	expectedCartList := Dictionary with: testObjectsFactory itemSellByTheStore -> 1.

	authenticator := Dictionary with: 1 -> 'pass'.
	tusLibros := FacadeTusLibros with: authenticator and: testObjectsFactory defaultCatalog.
	
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	cartID2 := tusLibros createCartForUser: 2 withPassword: 'pass'.

	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	self assert: expectedCartList equals: (tusLibros listCartFor: cartID).! !
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/29/2020 16:27:57' prior: 50883822!
test04CannotAssignSameIDForDifferentCarts

	| tusLibros cartID cartID2 authenticator expectedCartList |

	expectedCartList := Dictionary with: testObjectsFactory itemSellByTheStore -> 1.

	authenticator := Dictionary with: 1 -> 'pass' with: 2 -> 'pass'.
	tusLibros := FacadeTusLibros with: authenticator and: testObjectsFactory defaultCatalog.
	
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	cartID2 := tusLibros createCartForUser: 2 withPassword: 'pass'.

	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	self assert: expectedCartList equals: (tusLibros listCartFor: cartID).! !
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/29/2020 16:30:20' prior: 50883845!
test04CannotAssignSameIDForDifferentCarts

	| tusLibros cartID cartID2 authenticator expectedCartList |

	authenticator := Dictionary with: 1 -> 'pass' with: 2 -> 'pass'.
	tusLibros := FacadeTusLibros with: authenticator and: testObjectsFactory defaultCatalog.
	
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	cartID2 := tusLibros createCartForUser: 2 withPassword: 'pass'.

	self assert: cartID ~= cartID2.! !

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'FedericoSabatini 11/29/2020 16:30:35'!
FAILURE!
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/29/2020 16:30:43' prior: 50883869!
test04CannotAssignSameIDForDifferentCarts

	| tusLibros cartID cartID2 authenticator expectedCartList |

	authenticator := Dictionary with: 1 -> 'pass' with: 2 -> 'pass'.
	tusLibros := FacadeTusLibros with: authenticator and: testObjectsFactory defaultCatalog.
	
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	cartID2 := tusLibros createCartForUser: 2 withPassword: 'pass'.

	self assert: (cartID ~= cartID2).! !

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'FedericoSabatini 11/29/2020 16:30:49'!
FAILURE!

Object subclass: #FacadeTusLibros
	instanceVariableNames: 'expiration authenticator cart id'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #FacadeTusLibros category: 'TusLibros' stamp: 'FedericoSabatini 11/29/2020 16:31:10'!
Object subclass: #FacadeTusLibros
	instanceVariableNames: 'expiration authenticator cart id'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Object subclass: #FacadeTusLibros
	instanceVariableNames: 'expiration authenticator cart currentID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #FacadeTusLibros category: 'TusLibros' stamp: 'FedericoSabatini 11/29/2020 16:31:24'!
Object subclass: #FacadeTusLibros
	instanceVariableNames: 'expiration authenticator cart currentID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!FacadeTusLibros methodsFor: 'create - auth' stamp: 'FedericoSabatini 11/29/2020 16:31:39' prior: 50880219!
createCartForUser: anID withPassword: aPassword 

	authenticator at: anID ifAbsent: [self error: self class badAuthenticationErrorDescription ].
	((authenticator at: anID) = aPassword) ifFalse: [self error: self class badAuthenticationErrorDescription].
   	^currentID + 1.! !
!FacadeTusLibros methodsFor: 'initialization' stamp: 'FedericoSabatini 11/29/2020 16:31:51' prior: 50880563!
initializeWith: anAuthenticator and: aCatalog 

	authenticator := anAuthenticator.
	cart := Cart acceptingItemsOf: aCatalog.
	currentID := 0.! !
!FacadeTusLibros methodsFor: 'create - auth' stamp: 'FedericoSabatini 11/29/2020 16:32:37' prior: 50883940!
createCartForUser: anID withPassword: aPassword 

	authenticator at: anID ifAbsent: [self error: self class badAuthenticationErrorDescription ].
	((authenticator at: anID) = aPassword) ifFalse: [self error: self class badAuthenticationErrorDescription].
   	currentID := currentID + 1.
	^currentID! !
!FacadeTusLibros methodsFor: 'create - auth' stamp: 'FedericoSabatini 11/29/2020 16:32:41' prior: 50883961!
createCartForUser: anID withPassword: aPassword 

	authenticator at: anID ifAbsent: [self error: self class badAuthenticationErrorDescription ].
	((authenticator at: anID) = aPassword) ifFalse: [self error: self class badAuthenticationErrorDescription].
   	currentID := currentID + 1.
	^currentID.! !

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'FedericoSabatini 11/29/2020 16:32:45'!
PASSED!

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'FedericoSabatini 11/29/2020 16:32:45'!
PASSED!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'FedericoSabatini 11/29/2020 16:32:45'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'FedericoSabatini 11/29/2020 16:32:45'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'FedericoSabatini 11/29/2020 16:32:45'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05 stamp: 'FedericoSabatini 11/29/2020 16:32:45'!
PASSED!

!testRun: #FacadeTusLibrosTest #test06 stamp: 'FedericoSabatini 11/29/2020 16:32:45'!
PASSED!
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/29/2020 16:35:21' prior: 50883655!
test06

	| tusLibros cartID cartID2 authenticator expectedCart1 expectedCart2 |

	expectedCart1 := Dictionary with: testObjectsFactory itemSellByTheStore -> 1.
	expectedCart2 := Dictionary with: testObjectsFactory itemSellByTheStore -> 1.

	authenticator := Dictionary with: 1 -> 'pass' with: 2 -> 'pass'.
	tusLibros := FacadeTusLibros with: authenticator and: testObjectsFactory defaultCatalog.
	
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	cartID2 := tusLibros createCartForUser: 2 withPassword: 'pass'.

	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	tusLibros addToCart: cartID2 aQuantity: 2 of: testObjectsFactory itemSellByTheStore.
	
	self assert: expectedCart1 equals: (tusLibros listCartFor: cartID).
	self assert: expectedCart2 equals: (tusLibros listCartFor: cartID).! !
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/29/2020 16:36:16' prior: 50884013!
test06

	| tusLibros cartID cartID2 authenticator expectedCart1 expectedCart2 |

	expectedCart1 := Dictionary with: testObjectsFactory itemSellByTheStore -> 1.
	expectedCart2 := Dictionary with: testObjectsFactory itemSellByTheStore -> 2.

	authenticator := Dictionary with: 1 -> 'pass' with: 2 -> 'pass'.
	tusLibros := FacadeTusLibros with: authenticator and: testObjectsFactory defaultCatalog.
	
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	cartID2 := tusLibros createCartForUser: 2 withPassword: 'pass'.

	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	tusLibros addToCart: cartID2 aQuantity: 2 of: testObjectsFactory itemSellByTheStore.
	
	self assert: expectedCart1 equals: (tusLibros listCartFor: cartID).
	self assert: expectedCart2 equals: (tusLibros listCartFor: cartID).! !

!testRun: #FacadeTusLibrosTest #test06 stamp: 'FedericoSabatini 11/29/2020 16:36:19'!
ERROR!
!Cart methodsFor: 'accesing' stamp: 'FedericoSabatini 11/29/2020 16:36:53' prior: 50883560!
items
	
	| ocurrences |
	
	ocurrences := Dictionary new.
	
	items do: [ :item | (ocurrences includesKey: item) 
		ifTrue: [ocurrences at: item put: (ocurrences at: item) + 1] 
		ifFalse: [ocurrences at: item put: 1]].
	
	^ocurrences.! !

!testRun: #FacadeTusLibrosTest #test06 stamp: 'FedericoSabatini 11/29/2020 16:36:54'!
FAILURE!

!classDefinition: #FacadeTusLibros category: 'TusLibros' stamp: 'FedericoSabatini 11/29/2020 16:37:38'!
Object subclass: #FacadeTusLibros
	instanceVariableNames: 'expiration authenticator carts currentID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!FacadeTusLibros methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/29/2020 16:37:38' prior: 50880601!
listCartFor: aCartID

	^carts items.! !
!FacadeTusLibros methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/29/2020 16:37:38' prior: 50880308!
addToCart: aCartID aQuantity: aQuantity of: anItem
	
	carts add: aQuantity of: anItem.
	! !
!FacadeTusLibros methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/29/2020 16:37:38' prior: 50883953!
initializeWith: anAuthenticator and: aCatalog 

	authenticator := anAuthenticator.
	carts := Cart acceptingItemsOf: aCatalog.
	currentID := 0.! !

!classDefinition: #FacadeTusLibros category: 'TusLibros' stamp: 'FedericoSabatini 11/29/2020 16:38:59'!
Object subclass: #FacadeTusLibros
	instanceVariableNames: 'expiration authenticator carts currentID catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!FacadeTusLibros methodsFor: 'initialization' stamp: 'FedericoSabatini 11/29/2020 16:38:58' prior: 50884111!
initializeWith: anAuthenticator and: aCatalog 

	authenticator := anAuthenticator.
	carts := Dictionary new. 
	catalog := aCatalog.
	currentID := 0.! !

Object subclass: #FacadeTusLibros
	instanceVariableNames: 'authenticator carts currentID catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #FacadeTusLibros category: 'TusLibros' stamp: 'FedericoSabatini 11/29/2020 16:39:27'!
Object subclass: #FacadeTusLibros
	instanceVariableNames: 'authenticator carts currentID catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

TestCase subclass: #FacadeTusLibrosTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #FacadeTusLibrosTest category: 'TusLibros' stamp: 'FedericoSabatini 11/29/2020 16:39:32'!
TestCase subclass: #FacadeTusLibrosTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!FacadeTusLibros methodsFor: 'create - auth' stamp: 'FedericoSabatini 11/29/2020 16:41:41' prior: 50883974!
createCartForUser: anID withPassword: aPassword 

	authenticator at: anID ifAbsent: [self error: self class badAuthenticationErrorDescription ].
	((authenticator at: anID) = aPassword) ifFalse: [self error: self class badAuthenticationErrorDescription].
	
	carts at: currentID put: (Cart acceptingItemsOf: catalog).
   	currentID := currentID + 1.
	^currentID.! !
!FacadeTusLibros methodsFor: 'create - auth' stamp: 'FedericoSabatini 11/29/2020 16:42:50' prior: 50884164!
createCartForUser: anID withPassword: aPassword 

	authenticator at: anID ifAbsent: [self error: self class badAuthenticationErrorDescription ].
	((authenticator at: anID) = aPassword) ifFalse: [self error: self class badAuthenticationErrorDescription].
	
	carts at: currentID put: (Cart acceptingItemsOf: catalog).
   	currentID := currentID + 1.
	^currentID - 1.! !

!testRun: #FacadeTusLibrosTest #test06 stamp: 'FedericoSabatini 11/29/2020 16:42:54'!
ERROR!
!FacadeTusLibros methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/29/2020 16:44:33' prior: 50884104!
addToCart: aCartID aQuantity: aQuantity of: anItem
	
	| aCart |
	
	aCart := carts at: aCartID.
	aCart add: aQuantity of: anItem.
	
	! !

!testRun: #FacadeTusLibrosTest #test06 stamp: 'FedericoSabatini 11/29/2020 16:44:35'!
ERROR!
!FacadeTusLibros methodsFor: 'list' stamp: 'FedericoSabatini 11/29/2020 16:44:54' prior: 50884099!
listCartFor: aCartID

	^(carts at: aCartID) items.! !

!testRun: #FacadeTusLibrosTest #test06 stamp: 'FedericoSabatini 11/29/2020 16:44:54'!
FAILURE!

!testRun: #FacadeTusLibrosTest #test06 stamp: 'FedericoSabatini 11/29/2020 16:47:01'!
FAILURE!
!FacadeTusLibros methodsFor: 'create - auth' stamp: 'FedericoSabatini 11/29/2020 16:48:33' prior: 50884179!
createCartForUser: anID withPassword: aPassword 

	authenticator at: anID ifAbsent: [self error: self class badAuthenticationErrorDescription ].
	((authenticator at: anID) = aPassword) ifFalse: [self error: self class badAuthenticationErrorDescription].
	
	currentID := currentID + 1.
	carts at: currentID put: (Cart acceptingItemsOf: catalog).

	^currentID.! !

!testRun: #FacadeTusLibrosTest #test06 stamp: 'FedericoSabatini 11/29/2020 16:49:01'!
FAILURE!
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/29/2020 16:49:20' prior: 50884043!
test06

	| tusLibros cartID cartID2 authenticator expectedCart1 expectedCart2 |

	expectedCart1 := Dictionary with: testObjectsFactory itemSellByTheStore -> 1.
	expectedCart2 := Dictionary with: testObjectsFactory itemSellByTheStore -> 2.

	authenticator := Dictionary with: 1 -> 'pass' with: 2 -> 'pass'.
	tusLibros := FacadeTusLibros with: authenticator and: testObjectsFactory defaultCatalog.
	
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	cartID2 := tusLibros createCartForUser: 2 withPassword: 'pass'.

	tusLibros addToCart: cartID aQuantity: 5 of: testObjectsFactory itemSellByTheStore.
	tusLibros addToCart: cartID2 aQuantity: 10 of: testObjectsFactory itemSellByTheStore.
	
	self assert: expectedCart1 equals: (tusLibros listCartFor: cartID).
	self assert: expectedCart2 equals: (tusLibros listCartFor: cartID).! !
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/29/2020 16:49:29' prior: 50884238!
test06

	| tusLibros cartID cartID2 authenticator expectedCart1 expectedCart2 |

	expectedCart1 := Dictionary with: testObjectsFactory itemSellByTheStore -> 5.
	expectedCart2 := Dictionary with: testObjectsFactory itemSellByTheStore -> 10.

	authenticator := Dictionary with: 1 -> 'pass' with: 2 -> 'pass'.
	tusLibros := FacadeTusLibros with: authenticator and: testObjectsFactory defaultCatalog.
	
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	cartID2 := tusLibros createCartForUser: 2 withPassword: 'pass'.

	tusLibros addToCart: cartID aQuantity: 5 of: testObjectsFactory itemSellByTheStore.
	tusLibros addToCart: cartID2 aQuantity: 10 of: testObjectsFactory itemSellByTheStore.
	
	self assert: expectedCart1 equals: (tusLibros listCartFor: cartID).
	self assert: expectedCart2 equals: (tusLibros listCartFor: cartID).! !

!testRun: #FacadeTusLibrosTest #test06 stamp: 'FedericoSabatini 11/29/2020 16:49:31'!
FAILURE!

!testRun: #FacadeTusLibrosTest #test06 stamp: 'FedericoSabatini 11/29/2020 16:51:59'!
ERROR!

!testRun: #FacadeTusLibrosTest #test06 stamp: 'FedericoSabatini 11/29/2020 16:52:04'!
FAILURE!

(carts at: 1) occurrencesOf: 1.!

(carts at: 1) occurrencesOf: anItem.!

(carts at: 2) occurrencesOf: anItem.!

carts!

aCart!

(carts at: 2) occurrencesOf: 1. !

(carts at: 2) occurrencesOf: 'validBook'. !

(carts at: 1) occurrencesOf: 'validBook'.!
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/29/2020 16:56:00' prior: 50884269!
test06

	| tusLibros cartID cartID2 authenticator expectedCart1 expectedCart2 |

	expectedCart1 := Dictionary with: testObjectsFactory itemSellByTheStore -> 5.
	expectedCart2 := Dictionary with: testObjectsFactory itemSellByTheStore -> 10.

	authenticator := Dictionary with: 1 -> 'pass' with: 2 -> 'pass'.
	tusLibros := FacadeTusLibros with: authenticator and: testObjectsFactory defaultCatalog.
	
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	cartID2 := tusLibros createCartForUser: 2 withPassword: 'pass'.

	tusLibros addToCart: cartID aQuantity: 5 of: testObjectsFactory itemSellByTheStore.
	tusLibros addToCart: cartID2 aQuantity: 10 of: testObjectsFactory itemSellByTheStore.
	
	self assert: expectedCart1 equals: (tusLibros listCartFor: cartID).
	self assert: expectedCart2 equals: (tusLibros listCartFor: cartID2).! !

!testRun: #FacadeTusLibrosTest #test06 stamp: 'FedericoSabatini 11/29/2020 16:56:10'!
PASSED!

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'FedericoSabatini 11/29/2020 16:56:10'!
PASSED!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'FedericoSabatini 11/29/2020 16:56:10'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'FedericoSabatini 11/29/2020 16:56:10'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'FedericoSabatini 11/29/2020 16:56:10'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05 stamp: 'FedericoSabatini 11/29/2020 16:56:10'!
PASSED!

!testRun: #FacadeTusLibrosTest #test06 stamp: 'FedericoSabatini 11/29/2020 16:56:10'!
PASSED!
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/29/2020 16:56:48' prior: 50884316!
test06

	| tusLibros firstCart secondCart authenticator expectedCart1 expectedCart2 |

	expectedCart1 := Dictionary with: testObjectsFactory itemSellByTheStore -> 5.
	expectedCart2 := Dictionary with: testObjectsFactory itemSellByTheStore -> 10.

	authenticator := Dictionary with: 1 -> 'pass' with: 2 -> 'pass'.
	tusLibros := FacadeTusLibros with: authenticator and: testObjectsFactory defaultCatalog.
	
	firstCart := tusLibros createCartForUser: 1 withPassword: 'pass'.
	secondCart := tusLibros createCartForUser: 2 withPassword: 'pass'.

	tusLibros addToCart: firstCart aQuantity: 5 of: testObjectsFactory itemSellByTheStore.
	tusLibros addToCart: secondCart aQuantity: 10 of: testObjectsFactory itemSellByTheStore.
	
	self assert: expectedCart1 equals: (tusLibros listCartFor: firstCart).
	self assert: expectedCart2 equals: (tusLibros listCartFor: secondCart).! !
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/29/2020 16:56:54' prior: 50884371!
test06

	| tusLibros firstCartID secondCart authenticator expectedCart1 expectedCart2 |

	expectedCart1 := Dictionary with: testObjectsFactory itemSellByTheStore -> 5.
	expectedCart2 := Dictionary with: testObjectsFactory itemSellByTheStore -> 10.

	authenticator := Dictionary with: 1 -> 'pass' with: 2 -> 'pass'.
	tusLibros := FacadeTusLibros with: authenticator and: testObjectsFactory defaultCatalog.
	
	firstCartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	secondCart := tusLibros createCartForUser: 2 withPassword: 'pass'.

	tusLibros addToCart: firstCartID aQuantity: 5 of: testObjectsFactory itemSellByTheStore.
	tusLibros addToCart: secondCart aQuantity: 10 of: testObjectsFactory itemSellByTheStore.
	
	self assert: expectedCart1 equals: (tusLibros listCartFor: firstCartID).
	self assert: expectedCart2 equals: (tusLibros listCartFor: secondCart).! !
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/29/2020 16:57:11' prior: 50884402!
test06

	| tusLibros firstCartID secondCartID authenticator expectedCart1 expectedCart2 |

	expectedCart1 := Dictionary with: testObjectsFactory itemSellByTheStore -> 5.
	expectedCart2 := Dictionary with: testObjectsFactory itemSellByTheStore -> 10.

	authenticator := Dictionary with: 1 -> 'pass' with: 2 -> 'pass'.
	tusLibros := FacadeTusLibros with: authenticator and: testObjectsFactory defaultCatalog.
	
	firstCartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	secondCartID := tusLibros createCartForUser: 2 withPassword: 'pass'.

	tusLibros addToCart: firstCartID aQuantity: 5 of: testObjectsFactory itemSellByTheStore.
	tusLibros addToCart: secondCartID aQuantity: 10 of: testObjectsFactory itemSellByTheStore.
	
	self assert: expectedCart1 equals: (tusLibros listCartFor: firstCartID).
	self assert: expectedCart2 equals: (tusLibros listCartFor: secondCartID).! !

!testRun: #FacadeTusLibrosTest #test06 stamp: 'FedericoSabatini 11/29/2020 16:57:15'!
PASSED!

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'FedericoSabatini 11/29/2020 16:57:15'!
PASSED!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'FedericoSabatini 11/29/2020 16:57:15'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'FedericoSabatini 11/29/2020 16:57:15'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'FedericoSabatini 11/29/2020 16:57:15'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05 stamp: 'FedericoSabatini 11/29/2020 16:57:15'!
PASSED!

!testRun: #FacadeTusLibrosTest #test06 stamp: 'FedericoSabatini 11/29/2020 16:57:15'!
PASSED!
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/29/2020 16:57:55' prior: 50884434!
test06

	| tusLibros firstCartID secondCartID authenticator expectedFirstCart expectedCart2 |

	expectedFirstCart := Dictionary with: testObjectsFactory itemSellByTheStore -> 5.
	expectedCart2 := Dictionary with: testObjectsFactory itemSellByTheStore -> 10.

	authenticator := Dictionary with: 1 -> 'pass' with: 2 -> 'pass'.
	tusLibros := FacadeTusLibros with: authenticator and: testObjectsFactory defaultCatalog.
	
	firstCartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	secondCartID := tusLibros createCartForUser: 2 withPassword: 'pass'.

	tusLibros addToCart: firstCartID aQuantity: 5 of: testObjectsFactory itemSellByTheStore.
	tusLibros addToCart: secondCartID aQuantity: 10 of: testObjectsFactory itemSellByTheStore.
	
	self assert: expectedFirstCart equals: (tusLibros listCartFor: firstCartID).
	self assert: expectedCart2 equals: (tusLibros listCartFor: secondCartID).! !
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/29/2020 16:58:06' prior: 50884490!
test06

	| tusLibros firstCartID secondCartID authenticator expectedFirstCart expectedSecondCart |

	expectedFirstCart := Dictionary with: testObjectsFactory itemSellByTheStore -> 5.
	expectedSecondCart := Dictionary with: testObjectsFactory itemSellByTheStore -> 10.

	authenticator := Dictionary with: 1 -> 'pass' with: 2 -> 'pass'.
	tusLibros := FacadeTusLibros with: authenticator and: testObjectsFactory defaultCatalog.
	
	firstCartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	secondCartID := tusLibros createCartForUser: 2 withPassword: 'pass'.

	tusLibros addToCart: firstCartID aQuantity: 5 of: testObjectsFactory itemSellByTheStore.
	tusLibros addToCart: secondCartID aQuantity: 10 of: testObjectsFactory itemSellByTheStore.
	
	self assert: expectedFirstCart equals: (tusLibros listCartFor: firstCartID).
	self assert: expectedSecondCart equals: (tusLibros listCartFor: secondCartID).! !
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/29/2020 17:00:09'!
test07CannotAddToUnknownCart

	| tusLibros firstCartID secondCartID authenticator expectedFirstCart expectedSecondCart |

	expectedFirstCart := Dictionary with: testObjectsFactory itemSellByTheStore -> 5.
	expectedSecondCart := Dictionary with: testObjectsFactory itemSellByTheStore -> 10.

	authenticator := Dictionary with: 1 -> 'pass' with: 2 -> 'pass'.
	tusLibros := FacadeTusLibros with: authenticator and: testObjectsFactory defaultCatalog.
	
	firstCartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	secondCartID := tusLibros createCartForUser: 2 withPassword: 'pass'.

	tusLibros addToCart: firstCartID aQuantity: 5 of: testObjectsFactory itemSellByTheStore.
	tusLibros addToCart: secondCartID aQuantity: 10 of: testObjectsFactory itemSellByTheStore.
	
	self assert: expectedFirstCart equals: (tusLibros listCartFor: firstCartID).
	self assert: expectedSecondCart equals: (tusLibros listCartFor: secondCartID).! !
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/29/2020 17:00:13'!
test07CannotAddToUnknownCartID

	| tusLibros firstCartID secondCartID authenticator expectedFirstCart expectedSecondCart |

	expectedFirstCart := Dictionary with: testObjectsFactory itemSellByTheStore -> 5.
	expectedSecondCart := Dictionary with: testObjectsFactory itemSellByTheStore -> 10.

	authenticator := Dictionary with: 1 -> 'pass' with: 2 -> 'pass'.
	tusLibros := FacadeTusLibros with: authenticator and: testObjectsFactory defaultCatalog.
	
	firstCartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	secondCartID := tusLibros createCartForUser: 2 withPassword: 'pass'.

	tusLibros addToCart: firstCartID aQuantity: 5 of: testObjectsFactory itemSellByTheStore.
	tusLibros addToCart: secondCartID aQuantity: 10 of: testObjectsFactory itemSellByTheStore.
	
	self assert: expectedFirstCart equals: (tusLibros listCartFor: firstCartID).
	self assert: expectedSecondCart equals: (tusLibros listCartFor: secondCartID).! !

!methodRemoval: FacadeTusLibrosTest #test07CannotAddToUnknownCart stamp: 'FedericoSabatini 11/29/2020 17:00:17'!
test07CannotAddToUnknownCart

	| tusLibros firstCartID secondCartID authenticator expectedFirstCart expectedSecondCart |

	expectedFirstCart := Dictionary with: testObjectsFactory itemSellByTheStore -> 5.
	expectedSecondCart := Dictionary with: testObjectsFactory itemSellByTheStore -> 10.

	authenticator := Dictionary with: 1 -> 'pass' with: 2 -> 'pass'.
	tusLibros := FacadeTusLibros with: authenticator and: testObjectsFactory defaultCatalog.
	
	firstCartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	secondCartID := tusLibros createCartForUser: 2 withPassword: 'pass'.

	tusLibros addToCart: firstCartID aQuantity: 5 of: testObjectsFactory itemSellByTheStore.
	tusLibros addToCart: secondCartID aQuantity: 10 of: testObjectsFactory itemSellByTheStore.
	
	self assert: expectedFirstCart equals: (tusLibros listCartFor: firstCartID).
	self assert: expectedSecondCart equals: (tusLibros listCartFor: secondCartID).!
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/29/2020 17:00:49' prior: 50884587!
test07CannotAddToUnknownCartID

	| tusLibros firstCartID authenticator |

	authenticator := Dictionary with: 1 -> 'pass' with: 2 -> 'pass'.
	tusLibros := FacadeTusLibros with: authenticator and: testObjectsFactory defaultCatalog.
	
	firstCartID := tusLibros createCartForUser: 1 withPassword: 'pass'.

	tusLibros addToCart: firstCartID aQuantity: 5 of: testObjectsFactory itemSellByTheStore.! !
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/29/2020 17:00:59' prior: 50884653!
test07CannotAddToUnknownCartID

	| tusLibros CartID authenticator |

	authenticator := Dictionary with: 1 -> 'pass' with: 2 -> 'pass'.
	tusLibros := FacadeTusLibros with: authenticator and: testObjectsFactory defaultCatalog.
	
	CartID := tusLibros createCartForUser: 1 withPassword: 'pass'.

	tusLibros addToCart: CartID aQuantity: 5 of: testObjectsFactory itemSellByTheStore.! !
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/29/2020 17:01:09' prior: 50884670!
test07CannotAddToUnknownCartID

	| tusLibros CartID authenticator |

	authenticator := Dictionary with: 1 -> 'pass'.
	tusLibros := FacadeTusLibros with: authenticator and: testObjectsFactory defaultCatalog.
	
	CartID := tusLibros createCartForUser: 1 withPassword: 'pass'.

	tusLibros addToCart: CartID aQuantity: 5 of: testObjectsFactory itemSellByTheStore.! !
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/29/2020 17:01:30' prior: 50884686!
test07CannotAddToUnknownCartID

	| tusLibros CartID authenticator |

	authenticator := Dictionary with: 1 -> 'pass'.
	tusLibros := FacadeTusLibros with: authenticator and: testObjectsFactory defaultCatalog.
	
	CartID := tusLibros createCartForUser: 1 withPassword: 'pass'.

	
	tusLibros addToCart: 200 aQuantity: 5 of: testObjectsFactory itemSellByTheStore.! !
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/29/2020 17:01:41' prior: 50884701!
test07CannotAddToUnknownCartID

	| tusLibros authenticator |

	authenticator := Dictionary with: 1 -> 'pass'.
	tusLibros := FacadeTusLibros with: authenticator and: testObjectsFactory defaultCatalog.
	
	tusLibros createCartForUser: 1 withPassword: 'pass'.

	
	tusLibros addToCart: 200 aQuantity: 5 of: testObjectsFactory itemSellByTheStore.! !
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/29/2020 17:01:57' prior: 50884716!
test07CannotAddToUnknownCartID

	| tusLibros authenticator |

	authenticator := Dictionary with: 1 -> 'pass'.
	tusLibros := FacadeTusLibros with: authenticator and: testObjectsFactory defaultCatalog.

	tusLibros addToCart: 1 aQuantity: 5 of: testObjectsFactory itemSellByTheStore.! !
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/29/2020 17:03:32' prior: 50884731!
test07CannotAddToUnknownCartID

	| tusLibros authenticator |

	authenticator := Dictionary with: 1 -> 'pass'.
	tusLibros := FacadeTusLibros with: authenticator and: testObjectsFactory defaultCatalog.

	self should: [tusLibros addToCart: 1 aQuantity: 5 of: testObjectsFactory itemSellByTheStore]
		raise: Error
		withMessageText: FacadeTusLibros unknownCartIDErrorDescription.! !

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'FedericoSabatini 11/29/2020 17:03:36'!
ERROR!
!FacadeTusLibros class methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/29/2020 17:03:48'!
unknownCartIDErrorDescription
	self shouldBeImplemented.! !
!FacadeTusLibros class methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/29/2020 17:04:32' prior: 50884763!
unknownCartIDErrorDescription
	^ 'Can not add item to unknown cart ID'! !

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'FedericoSabatini 11/29/2020 17:04:34'!
FAILURE!
!FacadeTusLibros methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/29/2020 17:06:07' prior: 50884197!
addToCart: aCartID aQuantity: aQuantity of: anItem
	
	| aCart |
	
	(carts includesKey: aCartID) ifFalse: [self error: self class unknownCartIDErrorDescription ].
	aCart := carts at: aCartID.
	aCart add: aQuantity of: anItem.
	
	! !

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'FedericoSabatini 11/29/2020 17:06:10'!
PASSED!

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'FedericoSabatini 11/29/2020 17:06:10'!
PASSED!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'FedericoSabatini 11/29/2020 17:06:10'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'FedericoSabatini 11/29/2020 17:06:11'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'FedericoSabatini 11/29/2020 17:06:11'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05 stamp: 'FedericoSabatini 11/29/2020 17:06:11'!
PASSED!

!testRun: #FacadeTusLibrosTest #test06 stamp: 'FedericoSabatini 11/29/2020 17:06:11'!
PASSED!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'FedericoSabatini 11/29/2020 17:06:11'!
PASSED!
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/29/2020 17:07:21'!
test05AddedItemIsIncludedInCartList

	| tusLibros cartID authenticator expectedCartList |

	expectedCartList := Dictionary with: testObjectsFactory itemSellByTheStore -> 1.

	authenticator := Dictionary with: 1 -> 'password'.
	tusLibros := FacadeTusLibros with: authenticator and: testObjectsFactory defaultCatalog.
	
	cartID := tusLibros createCartForUser: 1 withPassword: 'password'.

	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	self assert: expectedCartList equals: (tusLibros listCartFor: cartID).! !

!methodRemoval: FacadeTusLibrosTest #test05 stamp: 'FedericoSabatini 11/29/2020 17:07:21'!
test05

	| tusLibros cartID authenticator expectedCartList |

	expectedCartList := Dictionary with: testObjectsFactory itemSellByTheStore -> 1.

	authenticator := Dictionary with: 1 -> 'password'.
	tusLibros := FacadeTusLibros with: authenticator and: testObjectsFactory defaultCatalog.
	
	cartID := tusLibros createCartForUser: 1 withPassword: 'password'.

	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	self assert: expectedCartList equals: (tusLibros listCartFor: cartID).!
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/29/2020 17:07:52'!
test05AddItemIsIncludedInCartList

	| tusLibros cartID authenticator expectedCartList |

	expectedCartList := Dictionary with: testObjectsFactory itemSellByTheStore -> 1.

	authenticator := Dictionary with: 1 -> 'password'.
	tusLibros := FacadeTusLibros with: authenticator and: testObjectsFactory defaultCatalog.
	
	cartID := tusLibros createCartForUser: 1 withPassword: 'password'.

	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	self assert: expectedCartList equals: (tusLibros listCartFor: cartID).! !

!methodRemoval: FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'FedericoSabatini 11/29/2020 17:07:52'!
test05AddedItemIsIncludedInCartList

	| tusLibros cartID authenticator expectedCartList |

	expectedCartList := Dictionary with: testObjectsFactory itemSellByTheStore -> 1.

	authenticator := Dictionary with: 1 -> 'password'.
	tusLibros := FacadeTusLibros with: authenticator and: testObjectsFactory defaultCatalog.
	
	cartID := tusLibros createCartForUser: 1 withPassword: 'password'.

	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	self assert: expectedCartList equals: (tusLibros listCartFor: cartID).!
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/29/2020 17:08:53'!
test05AddedItemIsIncludedInCartList

	| tusLibros cartID authenticator expectedCartList |

	expectedCartList := Dictionary with: testObjectsFactory itemSellByTheStore -> 1.

	authenticator := Dictionary with: 1 -> 'password'.
	tusLibros := FacadeTusLibros with: authenticator and: testObjectsFactory defaultCatalog.
	
	cartID := tusLibros createCartForUser: 1 withPassword: 'password'.

	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	self assert: expectedCartList equals: (tusLibros listCartFor: cartID).! !

!methodRemoval: FacadeTusLibrosTest #test05AddItemIsIncludedInCartList stamp: 'FedericoSabatini 11/29/2020 17:08:53'!
test05AddItemIsIncludedInCartList

	| tusLibros cartID authenticator expectedCartList |

	expectedCartList := Dictionary with: testObjectsFactory itemSellByTheStore -> 1.

	authenticator := Dictionary with: 1 -> 'password'.
	tusLibros := FacadeTusLibros with: authenticator and: testObjectsFactory defaultCatalog.
	
	cartID := tusLibros createCartForUser: 1 withPassword: 'password'.

	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	self assert: expectedCartList equals: (tusLibros listCartFor: cartID).!
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/29/2020 17:09:28'!
test06AddedItemsInDifferentsCartsAreInRespectiveLists

	| tusLibros firstCartID secondCartID authenticator expectedFirstCart expectedSecondCart |

	expectedFirstCart := Dictionary with: testObjectsFactory itemSellByTheStore -> 5.
	expectedSecondCart := Dictionary with: testObjectsFactory itemSellByTheStore -> 10.

	authenticator := Dictionary with: 1 -> 'pass' with: 2 -> 'pass'.
	tusLibros := FacadeTusLibros with: authenticator and: testObjectsFactory defaultCatalog.
	
	firstCartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	secondCartID := tusLibros createCartForUser: 2 withPassword: 'pass'.

	tusLibros addToCart: firstCartID aQuantity: 5 of: testObjectsFactory itemSellByTheStore.
	tusLibros addToCart: secondCartID aQuantity: 10 of: testObjectsFactory itemSellByTheStore.
	
	self assert: expectedFirstCart equals: (tusLibros listCartFor: firstCartID).
	self assert: expectedSecondCart equals: (tusLibros listCartFor: secondCartID).! !

!methodRemoval: FacadeTusLibrosTest #test06 stamp: 'FedericoSabatini 11/29/2020 17:09:28'!
test06

	| tusLibros firstCartID secondCartID authenticator expectedFirstCart expectedSecondCart |

	expectedFirstCart := Dictionary with: testObjectsFactory itemSellByTheStore -> 5.
	expectedSecondCart := Dictionary with: testObjectsFactory itemSellByTheStore -> 10.

	authenticator := Dictionary with: 1 -> 'pass' with: 2 -> 'pass'.
	tusLibros := FacadeTusLibros with: authenticator and: testObjectsFactory defaultCatalog.
	
	firstCartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	secondCartID := tusLibros createCartForUser: 2 withPassword: 'pass'.

	tusLibros addToCart: firstCartID aQuantity: 5 of: testObjectsFactory itemSellByTheStore.
	tusLibros addToCart: secondCartID aQuantity: 10 of: testObjectsFactory itemSellByTheStore.
	
	self assert: expectedFirstCart equals: (tusLibros listCartFor: firstCartID).
	self assert: expectedSecondCart equals: (tusLibros listCartFor: secondCartID).!

----SNAPSHOT----(29 November 2020 17:09:35) CuisUniversity-4384.image priorSource: 17548686!

----SNAPSHOT----(29 November 2020 17:10:19) CuisUniversity-4384.image priorSource: 17707368!

----STARTUP---- (29 November 2020 17:12:33) as /mnt/sdb5/Ingenieria1/CuisUniversity (copy)/CuisUniversity-4384.image!


!classRemoval: #StoreTestObjectsFactory stamp: 'DS 11/29/2020 17:12:39'!
Object subclass: #StoreTestObjectsFactory
	instanceVariableNames: 'today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Sale stamp: 'DS 11/29/2020 17:12:40'!
Object subclass: #Sale
	instanceVariableNames: 'total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #FacadeTusLibros stamp: 'DS 11/29/2020 17:12:40'!
Object subclass: #FacadeTusLibros
	instanceVariableNames: 'authenticator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CreditCard stamp: 'DS 11/29/2020 17:12:40'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cashier stamp: 'DS 11/29/2020 17:12:41'!
Object subclass: #Cashier
	instanceVariableNames: 'cart salesBook merchantProcessor creditCard total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cart stamp: 'DS 11/29/2020 17:12:41'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #FacadeTusLibrosTest stamp: 'DS 11/29/2020 17:12:42'!
TestCase subclass: #FacadeTusLibrosTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CashierTest stamp: 'DS 11/29/2020 17:12:42'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectsFactory debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'DS 11/29/2020 17:12:42'!
TestCase subclass: #CartTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of /mnt/sdb5/Ingenieria1/CuisUniversity (copy)/TusLibros-Solucion.st----!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'DS 11/29/2020 17:12:50'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'DS 11/29/2020 17:12:50'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'DS 11/29/2020 17:12:50'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'DS 11/29/2020 17:12:50'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'DS 11/29/2020 17:12:50'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'DS 11/29/2020 17:12:50'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'DS 11/29/2020 17:12:50'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'DS 11/29/2020 17:12:50'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'DS 11/29/2020 17:12:50'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'DS 11/29/2020 17:12:50'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'DS 11/29/2020 17:12:50'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'DS 11/29/2020 17:12:50'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'DS 11/29/2020 17:12:50'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'DS 11/29/2020 17:12:50'!
PASSED!

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'DS 11/29/2020 17:12:50'!
PASSED!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 11/29/2020 17:12:50'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/29/2020 17:12:50'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 11/29/2020 17:12:50'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/29/2020 17:12:50'!
PASSED!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/29/2020 17:12:50'!
PASSED!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'DS 11/29/2020 17:12:50'!
PASSED!

	StoreTestObjectsFactory new; itemSellByTheStorePrice !

StoreTestObjectsFactory new itemSellByTheStorePrice !
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'DS 11/29/2020 17:23:42'!
test08

	| tusLibros cartID authenticator salesBook creditCardNumber creditCardExpirationDate creditCardOwner |

	authenticator := Dictionary with: 1 -> 'password'.
	tusLibros := FacadeTusLibros with: authenticator and: testObjectsFactory defaultCatalog.
	salesBook := OrderedCollection new.
	creditCardOwner := 'S.A.'.
	creditCardExpirationDate := July,2021.
	creditCardNumber := '1234123412341234'.
	
	cartID := tusLibros createCartForUser: 1 withPassword: 'password'.
	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.

	self assert: 10 equals: (tusLibros checkOutCart: cartID withCCN: creditCardNumber withCCED: creditCardExpirationDate andCCO: creditCardOwner).! !
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'DS 11/29/2020 17:24:08' prior: 50882266!
test08

	| tusLibros cartID authenticator creditCardNumber creditCardExpirationDate creditCardOwner |

	authenticator := Dictionary with: 1 -> 'password'.
	tusLibros := FacadeTusLibros with: authenticator and: testObjectsFactory defaultCatalog.
	creditCardOwner := 'S.A.'.
	creditCardExpirationDate := July,2021.
	creditCardNumber := '1234123412341234'.
	
	cartID := tusLibros createCartForUser: 1 withPassword: 'password'.
	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.

	self assert: 10 equals: (tusLibros checkOutCart: cartID withCCN: creditCardNumber withCCED: creditCardExpirationDate andCCO: creditCardOwner).! !

!testRun: #FacadeTusLibrosTest #test08 stamp: 'DS 11/29/2020 17:24:11'!
ERROR!
!FacadeTusLibros methodsFor: 'as yet unclassified' stamp: 'DS 11/29/2020 17:24:18'!
checkOutCart: aSmallInteger withCCN: aString withCCED: aGregorianMonthOfYear andCCO: aString4 
	self shouldBeImplemented.! !
!FacadeTusLibros methodsFor: 'as yet unclassified' stamp: 'DS 11/29/2020 17:25:14' prior: 50882318!
checkOutCart: aCartID withCCN: anCCN withCCED: anCCED andCCO: anCCO

	^100.
! !

!testRun: #FacadeTusLibrosTest #test08 stamp: 'DS 11/29/2020 17:25:16'!
FAILURE!
!FacadeTusLibros methodsFor: 'as yet unclassified' stamp: 'DS 11/29/2020 17:25:25' prior: 50882326!
checkOutCart: aCartID withCCN: anCCN withCCED: anCCED andCCO: anCCO

	^10.
! !

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'DS 11/29/2020 17:25:27'!
PASSED!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 11/29/2020 17:25:27'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/29/2020 17:25:27'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 11/29/2020 17:25:27'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/29/2020 17:25:27'!
PASSED!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/29/2020 17:25:27'!
PASSED!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'DS 11/29/2020 17:25:27'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08 stamp: 'DS 11/29/2020 17:25:27'!
PASSED!

!classDefinition: #StoreTestObjectsFactory category: 'TusLibros-Solucion' stamp: 'DS 11/29/2020 17:34:22'!
Object subclass: #StoreTestObjectsFactory
	instanceVariableNames: 'today debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!
!StoreTestObjectsFactory methodsFor: 'merchant proccesor protocol' stamp: 'DS 11/29/2020 17:34:20'!
debit: anAmount from: aCreditCard 

	^debitBehavior value: anAmount value: aCreditCard.! !

!methodRemoval: StoreTestObjectsFactory #debit:from: stamp: 'DS 11/29/2020 17:34:51'!
debit: anAmount from: aCreditCard 

	^debitBehavior value: anAmount value: aCreditCard.!

!classDefinition: #FacadeTusLibrosTest category: 'TusLibros-Solucion' stamp: 'DS 11/29/2020 17:35:14'!
TestCase subclass: #FacadeTusLibrosTest
	instanceVariableNames: 'testObjectsFactory debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!
!FacadeTusLibrosTest methodsFor: 'setup' stamp: 'DS 11/29/2020 17:35:13'!
debit: anAmount from: aCreditCard 

	^debitBehavior value: anAmount value: aCreditCard ! !
!FacadeTusLibrosTest methodsFor: 'setup' stamp: 'DS 11/29/2020 17:35:28' prior: 50881785 overrides: 16927572!
setUp

	testObjectsFactory := StoreTestObjectsFactory new.
	debitBehavior := [ :anAmount :aCreditCard | ].! !
!FacadeTusLibrosTest methodsFor: 'tests' stamp: 'DS 11/29/2020 17:37:01' prior: 50882292!
test08

	| tusLibros cartID authenticator creditCardNumber creditCardExpirationDate creditCardOwner |

	authenticator := Dictionary with: 1 -> 'password'.
	tusLibros := FacadeTusLibros with: authenticator and: testObjectsFactory defaultCatalog.
	creditCardOwner := 'S.A.'.
	creditCardExpirationDate := July,2021.
	creditCardNumber := '1234123412341234'.
	
	cartID := tusLibros createCartForUser: 1 withPassword: 'password'.
	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.

	self assert: 10 equals: (tusLibros checkOutCart: cartID withCCN: creditCardNumber withCCED: creditCardExpirationDate andCCO: creditCardOwner throught: self).! !
!FacadeTusLibros methodsFor: 'as yet unclassified' stamp: 'DS 11/29/2020 17:37:44'!
checkOutCart: aCartID withCCN: anCCN withCCED: anCCED andCCO: anCCO throught: aMerchantProccesor

	^10.
! !

!methodRemoval: FacadeTusLibros #checkOutCart:withCCN:withCCED:andCCO: stamp: 'DS 11/29/2020 17:37:47'!
checkOutCart: aCartID withCCN: anCCN withCCED: anCCED andCCO: anCCO

	^10.
!

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'DS 11/29/2020 17:37:50'!
PASSED!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 11/29/2020 17:37:50'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/29/2020 17:37:50'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 11/29/2020 17:37:50'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/29/2020 17:37:50'!
PASSED!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/29/2020 17:37:50'!
PASSED!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'DS 11/29/2020 17:37:50'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08 stamp: 'DS 11/29/2020 17:37:50'!
PASSED!
!FacadeTusLibrosTest methodsFor: 'tests' stamp: 'DS 11/29/2020 17:39:53'!
test09

	| tusLibros cartID authenticator creditCardNumber creditCardExpirationDate creditCardOwner |

	authenticator := Dictionary with: 1 -> 'password'.
	tusLibros := FacadeTusLibros with: authenticator and: testObjectsFactory defaultCatalog.
	creditCardOwner := 'S.A.'.
	creditCardExpirationDate := July,2021.
	creditCardNumber := '1234123412341234'.
	
	debitBehavior := [ :anAmount :aCreditCard | self error: Cashier creditCardHasNoCreditErrorMessage].
	
	cartID := tusLibros createCartForUser: 1 withPassword: 'password'.
	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	
	self should: [tusLibros checkOutCart: cartID withCCN: creditCardNumber withCCED: creditCardExpirationDate andCCO: creditCardOwner throught: self]
		raise: Error
		withMessageText: Cashier creditCardHasNoCreditErrorMessage.! !

!testRun: #FacadeTusLibrosTest #test09 stamp: 'DS 11/29/2020 17:39:54'!
FAILURE!

TestCase subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!

!classDefinition: #CreditCardTest category: 'TusLibros-Solucion' stamp: 'DS 11/29/2020 17:45:52'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!
!CreditCardTest methodsFor: 'no messages' stamp: 'DS 11/29/2020 17:46:35'!
assertCreateCreditCardWithNumber: anNumber withExpirationDate: anExpirationDate andOwner: anOwner shouldRaiseErrorDescription: anErrorDescription 

	self should: [ CreditCard withNumber: anNumber withExpirationDate: anExpirationDate andOwner: anOwner . ]
		raise: Error
		withMessageText: anErrorDescription.! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'DS 11/29/2020 17:47:07'!
test02CreditCardOwnerCanNotBeEmpty

	self 
		assertCreateCreditCardWithNumber: '1234123412341234'
		withExpirationDate:  February, 2021
		andOwner:  ''
		shouldRaiseErrorDescription: CreditCard invalidOwnerErrorDescription.! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'DS 11/29/2020 17:47:36'!
test01CreditCardNumberShouldHave16Characters

	self
		assertCreateCreditCardWithNumber: '123412341234123'
		withExpirationDate: February, 2021
		andOwner: 'FedeSaba S.A.'
		shouldRaiseErrorDescription: CreditCard invalidNumberErrorDescription.! !

!classDefinition: #CreditCard category: 'TusLibros-Solucion' stamp: 'DS 11/29/2020 17:48:56'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration number'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!

!classDefinition: #CreditCard category: 'TusLibros-Solucion' stamp: 'DS 11/29/2020 17:48:57'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration number owner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!
!CreditCard methodsFor: 'initialization' stamp: 'DS 11/29/2020 17:48:54'!
initializeWithNumber: aCreditCardNumber withOwner: anOwner expiringOn: anExpirationDate

	number := aCreditCardNumber.
	expiration := anExpirationDate.
	owner := anOwner.! !
!CreditCard class methodsFor: 'instance creation' stamp: 'DS 11/29/2020 17:51:05'!
assertValidCreditCardNumber: aCreditCardNumber

	^(aCreditCardNumber size = 16) ifFalse: [ self error: self invalidNumberErrorDescription ].! !
!CreditCard class methodsFor: 'assertions' stamp: 'DS 11/29/2020 17:51:28'!
assertValidOwner: anOwner

	^anOwner ifEmpty: [ self error: self invalidOwnerErrorDescription ].! !
!CreditCard class methodsFor: 'error descriptions' stamp: 'DS 11/29/2020 17:51:53'!
invalidExpirationDateErrorDescription

    ^'Invalid format of Expiration Date'.! !
!CreditCard class methodsFor: 'error descriptions' stamp: 'DS 11/29/2020 17:51:58'!
invalidNumberErrorDescription

    ^'Invalid number of credit card'.! !
!CreditCard class methodsFor: 'error descriptions' stamp: 'DS 11/29/2020 17:52:04'!
invalidOwnerErrorDescription

    ^'Owner can not be empty'.! !
!CreditCard class methodsFor: 'instance creation' stamp: 'DS 11/29/2020 17:53:28'!
withNumber: aNumber withOwner: anOwner expiringOn: aMonth

    self assertValidCreditCardNumber: aNumber.
    self assertValidOwner: anOwner.

    ^self new initializeWithNumber: aNumber withOwner: anOwner expiringOn: aMonth.! !
!CreditCard methodsFor: 'initialization' stamp: 'DS 11/29/2020 17:53:42' prior: 50882567!
initializeWithNumber: aCreditCardNumber withOwner: anOwner expiringOn: aMonth

	number := aCreditCardNumber.
	expiration := aMonth.
	owner := anOwner.! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'DS 11/29/2020 17:54:29'!
assertCreateCreditCardWithNumber: anNumber andOwner: anOwner expiringOn: aMonth shouldRaiseErrorDescription: anErrorDescription 

	self should: [ CreditCard withNumber: anNumber withOwner: anOwner expiringOn: aMonth. ]
		raise: Error
		withMessageText: anErrorDescription.! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'DS 11/29/2020 17:54:55'!
assertCreateCreditCardWithNumber: anNumber withOwner: anOwner expiringOn: aMonth shouldRaiseErrorDescription: anErrorDescription 

	self should: [ CreditCard withNumber: anNumber withOwner: anOwner expiringOn: aMonth. ]
		raise: Error
		withMessageText: anErrorDescription.! !

!methodRemoval: CreditCardTest #assertCreateCreditCardWithNumber:andOwner:expiringOn:shouldRaiseErrorDescription: stamp: 'DS 11/29/2020 17:54:55'!
assertCreateCreditCardWithNumber: anNumber andOwner: anOwner expiringOn: aMonth shouldRaiseErrorDescription: anErrorDescription 

	self should: [ CreditCard withNumber: anNumber withOwner: anOwner expiringOn: aMonth. ]
		raise: Error
		withMessageText: anErrorDescription.!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'DS 11/29/2020 17:55:13' prior: 50882541!
test01CreditCardNumberShouldHave16Characters

	self
		assertCreateCreditCardWithNumber: '123412341234123'
		withOwner: 'FedeSaba S.A.'
		expiringOn: February, 2021
		shouldRaiseErrorDescription: CreditCard invalidNumberErrorDescription.! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'DS 11/29/2020 17:55:28' prior: 50882531!
test02CreditCardOwnerCanNotBeEmpty

	self 
		assertCreateCreditCardWithNumber: '1234123412341234'
		withOwner:  ''
		expiringOn:  February, 2021
		shouldRaiseErrorDescription: CreditCard invalidOwnerErrorDescription.! !

!testRun: #CreditCardTest #test02CreditCardOwnerCanNotBeEmpty stamp: 'DS 11/29/2020 17:55:30'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberShouldHave16Characters stamp: 'DS 11/29/2020 17:55:30'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardOwnerCanNotBeEmpty stamp: 'DS 11/29/2020 17:55:30'!
PASSED!

!methodRemoval: CreditCardTest #assertCreateCreditCardWithNumber:withExpirationDate:andOwner:shouldRaiseErrorDescription: stamp: 'DS 11/29/2020 17:55:34'!
assertCreateCreditCardWithNumber: anNumber withExpirationDate: anExpirationDate andOwner: anOwner shouldRaiseErrorDescription: anErrorDescription 

	self should: [ CreditCard withNumber: anNumber withExpirationDate: anExpirationDate andOwner: anOwner . ]
		raise: Error
		withMessageText: anErrorDescription.!

!methodRemoval: CreditCard #initializeExpiringOn: stamp: 'DS 11/29/2020 17:56:45'!
initializeExpiringOn: aMonth 
	
	expiration := aMonth !

!methodRemoval: CreditCard class #expiringOn: stamp: 'DS 11/29/2020 17:56:52'!
expiringOn: aMonth 
	
	^self new initializeExpiringOn: aMonth!
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'DS 11/29/2020 17:57:36' prior: 50882167!
expiredCreditCard
	
	^CreditCard 
		withNumber: '1234123412341234'
		withOwner: 'an owner'
		expiringOn: (Month month: today monthIndex year: today yearNumber - 1)! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'DS 11/29/2020 17:57:46' prior: 50882174!
notExpiredCreditCard
	
	^CreditCard 
		withNumber: '1234123412341234'
		withOwner: 'an owner'
		expiringOn: (Month month: today monthIndex year: today yearNumber + 1).! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'DS 11/29/2020 17:57:49'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'DS 11/29/2020 17:57:49'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'DS 11/29/2020 17:57:49'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'DS 11/29/2020 17:57:49'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'DS 11/29/2020 17:57:49'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'DS 11/29/2020 17:57:49'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberShouldHave16Characters stamp: 'DS 11/29/2020 17:57:51'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardOwnerCanNotBeEmpty stamp: 'DS 11/29/2020 17:57:51'!
PASSED!

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'DS 11/29/2020 17:57:53'!
PASSED!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 11/29/2020 17:57:53'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/29/2020 17:57:53'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 11/29/2020 17:57:53'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/29/2020 17:57:53'!
PASSED!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/29/2020 17:57:53'!
PASSED!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'DS 11/29/2020 17:57:53'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08 stamp: 'DS 11/29/2020 17:57:53'!
PASSED!

!testRun: #FacadeTusLibrosTest #test09 stamp: 'DS 11/29/2020 17:57:53'!
FAILURE!

!testRun: #FacadeTusLibrosTest #test09 stamp: 'DS 11/29/2020 17:57:53'!
FAILURE!

----SNAPSHOT----(29 November 2020 17:57:57) CuisUniversity-4384.image priorSource: 17589508!

!testRun: #FacadeTusLibrosTest #test09 stamp: 'DS 11/29/2020 17:58:24'!
FAILURE!
!FacadeTusLibros methodsFor: 'as yet unclassified' stamp: 'DS 11/29/2020 18:03:50'!
checkOutCart: aCartID withCCN: anCCN withCCED: anCCED andCCO: anCCO throught: aMerchantProccesor on: aDate

	| creditCard cart cashier |

	creditCard := CreditCard withNumber: anCCN withOwner: anCCO expiringOn: anCCED.
	cart := carts at: aCartID.
	cashier := Cashier toCheckout: cart charging: creditCard throught: aMerchantProccesor on: aDate registeringOn: (OrderedCollection new).

	^cashier checkOut.! !
!FacadeTusLibrosTest methodsFor: 'tests' stamp: 'DS 11/29/2020 18:04:30' prior: 50882474!
test09

	| tusLibros cartID authenticator creditCardNumber creditCardExpirationDate creditCardOwner |

	authenticator := Dictionary with: 1 -> 'password'.
	tusLibros := FacadeTusLibros with: authenticator and: testObjectsFactory defaultCatalog.
	creditCardOwner := 'S.A.'.
	creditCardExpirationDate := July,2021.
	creditCardNumber := '1234123412341234'.
	
	debitBehavior := [ :anAmount :aCreditCard | self error: Cashier creditCardHasNoCreditErrorMessage].
	
	cartID := tusLibros createCartForUser: 1 withPassword: 'password'.
	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	
	self should: [
		tusLibros checkOutCart: cartID 
			withCCN: creditCardNumber
			withCCED: creditCardExpirationDate
			andCCO: creditCardOwner
			throught: self
			on: testObjectsFactory today
		]
		raise: Error
		withMessageText: Cashier creditCardHasNoCreditErrorMessage.! !

!testRun: #FacadeTusLibrosTest #test09 stamp: 'DS 11/29/2020 18:04:31'!
FAILURE!
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'DS 11/29/2020 18:05:26'!
expiredCreditCardDate
	
	^Month month: today monthIndex year: today yearNumber - 1! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'DS 11/29/2020 18:05:34' prior: 50882715!
expiredCreditCard
	
	^CreditCard 
		withNumber: '1234123412341234'
		withOwner: 'an owner'
		expiringOn: self expiredCreditCard ! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'DS 11/29/2020 18:05:35'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'DS 11/29/2020 18:05:35'!
PASSED!
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'DS 11/29/2020 18:05:49' prior: 50882853!
expiredCreditCard
	
	^CreditCard 
		withNumber: '1234123412341234'
		withOwner: 'an owner'
		expiringOn: (self expiredCreditCard )! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'DS 11/29/2020 18:05:51'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'DS 11/29/2020 18:05:51'!
PASSED!
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'DS 11/29/2020 18:06:04' prior: 50882867!
expiredCreditCard
	
	^CreditCard 
		withNumber: '1234123412341234'
		withOwner: 'an owner'
		expiringOn: self expiredCreditCardDate! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'DS 11/29/2020 18:06:06'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'DS 11/29/2020 18:06:06'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'DS 11/29/2020 18:06:06'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'DS 11/29/2020 18:06:06'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'DS 11/29/2020 18:06:06'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'DS 11/29/2020 18:06:06'!
PASSED!
!FacadeTusLibrosTest methodsFor: 'tests' stamp: 'DS 11/29/2020 18:06:25' prior: 50882813!
test09

	| tusLibros cartID authenticator creditCardNumber creditCardExpirationDate creditCardOwner |

	authenticator := Dictionary with: 1 -> 'password'.
	tusLibros := FacadeTusLibros with: authenticator and: testObjectsFactory defaultCatalog.
	creditCardOwner := 'S.A.'.
	creditCardExpirationDate := testObjectsFactory expiredCreditCardDate.
	creditCardNumber := '1234123412341234'.
	
	debitBehavior := [ :anAmount :aCreditCard | self error: Cashier creditCardHasNoCreditErrorMessage].
	
	cartID := tusLibros createCartForUser: 1 withPassword: 'password'.
	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	
	self should: [
		tusLibros checkOutCart: cartID 
			withCCN: creditCardNumber
			withCCED: creditCardExpirationDate
			andCCO: creditCardOwner
			throught: self
			on: testObjectsFactory today
		]
		raise: Error
		withMessageText: Cashier creditCardHasNoCreditErrorMessage.! !

!testRun: #FacadeTusLibrosTest #test09 stamp: 'DS 11/29/2020 18:06:31'!
FAILURE!
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'DS 11/29/2020 18:07:07'!
notExpiredCreditCardDate
	
	^Month month: today monthIndex year: today yearNumber + 1.! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'DS 11/29/2020 18:07:16' prior: 50882724!
notExpiredCreditCard
	
	^CreditCard 
		withNumber: '1234123412341234'
		withOwner: 'an owner'
		expiringOn: self notExpiredCreditCardDate.! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'DS 11/29/2020 18:07:17'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'DS 11/29/2020 18:07:17'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'DS 11/29/2020 18:07:17'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'DS 11/29/2020 18:07:17'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'DS 11/29/2020 18:07:17'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'DS 11/29/2020 18:07:17'!
PASSED!

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'DS 11/29/2020 18:07:19'!
PASSED!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 11/29/2020 18:07:19'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/29/2020 18:07:19'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 11/29/2020 18:07:19'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/29/2020 18:07:19'!
PASSED!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/29/2020 18:07:19'!
PASSED!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'DS 11/29/2020 18:07:19'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08 stamp: 'DS 11/29/2020 18:07:19'!
PASSED!

!testRun: #FacadeTusLibrosTest #test09 stamp: 'DS 11/29/2020 18:07:19'!
FAILURE!

!testRun: #FacadeTusLibrosTest #test09 stamp: 'DS 11/29/2020 18:07:19'!
FAILURE!
!FacadeTusLibrosTest methodsFor: 'tests' stamp: 'DS 11/29/2020 18:07:32' prior: 50882908!
test09

	| tusLibros cartID authenticator creditCardNumber creditCardExpirationDate creditCardOwner |

	authenticator := Dictionary with: 1 -> 'password'.
	tusLibros := FacadeTusLibros with: authenticator and: testObjectsFactory defaultCatalog.
	creditCardOwner := 'S.A.'.
	creditCardExpirationDate := testObjectsFactory notExpiredCreditCardDate.
	creditCardNumber := '1234123412341234'.
	
	debitBehavior := [ :anAmount :aCreditCard | self error: Cashier creditCardHasNoCreditErrorMessage].
	
	cartID := tusLibros createCartForUser: 1 withPassword: 'password'.
	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	
	self should: [
		tusLibros checkOutCart: cartID 
			withCCN: creditCardNumber
			withCCED: creditCardExpirationDate
			andCCO: creditCardOwner
			throught: self
			on: testObjectsFactory today
		]
		raise: Error
		withMessageText: Cashier creditCardHasNoCreditErrorMessage.! !

!testRun: #FacadeTusLibrosTest #test09 stamp: 'DS 11/29/2020 18:07:33'!
PASSED!

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'DS 11/29/2020 18:07:33'!
PASSED!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 11/29/2020 18:07:33'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/29/2020 18:07:33'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 11/29/2020 18:07:33'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/29/2020 18:07:33'!
PASSED!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/29/2020 18:07:33'!
PASSED!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'DS 11/29/2020 18:07:33'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08 stamp: 'DS 11/29/2020 18:07:33'!
PASSED!

!testRun: #FacadeTusLibrosTest #test09 stamp: 'DS 11/29/2020 18:07:33'!
PASSED!

----SNAPSHOT----(29 November 2020 18:07:36) CuisUniversity-4384.image priorSource: 17636494!
!FacadeTusLibrosTest methodsFor: 'tests' stamp: 'DS 11/29/2020 18:10:19' prior: 50882411!
test08

	| tusLibros cartID authenticator creditCardNumber creditCardExpirationDate creditCardOwner checkout |

	authenticator := Dictionary with: 1 -> 'password'.
	tusLibros := FacadeTusLibros with: authenticator and: testObjectsFactory defaultCatalog.
	creditCardOwner := 'S.A.'.
	creditCardExpirationDate := testObjectsFactory notExpiredCreditCardDate.
	creditCardNumber := '1234123412341234'.
	
	cartID := tusLibros createCartForUser: 1 withPassword: 'password'.
	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	
	checkout := tusLibros checkOutCart: cartID
				withCCN: creditCardNumber
				withCCED: creditCardExpirationDate
				andCCO: creditCardOwner
				throught: self
				on: testObjectsFactory today.

	self assert: 10 equals: (tusLibros checkOutCart: cartID withCCN: creditCardNumber withCCED: creditCardExpirationDate andCCO: creditCardOwner throught: self).! !
!FacadeTusLibrosTest methodsFor: 'tests' stamp: 'DS 11/29/2020 18:10:28' prior: 50883076!
test08

	| tusLibros cartID authenticator creditCardNumber creditCardExpirationDate creditCardOwner checkout |

	authenticator := Dictionary with: 1 -> 'password'.
	tusLibros := FacadeTusLibros with: authenticator and: testObjectsFactory defaultCatalog.
	creditCardOwner := 'S.A.'.
	creditCardExpirationDate := testObjectsFactory notExpiredCreditCardDate.
	creditCardNumber := '1234123412341234'.
	
	cartID := tusLibros createCartForUser: 1 withPassword: 'password'.
	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	
	checkout := tusLibros checkOutCart: cartID
				withCCN: creditCardNumber
				withCCED: creditCardExpirationDate
				andCCO: creditCardOwner
				throught: self
				on: testObjectsFactory today.

	self assert: 10 equals: checkout.! !

!testRun: #FacadeTusLibrosTest #test08 stamp: 'DS 11/29/2020 18:10:30'!
PASSED!

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'DS 11/29/2020 18:10:30'!
PASSED!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 11/29/2020 18:10:30'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/29/2020 18:10:30'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 11/29/2020 18:10:30'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/29/2020 18:10:30'!
PASSED!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/29/2020 18:10:30'!
PASSED!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'DS 11/29/2020 18:10:30'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08 stamp: 'DS 11/29/2020 18:10:30'!
PASSED!

!testRun: #FacadeTusLibrosTest #test09 stamp: 'DS 11/29/2020 18:10:30'!
PASSED!

----SNAPSHOT----(29 November 2020 18:10:33) CuisUniversity-4384.image priorSource: 17645511!
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'DS 11/29/2020 18:11:41'!
credotCardOwner

	^'an buisines S.A.'.! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'DS 11/29/2020 18:11:45'!
creditCardOwner

	^'an buisines S.A.'.! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'DS 11/29/2020 18:11:52'!
creditCardNumber

	^'1234123412341234'.! !

!methodRemoval: StoreTestObjectsFactory #credotCardOwner stamp: 'DS 11/29/2020 18:11:54'!
credotCardOwner

	^'an buisines S.A.'.!
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'DS 11/29/2020 18:12:09' prior: 50882881!
expiredCreditCard
	
	^CreditCard 
		withNumber: self creditCardNumber 
		withOwner: self creditCardOwner 
		expiringOn: self expiredCreditCardDate! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'DS 11/29/2020 18:12:21' prior: 50882949!
notExpiredCreditCard
	
	^CreditCard 
		withNumber: self creditCardNumber 
		withOwner: self creditCardOwner 
		expiringOn: self notExpiredCreditCardDate.! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'DS 11/29/2020 18:12:23'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'DS 11/29/2020 18:12:23'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'DS 11/29/2020 18:12:23'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'DS 11/29/2020 18:12:23'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'DS 11/29/2020 18:12:23'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'DS 11/29/2020 18:12:23'!
PASSED!

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'DS 11/29/2020 18:12:24'!
PASSED!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 11/29/2020 18:12:24'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/29/2020 18:12:24'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 11/29/2020 18:12:24'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/29/2020 18:12:24'!
PASSED!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/29/2020 18:12:24'!
PASSED!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'DS 11/29/2020 18:12:24'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08 stamp: 'DS 11/29/2020 18:12:24'!
PASSED!

!testRun: #FacadeTusLibrosTest #test09 stamp: 'DS 11/29/2020 18:12:24'!
PASSED!

----SNAPSHOT----(29 November 2020 18:12:27) CuisUniversity-4384.image priorSource: 17648540!
!FacadeTusLibrosTest methodsFor: 'checkout' stamp: 'DS 11/29/2020 18:14:33' prior: 50883108!
test08

	| tusLibros cartID authenticator checkout |

	authenticator := Dictionary with: 1 -> 'password'.
	tusLibros := FacadeTusLibros with: authenticator and: testObjectsFactory defaultCatalog.
	
	cartID := tusLibros createCartForUser: 1 withPassword: 'password'.
	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	
	checkout := tusLibros checkOutCart: cartID
				withCCN: testObjectsFactory creditCardNumber 
				withCCED: testObjectsFactory notExpiredCreditCardDate 
				andCCO: testObjectsFactory creditCardOwner
				throught: self
				on: testObjectsFactory today.

	self assert: 10 equals: checkout.! !

!testRun: #FacadeTusLibrosTest #test08 stamp: 'DS 11/29/2020 18:14:39'!
PASSED!

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'DS 11/29/2020 18:14:39'!
PASSED!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 11/29/2020 18:14:39'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/29/2020 18:14:39'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 11/29/2020 18:14:39'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/29/2020 18:14:39'!
PASSED!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/29/2020 18:14:39'!
PASSED!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'DS 11/29/2020 18:14:39'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08 stamp: 'DS 11/29/2020 18:14:39'!
PASSED!

!testRun: #FacadeTusLibrosTest #test09 stamp: 'DS 11/29/2020 18:14:39'!
PASSED!
!FacadeTusLibrosTest methodsFor: 'checkout' stamp: 'DS 11/29/2020 18:15:13' prior: 50883009!
test09

	| tusLibros cartID authenticator |

	authenticator := Dictionary with: 1 -> 'password'.
	tusLibros := FacadeTusLibros with: authenticator and: testObjectsFactory defaultCatalog.

	debitBehavior := [ :anAmount :aCreditCard | self error: Cashier creditCardHasNoCreditErrorMessage].
	
	cartID := tusLibros createCartForUser: 1 withPassword: 'password'.
	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	
	self should: [
		tusLibros checkOutCart: cartID 
			withCCN: testObjectsFactory creditCardNumber 
			withCCED: testObjectsFactory notExpiredCreditCardDate
			andCCO: testObjectsFactory creditCardOwner 
			throught: self
			on: testObjectsFactory today
		]
		raise: Error
		withMessageText: Cashier creditCardHasNoCreditErrorMessage.! !

!testRun: #FacadeTusLibrosTest #test09 stamp: 'DS 11/29/2020 18:15:17'!
PASSED!

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'DS 11/29/2020 18:15:17'!
PASSED!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 11/29/2020 18:15:17'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/29/2020 18:15:17'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 11/29/2020 18:15:17'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/29/2020 18:15:17'!
PASSED!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/29/2020 18:15:17'!
PASSED!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'DS 11/29/2020 18:15:17'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08 stamp: 'DS 11/29/2020 18:15:17'!
PASSED!

!testRun: #FacadeTusLibrosTest #test09 stamp: 'DS 11/29/2020 18:15:17'!
PASSED!
!FacadeTusLibrosTest methodsFor: 'checkout' stamp: 'DS 11/29/2020 18:17:48'!
test10CannotCheckoutToUnknownCartID

	| tusLibros cartID authenticator |

	authenticator := Dictionary with: 1 -> 'password'.
	tusLibros := FacadeTusLibros with: authenticator and: testObjectsFactory defaultCatalog.

	cartID := tusLibros createCartForUser: 1 withPassword: 'password'.
	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	
	self should: [
		tusLibros checkOutCart: cartID 
			withCCN: testObjectsFactory creditCardNumber 
			withCCED: testObjectsFactory notExpiredCreditCardDate
			andCCO: testObjectsFactory creditCardOwner 
			throught: self
			on: testObjectsFactory today
		]
		raise: Error
		withMessageText: FacadeTusLibros unknownCartIDErrorDescription.! !
!FacadeTusLibros class methodsFor: 'as yet unclassified' stamp: 'DS 11/29/2020 18:18:17' prior: 50882091!
unknownCartIDErrorDescription
	^ 'Unknowed cart ID'.! !

!testRun: #FacadeTusLibrosTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 11/29/2020 18:18:23'!
FAILURE!

!testRun: #FacadeTusLibrosTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 11/29/2020 18:18:23'!
FAILURE!
!FacadeTusLibros methodsFor: 'as yet unclassified' stamp: 'DS 11/29/2020 18:19:06' prior: 50882797!
checkOutCart: aCartID withCCN: anCCN withCCED: anCCED andCCO: anCCO throught: aMerchantProccesor on: aDate

	| creditCard cart cashier |
	
	(carts includesKey: aCartID) ifFalse: [self error: self class unknownCartIDErrorDescription ].

	creditCard := CreditCard withNumber: anCCN withOwner: anCCO expiringOn: anCCED.
	cart := carts at: aCartID.
	cashier := Cashier toCheckout: cart charging: creditCard throught: aMerchantProccesor on: aDate registeringOn: (OrderedCollection new).

	^cashier checkOut.! !

!testRun: #FacadeTusLibrosTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 11/29/2020 18:19:07'!
FAILURE!

!methodRemoval: FacadeTusLibros #checkOutCart:withCCN:withCCED:andCCO:throught: stamp: 'DS 11/29/2020 18:19:20'!
checkOutCart: aCartID withCCN: anCCN withCCED: anCCED andCCO: anCCO throught: aMerchantProccesor

	^10.
!
!FacadeTusLibrosTest methodsFor: 'checkout' stamp: 'DS 11/29/2020 18:19:43' prior: 50883373!
test10CannotCheckoutToUnknownCartID

	| tusLibros authenticator |

	authenticator := Dictionary with: 1 -> 'password'.
	tusLibros := FacadeTusLibros with: authenticator and: testObjectsFactory defaultCatalog.

	self should: [
		tusLibros checkOutCart: 1
			withCCN: testObjectsFactory creditCardNumber 
			withCCED: testObjectsFactory notExpiredCreditCardDate
			andCCO: testObjectsFactory creditCardOwner 
			throught: self
			on: testObjectsFactory today
		]
		raise: Error
		withMessageText: FacadeTusLibros unknownCartIDErrorDescription.! !

!testRun: #FacadeTusLibrosTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 11/29/2020 18:19:47'!
PASSED!

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'DS 11/29/2020 18:19:47'!
PASSED!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 11/29/2020 18:19:47'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/29/2020 18:19:47'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 11/29/2020 18:19:47'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/29/2020 18:19:47'!
PASSED!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/29/2020 18:19:47'!
PASSED!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'DS 11/29/2020 18:19:47'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08 stamp: 'DS 11/29/2020 18:19:47'!
PASSED!

!testRun: #FacadeTusLibrosTest #test09 stamp: 'DS 11/29/2020 18:19:47'!
PASSED!

!testRun: #FacadeTusLibrosTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 11/29/2020 18:19:47'!
PASSED!

----SNAPSHOT----(29 November 2020 18:19:52) CuisUniversity-4384.image priorSource: 17651283!
!FacadeTusLibros methodsFor: 'as yet unclassified' stamp: 'DS 11/29/2020 18:21:02'!
signalUnknownCartID

	^ self error: self class unknownCartIDErrorDescription! !
!FacadeTusLibros methodsFor: 'as yet unclassified' stamp: 'DS 11/29/2020 18:21:02' prior: 50883411!
checkOutCart: aCartID withCCN: anCCN withCCED: anCCED andCCO: anCCO throught: aMerchantProccesor on: aDate

	| creditCard cart cashier |
	
	(carts includesKey: aCartID) ifFalse: [self signalUnknownCartID ].

	creditCard := CreditCard withNumber: anCCN withOwner: anCCO expiringOn: anCCED.
	cart := carts at: aCartID.
	cashier := Cashier toCheckout: cart charging: creditCard throught: aMerchantProccesor on: aDate registeringOn: (OrderedCollection new).

	^cashier checkOut.! !
!FacadeTusLibros methodsFor: 'as yet unclassified' stamp: 'DS 11/29/2020 18:21:20'!
assertUnkownCartID: aCartID

	^ (carts includesKey: aCartID) ifFalse: [self signalUnknownCartID ]! !
!FacadeTusLibros methodsFor: 'as yet unclassified' stamp: 'DS 11/29/2020 18:21:20' prior: 50883507!
checkOutCart: aCartID withCCN: anCCN withCCED: anCCED andCCO: anCCO throught: aMerchantProccesor on: aDate

	| creditCard cart cashier |
	
	self assertUnkownCartID: aCartID.

	creditCard := CreditCard withNumber: anCCN withOwner: anCCO expiringOn: anCCED.
	cart := carts at: aCartID.
	cashier := Cashier toCheckout: cart charging: creditCard throught: aMerchantProccesor on: aDate registeringOn: (OrderedCollection new).

	^cashier checkOut.! !
!FacadeTusLibros methodsFor: 'as yet unclassified' stamp: 'DS 11/29/2020 18:22:10' prior: 50882059!
addToCart: aCartID aQuantity: aQuantity of: anItem
	
	| aCart |

	self assertUnkownCartID: aCartID.	

	aCart := carts at: aCartID.
	aCart add: aQuantity of: anItem.
	
	! !
!StoreTestObjectsFactory methodsFor: 'tusLibros' stamp: 'DS 11/29/2020 18:28:49'!
tusLibrosFacadeInstance

	| authenticator |

	authenticator := Dictionary with: 1 -> 'pass' with: 2 -> 'pass'.

	^FacadeTusLibros with: authenticator and: self defaultCatalog.! !
!StoreTestObjectsFactory methodsFor: 'tusLibros' stamp: 'DS 11/29/2020 18:28:59'!
tusLibrosFacade

	| authenticator |

	authenticator := Dictionary with: 1 -> 'pass' with: 2 -> 'pass'.

	^FacadeTusLibros with: authenticator and: self defaultCatalog.! !

!methodRemoval: StoreTestObjectsFactory #tusLibrosFacadeInstance stamp: 'DS 11/29/2020 18:29:01'!
tusLibrosFacadeInstance

	| authenticator |

	authenticator := Dictionary with: 1 -> 'pass' with: 2 -> 'pass'.

	^FacadeTusLibros with: authenticator and: self defaultCatalog.!
!FacadeTusLibrosTest methodsFor: 'create' stamp: 'DS 11/29/2020 18:29:26' prior: 50881651!
test01CreateCartHaveEmptyList

	| tusLibros cartID |

	tusLibros := testObjectsFactory tusLibrosFacade.
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.

	self assert: (Dictionary new) equals: (tusLibros listCartFor: cartID).! !

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'DS 11/29/2020 18:29:28'!
PASSED!

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'DS 11/29/2020 18:29:28'!
PASSED!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 11/29/2020 18:29:28'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/29/2020 18:29:28'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 11/29/2020 18:29:28'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/29/2020 18:29:28'!
PASSED!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/29/2020 18:29:28'!
PASSED!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'DS 11/29/2020 18:29:28'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08 stamp: 'DS 11/29/2020 18:29:28'!
PASSED!

!testRun: #FacadeTusLibrosTest #test09 stamp: 'DS 11/29/2020 18:29:28'!
PASSED!

!testRun: #FacadeTusLibrosTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 11/29/2020 18:29:28'!
PASSED!

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'DS 11/29/2020 18:29:30'!
PASSED!

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'DS 11/29/2020 18:29:30'!
PASSED!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 11/29/2020 18:29:30'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/29/2020 18:29:30'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 11/29/2020 18:29:30'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/29/2020 18:29:30'!
PASSED!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/29/2020 18:29:30'!
PASSED!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'DS 11/29/2020 18:29:30'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08 stamp: 'DS 11/29/2020 18:29:30'!
PASSED!

!testRun: #FacadeTusLibrosTest #test09 stamp: 'DS 11/29/2020 18:29:30'!
PASSED!

!testRun: #FacadeTusLibrosTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 11/29/2020 18:29:30'!
PASSED!
!FacadeTusLibrosTest methodsFor: 'create' stamp: 'DS 11/29/2020 18:29:57' prior: 50881666!
test02CannotCreateCartWithInvalidPassword

	| tusLibros |

	tusLibros := testObjectsFactory tusLibrosFacade.

	self should: [ tusLibros createCartForUser: 1 withPassword: 'bad password'.]
		raise: Error
 		withMessageText: FacadeTusLibros badAuthenticationErrorDescription.! !
!StoreTestObjectsFactory methodsFor: 'tusLibros' stamp: 'DS 11/29/2020 18:30:39'!
tusLibros

	| authenticator |

	authenticator := Dictionary with: 1 -> 'pass' with: 2 -> 'pass'.

	^FacadeTusLibros with: authenticator and: self defaultCatalog.! !
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'DS 11/29/2020 18:30:39' prior: 50883584!
test01CreateCartHaveEmptyList

	| tusLibros cartID |

	tusLibros := testObjectsFactory tusLibros.
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.

	self assert: (Dictionary new) equals: (tusLibros listCartFor: cartID).! !
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'DS 11/29/2020 18:30:39' prior: 50883668!
test02CannotCreateCartWithInvalidPassword

	| tusLibros |

	tusLibros := testObjectsFactory tusLibros.

	self should: [ tusLibros createCartForUser: 1 withPassword: 'bad password'.]
		raise: Error
 		withMessageText: FacadeTusLibros badAuthenticationErrorDescription.! !

!methodRemoval: StoreTestObjectsFactory #tusLibrosFacade stamp: 'DS 11/29/2020 18:30:39'!
tusLibrosFacade

	| authenticator |

	authenticator := Dictionary with: 1 -> 'pass' with: 2 -> 'pass'.

	^FacadeTusLibros with: authenticator and: self defaultCatalog.!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 11/29/2020 18:30:42'!
PASSED!

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'DS 11/29/2020 18:30:42'!
PASSED!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 11/29/2020 18:30:42'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/29/2020 18:30:42'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 11/29/2020 18:30:42'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/29/2020 18:30:42'!
PASSED!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/29/2020 18:30:42'!
PASSED!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'DS 11/29/2020 18:30:42'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08 stamp: 'DS 11/29/2020 18:30:42'!
PASSED!

!testRun: #FacadeTusLibrosTest #test09 stamp: 'DS 11/29/2020 18:30:42'!
PASSED!

!testRun: #FacadeTusLibrosTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 11/29/2020 18:30:42'!
PASSED!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 11/29/2020 18:30:44'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'DS 11/29/2020 18:30:44'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'DS 11/29/2020 18:30:44'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'DS 11/29/2020 18:30:44'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'DS 11/29/2020 18:30:44'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'DS 11/29/2020 18:30:44'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'DS 11/29/2020 18:30:44'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'DS 11/29/2020 18:30:44'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'DS 11/29/2020 18:30:44'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'DS 11/29/2020 18:30:44'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'DS 11/29/2020 18:30:44'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'DS 11/29/2020 18:30:44'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'DS 11/29/2020 18:30:44'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'DS 11/29/2020 18:30:44'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'DS 11/29/2020 18:30:44'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberShouldHave16Characters stamp: 'DS 11/29/2020 18:30:44'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardOwnerCanNotBeEmpty stamp: 'DS 11/29/2020 18:30:44'!
PASSED!

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'DS 11/29/2020 18:30:44'!
PASSED!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 11/29/2020 18:30:44'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/29/2020 18:30:44'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 11/29/2020 18:30:44'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/29/2020 18:30:44'!
PASSED!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/29/2020 18:30:44'!
PASSED!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'DS 11/29/2020 18:30:44'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08 stamp: 'DS 11/29/2020 18:30:44'!
PASSED!

!testRun: #FacadeTusLibrosTest #test09 stamp: 'DS 11/29/2020 18:30:44'!
PASSED!

!testRun: #FacadeTusLibrosTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 11/29/2020 18:30:44'!
PASSED!
!FacadeTusLibrosTest methodsFor: 'create' stamp: 'DS 11/29/2020 18:30:56' prior: 50881682!
test03CannotCreateCartWithUnknownUser

	| tusLibros |

	tusLibros := testObjectsFactory tusLibros.

	self should: [ tusLibros createCartForUser: 2 withPassword: 'password'. ]
		raise: Error
		withMessageText: FacadeTusLibros badAuthenticationErrorDescription.! !

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/29/2020 18:30:58'!
PASSED!

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'DS 11/29/2020 18:30:58'!
PASSED!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 11/29/2020 18:30:58'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/29/2020 18:30:58'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 11/29/2020 18:30:58'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/29/2020 18:30:58'!
PASSED!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/29/2020 18:30:58'!
PASSED!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'DS 11/29/2020 18:30:58'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08 stamp: 'DS 11/29/2020 18:30:58'!
PASSED!

!testRun: #FacadeTusLibrosTest #test09 stamp: 'DS 11/29/2020 18:30:58'!
PASSED!

!testRun: #FacadeTusLibrosTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 11/29/2020 18:30:58'!
PASSED!
!FacadeTusLibrosTest methodsFor: 'create' stamp: 'DS 11/29/2020 18:31:15' prior: 50881697!
test04CannotAssignSameIDForDifferentCarts

	| tusLibros cartID cartID2 |

	tusLibros := testObjectsFactory tusLibros.
	
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	cartID2 := tusLibros createCartForUser: 2 withPassword: 'pass'.

	self assert: (cartID ~= cartID2).! !

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 11/29/2020 18:31:17'!
PASSED!

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'DS 11/29/2020 18:31:17'!
PASSED!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 11/29/2020 18:31:17'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/29/2020 18:31:17'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 11/29/2020 18:31:17'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/29/2020 18:31:17'!
PASSED!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/29/2020 18:31:17'!
PASSED!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'DS 11/29/2020 18:31:17'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08 stamp: 'DS 11/29/2020 18:31:17'!
PASSED!

!testRun: #FacadeTusLibrosTest #test09 stamp: 'DS 11/29/2020 18:31:17'!
PASSED!

!testRun: #FacadeTusLibrosTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 11/29/2020 18:31:17'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/29/2020 18:31:28'!
PASSED!

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'DS 11/29/2020 18:31:28'!
PASSED!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 11/29/2020 18:31:28'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/29/2020 18:31:28'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 11/29/2020 18:31:28'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/29/2020 18:31:28'!
PASSED!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/29/2020 18:31:28'!
PASSED!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'DS 11/29/2020 18:31:28'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08 stamp: 'DS 11/29/2020 18:31:28'!
PASSED!

!testRun: #FacadeTusLibrosTest #test09 stamp: 'DS 11/29/2020 18:31:28'!
PASSED!

!testRun: #FacadeTusLibrosTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 11/29/2020 18:31:28'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/29/2020 18:31:30'!
PASSED!

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'DS 11/29/2020 18:31:30'!
PASSED!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 11/29/2020 18:31:30'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/29/2020 18:31:30'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 11/29/2020 18:31:30'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/29/2020 18:31:30'!
PASSED!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/29/2020 18:31:30'!
PASSED!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'DS 11/29/2020 18:31:30'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08 stamp: 'DS 11/29/2020 18:31:30'!
PASSED!

!testRun: #FacadeTusLibrosTest #test09 stamp: 'DS 11/29/2020 18:31:30'!
PASSED!

!testRun: #FacadeTusLibrosTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 11/29/2020 18:31:30'!
PASSED!
!FacadeTusLibrosTest methodsFor: 'create' stamp: 'DS 11/29/2020 18:31:45' prior: 50883846!
test03CannotCreateCartWithUnknownUser

	| tusLibros |

	tusLibros := testObjectsFactory tusLibros.

	self should: [ tusLibros createCartForUser: 2 withPassword: 'pass'. ]
		raise: Error
		withMessageText: FacadeTusLibros badAuthenticationErrorDescription.! !
!FacadeTusLibrosTest methodsFor: 'adding' stamp: 'DS 11/29/2020 18:32:15' prior: 50881714!
test05AddedItemIsIncludedInCartList

	| tusLibros cartID expectedCartList |

	expectedCartList := Dictionary with: testObjectsFactory itemSellByTheStore -> 1.

	tusLibros := testObjectsFactory tusLibros.	
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.

	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	self assert: expectedCartList equals: (tusLibros listCartFor: cartID).! !

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/29/2020 18:32:17'!
PASSED!

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'DS 11/29/2020 18:32:17'!
PASSED!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 11/29/2020 18:32:17'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/29/2020 18:32:17'!
FAILURE!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 11/29/2020 18:32:17'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/29/2020 18:32:17'!
PASSED!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/29/2020 18:32:17'!
PASSED!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'DS 11/29/2020 18:32:17'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08 stamp: 'DS 11/29/2020 18:32:17'!
PASSED!

!testRun: #FacadeTusLibrosTest #test09 stamp: 'DS 11/29/2020 18:32:17'!
PASSED!

!testRun: #FacadeTusLibrosTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 11/29/2020 18:32:17'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/29/2020 18:32:17'!
FAILURE!
!FacadeTusLibrosTest methodsFor: 'create' stamp: 'DS 11/29/2020 18:32:34' prior: 50884017!
test03CannotCreateCartWithUnknownUser

	| tusLibros |

	tusLibros := testObjectsFactory tusLibros.

	self should: [ tusLibros createCartForUser: 2 withPassword: 'password'. ]
		raise: Error
		withMessageText: FacadeTusLibros badAuthenticationErrorDescription.! !
!FacadeTusLibrosTest methodsFor: 'create' stamp: 'DS 11/29/2020 18:32:41' prior: 50884085!
test03CannotCreateCartWithUnknownUser

	| tusLibros |

	tusLibros := testObjectsFactory tusLibros.

	self should: [ tusLibros createCartForUser: 3 withPassword: 'pass'. ]
		raise: Error
		withMessageText: FacadeTusLibros badAuthenticationErrorDescription.! !

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/29/2020 18:32:42'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/29/2020 18:32:45'!
PASSED!

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'DS 11/29/2020 18:32:45'!
PASSED!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 11/29/2020 18:32:45'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/29/2020 18:32:45'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 11/29/2020 18:32:45'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/29/2020 18:32:45'!
PASSED!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/29/2020 18:32:45'!
PASSED!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'DS 11/29/2020 18:32:45'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08 stamp: 'DS 11/29/2020 18:32:45'!
PASSED!

!testRun: #FacadeTusLibrosTest #test09 stamp: 'DS 11/29/2020 18:32:45'!
PASSED!

!testRun: #FacadeTusLibrosTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 11/29/2020 18:32:45'!
PASSED!
!FacadeTusLibrosTest methodsFor: 'adding' stamp: 'DS 11/29/2020 18:33:29' prior: 50881735!
test06AddedItemsInDifferentsCartsAreInRespectiveLists

	| tusLibros firstCartID secondCartID expectedFirstCart expectedSecondCart |

	expectedFirstCart := Dictionary with: testObjectsFactory itemSellByTheStore -> 5.
	expectedSecondCart := Dictionary with: testObjectsFactory itemSellByTheStore -> 10.

	tusLibros := testObjectsFactory tusLibros.	
	firstCartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	secondCartID := tusLibros createCartForUser: 2 withPassword: 'pass'.

	tusLibros addToCart: firstCartID aQuantity: 5 of: testObjectsFactory itemSellByTheStore.
	tusLibros addToCart: secondCartID aQuantity: 10 of: testObjectsFactory itemSellByTheStore.
	
	self assert: expectedFirstCart equals: (tusLibros listCartFor: firstCartID).
	self assert: expectedSecondCart equals: (tusLibros listCartFor: secondCartID).! !

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/29/2020 18:33:30'!
PASSED!

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'DS 11/29/2020 18:33:30'!
PASSED!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 11/29/2020 18:33:30'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/29/2020 18:33:30'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 11/29/2020 18:33:30'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/29/2020 18:33:30'!
PASSED!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/29/2020 18:33:31'!
PASSED!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'DS 11/29/2020 18:33:31'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08 stamp: 'DS 11/29/2020 18:33:31'!
PASSED!

!testRun: #FacadeTusLibrosTest #test09 stamp: 'DS 11/29/2020 18:33:31'!
PASSED!

!testRun: #FacadeTusLibrosTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 11/29/2020 18:33:31'!
PASSED!
!FacadeTusLibrosTest methodsFor: 'adding' stamp: 'DS 11/29/2020 18:33:44' prior: 50881769!
test07CannotAddToUnknownCartID

	| tusLibros |

	tusLibros := testObjectsFactory tusLibros.

	self should: [tusLibros addToCart: 1 aQuantity: 5 of: testObjectsFactory itemSellByTheStore]
		raise: Error
		withMessageText: FacadeTusLibros unknownCartIDErrorDescription.! !
!FacadeTusLibrosTest methodsFor: 'checkout' stamp: 'DS 11/29/2020 18:34:01' prior: 50883257!
test08

	| tusLibros cartID checkout |

	tusLibros := testObjectsFactory tusLibros.
	
	cartID := tusLibros createCartForUser: 1 withPassword: 'password'.
	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	
	checkout := tusLibros checkOutCart: cartID
				withCCN: testObjectsFactory creditCardNumber 
				withCCED: testObjectsFactory notExpiredCreditCardDate 
				andCCO: testObjectsFactory creditCardOwner
				throught: self
				on: testObjectsFactory today.

	self assert: 10 equals: checkout.! !

!testRun: #FacadeTusLibrosTest #test08 stamp: 'DS 11/29/2020 18:34:03'!
ERROR!
!FacadeTusLibrosTest methodsFor: 'checkout' stamp: 'DS 11/29/2020 18:34:30' prior: 50884228!
test08

	| tusLibros cartID checkout |

	tusLibros := testObjectsFactory tusLibros.
	
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	
	checkout := tusLibros checkOutCart: cartID
				withCCN: testObjectsFactory creditCardNumber 
				withCCED: testObjectsFactory notExpiredCreditCardDate 
				andCCO: testObjectsFactory creditCardOwner
				throught: self
				on: testObjectsFactory today.

	self assert: 10 equals: checkout.! !
!FacadeTusLibrosTest methodsFor: 'checkout' stamp: 'DS 11/29/2020 18:34:45' prior: 50883313!
test09

	| tusLibros cartID |

	tusLibros := testObjectsFactory tusLibros.

	debitBehavior := [ :anAmount :aCreditCard | self error: Cashier creditCardHasNoCreditErrorMessage].
	
	cartID := tusLibros createCartForUser: 1 withPassword: 'password'.
	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	
	self should: [
		tusLibros checkOutCart: cartID 
			withCCN: testObjectsFactory creditCardNumber 
			withCCED: testObjectsFactory notExpiredCreditCardDate
			andCCO: testObjectsFactory creditCardOwner 
			throught: self
			on: testObjectsFactory today
		]
		raise: Error
		withMessageText: Cashier creditCardHasNoCreditErrorMessage.! !
!FacadeTusLibrosTest methodsFor: 'checkout' stamp: 'DS 11/29/2020 18:35:01' prior: 50884271!
test09

	| tusLibros cartID |

	tusLibros := testObjectsFactory tusLibros.

	debitBehavior := [ :anAmount :aCreditCard | self error: Cashier creditCardHasNoCreditErrorMessage].
	
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	
	self should: [
		tusLibros checkOutCart: cartID 
			withCCN: testObjectsFactory creditCardNumber 
			withCCED: testObjectsFactory notExpiredCreditCardDate
			andCCO: testObjectsFactory creditCardOwner 
			throught: self
			on: testObjectsFactory today
		]
		raise: Error
		withMessageText: Cashier creditCardHasNoCreditErrorMessage.! !
!FacadeTusLibrosTest methodsFor: 'checkout' stamp: 'DS 11/29/2020 18:35:15' prior: 50883441!
test10CannotCheckoutToUnknownCartID

	| tusLibros |

	tusLibros := testObjectsFactory tusLibros.

	self should: [
		tusLibros checkOutCart: 1
			withCCN: testObjectsFactory creditCardNumber 
			withCCED: testObjectsFactory notExpiredCreditCardDate
			andCCO: testObjectsFactory creditCardOwner 
			throught: self
			on: testObjectsFactory today
		]
		raise: Error
		withMessageText: FacadeTusLibros unknownCartIDErrorDescription.! !

!testRun: #FacadeTusLibrosTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 11/29/2020 18:35:17'!
PASSED!

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'DS 11/29/2020 18:35:17'!
PASSED!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 11/29/2020 18:35:17'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/29/2020 18:35:17'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 11/29/2020 18:35:17'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/29/2020 18:35:17'!
PASSED!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/29/2020 18:35:17'!
PASSED!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'DS 11/29/2020 18:35:17'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08 stamp: 'DS 11/29/2020 18:35:17'!
PASSED!

!testRun: #FacadeTusLibrosTest #test09 stamp: 'DS 11/29/2020 18:35:17'!
PASSED!

!testRun: #FacadeTusLibrosTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 11/29/2020 18:35:17'!
PASSED!
!FacadeTusLibrosTest methodsFor: 'checkout' stamp: 'DS 11/29/2020 18:44:41'!
tusLibros: aFacadeTusLibros checkoutCartID: aCartID

	^aFacadeTusLibros
		checkOutCart: aCartID
		withCCN: testObjectsFactory creditCardNumber 
		withCCED: testObjectsFactory notExpiredCreditCardDate 
		andCCO: testObjectsFactory creditCardOwner
		throught: self
		on: testObjectsFactory today.! !
!FacadeTusLibrosTest methodsFor: 'checkout' stamp: 'DS 11/29/2020 18:45:31' prior: 50884251!
test08

	| tusLibros cartID |

	tusLibros := testObjectsFactory tusLibros.
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	
	self assert: 10 equals: (self tusLibros: tusLibros checkoutCartID: cartID).! !

!testRun: #FacadeTusLibrosTest #test08 stamp: 'DS 11/29/2020 18:45:33'!
PASSED!

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'DS 11/29/2020 18:45:33'!
PASSED!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 11/29/2020 18:45:33'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/29/2020 18:45:33'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 11/29/2020 18:45:33'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/29/2020 18:45:33'!
PASSED!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/29/2020 18:45:33'!
PASSED!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'DS 11/29/2020 18:45:33'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08 stamp: 'DS 11/29/2020 18:45:33'!
PASSED!

!testRun: #FacadeTusLibrosTest #test09 stamp: 'DS 11/29/2020 18:45:33'!
PASSED!

!testRun: #FacadeTusLibrosTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 11/29/2020 18:45:33'!
PASSED!
!FacadeTusLibrosTest methodsFor: 'checkout' stamp: 'DS 11/29/2020 18:46:26' prior: 50884295!
test09

	| tusLibros cartID |

	tusLibros := testObjectsFactory tusLibros.
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.

	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.

	debitBehavior := [ :anAmount :aCreditCard | self error: Cashier creditCardHasNoCreditErrorMessage].
	
	self should: [ self tusLibros: tusLibros checkoutCartID: cartID ]
		raise: Error
		withMessageText: Cashier creditCardHasNoCreditErrorMessage.! !

!testRun: #FacadeTusLibrosTest #test09 stamp: 'DS 11/29/2020 18:46:26'!
PASSED!

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'DS 11/29/2020 18:46:26'!
PASSED!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 11/29/2020 18:46:26'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/29/2020 18:46:26'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 11/29/2020 18:46:26'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/29/2020 18:46:26'!
PASSED!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/29/2020 18:46:26'!
PASSED!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'DS 11/29/2020 18:46:26'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08 stamp: 'DS 11/29/2020 18:46:26'!
PASSED!

!testRun: #FacadeTusLibrosTest #test09 stamp: 'DS 11/29/2020 18:46:26'!
PASSED!

!testRun: #FacadeTusLibrosTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 11/29/2020 18:46:26'!
PASSED!
!FacadeTusLibrosTest methodsFor: 'checkout' stamp: 'DS 11/29/2020 18:46:43' prior: 50884319!
test10CannotCheckoutToUnknownCartID

	| tusLibros |

	tusLibros := testObjectsFactory tusLibros.

	self should: [ self tusLibros: tusLibros checkoutCartID: 1 ]
		raise: Error
		withMessageText: FacadeTusLibros unknownCartIDErrorDescription.! !

!testRun: #FacadeTusLibrosTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 11/29/2020 18:46:44'!
PASSED!

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'DS 11/29/2020 18:46:44'!
PASSED!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 11/29/2020 18:46:44'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/29/2020 18:46:44'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 11/29/2020 18:46:44'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/29/2020 18:46:44'!
PASSED!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/29/2020 18:46:44'!
PASSED!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'DS 11/29/2020 18:46:44'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08 stamp: 'DS 11/29/2020 18:46:44'!
PASSED!

!testRun: #FacadeTusLibrosTest #test09 stamp: 'DS 11/29/2020 18:46:44'!
PASSED!

!testRun: #FacadeTusLibrosTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 11/29/2020 18:46:44'!
PASSED!

----SNAPSHOT----(29 November 2020 18:46:47) CuisUniversity-4384.image priorSource: 17659093!
!FacadeTusLibros methodsFor: 'create - auth' stamp: 'DS 11/29/2020 18:52:50'!
signalBadAuthentication

	^ self error: self class badAuthenticationErrorDescription! !
!FacadeTusLibros methodsFor: 'create - auth' stamp: 'DS 11/29/2020 18:52:50' prior: 50882044!
createCartForUser: anID withPassword: aPassword 

	authenticator at: anID ifAbsent: [self signalBadAuthentication ].
	((authenticator at: anID) = aPassword) ifFalse: [self error: self class badAuthenticationErrorDescription].
	
	currentID := currentID + 1.
	carts at: currentID put: (Cart acceptingItemsOf: catalog).

	^currentID.! !
!FacadeTusLibros methodsFor: 'create - auth' stamp: 'DS 11/29/2020 18:54:24' prior: 50884544!
createCartForUser: anID withPassword: aPassword 

	( (authenticator includesKey: anID) not or: [(authenticator at: anID) ~= aPassword]) ifTrue: [self error: self class badAuthenticationErrorDescription].
	
	currentID := currentID + 1.
	carts at: currentID put: (Cart acceptingItemsOf: catalog).

	^currentID.! !

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'DS 11/29/2020 18:54:25'!
PASSED!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 11/29/2020 18:54:25'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/29/2020 18:54:25'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 11/29/2020 18:54:25'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/29/2020 18:54:25'!
PASSED!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/29/2020 18:54:25'!
PASSED!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'DS 11/29/2020 18:54:25'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08 stamp: 'DS 11/29/2020 18:54:25'!
PASSED!

!testRun: #FacadeTusLibrosTest #test09 stamp: 'DS 11/29/2020 18:54:25'!
PASSED!

!testRun: #FacadeTusLibrosTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 11/29/2020 18:54:25'!
PASSED!

d := Dictionary with: 1 -> 'p'.!

d includes: 1->'p'!

d includes: 1!

d includes: 'p'!
!FacadeTusLibros methodsFor: 'create - auth' stamp: 'DS 11/29/2020 19:00:47'!
assertAuthenticate: anID withPassword: aPassword

	( (authenticator includesKey: anID) not or: [(authenticator at: anID) ~= aPassword] 	)
		ifTrue: [self error: self class badAuthenticationErrorDescription].
! !
!FacadeTusLibros methodsFor: 'create - auth' stamp: 'DS 11/29/2020 19:01:02' prior: 50884558!
createCartForUser: anID withPassword: aPassword 

	self assertAuthenticate: anID withPassword: aPassword.
	
	currentID := currentID + 1.
	carts at: currentID put: (Cart acceptingItemsOf: catalog).

	^currentID.! !

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'DS 11/29/2020 19:01:05'!
PASSED!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 11/29/2020 19:01:05'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/29/2020 19:01:05'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 11/29/2020 19:01:05'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/29/2020 19:01:05'!
PASSED!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/29/2020 19:01:05'!
PASSED!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'DS 11/29/2020 19:01:05'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08 stamp: 'DS 11/29/2020 19:01:05'!
PASSED!

!testRun: #FacadeTusLibrosTest #test09 stamp: 'DS 11/29/2020 19:01:05'!
PASSED!

!testRun: #FacadeTusLibrosTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 11/29/2020 19:01:05'!
PASSED!
!FacadeTusLibrosTest methodsFor: 'checkout' stamp: 'DS 11/29/2020 19:08:04' prior: 50884488!
test10CannotCheckoutToUnknownCartID

	| tusLibros |

	tusLibros := testObjectsFactory tusLibros.

	self should: [ self tusLibros: tusLibros checkoutCartID: 1 ]
		raise: Error
		withMessageText: FacadeTusLibros unknownCartIDErrorDescription.
		
	self assert: tusLibros salesBook isEmpty.! !

!testRun: #FacadeTusLibrosTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 11/29/2020 19:08:09'!
ERROR!
!FacadeTusLibros methodsFor: 'accessing' stamp: 'DS 11/29/2020 19:08:13'!
salesBook
	self shouldBeImplemented.! !

!classDefinition: #FacadeTusLibros category: 'TusLibros-Solucion' stamp: 'DS 11/29/2020 19:08:24'!
Object subclass: #FacadeTusLibros
	instanceVariableNames: 'authenticator carts currentID catalog salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!
!FacadeTusLibros methodsFor: 'accessing' stamp: 'DS 11/29/2020 19:08:20' prior: 50884675!
salesBook

	^salesBook.! !

!testRun: #FacadeTusLibrosTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 11/29/2020 19:08:27'!
ERROR!
!FacadeTusLibros methodsFor: 'initialization' stamp: 'DS 11/29/2020 19:08:45' prior: 50882031!
initializeWith: anAuthenticator and: aCatalog 

	authenticator := anAuthenticator.
	carts := Dictionary new. 
	catalog := aCatalog.
	currentID := 0.
	salesBook := OrderedCollection new.! !

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'DS 11/29/2020 19:08:47'!
PASSED!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 11/29/2020 19:08:47'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/29/2020 19:08:47'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 11/29/2020 19:08:47'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/29/2020 19:08:47'!
PASSED!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/29/2020 19:08:47'!
PASSED!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'DS 11/29/2020 19:08:47'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08 stamp: 'DS 11/29/2020 19:08:47'!
PASSED!

!testRun: #FacadeTusLibrosTest #test09 stamp: 'DS 11/29/2020 19:08:47'!
PASSED!

!testRun: #FacadeTusLibrosTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 11/29/2020 19:08:47'!
PASSED!
!FacadeTusLibrosTest methodsFor: 'checkout' stamp: 'DS 11/29/2020 19:19:57' prior: 50884385!
test08

	| tusLibros cartID |

	tusLibros := testObjectsFactory tusLibros.
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	
	self assert: 10 equals: (self tusLibros: tusLibros checkoutCartID: cartID).
		self assert: (OrderedCollection with : Sale of: 10) equals: tusLibros salesBook.! !

!testRun: #FacadeTusLibrosTest #test08 stamp: 'DS 11/29/2020 19:19:58'!
ERROR!

!testRun: #FacadeTusLibrosTest #test08 stamp: 'DS 11/29/2020 19:20:07'!
ERROR!
!FacadeTusLibrosTest methodsFor: 'checkout' stamp: 'DS 11/29/2020 19:21:14' prior: 50884740!
test08

	| tusLibros cartID expectedSalesBook |

	expectedSalesBook := OrderedCollection with: (Sale of: 100).
	tusLibros := testObjectsFactory tusLibros.
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	tusLibros addToCart: cartID aQuantity: 10 of: testObjectsFactory itemSellByTheStore.
	
	self assert: 10 equals: (self tusLibros: tusLibros checkoutCartID: cartID).
	self assert: expectedSalesBook equals: tusLibros salesBook.! !

!testRun: #FacadeTusLibrosTest #test08 stamp: 'DS 11/29/2020 19:21:14'!
FAILURE!
!FacadeTusLibrosTest methodsFor: 'checkout' stamp: 'DS 11/29/2020 19:21:24' prior: 50884761!
test08

	| tusLibros cartID expectedSalesBook |

	expectedSalesBook := OrderedCollection with: (Sale of: 100).
	tusLibros := testObjectsFactory tusLibros.
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	tusLibros addToCart: cartID aQuantity: 10 of: testObjectsFactory itemSellByTheStore.
	
	self assert: 100 equals: (self tusLibros: tusLibros checkoutCartID: cartID).
	self assert: expectedSalesBook equals: tusLibros salesBook.! !

!testRun: #FacadeTusLibrosTest #test08 stamp: 'DS 11/29/2020 19:21:24'!
FAILURE!
!FacadeTusLibros methodsFor: 'checkout' stamp: 'DS 11/29/2020 19:21:47' prior: 50883532!
checkOutCart: aCartID withCCN: anCCN withCCED: anCCED andCCO: anCCO throught: aMerchantProccesor on: aDate

	| creditCard cart cashier |
	
	self assertUnkownCartID: aCartID.

	creditCard := CreditCard withNumber: anCCN withOwner: anCCO expiringOn: anCCED.
	cart := carts at: aCartID.
	cashier := Cashier toCheckout: cart charging: creditCard throught: aMerchantProccesor on: aDate registeringOn: salesBook.

	^cashier checkOut.! !

!testRun: #FacadeTusLibrosTest #test08 stamp: 'DS 11/29/2020 19:21:49'!
FAILURE!

!testRun: #FacadeTusLibrosTest #test08 stamp: 'DS 11/29/2020 19:21:51'!
PASSED!

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'DS 11/29/2020 19:21:51'!
PASSED!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 11/29/2020 19:21:51'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/29/2020 19:21:51'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 11/29/2020 19:21:51'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/29/2020 19:21:51'!
PASSED!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/29/2020 19:21:51'!
PASSED!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'DS 11/29/2020 19:21:51'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08 stamp: 'DS 11/29/2020 19:21:51'!
FAILURE!

!testRun: #FacadeTusLibrosTest #test09 stamp: 'DS 11/29/2020 19:21:51'!
PASSED!

!testRun: #FacadeTusLibrosTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 11/29/2020 19:21:51'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08 stamp: 'DS 11/29/2020 19:21:51'!
FAILURE!

!testRun: #FacadeTusLibrosTest #test08 stamp: 'DS 11/29/2020 19:21:54'!
FAILURE!

expectedSalesBook!

tusLibros salesBook!

tusLibros salesBook!

self size!

self includes: (Sale of: 100)!

self includes: (Sale of: 10)!

self !

self at: 1!

self at: 1!

self at: 1 total!

(self at: 1 )total!

tusLibros salesBook!

self!

self first!

self first total!
!FacadeTusLibrosTest methodsFor: 'checkout' stamp: 'DS 11/29/2020 19:26:35' prior: 50884781!
test08

	| tusLibros cartID expectedSalesBook |

	expectedSalesBook := OrderedCollection with: (Sale of: 100).
	tusLibros := testObjectsFactory tusLibros.
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	tusLibros addToCart: cartID aQuantity: 10 of: testObjectsFactory itemSellByTheStore.
	
	self assert: 100 equals: (self tusLibros: tusLibros checkoutCartID: cartID).
	self assert: 100 equals: (tusLibros salesBook first total).
	self assert: 1 equals: (tusLibros salesBook size).! !
!FacadeTusLibrosTest methodsFor: 'checkout' stamp: 'DS 11/29/2020 19:26:45' prior: 50884870!
test08

	| tusLibros cartID |

	tusLibros := testObjectsFactory tusLibros.
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	tusLibros addToCart: cartID aQuantity: 10 of: testObjectsFactory itemSellByTheStore.
	
	self assert: 100 equals: (self tusLibros: tusLibros checkoutCartID: cartID).
	self assert: 100 equals: (tusLibros salesBook first total).
	self assert: 1 equals: (tusLibros salesBook size).! !

!testRun: #FacadeTusLibrosTest #test08 stamp: 'DS 11/29/2020 19:26:47'!
PASSED!

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'DS 11/29/2020 19:26:47'!
PASSED!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 11/29/2020 19:26:47'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/29/2020 19:26:47'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 11/29/2020 19:26:47'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/29/2020 19:26:47'!
PASSED!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/29/2020 19:26:47'!
PASSED!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'DS 11/29/2020 19:26:47'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08 stamp: 'DS 11/29/2020 19:26:47'!
PASSED!

!testRun: #FacadeTusLibrosTest #test09 stamp: 'DS 11/29/2020 19:26:47'!
PASSED!

!testRun: #FacadeTusLibrosTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 11/29/2020 19:26:47'!
PASSED!
!FacadeTusLibrosTest methodsFor: 'checkout' stamp: 'DS 11/29/2020 19:27:23' prior: 50884434!
test09

	| tusLibros cartID |

	tusLibros := testObjectsFactory tusLibros.
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.

	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.

	debitBehavior := [ :anAmount :aCreditCard | self error: Cashier creditCardHasNoCreditErrorMessage].
	
	self should: [ self tusLibros: tusLibros checkoutCartID: cartID ]
		raise: Error
		withMessageText: Cashier creditCardHasNoCreditErrorMessage.
		
	self assert: tusLibros salesBook isEmpty.! !

!testRun: #FacadeTusLibrosTest #test09 stamp: 'DS 11/29/2020 19:27:26'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'DS 11/29/2020 19:27:26'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'DS 11/29/2020 19:27:26'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'DS 11/29/2020 19:27:26'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'DS 11/29/2020 19:27:26'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'DS 11/29/2020 19:27:26'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'DS 11/29/2020 19:27:26'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'DS 11/29/2020 19:27:26'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'DS 11/29/2020 19:27:26'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'DS 11/29/2020 19:27:26'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'DS 11/29/2020 19:27:26'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'DS 11/29/2020 19:27:26'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'DS 11/29/2020 19:27:26'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'DS 11/29/2020 19:27:26'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'DS 11/29/2020 19:27:26'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberShouldHave16Characters stamp: 'DS 11/29/2020 19:27:26'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardOwnerCanNotBeEmpty stamp: 'DS 11/29/2020 19:27:26'!
PASSED!

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'DS 11/29/2020 19:27:26'!
PASSED!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 11/29/2020 19:27:26'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/29/2020 19:27:26'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 11/29/2020 19:27:26'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/29/2020 19:27:26'!
PASSED!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/29/2020 19:27:26'!
PASSED!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'DS 11/29/2020 19:27:26'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08 stamp: 'DS 11/29/2020 19:27:26'!
PASSED!

!testRun: #FacadeTusLibrosTest #test09 stamp: 'DS 11/29/2020 19:27:26'!
PASSED!

!testRun: #FacadeTusLibrosTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 11/29/2020 19:27:26'!
PASSED!

----SNAPSHOT----(29 November 2020 19:27:28) CuisUniversity-4384.image priorSource: 17692296!
!FacadeTusLibrosTest methodsFor: 'checkout' stamp: 'DS 11/29/2020 19:31:24'!
test08CheckoutShouldBeRegisterInSalesBook

	| tusLibros cartID |

	tusLibros := testObjectsFactory tusLibros.
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	tusLibros addToCart: cartID aQuantity: 10 of: testObjectsFactory itemSellByTheStore.
	
	self assert: 100 equals: (self tusLibros: tusLibros checkoutCartID: cartID).
	self assert: 100 equals: (tusLibros salesBook first total).
	self assert: 1 equals: (tusLibros salesBook size).! !

!methodRemoval: FacadeTusLibrosTest #test08 stamp: 'DS 11/29/2020 19:31:24'!
test08

	| tusLibros cartID |

	tusLibros := testObjectsFactory tusLibros.
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	tusLibros addToCart: cartID aQuantity: 10 of: testObjectsFactory itemSellByTheStore.
	
	self assert: 100 equals: (self tusLibros: tusLibros checkoutCartID: cartID).
	self assert: 100 equals: (tusLibros salesBook first total).
	self assert: 1 equals: (tusLibros salesBook size).!
!FacadeTusLibrosTest methodsFor: 'checkout' stamp: 'DS 11/29/2020 19:31:45'!
test09CannotCheckoutWhnCreditCardHasNoCredit

	| tusLibros cartID |

	tusLibros := testObjectsFactory tusLibros.
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.

	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.

	debitBehavior := [ :anAmount :aCreditCard | self error: Cashier creditCardHasNoCreditErrorMessage].
	
	self should: [ self tusLibros: tusLibros checkoutCartID: cartID ]
		raise: Error
		withMessageText: Cashier creditCardHasNoCreditErrorMessage.
		
	self assert: tusLibros salesBook isEmpty.! !

!methodRemoval: FacadeTusLibrosTest #test09 stamp: 'DS 11/29/2020 19:31:45'!
test09

	| tusLibros cartID |

	tusLibros := testObjectsFactory tusLibros.
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.

	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.

	debitBehavior := [ :anAmount :aCreditCard | self error: Cashier creditCardHasNoCreditErrorMessage].
	
	self should: [ self tusLibros: tusLibros checkoutCartID: cartID ]
		raise: Error
		withMessageText: Cashier creditCardHasNoCreditErrorMessage.
		
	self assert: tusLibros salesBook isEmpty.!

----SNAPSHOT----(29 November 2020 19:31:49) CuisUniversity-4384.image priorSource: 17708716!
!FacadeTusLibrosTest methodsFor: 'checkout' stamp: 'DS 11/29/2020 19:31:54'!
test09CannotCheckoutWhnCreditCardHasNotCredit

	| tusLibros cartID |

	tusLibros := testObjectsFactory tusLibros.
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.

	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.

	debitBehavior := [ :anAmount :aCreditCard | self error: Cashier creditCardHasNoCreditErrorMessage].
	
	self should: [ self tusLibros: tusLibros checkoutCartID: cartID ]
		raise: Error
		withMessageText: Cashier creditCardHasNoCreditErrorMessage.
		
	self assert: tusLibros salesBook isEmpty.! !

!methodRemoval: FacadeTusLibrosTest #test09CannotCheckoutWhnCreditCardHasNoCredit stamp: 'DS 11/29/2020 19:31:54'!
test09CannotCheckoutWhnCreditCardHasNoCredit

	| tusLibros cartID |

	tusLibros := testObjectsFactory tusLibros.
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.

	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.

	debitBehavior := [ :anAmount :aCreditCard | self error: Cashier creditCardHasNoCreditErrorMessage].
	
	self should: [ self tusLibros: tusLibros checkoutCartID: cartID ]
		raise: Error
		withMessageText: Cashier creditCardHasNoCreditErrorMessage.
		
	self assert: tusLibros salesBook isEmpty.!

----SNAPSHOT----(29 November 2020 19:47:33) CuisUniversity-4384.image priorSource: 17711109!

----QUIT----(29 November 2020 19:48:42) CuisUniversity-4384.image priorSource: 17712530!

----STARTUP---- (30 November 2020 17:13:30) as /mnt/sdb5/Ingenieria1/CuisUniversity/CuisUniversity-4384.image!

!Cart methodsFor: 'accesing' stamp: 'DS 11/30/2020 17:45:34' prior: 50881858!
items

	^ Bag newFrom: items copy.
	"| ocurrences |
	
	ocurrences := Dictionary new.
	
	items do: [ :item | (ocurrences includesKey: item) 
		ifTrue: [ocurrences at: item put: (ocurrences at: item) + 1] 
		ifFalse: [ocurrences at: item put: 1]].
	
	^ocurrences."! !

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'DS 11/30/2020 17:45:52'!
FAILURE!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 11/30/2020 17:45:52'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/30/2020 17:45:52'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 11/30/2020 17:45:52'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/30/2020 17:45:52'!
FAILURE!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/30/2020 17:45:52'!
FAILURE!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'DS 11/30/2020 17:45:52'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'DS 11/30/2020 17:45:52'!
PASSED!

!testRun: #FacadeTusLibrosTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'DS 11/30/2020 17:45:52'!
PASSED!

!testRun: #FacadeTusLibrosTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 11/30/2020 17:45:52'!
PASSED!
!Cart methodsFor: 'accesing' stamp: 'DS 11/30/2020 17:46:49' prior: 50885177!
items

	^items copy.! !
!FacadeTusLibros methodsFor: 'cart actions' stamp: 'DS 11/30/2020 17:47:21' prior: 50882039!
listCartFor: aCartID

	^Bag newFrom: (carts at: aCartID) items.! !
!FacadeTusLibros methodsFor: 'cart actions' stamp: 'DS 11/30/2020 17:47:32' prior: 50885228!
listCartFor: aCartID

	^Dictionary newFrom: (carts at: aCartID) items.! !

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'DS 11/30/2020 17:47:33'!
PASSED!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 11/30/2020 17:47:33'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/30/2020 17:47:33'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 11/30/2020 17:47:33'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/30/2020 17:47:33'!
ERROR!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/30/2020 17:47:33'!
ERROR!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'DS 11/30/2020 17:47:33'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'DS 11/30/2020 17:47:33'!
PASSED!

!testRun: #FacadeTusLibrosTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'DS 11/30/2020 17:47:33'!
PASSED!

!testRun: #FacadeTusLibrosTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 11/30/2020 17:47:33'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/30/2020 17:47:35'!
ERROR!
!FacadeTusLibros methodsFor: 'cart actions' stamp: 'DS 11/30/2020 17:47:49' prior: 50885233!
listCartFor: aCartID

	^Bag newFrom: (carts at: aCartID) items.! !

o := OrderedCollection new.!

o asDictionary !
!FacadeTusLibros methodsFor: 'cart actions' stamp: 'DS 11/30/2020 17:48:52' prior: 50885278!
listCartFor: aCartID

	^(carts at: aCartID) items asDictionary.! !

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'DS 11/30/2020 17:48:55'!
PASSED!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 11/30/2020 17:48:55'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/30/2020 17:48:55'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 11/30/2020 17:48:55'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/30/2020 17:48:55'!
ERROR!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/30/2020 17:48:55'!
ERROR!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'DS 11/30/2020 17:48:55'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'DS 11/30/2020 17:48:55'!
PASSED!

!testRun: #FacadeTusLibrosTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'DS 11/30/2020 17:48:55'!
PASSED!

!testRun: #FacadeTusLibrosTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 11/30/2020 17:48:55'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/30/2020 17:48:56'!
ERROR!
!FacadeTusLibros methodsFor: 'cart actions' stamp: 'DS 11/30/2020 17:50:18' prior: 50885285!
listCartFor: aCartID

	^Bag newFrom: (carts at: aCartID) items.! !

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'DS 11/30/2020 17:50:20'!
FAILURE!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 11/30/2020 17:50:20'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/30/2020 17:50:20'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 11/30/2020 17:50:20'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/30/2020 17:50:20'!
FAILURE!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/30/2020 17:50:20'!
FAILURE!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'DS 11/30/2020 17:50:20'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'DS 11/30/2020 17:50:20'!
PASSED!

!testRun: #FacadeTusLibrosTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'DS 11/30/2020 17:50:20'!
PASSED!

!testRun: #FacadeTusLibrosTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 11/30/2020 17:50:20'!
PASSED!

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'DS 11/30/2020 17:50:22'!
FAILURE!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/30/2020 17:50:26'!
FAILURE!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/30/2020 17:50:31'!
FAILURE!
!FacadeTusLibros methodsFor: 'cart actions' stamp: 'DS 11/30/2020 17:51:00' prior: 50885329!
listCartFor: aCartID

	^Bag new: (carts at: aCartID) items.! !

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'DS 11/30/2020 17:51:02'!
ERROR!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 11/30/2020 17:51:02'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/30/2020 17:51:02'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 11/30/2020 17:51:02'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/30/2020 17:51:02'!
ERROR!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/30/2020 17:51:02'!
ERROR!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'DS 11/30/2020 17:51:02'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'DS 11/30/2020 17:51:02'!
PASSED!

!testRun: #FacadeTusLibrosTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'DS 11/30/2020 17:51:02'!
PASSED!

!testRun: #FacadeTusLibrosTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 11/30/2020 17:51:02'!
PASSED!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/30/2020 17:51:04'!
ERROR!
!FacadeTusLibros methodsFor: 'cart actions' stamp: 'DS 11/30/2020 17:52:17' prior: 50885381!
listCartFor: aCartID

	^Dictionary new: (carts at: aCartID) items.! !

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'DS 11/30/2020 17:52:22'!
ERROR!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 11/30/2020 17:52:22'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/30/2020 17:52:22'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 11/30/2020 17:52:22'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/30/2020 17:52:22'!
ERROR!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/30/2020 17:52:22'!
ERROR!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'DS 11/30/2020 17:52:22'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'DS 11/30/2020 17:52:22'!
PASSED!

!testRun: #FacadeTusLibrosTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'DS 11/30/2020 17:52:22'!
PASSED!

!testRun: #FacadeTusLibrosTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 11/30/2020 17:52:22'!
PASSED!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/30/2020 17:52:24'!
ERROR!
!FacadeTusLibros methodsFor: 'cart actions' stamp: 'DS 11/30/2020 17:54:50' prior: 50885426!
listCartFor: aCartID

	^Bag new addAll: (carts at: aCartID) items.! !

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'DS 11/30/2020 17:54:57'!
FAILURE!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 11/30/2020 17:54:57'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/30/2020 17:54:57'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 11/30/2020 17:54:57'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/30/2020 17:54:57'!
FAILURE!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/30/2020 17:54:57'!
FAILURE!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'DS 11/30/2020 17:54:57'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'DS 11/30/2020 17:54:57'!
PASSED!

!testRun: #FacadeTusLibrosTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'DS 11/30/2020 17:54:57'!
PASSED!

!testRun: #FacadeTusLibrosTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 11/30/2020 17:54:57'!
PASSED!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/30/2020 17:54:59'!
FAILURE!
!FacadeTusLibros methodsFor: 'cart actions' stamp: 'FedericoSabatini 11/29/2020 16:44:54' prior: 50885471!
listCartFor: aCartID

	^(carts at: aCartID) items.! !
!Cart methodsFor: 'accesing' stamp: 'FedericoSabatini 11/29/2020 16:36:53' prior: 50885224!
items
	
	| ocurrences |
	
	ocurrences := Dictionary new.
	
	items do: [ :item | (ocurrences includesKey: item) 
		ifTrue: [ocurrences at: item put: (ocurrences at: item) + 1] 
		ifFalse: [ocurrences at: item put: 1]].
	
	^ocurrences.! !

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'DS 11/30/2020 17:56:05'!
PASSED!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 11/30/2020 17:56:05'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/30/2020 17:56:05'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 11/30/2020 17:56:05'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/30/2020 17:56:05'!
PASSED!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/30/2020 17:56:05'!
PASSED!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'DS 11/30/2020 17:56:05'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'DS 11/30/2020 17:56:05'!
PASSED!

!testRun: #FacadeTusLibrosTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'DS 11/30/2020 17:56:05'!
PASSED!

!testRun: #FacadeTusLibrosTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 11/30/2020 17:56:05'!
PASSED!
!FacadeTusLibrosTest methodsFor: 'nil' stamp: 'DS 11/30/2020 18:18:14'!
test11

	| authenticator tusLibros cartID |

	authenticator := Dictionary with: 1 -> 'pass' with: 2 -> 'pass'.
	tusLibros := FacadeTusLibros withAuthenticator: authenticator withCatalog: self defaultCatalog andExpiringTime: 0*minute.

	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.! !
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'DS 11/30/2020 18:21:35' prior: 50885568!
test11

	| authenticator tusLibros cartID |

	authenticator := Dictionary with: 1 -> 'pass' with: 2 -> 'pass'.
	tusLibros := FacadeTusLibros withAuthenticator: authenticator withCatalog: self defaultCatalog andExpiringTime: 0*minute.

	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.

	self should: [ tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemNotSellByTheStore ]
		raise: Error
		withMessageText: FacadeTusLibros cartTimeExpiredErrorDescription.! !

!testRun: #FacadeTusLibrosTest #test11 stamp: 'DS 11/30/2020 18:21:49'!
ERROR!
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'DS 11/30/2020 18:22:03' prior: 50885581!
test11

	| authenticator tusLibros cartID |

	authenticator := Dictionary with: 1 -> 'pass' with: 2 -> 'pass'.
	tusLibros := FacadeTusLibros withAuthenticator: authenticator withCatalog: testObjectsFactory defaultCatalog andExpiringTime: 0*minute.

	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.

	self should: [ tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemNotSellByTheStore ]
		raise: Error
		withMessageText: FacadeTusLibros cartTimeExpiredErrorDescription.! !

!testRun: #FacadeTusLibrosTest #test11 stamp: 'DS 11/30/2020 18:22:04'!
ERROR!
!FacadeTusLibros class methodsFor: 'instance creation' stamp: 'DS 11/30/2020 18:22:11'!
withAuthenticator: aDictionary withCatalog: aDictionary2 andExpiringTime: aSimpleMeasure 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithAuthenticator: aDictionary withCatalog: aDictionary2 andExpiringTime: aSimpleMeasure ! !
!FacadeTusLibros class methodsFor: 'instance creation' stamp: 'DS 11/30/2020 18:22:57' prior: 50885624!
withAuthenticator: anAuthenticator withCatalog: aCatalog andExpiringTime: anExpiringTime

	^self new initializeWithAuthenticator: anAuthenticator withCatalog: aCatalog andExpiringTime: anExpiringTime.! !

!testRun: #FacadeTusLibrosTest #test11 stamp: 'DS 11/30/2020 18:22:59'!
ERROR!

!classDefinition: #FacadeTusLibros category: 'TusLibros-Solucion' stamp: 'DS 11/30/2020 18:23:05'!
Object subclass: #FacadeTusLibros
	instanceVariableNames: 'authenticator carts currentID catalog salesBook expiringTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!
!FacadeTusLibros methodsFor: 'initialization' stamp: 'DS 11/30/2020 18:23:05'!
initializeWithAuthenticator: anAuthenticator withCatalog: aCatalog andExpiringTime: anExpiringTime 
	self shouldBeImplemented.
	authenticator := anAuthenticator.
	catalog := aCatalog.
	expiringTime := anExpiringTime.! !
!FacadeTusLibros methodsFor: 'initialization' stamp: 'DS 11/30/2020 18:23:16' prior: 50885658!
initializeWithAuthenticator: anAuthenticator withCatalog: aCatalog andExpiringTime: anExpiringTime 

	authenticator := anAuthenticator.
	catalog := aCatalog.
	expiringTime := anExpiringTime.! !

!testRun: #FacadeTusLibrosTest #test11 stamp: 'DS 11/30/2020 18:23:20'!
ERROR!
!FacadeTusLibros methodsFor: 'initialization' stamp: 'DS 11/30/2020 18:23:43' prior: 50885668!
initializeWithAuthenticator: anAuthenticator withCatalog: aCatalog andExpiringTime: anExpiringTime 

	authenticator := anAuthenticator.
	catalog := aCatalog.
	expiringTime := anExpiringTime.
	carts := Dictionary new.
	currentID := 0.! !

!testRun: #FacadeTusLibrosTest #test11 stamp: 'DS 11/30/2020 18:23:48'!
ERROR!

!testRun: #FacadeTusLibrosTest #test11 stamp: 'DS 11/30/2020 18:23:48'!
ERROR!
!FacadeTusLibros class methodsFor: 'error descriptions' stamp: 'DS 11/30/2020 18:24:02'!
cartTimeExpiredErrorDescription
	self shouldBeImplemented.! !
!FacadeTusLibros class methodsFor: 'error descriptions' stamp: 'DS 11/30/2020 18:24:49' prior: 50885696!
cartTimeExpiredErrorDescription

	^'Your cart has expired'.! !

!testRun: #FacadeTusLibrosTest #test11 stamp: 'DS 11/30/2020 18:24:54'!
FAILURE!

Time now!

Time now + 30*minute!

30*minute!

30*minute!

Timespan new!

Timespan now!

Timespan current!

self + 30*minute!

self + 30*minute!

Timespan starting: DateAndTime now duration: 30*minute!

t := Timespan starting: DateAndTime now duration: 30*minute!

t end!

FixedGregorianDate today!

GregorianDateTime now!

TimeOfDay now !

t := TimeOfDay now.!

t next: 30*minute.!

t next: 0*minute.!

t next: 1*minute < TimeOfDay now.!

t next: (1*minute) < TimeOfDay now.!

GregorianDateTime now!

t := GregorianDateTime now.!

t next: 1*minute!

(t next: 1*minute) < GregorianDateTime now!

(t next: 0*minute) < GregorianDateTime now!

t := GregorianDateTime now. November .!

t := GregorianDateTime now.!

(t next: 0*minute) < GregorianDateTime now!
!FacadeTusLibros methodsFor: 'api rest' stamp: 'DS 11/30/2020 18:44:09' prior: 50884617!
createCartForUser: anID withPassword: aPassword 

	| cart expirationTime |

	self assertAuthenticate: anID withPassword: aPassword.
	
	currentID := currentID + 1.
	cart := Cart acceptingItemsOf: catalog.
	expirationTime := GregorianDateTime now next: expiringTime.
	carts at: currentID put: {cart. expirationTime}.

	^currentID.! !

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'DS 11/30/2020 18:44:13'!
ERROR!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 11/30/2020 18:44:13'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/30/2020 18:44:13'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 11/30/2020 18:44:13'!
ERROR!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/30/2020 18:44:13'!
ERROR!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/30/2020 18:44:13'!
ERROR!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'DS 11/30/2020 18:44:13'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'DS 11/30/2020 18:44:13'!
ERROR!

!testRun: #FacadeTusLibrosTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'DS 11/30/2020 18:44:13'!
ERROR!

!testRun: #FacadeTusLibrosTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 11/30/2020 18:44:13'!
PASSED!

!testRun: #FacadeTusLibrosTest #test11 stamp: 'DS 11/30/2020 18:44:13'!
FAILURE!

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'DS 11/30/2020 18:44:18'!
ERROR!

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'DS 11/30/2020 18:44:34'!
ERROR!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 11/30/2020 18:44:34'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/30/2020 18:44:34'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 11/30/2020 18:44:34'!
ERROR!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/30/2020 18:44:34'!
ERROR!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/30/2020 18:44:34'!
ERROR!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'DS 11/30/2020 18:44:34'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'DS 11/30/2020 18:44:34'!
ERROR!

!testRun: #FacadeTusLibrosTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'DS 11/30/2020 18:44:34'!
ERROR!

!testRun: #FacadeTusLibrosTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 11/30/2020 18:44:34'!
PASSED!

!testRun: #FacadeTusLibrosTest #test11 stamp: 'DS 11/30/2020 18:44:34'!
FAILURE!

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'DS 11/30/2020 18:44:36'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'tusLibros' stamp: 'DS 11/30/2020 18:45:42' prior: 50883680!
tusLibros

	| authenticator |

	authenticator := Dictionary with: 1 -> 'pass' with: 2 -> 'pass'.

	^FacadeTusLibros withAuthenticator: authenticator withCatalog: self defaultCatalog andExpiringTime: 0*minute.! !

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'DS 11/30/2020 18:45:47'!
ERROR!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 11/30/2020 18:45:47'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/30/2020 18:45:47'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 11/30/2020 18:45:47'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/30/2020 18:45:47'!
ERROR!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/30/2020 18:45:47'!
ERROR!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'DS 11/30/2020 18:45:47'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'DS 11/30/2020 18:45:47'!
ERROR!

!testRun: #FacadeTusLibrosTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'DS 11/30/2020 18:45:47'!
ERROR!

!testRun: #FacadeTusLibrosTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 11/30/2020 18:45:47'!
ERROR!

!testRun: #FacadeTusLibrosTest #test11 stamp: 'DS 11/30/2020 18:45:47'!
FAILURE!
!FacadeTusLibros methodsFor: 'assertions' stamp: 'DS 11/30/2020 18:47:15' prior: 50883525!
assertUnkownCartID: aCartID

	^carts at: aCartID ifAbsent: [self signalUnknownCartID ].! !
!FacadeTusLibros methodsFor: 'assertions' stamp: 'DS 11/30/2020 18:48:11' prior: 50885877!
assertUnkownCartID: aCartID

	^(carts at: aCartID ifAbsent: [ self signalUnknownCartID ]) first.! !
!FacadeTusLibros methodsFor: 'assertions' stamp: 'DS 11/30/2020 18:48:27'!
cartWith: aCartID

	^(carts at: aCartID ifAbsent: [ self signalUnknownCartID ]) first.! !
!FacadeTusLibros methodsFor: 'api rest' stamp: 'DS 11/30/2020 18:48:45' prior: 50883550!
addToCart: aCartID aQuantity: aQuantity of: anItem
	
	| aCart |

	"self assertUnkownCartID: aCartID.	"

	aCart := self cartWith: aCartID.
	aCart add: aQuantity of: anItem.
	
	! !
!FacadeTusLibros methodsFor: 'api rest' stamp: 'DS 11/30/2020 18:49:05' prior: 50884801!
checkOutCart: aCartID withCCN: anCCN withCCED: anCCED andCCO: anCCO throught: aMerchantProccesor on: aDate

	| creditCard cart cashier |
	
	"self assertUnkownCartID: aCartID."
	cart := self cartWith: aCartID.

	creditCard := CreditCard withNumber: anCCN withOwner: anCCO expiringOn: anCCED.
	cashier := Cashier toCheckout: cart charging: creditCard throught: aMerchantProccesor on: aDate registeringOn: salesBook.

	^cashier checkOut.! !
!FacadeTusLibros methodsFor: 'api rest' stamp: 'DS 11/30/2020 18:49:54' prior: 50885517!
listCartFor: aCartID

	^(carts at: aCartID) first items.! !

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'DS 11/30/2020 18:49:56'!
PASSED!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 11/30/2020 18:49:56'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/30/2020 18:49:56'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 11/30/2020 18:49:56'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/30/2020 18:49:56'!
PASSED!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/30/2020 18:49:56'!
PASSED!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'DS 11/30/2020 18:49:56'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'DS 11/30/2020 18:49:56'!
ERROR!

!testRun: #FacadeTusLibrosTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'DS 11/30/2020 18:49:56'!
ERROR!

!testRun: #FacadeTusLibrosTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 11/30/2020 18:49:56'!
ERROR!

!testRun: #FacadeTusLibrosTest #test11 stamp: 'DS 11/30/2020 18:49:56'!
FAILURE!

!testRun: #FacadeTusLibrosTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'DS 11/30/2020 18:49:57'!
ERROR!
!FacadeTusLibros methodsFor: 'initialization' stamp: 'DS 11/30/2020 18:50:38' prior: 50885680!
initializeWithAuthenticator: anAuthenticator withCatalog: aCatalog andExpiringTime: anExpiringTime 

	authenticator := anAuthenticator.
	catalog := aCatalog.
	expiringTime := anExpiringTime.
	carts := Dictionary new.
	currentID := 0.
	salesBook := OrderedCollection new.! !

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'DS 11/30/2020 18:50:41'!
PASSED!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 11/30/2020 18:50:41'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/30/2020 18:50:41'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 11/30/2020 18:50:41'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/30/2020 18:50:41'!
PASSED!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/30/2020 18:50:41'!
PASSED!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'DS 11/30/2020 18:50:41'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'DS 11/30/2020 18:50:41'!
PASSED!

!testRun: #FacadeTusLibrosTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'DS 11/30/2020 18:50:41'!
PASSED!

!testRun: #FacadeTusLibrosTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 11/30/2020 18:50:41'!
PASSED!

!testRun: #FacadeTusLibrosTest #test11 stamp: 'DS 11/30/2020 18:50:41'!
FAILURE!

!testRun: #FacadeTusLibrosTest #test11 stamp: 'DS 11/30/2020 18:50:41'!
FAILURE!
!FacadeTusLibros methodsFor: 'assertions' stamp: 'DS 11/30/2020 18:51:35' prior: 50885889!
cartWith: aCartID

	^(carts at: aCartID ifAbsent: [ self signalUnknownCartID ]).! !
!FacadeTusLibros methodsFor: 'api rest' stamp: 'DS 11/30/2020 18:51:43' prior: 50885895!
addToCart: aCartID aQuantity: aQuantity of: anItem
	
	| aCart |

	"self assertUnkownCartID: aCartID.	"

	aCart := self cartWith: aCartID first.
	aCart add: aQuantity of: anItem.
	
	! !
!FacadeTusLibros methodsFor: 'api rest' stamp: 'DS 11/30/2020 18:51:47' prior: 50885904!
checkOutCart: aCartID withCCN: anCCN withCCED: anCCED andCCO: anCCO throught: aMerchantProccesor on: aDate

	| creditCard cart cashier |
	
	"self assertUnkownCartID: aCartID."
	cart := self cartWith: aCartID first.

	creditCard := CreditCard withNumber: anCCN withOwner: anCCO expiringOn: anCCED.
	cashier := Cashier toCheckout: cart charging: creditCard throught: aMerchantProccesor on: aDate registeringOn: salesBook.

	^cashier checkOut.! !
!FacadeTusLibros methodsFor: 'api rest' stamp: 'DS 11/30/2020 18:52:36' prior: 50886027!
addToCart: aCartID aQuantity: aQuantity of: anItem
	
	| aCart |

	"self assertUnkownCartID: aCartID.	"

	aCart := self cartWith: aCartID.
	
	(aCart second < GregorianDateTime now) ifTrue: [ self error: self class cartTimeExpiredErrorDescription ].
	
	aCart add: aQuantity of: anItem.
	
	! !
!FacadeTusLibros methodsFor: 'api rest' stamp: 'DS 11/30/2020 18:52:38' prior: 50886053!
addToCart: aCartID aQuantity: aQuantity of: anItem
	
	| aCart |

	"self assertUnkownCartID: aCartID.	"

	aCart := self cartWith: aCartID.
	
	(aCart second < GregorianDateTime now) ifTrue: [ self error: self class cartTimeExpiredErrorDescription ].
	
	aCart first add: aQuantity of: anItem.
	
	! !

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'DS 11/30/2020 18:52:41'!
PASSED!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 11/30/2020 18:52:41'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/30/2020 18:52:41'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 11/30/2020 18:52:41'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/30/2020 18:52:41'!
ERROR!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/30/2020 18:52:41'!
ERROR!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'DS 11/30/2020 18:52:41'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'DS 11/30/2020 18:52:41'!
ERROR!

!testRun: #FacadeTusLibrosTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'DS 11/30/2020 18:52:41'!
FAILURE!

!testRun: #FacadeTusLibrosTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 11/30/2020 18:52:41'!
FAILURE!

!testRun: #FacadeTusLibrosTest #test11 stamp: 'DS 11/30/2020 18:52:41'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/30/2020 18:52:45'!
PASSED!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/30/2020 18:52:46'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'tusLibros' stamp: 'DS 11/30/2020 18:52:58' prior: 50885829!
tusLibros

	| authenticator |

	authenticator := Dictionary with: 1 -> 'pass' with: 2 -> 'pass'.

	^FacadeTusLibros withAuthenticator: authenticator withCatalog: self defaultCatalog andExpiringTime: 30*minute.! !

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'DS 11/30/2020 18:53:00'!
PASSED!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 11/30/2020 18:53:00'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/30/2020 18:53:00'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 11/30/2020 18:53:00'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/30/2020 18:53:00'!
PASSED!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/30/2020 18:53:00'!
PASSED!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'DS 11/30/2020 18:53:00'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'DS 11/30/2020 18:53:00'!
ERROR!

!testRun: #FacadeTusLibrosTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'DS 11/30/2020 18:53:00'!
FAILURE!

!testRun: #FacadeTusLibrosTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 11/30/2020 18:53:00'!
FAILURE!

!testRun: #FacadeTusLibrosTest #test11 stamp: 'DS 11/30/2020 18:53:00'!
FAILURE!

!testRun: #FacadeTusLibrosTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'DS 11/30/2020 18:53:02'!
ERROR!
!FacadeTusLibros methodsFor: 'api rest' stamp: 'DS 11/30/2020 18:53:12' prior: 50886036!
checkOutCart: aCartID withCCN: anCCN withCCED: anCCED andCCO: anCCO throught: aMerchantProccesor on: aDate

	| creditCard cart cashier |
	
	"self assertUnkownCartID: aCartID."
	cart := (self cartWith: aCartID )first.

	creditCard := CreditCard withNumber: anCCN withOwner: anCCO expiringOn: anCCED.
	cashier := Cashier toCheckout: cart charging: creditCard throught: aMerchantProccesor on: aDate registeringOn: salesBook.

	^cashier checkOut.! !

!testRun: #FacadeTusLibrosTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'DS 11/30/2020 18:53:14'!
PASSED!

!testRun: #FacadeTusLibrosTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'DS 11/30/2020 18:53:15'!
PASSED!

!testRun: #FacadeTusLibrosTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 11/30/2020 18:53:16'!
PASSED!

!testRun: #FacadeTusLibrosTest #test11 stamp: 'DS 11/30/2020 18:53:16'!
PASSED!

----SNAPSHOT----(30 November 2020 18:53:29) CuisUniversity-4384.image priorSource: 17712624!
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'DS 11/30/2020 18:54:19'!
test12

	| authenticator tusLibros cartID |

	authenticator := Dictionary with: 1 -> 'pass' with: 2 -> 'pass'.
	tusLibros := FacadeTusLibros withAuthenticator: authenticator withCatalog: testObjectsFactory defaultCatalog andExpiringTime: 0*minute.

	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.

	self should: [ tusLibros listCartFor: cartID]
		raise: Error
		withMessageText: FacadeTusLibros cartTimeExpiredErrorDescription.! !
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'DS 11/30/2020 18:54:20' prior: 50886208!
test12

	| authenticator tusLibros cartID |

	authenticator := Dictionary with: 1 -> 'pass' with: 2 -> 'pass'.
	tusLibros := FacadeTusLibros withAuthenticator: authenticator withCatalog: testObjectsFactory defaultCatalog andExpiringTime: 0*minute.

	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.

	self should: [ tusLibros listCartFor: cartID ]
		raise: Error
		withMessageText: FacadeTusLibros cartTimeExpiredErrorDescription.! !

!testRun: #FacadeTusLibrosTest #test12 stamp: 'DS 11/30/2020 18:54:21'!
FAILURE!
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'DS 11/30/2020 18:57:55'!
test11CannotListAnUnknownCartID

	| tusLibros |

	tusLibros := testObjectsFactory tusLibros.
	self should: [ tusLibros listCartFor: 1 ]
		raise: Error
		withMessageText: FacadeTusLibros unknownCartIDErrorDescription .! !

!testRun: #FacadeTusLibrosTest #test11CannotListAnUnknownCartID stamp: 'DS 11/30/2020 18:57:56'!
FAILURE!
!FacadeTusLibros methodsFor: 'api rest' stamp: 'DS 11/30/2020 18:58:25' prior: 50885921!
listCartFor: aCartID

	^self cartWith: aCartID first items.! !

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'DS 11/30/2020 18:58:27'!
ERROR!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 11/30/2020 18:58:27'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/30/2020 18:58:27'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 11/30/2020 18:58:27'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/30/2020 18:58:27'!
ERROR!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/30/2020 18:58:27'!
ERROR!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'DS 11/30/2020 18:58:27'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'DS 11/30/2020 18:58:27'!
PASSED!

!testRun: #FacadeTusLibrosTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'DS 11/30/2020 18:58:27'!
PASSED!

!testRun: #FacadeTusLibrosTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 11/30/2020 18:58:27'!
PASSED!

!testRun: #FacadeTusLibrosTest #test11 stamp: 'DS 11/30/2020 18:58:27'!
FAILURE!

!testRun: #FacadeTusLibrosTest #test11CannotListAnUnknownCartID stamp: 'DS 11/30/2020 18:58:27'!
FAILURE!

!testRun: #FacadeTusLibrosTest #test12 stamp: 'DS 11/30/2020 18:58:27'!
FAILURE!
!FacadeTusLibros methodsFor: 'api rest' stamp: 'DS 11/30/2020 18:58:42' prior: 50886260!
listCartFor: aCartID

	^(self cartWith: aCartID) first items.! !

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'DS 11/30/2020 18:58:44'!
PASSED!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 11/30/2020 18:58:44'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/30/2020 18:58:44'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 11/30/2020 18:58:44'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/30/2020 18:58:44'!
PASSED!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/30/2020 18:58:44'!
PASSED!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'DS 11/30/2020 18:58:44'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'DS 11/30/2020 18:58:44'!
PASSED!

!testRun: #FacadeTusLibrosTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'DS 11/30/2020 18:58:44'!
PASSED!

!testRun: #FacadeTusLibrosTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 11/30/2020 18:58:44'!
PASSED!

!testRun: #FacadeTusLibrosTest #test11 stamp: 'DS 11/30/2020 18:58:44'!
PASSED!

!testRun: #FacadeTusLibrosTest #test11CannotListAnUnknownCartID stamp: 'DS 11/30/2020 18:58:44'!
PASSED!

!testRun: #FacadeTusLibrosTest #test12 stamp: 'DS 11/30/2020 18:58:44'!
FAILURE!

!testRun: #FacadeTusLibrosTest #test12 stamp: 'DS 11/30/2020 18:58:44'!
FAILURE!
!FacadeTusLibros methodsFor: 'api rest' stamp: 'DS 11/30/2020 18:59:47' prior: 50886309!
listCartFor: aCartID

	| cart |
	cart := self cartWith: aCartID.
	
	(cart second < GregorianDateTime now) ifTrue: [ self error: self class cartTimeExpiredErrorDescription ].

	^cart first items.! !

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'DS 11/30/2020 18:59:50'!
PASSED!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 11/30/2020 18:59:50'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/30/2020 18:59:50'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 11/30/2020 18:59:50'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/30/2020 18:59:50'!
PASSED!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/30/2020 18:59:50'!
PASSED!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'DS 11/30/2020 18:59:50'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'DS 11/30/2020 18:59:50'!
PASSED!

!testRun: #FacadeTusLibrosTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'DS 11/30/2020 18:59:50'!
PASSED!

!testRun: #FacadeTusLibrosTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 11/30/2020 18:59:50'!
PASSED!

!testRun: #FacadeTusLibrosTest #test11 stamp: 'DS 11/30/2020 18:59:50'!
PASSED!

!testRun: #FacadeTusLibrosTest #test11CannotListAnUnknownCartID stamp: 'DS 11/30/2020 18:59:50'!
PASSED!

!testRun: #FacadeTusLibrosTest #test12 stamp: 'DS 11/30/2020 18:59:50'!
FAILURE!

!testRun: #FacadeTusLibrosTest #test12 stamp: 'DS 11/30/2020 18:59:50'!
PASSED!

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'DS 11/30/2020 18:59:51'!
PASSED!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 11/30/2020 18:59:51'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/30/2020 18:59:51'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 11/30/2020 18:59:51'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/30/2020 18:59:51'!
PASSED!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/30/2020 18:59:51'!
PASSED!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'DS 11/30/2020 18:59:51'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'DS 11/30/2020 18:59:51'!
PASSED!

!testRun: #FacadeTusLibrosTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'DS 11/30/2020 18:59:51'!
PASSED!

!testRun: #FacadeTusLibrosTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 11/30/2020 18:59:51'!
PASSED!

!testRun: #FacadeTusLibrosTest #test11 stamp: 'DS 11/30/2020 18:59:51'!
FAILURE!

!testRun: #FacadeTusLibrosTest #test11CannotListAnUnknownCartID stamp: 'DS 11/30/2020 18:59:51'!
PASSED!

!testRun: #FacadeTusLibrosTest #test12 stamp: 'DS 11/30/2020 18:59:51'!
FAILURE!

!testRun: #FacadeTusLibrosTest #test11 stamp: 'DS 11/30/2020 18:59:53'!
FAILURE!
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'DS 11/30/2020 19:00:17' prior: 50885603!
test11

	| authenticator tusLibros cartID |

	authenticator := Dictionary with: 1 -> 'pass' with: 2 -> 'pass'.
	tusLibros := FacadeTusLibros withAuthenticator: authenticator withCatalog: testObjectsFactory defaultCatalog andExpiringTime: 0*minute.

	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.

	self should: [ tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore ]
		raise: Error
		withMessageText: FacadeTusLibros cartTimeExpiredErrorDescription.! !

!testRun: #FacadeTusLibrosTest #test11 stamp: 'DS 11/30/2020 19:00:19'!
FAILURE!
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'DS 11/30/2020 19:00:45'!
test13

	| authenticator tusLibros cartID |

	authenticator := Dictionary with: 1 -> 'pass' with: 2 -> 'pass'.
	tusLibros := FacadeTusLibros withAuthenticator: authenticator withCatalog: testObjectsFactory defaultCatalog andExpiringTime: 0*minute.

	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.

	self should: [ tusLibros listCartFor: cartID ]
		raise: Error
		withMessageText: FacadeTusLibros cartTimeExpiredErrorDescription.! !

!methodRemoval: FacadeTusLibrosTest #test12 stamp: 'DS 11/30/2020 19:00:45'!
test12

	| authenticator tusLibros cartID |

	authenticator := Dictionary with: 1 -> 'pass' with: 2 -> 'pass'.
	tusLibros := FacadeTusLibros withAuthenticator: authenticator withCatalog: testObjectsFactory defaultCatalog andExpiringTime: 0*minute.

	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.

	self should: [ tusLibros listCartFor: cartID ]
		raise: Error
		withMessageText: FacadeTusLibros cartTimeExpiredErrorDescription.!
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'DS 11/30/2020 19:00:48'!
test12

	| authenticator tusLibros cartID |

	authenticator := Dictionary with: 1 -> 'pass' with: 2 -> 'pass'.
	tusLibros := FacadeTusLibros withAuthenticator: authenticator withCatalog: testObjectsFactory defaultCatalog andExpiringTime: 0*minute.

	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.

	self should: [ tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore ]
		raise: Error
		withMessageText: FacadeTusLibros cartTimeExpiredErrorDescription.! !

!methodRemoval: FacadeTusLibrosTest #test11 stamp: 'DS 11/30/2020 19:00:48'!
test11

	| authenticator tusLibros cartID |

	authenticator := Dictionary with: 1 -> 'pass' with: 2 -> 'pass'.
	tusLibros := FacadeTusLibros withAuthenticator: authenticator withCatalog: testObjectsFactory defaultCatalog andExpiringTime: 0*minute.

	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.

	self should: [ tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore ]
		raise: Error
		withMessageText: FacadeTusLibros cartTimeExpiredErrorDescription.!

!testRun: #FacadeTusLibrosTest #test12 stamp: 'DS 11/30/2020 19:00:52'!
PASSED!

!testRun: #FacadeTusLibrosTest #test13 stamp: 'DS 11/30/2020 19:00:54'!
FAILURE!

!testRun: #FacadeTusLibrosTest #test13 stamp: 'DS 11/30/2020 19:00:54'!
FAILURE!

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'DS 11/30/2020 19:01:20'!
PASSED!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 11/30/2020 19:01:20'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/30/2020 19:01:20'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 11/30/2020 19:01:20'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/30/2020 19:01:20'!
PASSED!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/30/2020 19:01:20'!
PASSED!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'DS 11/30/2020 19:01:20'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'DS 11/30/2020 19:01:20'!
PASSED!

!testRun: #FacadeTusLibrosTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'DS 11/30/2020 19:01:20'!
PASSED!

!testRun: #FacadeTusLibrosTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 11/30/2020 19:01:20'!
PASSED!

!testRun: #FacadeTusLibrosTest #test11CannotListAnUnknownCartID stamp: 'DS 11/30/2020 19:01:20'!
PASSED!

!testRun: #FacadeTusLibrosTest #test12 stamp: 'DS 11/30/2020 19:01:20'!
FAILURE!

!testRun: #FacadeTusLibrosTest #test13 stamp: 'DS 11/30/2020 19:01:20'!
FAILURE!

!testRun: #FacadeTusLibrosTest #test12 stamp: 'DS 11/30/2020 19:01:25'!
PASSED!

!testRun: #FacadeTusLibrosTest #test11CannotListAnUnknownCartID stamp: 'DS 11/30/2020 19:01:35'!
PASSED!

!testRun: #FacadeTusLibrosTest #test12 stamp: 'DS 11/30/2020 19:01:35'!
PASSED!

!testRun: #FacadeTusLibrosTest #test13 stamp: 'DS 11/30/2020 19:01:35'!
FAILURE!

!testRun: #FacadeTusLibrosTest #test13 stamp: 'DS 11/30/2020 19:01:35'!
FAILURE!

!testRun: #FacadeTusLibrosTest #test12 stamp: 'DS 11/30/2020 19:01:39'!
FAILURE!

!testRun: #FacadeTusLibrosTest #test12 stamp: 'DS 11/30/2020 19:01:39'!
FAILURE!

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'DS 11/30/2020 19:01:42'!
PASSED!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 11/30/2020 19:01:42'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/30/2020 19:01:42'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 11/30/2020 19:01:42'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/30/2020 19:01:42'!
PASSED!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/30/2020 19:01:42'!
PASSED!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'DS 11/30/2020 19:01:42'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'DS 11/30/2020 19:01:42'!
PASSED!

!testRun: #FacadeTusLibrosTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'DS 11/30/2020 19:01:42'!
PASSED!

!testRun: #FacadeTusLibrosTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 11/30/2020 19:01:42'!
PASSED!

!testRun: #FacadeTusLibrosTest #test11CannotListAnUnknownCartID stamp: 'DS 11/30/2020 19:01:42'!
PASSED!

!testRun: #FacadeTusLibrosTest #test12 stamp: 'DS 11/30/2020 19:01:42'!
FAILURE!

!testRun: #FacadeTusLibrosTest #test13 stamp: 'DS 11/30/2020 19:01:42'!
FAILURE!

!testRun: #FacadeTusLibrosTest #test12 stamp: 'DS 11/30/2020 19:01:44'!
PASSED!

!testRun: #FacadeTusLibrosTest #test13 stamp: 'DS 11/30/2020 19:01:47'!
PASSED!

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'DS 11/30/2020 19:02:00'!
PASSED!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 11/30/2020 19:02:00'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/30/2020 19:02:00'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 11/30/2020 19:02:00'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/30/2020 19:02:00'!
PASSED!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/30/2020 19:02:00'!
PASSED!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'DS 11/30/2020 19:02:00'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'DS 11/30/2020 19:02:00'!
PASSED!

!testRun: #FacadeTusLibrosTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'DS 11/30/2020 19:02:00'!
PASSED!

!testRun: #FacadeTusLibrosTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 11/30/2020 19:02:00'!
PASSED!

!testRun: #FacadeTusLibrosTest #test11CannotListAnUnknownCartID stamp: 'DS 11/30/2020 19:02:00'!
PASSED!

!testRun: #FacadeTusLibrosTest #test12 stamp: 'DS 11/30/2020 19:02:00'!
FAILURE!

!testRun: #FacadeTusLibrosTest #test13 stamp: 'DS 11/30/2020 19:02:00'!
FAILURE!

!testRun: #FacadeTusLibrosTest #test12 stamp: 'DS 11/30/2020 19:02:01'!
PASSED!

!testRun: #FacadeTusLibrosTest #test13 stamp: 'DS 11/30/2020 19:02:02'!
FAILURE!

!testRun: #FacadeTusLibrosTest #test13 stamp: 'DS 11/30/2020 19:02:11'!
FAILURE!

!testRun: #FacadeTusLibrosTest #test13 stamp: 'DS 11/30/2020 19:02:30'!
PASSED!

!testRun: #FacadeTusLibrosTest #test13 stamp: 'DS 11/30/2020 19:02:42'!
PASSED!

!testRun: #FacadeTusLibrosTest #test12 stamp: 'DS 11/30/2020 19:02:45'!
FAILURE!

!testRun: #FacadeTusLibrosTest #test12 stamp: 'DS 11/30/2020 19:02:45'!
FAILURE!

----SNAPSHOT----(30 November 2020 19:03:21) CuisUniversity-4384.image priorSource: 17745736!

----QUIT----(30 November 2020 19:03:27) CuisUniversity-4384.image priorSource: 17762744!

----STARTUP---- (30 November 2020 19:03:58) as /mnt/sdb5/Ingenieria1/linux64/CuisUniversity-4384.image!


----End fileIn of /mnt/sdb5/Ingenieria1/linux64/TusLibros-Solucion.st----!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'DS 11/30/2020 19:04:31'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'DS 11/30/2020 19:04:31'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'DS 11/30/2020 19:04:31'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'DS 11/30/2020 19:04:31'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'DS 11/30/2020 19:04:31'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'DS 11/30/2020 19:04:31'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'DS 11/30/2020 19:04:31'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'DS 11/30/2020 19:04:31'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'DS 11/30/2020 19:04:31'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'DS 11/30/2020 19:04:31'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'DS 11/30/2020 19:04:31'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'DS 11/30/2020 19:04:31'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'DS 11/30/2020 19:04:31'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'DS 11/30/2020 19:04:31'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberShouldHave16Characters stamp: 'DS 11/30/2020 19:04:31'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardOwnerCanNotBeEmpty stamp: 'DS 11/30/2020 19:04:31'!
PASSED!

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'DS 11/30/2020 19:04:31'!
PASSED!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 11/30/2020 19:04:31'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/30/2020 19:04:31'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 11/30/2020 19:04:31'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/30/2020 19:04:31'!
PASSED!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/30/2020 19:04:31'!
PASSED!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'DS 11/30/2020 19:04:31'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'DS 11/30/2020 19:04:31'!
PASSED!

!testRun: #FacadeTusLibrosTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'DS 11/30/2020 19:04:31'!
PASSED!

!testRun: #FacadeTusLibrosTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 11/30/2020 19:04:31'!
PASSED!

!testRun: #FacadeTusLibrosTest #test11CannotListAnUnknownCartID stamp: 'DS 11/30/2020 19:04:31'!
PASSED!

!testRun: #FacadeTusLibrosTest #test12 stamp: 'DS 11/30/2020 19:04:31'!
FAILURE!

!testRun: #FacadeTusLibrosTest #test13 stamp: 'DS 11/30/2020 19:04:31'!
FAILURE!

!testRun: #FacadeTusLibrosTest #test12 stamp: 'DS 11/30/2020 19:04:32'!
FAILURE!

!testRun: #FacadeTusLibrosTest #test13 stamp: 'DS 11/30/2020 19:04:35'!
FAILURE!

!testRun: #FacadeTusLibrosTest #test13 stamp: 'DS 11/30/2020 19:04:40'!
FAILURE!

!testRun: #FacadeTusLibrosTest #test13 stamp: 'DS 11/30/2020 19:04:40'!
PASSED!

!testRun: #FacadeTusLibrosTest #test13 stamp: 'DS 11/30/2020 19:04:43'!
FAILURE!

!testRun: #FacadeTusLibrosTest #test13 stamp: 'DS 11/30/2020 19:04:43'!
FAILURE!

!testRun: #FacadeTusLibrosTest #test12 stamp: 'DS 11/30/2020 19:04:46'!
FAILURE!

!testRun: #FacadeTusLibrosTest #test12 stamp: 'DS 11/30/2020 19:04:46'!
PASSED!

!testRun: #FacadeTusLibrosTest #test12 stamp: 'DS 11/30/2020 19:04:47'!
PASSED!

!testRun: #FacadeTusLibrosTest #test12 stamp: 'DS 11/30/2020 19:04:50'!
FAILURE!

!testRun: #FacadeTusLibrosTest #test12 stamp: 'DS 11/30/2020 19:04:50'!
FAILURE!

!testRun: #FacadeTusLibrosTest #test12 stamp: 'DS 11/30/2020 19:04:55'!
PASSED!

!testRun: #FacadeTusLibrosTest #test12 stamp: 'DS 11/30/2020 19:05:12'!
FAILURE!

!testRun: #FacadeTusLibrosTest #test12 stamp: 'DS 11/30/2020 19:05:12'!
FAILURE!

!testRun: #FacadeTusLibrosTest #test12 stamp: 'DS 11/30/2020 19:05:16'!
FAILURE!

!testRun: #FacadeTusLibrosTest #test12 stamp: 'DS 11/30/2020 19:05:16'!
PASSED!

!testRun: #FacadeTusLibrosTest #test12 stamp: 'DS 11/30/2020 19:05:18'!
FAILURE!

!testRun: #FacadeTusLibrosTest #test12 stamp: 'DS 11/30/2020 19:05:18'!
FAILURE!

!testRun: #FacadeTusLibrosTest #test12 stamp: 'DS 11/30/2020 19:05:21'!
FAILURE!

!testRun: #FacadeTusLibrosTest #test12 stamp: 'DS 11/30/2020 19:05:23'!
PASSED!

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'DS 11/30/2020 19:05:23'!
PASSED!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 11/30/2020 19:05:23'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/30/2020 19:05:23'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 11/30/2020 19:05:23'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/30/2020 19:05:23'!
PASSED!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/30/2020 19:05:23'!
PASSED!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'DS 11/30/2020 19:05:23'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'DS 11/30/2020 19:05:23'!
PASSED!

!testRun: #FacadeTusLibrosTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'DS 11/30/2020 19:05:23'!
PASSED!

!testRun: #FacadeTusLibrosTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 11/30/2020 19:05:23'!
PASSED!

!testRun: #FacadeTusLibrosTest #test11CannotListAnUnknownCartID stamp: 'DS 11/30/2020 19:05:23'!
PASSED!

!testRun: #FacadeTusLibrosTest #test12 stamp: 'DS 11/30/2020 19:05:23'!
PASSED!

!testRun: #FacadeTusLibrosTest #test13 stamp: 'DS 11/30/2020 19:05:23'!
FAILURE!

!testRun: #FacadeTusLibrosTest #test13 stamp: 'DS 11/30/2020 19:05:23'!
FAILURE!

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'DS 11/30/2020 19:05:26'!
PASSED!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 11/30/2020 19:05:26'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/30/2020 19:05:26'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 11/30/2020 19:05:26'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/30/2020 19:05:26'!
PASSED!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/30/2020 19:05:26'!
PASSED!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'DS 11/30/2020 19:05:26'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'DS 11/30/2020 19:05:26'!
PASSED!

!testRun: #FacadeTusLibrosTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'DS 11/30/2020 19:05:26'!
PASSED!

!testRun: #FacadeTusLibrosTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 11/30/2020 19:05:26'!
PASSED!

!testRun: #FacadeTusLibrosTest #test11CannotListAnUnknownCartID stamp: 'DS 11/30/2020 19:05:26'!
PASSED!

!testRun: #FacadeTusLibrosTest #test12 stamp: 'DS 11/30/2020 19:05:26'!
FAILURE!

!testRun: #FacadeTusLibrosTest #test13 stamp: 'DS 11/30/2020 19:05:26'!
FAILURE!

!testRun: #FacadeTusLibrosTest #test12 stamp: 'DS 11/30/2020 19:05:28'!
FAILURE!

!testRun: #FacadeTusLibrosTest #test12 stamp: 'DS 11/30/2020 19:05:30'!
FAILURE!

!testRun: #FacadeTusLibrosTest #test13 stamp: 'DS 11/30/2020 19:05:32'!
FAILURE!
!FacadeTusLibros methodsFor: 'api rest' stamp: 'DS 11/30/2020 19:06:38' prior: 50868626!
createCartForUser: anID withPassword: aPassword 

	| cart expirationTime |

	self assertAuthenticate: anID withPassword: aPassword.
	
	currentID := currentID + 1.
	cart := Cart acceptingItemsOf: catalog.
	expirationTime := GregorianDateTime now.
	carts at: currentID put: {cart. expirationTime}.

	^currentID.! !
!FacadeTusLibros methodsFor: 'api rest' stamp: 'DS 11/30/2020 19:06:50' prior: 50868597!
addToCart: aCartID aQuantity: aQuantity of: anItem
	
	| aCart |

	"self assertUnkownCartID: aCartID.	"

	aCart := self cartWith: aCartID.
	
	(aCart second next: expiringTime < GregorianDateTime now) ifTrue: [ self error: self class cartTimeExpiredErrorDescription ].
	
	aCart first add: aQuantity of: anItem.
	
	! !
!FacadeTusLibros methodsFor: 'api rest' stamp: 'DS 11/30/2020 19:06:55' prior: 50869111!
addToCart: aCartID aQuantity: aQuantity of: anItem
	
	| aCart |

	"self assertUnkownCartID: aCartID.	"

	aCart := self cartWith: aCartID.
	
	((aCart second next: expiringTime) < GregorianDateTime now) ifTrue: [ self error: self class cartTimeExpiredErrorDescription ].
	
	aCart first add: aQuantity of: anItem.
	
	! !

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'DS 11/30/2020 19:07:00'!
PASSED!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 11/30/2020 19:07:00'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/30/2020 19:07:00'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 11/30/2020 19:07:00'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/30/2020 19:07:00'!
PASSED!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/30/2020 19:07:00'!
PASSED!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'DS 11/30/2020 19:07:00'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'DS 11/30/2020 19:07:00'!
PASSED!

!testRun: #FacadeTusLibrosTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'DS 11/30/2020 19:07:00'!
PASSED!

!testRun: #FacadeTusLibrosTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 11/30/2020 19:07:00'!
PASSED!

!testRun: #FacadeTusLibrosTest #test11CannotListAnUnknownCartID stamp: 'DS 11/30/2020 19:07:00'!
PASSED!

!testRun: #FacadeTusLibrosTest #test12 stamp: 'DS 11/30/2020 19:07:00'!
FAILURE!

!testRun: #FacadeTusLibrosTest #test13 stamp: 'DS 11/30/2020 19:07:00'!
FAILURE!

!testRun: #FacadeTusLibrosTest #test12 stamp: 'DS 11/30/2020 19:07:01'!
PASSED!

!testRun: #FacadeTusLibrosTest #test13 stamp: 'DS 11/30/2020 19:07:03'!
PASSED!

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'DS 11/30/2020 19:07:07'!
PASSED!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 11/30/2020 19:07:07'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/30/2020 19:07:07'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 11/30/2020 19:07:07'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/30/2020 19:07:07'!
ERROR!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/30/2020 19:07:07'!
ERROR!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'DS 11/30/2020 19:07:07'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'DS 11/30/2020 19:07:07'!
PASSED!

!testRun: #FacadeTusLibrosTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'DS 11/30/2020 19:07:07'!
PASSED!

!testRun: #FacadeTusLibrosTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 11/30/2020 19:07:07'!
PASSED!

!testRun: #FacadeTusLibrosTest #test11CannotListAnUnknownCartID stamp: 'DS 11/30/2020 19:07:07'!
PASSED!

!testRun: #FacadeTusLibrosTest #test12 stamp: 'DS 11/30/2020 19:07:07'!
PASSED!

!testRun: #FacadeTusLibrosTest #test13 stamp: 'DS 11/30/2020 19:07:07'!
FAILURE!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/30/2020 19:07:08'!
ERROR!
!FacadeTusLibros methodsFor: 'api rest' stamp: 'DS 11/30/2020 18:52:38' prior: 50869124!
addToCart: aCartID aQuantity: aQuantity of: anItem
	
	| aCart |

	"self assertUnkownCartID: aCartID.	"

	aCart := self cartWith: aCartID.
	
	(aCart second < GregorianDateTime now) ifTrue: [ self error: self class cartTimeExpiredErrorDescription ].
	
	aCart first add: aQuantity of: anItem.
	
	! !
!FacadeTusLibros methodsFor: 'api rest' stamp: 'DS 11/30/2020 19:06:38' prior: 50869098!
createCartForUser: anID withPassword: aPassword 

	| cart expirationTime |

	self assertAuthenticate: anID withPassword: aPassword.
	
	currentID := currentID + 1.
	cart := Cart acceptingItemsOf: catalog.
	expirationTime := GregorianDateTime now.
	carts at: currentID put: {cart. expirationTime}.

	^currentID.! !
!FacadeTusLibros methodsFor: 'api rest' stamp: 'DS 11/30/2020 19:07:52' prior: 50869247!
createCartForUser: anID withPassword: aPassword 

	| cart expirationTime |

	self assertAuthenticate: anID withPassword: aPassword.
	
	currentID := currentID + 1.
	cart := Cart acceptingItemsOf: catalog.
	expirationTime := GregorianDateTime now next: expiringTime.
	carts at: currentID put: {cart. expirationTime}.

	^currentID.! !

-1*minute!

GregorianDateTime now!

t := GregorianDateTime now.!

t next: -1*minute!
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'DS 11/30/2020 19:09:04' prior: 50868260!
test12

	| authenticator tusLibros cartID |

	authenticator := Dictionary with: 1 -> 'pass' with: 2 -> 'pass'.
	tusLibros := FacadeTusLibros withAuthenticator: authenticator withCatalog: testObjectsFactory defaultCatalog andExpiringTime: -1*minute.

	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.

	self should: [ tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore ]
		raise: Error
		withMessageText: FacadeTusLibros cartTimeExpiredErrorDescription.! !
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'DS 11/30/2020 19:09:10' prior: 50868279!
test13

	| authenticator tusLibros cartID |

	authenticator := Dictionary with: 1 -> 'pass' with: 2 -> 'pass'.
	tusLibros := FacadeTusLibros withAuthenticator: authenticator withCatalog: testObjectsFactory defaultCatalog andExpiringTime: -1*minute.

	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.

	self should: [ tusLibros listCartFor: cartID ]
		raise: Error
		withMessageText: FacadeTusLibros cartTimeExpiredErrorDescription.! !

!testRun: #FacadeTusLibrosTest #test13 stamp: 'DS 11/30/2020 19:09:11'!
PASSED!

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'DS 11/30/2020 19:09:11'!
PASSED!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 11/30/2020 19:09:11'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/30/2020 19:09:11'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 11/30/2020 19:09:11'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/30/2020 19:09:11'!
PASSED!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/30/2020 19:09:11'!
PASSED!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'DS 11/30/2020 19:09:11'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'DS 11/30/2020 19:09:11'!
PASSED!

!testRun: #FacadeTusLibrosTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'DS 11/30/2020 19:09:11'!
PASSED!

!testRun: #FacadeTusLibrosTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 11/30/2020 19:09:11'!
PASSED!

!testRun: #FacadeTusLibrosTest #test11CannotListAnUnknownCartID stamp: 'DS 11/30/2020 19:09:11'!
PASSED!

!testRun: #FacadeTusLibrosTest #test12 stamp: 'DS 11/30/2020 19:09:11'!
PASSED!

!testRun: #FacadeTusLibrosTest #test13 stamp: 'DS 11/30/2020 19:09:11'!
PASSED!

----SNAPSHOT----(30 November 2020 19:09:17) CuisUniversity-4384.image priorSource: 17155564!
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'DS 11/30/2020 19:11:06'!
test14

	| authenticator tusLibros cartID |

	authenticator := Dictionary with: 1 -> 'pass' with: 2 -> 'pass'.
	tusLibros := FacadeTusLibros withAuthenticator: authenticator withCatalog: testObjectsFactory defaultCatalog andExpiringTime: -1*minute.

	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.

	self should: [ self tusLibros: tusLibros checkoutCartID: cartID ]
		raise: Error
		withMessageText: FacadeTusLibros cartTimeExpiredErrorDescription.! !

!testRun: #FacadeTusLibrosTest #test14 stamp: 'DS 11/30/2020 19:11:09'!
FAILURE!
!FacadeTusLibros methodsFor: 'api rest' stamp: 'DS 11/30/2020 19:11:47' prior: 50868609!
checkOutCart: aCartID withCCN: anCCN withCCED: anCCED andCCO: anCCO throught: aMerchantProccesor on: aDate

	| creditCard cart cashier |
	
	"self assertUnkownCartID: aCartID."
	cart := self cartWith: aCartID.
	
	(cart second < GregorianDateTime now) ifTrue: [ self error: self class cartTimeExpiredErrorDescription ].

	creditCard := CreditCard withNumber: anCCN withOwner: anCCO expiringOn: anCCED.
	cashier := Cashier toCheckout: cart first charging: creditCard throught: aMerchantProccesor on: aDate registeringOn: salesBook.

	^cashier checkOut.! !

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'DS 11/30/2020 19:11:49'!
PASSED!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 11/30/2020 19:11:49'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/30/2020 19:11:49'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 11/30/2020 19:11:49'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/30/2020 19:11:49'!
PASSED!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/30/2020 19:11:49'!
PASSED!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'DS 11/30/2020 19:11:49'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'DS 11/30/2020 19:11:49'!
PASSED!

!testRun: #FacadeTusLibrosTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'DS 11/30/2020 19:11:49'!
PASSED!

!testRun: #FacadeTusLibrosTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 11/30/2020 19:11:49'!
PASSED!

!testRun: #FacadeTusLibrosTest #test11CannotListAnUnknownCartID stamp: 'DS 11/30/2020 19:11:49'!
PASSED!

!testRun: #FacadeTusLibrosTest #test12 stamp: 'DS 11/30/2020 19:11:49'!
PASSED!

!testRun: #FacadeTusLibrosTest #test13 stamp: 'DS 11/30/2020 19:11:49'!
PASSED!

!testRun: #FacadeTusLibrosTest #test14 stamp: 'DS 11/30/2020 19:11:49'!
PASSED!
!FacadeTusLibros methodsFor: 'api rest' stamp: 'DS 11/30/2020 19:15:46' prior: 50869260!
createCartForUser: anID withPassword: aPassword 

	| cart expirationTime |

	self assertAuthenticate: anID withPassword: aPassword.
	
	currentID := currentID + 1.
	cart := Cart acceptingItemsOf: catalog.
	expirationTime := GregorianDateTime now.
	carts at: currentID put: {cart. expirationTime}.

	^currentID.! !
!FacadeTusLibros methodsFor: 'api rest' stamp: 'DS 11/30/2020 19:15:54' prior: 50869234!
addToCart: aCartID aQuantity: aQuantity of: anItem
	
	| aCart |

	"self assertUnkownCartID: aCartID.	"

	aCart := self cartWith: aCartID.
	
	(aCart second next: expiringTime < GregorianDateTime now) ifTrue: [ self error: self class cartTimeExpiredErrorDescription ].
	
	aCart first add: aQuantity of: anItem.
	
	! !
!FacadeTusLibros methodsFor: 'api rest' stamp: 'DS 11/30/2020 19:16:02' prior: 50869383!
checkOutCart: aCartID withCCN: anCCN withCCED: anCCED andCCO: anCCO throught: aMerchantProccesor on: aDate

	| creditCard cart cashier |
	
	"self assertUnkownCartID: aCartID."
	cart := self cartWith: aCartID.
	
	(cart second next: expiringTime < GregorianDateTime now) ifTrue: [ self error: self class cartTimeExpiredErrorDescription ].

	creditCard := CreditCard withNumber: anCCN withOwner: anCCO expiringOn: anCCED.
	cashier := Cashier toCheckout: cart first charging: creditCard throught: aMerchantProccesor on: aDate registeringOn: salesBook.

	^cashier checkOut.! !
!FacadeTusLibros methodsFor: 'api rest' stamp: 'DS 11/30/2020 19:16:10' prior: 50868639!
listCartFor: aCartID

	| cart |
	cart := self cartWith: aCartID.
	
	(cart second  next: expiringTime < GregorianDateTime now) ifTrue: [ self error: self class cartTimeExpiredErrorDescription ].

	^cart first items.! !
!FacadeTusLibros methodsFor: 'api rest' stamp: 'DS 11/30/2020 19:16:12' prior: 50869497!
listCartFor: aCartID

	| cart |
	cart := self cartWith: aCartID.
	
	(cart second next: expiringTime < GregorianDateTime now) ifTrue: [ self error: self class cartTimeExpiredErrorDescription ].

	^cart first items.! !

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'DS 11/30/2020 19:16:15'!
ERROR!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 11/30/2020 19:16:15'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/30/2020 19:16:15'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 11/30/2020 19:16:15'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/30/2020 19:16:15'!
ERROR!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/30/2020 19:16:15'!
ERROR!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'DS 11/30/2020 19:16:15'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'DS 11/30/2020 19:16:15'!
ERROR!

!testRun: #FacadeTusLibrosTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'DS 11/30/2020 19:16:15'!
ERROR!

!testRun: #FacadeTusLibrosTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 11/30/2020 19:16:15'!
PASSED!

!testRun: #FacadeTusLibrosTest #test11CannotListAnUnknownCartID stamp: 'DS 11/30/2020 19:16:15'!
PASSED!

!testRun: #FacadeTusLibrosTest #test12 stamp: 'DS 11/30/2020 19:16:15'!
FAILURE!

!testRun: #FacadeTusLibrosTest #test13 stamp: 'DS 11/30/2020 19:16:15'!
FAILURE!

!testRun: #FacadeTusLibrosTest #test14 stamp: 'DS 11/30/2020 19:16:15'!
FAILURE!

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'DS 11/30/2020 19:16:18'!
ERROR!
!FacadeTusLibros methodsFor: 'api rest' stamp: 'DS 11/30/2020 19:16:49' prior: 50869463!
addToCart: aCartID aQuantity: aQuantity of: anItem
	
	| aCart |

	"self assertUnkownCartID: aCartID.	"

	aCart := self cartWith: aCartID.
	
	((aCart second next: expiringTime) < GregorianDateTime now) ifTrue: [ self error: self class cartTimeExpiredErrorDescription ].
	
	aCart first add: aQuantity of: anItem.
	
	! !
!FacadeTusLibros methodsFor: 'api rest' stamp: 'DS 11/30/2020 19:18:00' prior: 50869450!
createCartForUser: anID withPassword: aPassword 

	| cart expirationTime |

	self assertAuthenticate: anID withPassword: aPassword.
	
	currentID := currentID + 1.
	cart := Cart acceptingItemsOf: catalog.
	expirationTime := GregorianDateTime now next: expiringTime.
	carts at: currentID put: {cart. expirationTime}.

	^currentID.! !
!FacadeTusLibros methodsFor: 'api rest' stamp: 'DS 11/30/2020 19:18:06' prior: 50869567!
addToCart: aCartID aQuantity: aQuantity of: anItem
	
	| aCart |

	"self assertUnkownCartID: aCartID.	"

	aCart := self cartWith: aCartID.
	
	(aCart second < GregorianDateTime now) ifTrue: [ self error: self class cartTimeExpiredErrorDescription ].
	
	aCart first add: aQuantity of: anItem.
	
	! !
!FacadeTusLibros methodsFor: 'api rest' stamp: 'DS 11/30/2020 19:18:12' prior: 50869476!
checkOutCart: aCartID withCCN: anCCN withCCED: anCCED andCCO: anCCO throught: aMerchantProccesor on: aDate

	| creditCard cart cashier |
	
	"self assertUnkownCartID: aCartID."
	cart := self cartWith: aCartID.
	
	(cart second < GregorianDateTime now) ifTrue: [ self error: self class cartTimeExpiredErrorDescription ].

	creditCard := CreditCard withNumber: anCCN withOwner: anCCO expiringOn: anCCED.
	cashier := Cashier toCheckout: cart first charging: creditCard throught: aMerchantProccesor on: aDate registeringOn: salesBook.

	^cashier checkOut.! !
!FacadeTusLibros methodsFor: 'api rest' stamp: 'DS 11/30/2020 19:18:17' prior: 50869507!
listCartFor: aCartID

	| cart |
	cart := self cartWith: aCartID.
	
	(cart second  < GregorianDateTime now) ifTrue: [ self error: self class cartTimeExpiredErrorDescription ].

	^cart first items.! !
!FacadeTusLibros methodsFor: 'api rest' stamp: 'DS 11/30/2020 19:18:18' prior: 50869628!
listCartFor: aCartID

	| cart |
	cart := self cartWith: aCartID.
	
	(cart second < GregorianDateTime now) ifTrue: [ self error: self class cartTimeExpiredErrorDescription ].

	^cart first items.! !

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'DS 11/30/2020 19:18:18'!
PASSED!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 11/30/2020 19:18:18'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/30/2020 19:18:18'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 11/30/2020 19:18:18'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/30/2020 19:18:18'!
PASSED!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/30/2020 19:18:18'!
PASSED!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'DS 11/30/2020 19:18:18'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'DS 11/30/2020 19:18:18'!
PASSED!

!testRun: #FacadeTusLibrosTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'DS 11/30/2020 19:18:18'!
PASSED!

!testRun: #FacadeTusLibrosTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 11/30/2020 19:18:18'!
PASSED!

!testRun: #FacadeTusLibrosTest #test11CannotListAnUnknownCartID stamp: 'DS 11/30/2020 19:18:18'!
PASSED!

!testRun: #FacadeTusLibrosTest #test12 stamp: 'DS 11/30/2020 19:18:18'!
PASSED!

!testRun: #FacadeTusLibrosTest #test13 stamp: 'DS 11/30/2020 19:18:18'!
PASSED!

!testRun: #FacadeTusLibrosTest #test14 stamp: 'DS 11/30/2020 19:18:18'!
PASSED!

----SNAPSHOT----(30 November 2020 19:18:22) CuisUniversity-4384.image priorSource: 17206670!

Object subclass: #SessionCart
	instanceVariableNames: 'cart expiringTimestamp'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!

!classDefinition: #SessionCart category: 'TusLibros-Solucion' stamp: 'DS 11/30/2020 19:21:33'!
Object subclass: #SessionCart
	instanceVariableNames: 'cart expiringTimestamp'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!
!SessionCart class methodsFor: 'no messages' stamp: 'DS 11/30/2020 19:22:48'!
for: aCart expiringAt: aGregorianDateTime

	^self newFor: aCart expiringAt: aGregorianDateTime.! !
!SessionCart methodsFor: 'no messages' stamp: 'DS 11/30/2020 19:23:44'!
initializeFor: aCart expiringAt: aGregorianDateTime

	cart := aCart.
	expiringTimestamp := aGregorianDateTime.! !
!SessionCart methodsFor: 'accesing' stamp: 'DS 11/30/2020 19:24:06'!
cart

	^cart.! !
!SessionCart methodsFor: 'accesing' stamp: 'DS 11/30/2020 19:24:16'!
expiringTimestamp

	^expiringTimestamp.! !
!FacadeTusLibros methodsFor: 'api rest' stamp: 'DS 11/30/2020 19:25:05' prior: 50869580!
createCartForUser: anID withPassword: aPassword 

	| cart expirationTime |

	self assertAuthenticate: anID withPassword: aPassword.
	
	currentID := currentID + 1.
	cart := Cart acceptingItemsOf: catalog.
	expirationTime := GregorianDateTime now next: expiringTime.
	carts at: currentID put: (SessionCart for: cart expiringAt: expirationTime).

	^currentID.! !
!FacadeTusLibros methodsFor: 'api rest' stamp: 'DS 11/30/2020 19:26:25' prior: 50869594!
addToCart: aCartID aQuantity: aQuantity of: anItem
	
	| aSessionCart |

	"self assertUnkownCartID: aCartID.	"

	aSessionCart := self cartWith: aCartID.
	
	(aSessionCart expiringTimestamp < GregorianDateTime now) ifTrue: [ self error: self class cartTimeExpiredErrorDescription ].
	
	aSessionCart cart add: aQuantity of: anItem.
	
	! !
!FacadeTusLibros methodsFor: 'api rest' stamp: 'DS 11/30/2020 19:26:39' prior: 50869607!
checkOutCart: aCartID withCCN: anCCN withCCED: anCCED andCCO: anCCO throught: aMerchantProccesor on: aDate

	| creditCard aSessionCart cashier |
	
	"self assertUnkownCartID: aCartID."
	aSessionCart := self cartWith: aCartID.
	
	(aSessionCart second < GregorianDateTime now) ifTrue: [ self error: self class cartTimeExpiredErrorDescription ].

	creditCard := CreditCard withNumber: anCCN withOwner: anCCO expiringOn: anCCED.
	cashier := Cashier toCheckout: aSessionCart first charging: creditCard throught: aMerchantProccesor on: aDate registeringOn: salesBook.

	^cashier checkOut.! !
!FacadeTusLibros methodsFor: 'api rest' stamp: 'DS 11/30/2020 19:26:51' prior: 50869757!
checkOutCart: aCartID withCCN: anCCN withCCED: anCCED andCCO: anCCO throught: aMerchantProccesor on: aDate

	| creditCard aSessionCart cashier |
	
	"self assertUnkownCartID: aCartID."
	aSessionCart := self cartWith: aCartID.
	
	(aSessionCart expiringTimestamp < GregorianDateTime now) ifTrue: [ self error: self class cartTimeExpiredErrorDescription ].

	creditCard := CreditCard withNumber: anCCN withOwner: anCCO expiringOn: anCCED.
	cashier := Cashier toCheckout: aSessionCart cart charging: creditCard throught: aMerchantProccesor on: aDate registeringOn: salesBook.

	^cashier checkOut.! !
!FacadeTusLibros methodsFor: 'api rest' stamp: 'DS 11/30/2020 19:27:06' prior: 50869637!
listCartFor: aCartID

	| aSessionCart |
	aSessionCart := self cartWith: aCartID.
	
	(aSessionCart second < GregorianDateTime now) ifTrue: [ self error: self class cartTimeExpiredErrorDescription ].

	^aSessionCart first items.! !
!FacadeTusLibros methodsFor: 'api rest' stamp: 'DS 11/30/2020 19:27:23' prior: 50869801!
listCartFor: aCartID

	| aSessionCart |
	aSessionCart := self cartWith: aCartID.
	
	(aSessionCart expiringTimestamp < GregorianDateTime now) ifTrue: [ self error: self class cartTimeExpiredErrorDescription ].

	^aSessionCart cart items.! !

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'DS 11/30/2020 19:27:25'!
ERROR!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 11/30/2020 19:27:25'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/30/2020 19:27:25'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 11/30/2020 19:27:25'!
ERROR!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/30/2020 19:27:25'!
ERROR!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/30/2020 19:27:25'!
ERROR!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'DS 11/30/2020 19:27:25'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'DS 11/30/2020 19:27:25'!
ERROR!

!testRun: #FacadeTusLibrosTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'DS 11/30/2020 19:27:25'!
ERROR!

!testRun: #FacadeTusLibrosTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 11/30/2020 19:27:25'!
PASSED!

!testRun: #FacadeTusLibrosTest #test11CannotListAnUnknownCartID stamp: 'DS 11/30/2020 19:27:25'!
PASSED!

!testRun: #FacadeTusLibrosTest #test12 stamp: 'DS 11/30/2020 19:27:25'!
ERROR!

!testRun: #FacadeTusLibrosTest #test13 stamp: 'DS 11/30/2020 19:27:25'!
ERROR!

!testRun: #FacadeTusLibrosTest #test14 stamp: 'DS 11/30/2020 19:27:25'!
ERROR!

!testRun: #FacadeTusLibrosTest #test13 stamp: 'DS 11/30/2020 19:27:50'!
ERROR!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/30/2020 19:27:50'!
ERROR!

!testRun: #FacadeTusLibrosTest #test11CannotListAnUnknownCartID stamp: 'DS 11/30/2020 19:27:50'!
PASSED!

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'DS 11/30/2020 19:27:50'!
ERROR!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/30/2020 19:27:50'!
ERROR!

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'DS 11/30/2020 19:27:55'!
ERROR!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 11/30/2020 19:27:55'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/30/2020 19:27:55'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 11/30/2020 19:27:55'!
ERROR!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/30/2020 19:27:55'!
ERROR!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/30/2020 19:27:55'!
ERROR!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'DS 11/30/2020 19:27:55'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'DS 11/30/2020 19:27:55'!
ERROR!

!testRun: #FacadeTusLibrosTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'DS 11/30/2020 19:27:55'!
ERROR!

!testRun: #FacadeTusLibrosTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 11/30/2020 19:27:55'!
PASSED!

!testRun: #FacadeTusLibrosTest #test11CannotListAnUnknownCartID stamp: 'DS 11/30/2020 19:27:55'!
PASSED!

!testRun: #FacadeTusLibrosTest #test12 stamp: 'DS 11/30/2020 19:27:55'!
ERROR!

!testRun: #FacadeTusLibrosTest #test13 stamp: 'DS 11/30/2020 19:27:55'!
ERROR!

!testRun: #FacadeTusLibrosTest #test14 stamp: 'DS 11/30/2020 19:27:55'!
ERROR!

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'DS 11/30/2020 19:27:56'!
ERROR!
!SessionCart class methodsFor: 'as yet unclassified' stamp: 'DS 11/30/2020 19:28:13' prior: 50869708!
for: aCart expiringAt: aGregorianDateTime

	^self new initializateFor: aCart expiringAt: aGregorianDateTime.! !
!SessionCart class methodsFor: 'as yet unclassified' stamp: 'DS 11/30/2020 19:28:27' prior: 50869934!
for: aCart expiringAt: aGregorianDateTime

	^self new initializeFor: aCart expiringAt: aGregorianDateTime.! !

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'DS 11/30/2020 19:28:30'!
PASSED!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 11/30/2020 19:28:30'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/30/2020 19:28:30'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 11/30/2020 19:28:30'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/30/2020 19:28:30'!
PASSED!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/30/2020 19:28:30'!
PASSED!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'DS 11/30/2020 19:28:30'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'DS 11/30/2020 19:28:30'!
PASSED!

!testRun: #FacadeTusLibrosTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'DS 11/30/2020 19:28:30'!
PASSED!

!testRun: #FacadeTusLibrosTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 11/30/2020 19:28:30'!
PASSED!

!testRun: #FacadeTusLibrosTest #test11CannotListAnUnknownCartID stamp: 'DS 11/30/2020 19:28:30'!
PASSED!

!testRun: #FacadeTusLibrosTest #test12 stamp: 'DS 11/30/2020 19:28:30'!
PASSED!

!testRun: #FacadeTusLibrosTest #test13 stamp: 'DS 11/30/2020 19:28:30'!
PASSED!

!testRun: #FacadeTusLibrosTest #test14 stamp: 'DS 11/30/2020 19:28:30'!
PASSED!

----SNAPSHOT----(30 November 2020 19:28:36) CuisUniversity-4384.image priorSource: 17217331!

!classRemoval: #StoreTestObjectsFactory stamp: 'FedericoSabatini 11/30/2020 19:31:13'!
Object subclass: #StoreTestObjectsFactory
	instanceVariableNames: 'today debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!

!classRemoval: #Sale stamp: 'FedericoSabatini 11/30/2020 19:31:14'!
Object subclass: #Sale
	instanceVariableNames: 'total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!

!classRemoval: #FacadeTusLibros stamp: 'FedericoSabatini 11/30/2020 19:31:14'!
Object subclass: #FacadeTusLibros
	instanceVariableNames: 'authenticator carts currentID catalog salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!

!classRemoval: #CreditCard stamp: 'FedericoSabatini 11/30/2020 19:31:15'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration number owner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!

!classRemoval: #Cashier stamp: 'FedericoSabatini 11/30/2020 19:31:15'!
Object subclass: #Cashier
	instanceVariableNames: 'cart salesBook merchantProcessor creditCard total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!

!classRemoval: #Cart stamp: 'FedericoSabatini 11/30/2020 19:31:15'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!

!classRemoval: #FacadeTusLibrosTest stamp: 'FedericoSabatini 11/30/2020 19:31:16'!
TestCase subclass: #FacadeTusLibrosTest
	instanceVariableNames: 'testObjectsFactory debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!

!classRemoval: #CreditCardTest stamp: 'FedericoSabatini 11/30/2020 19:31:16'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!

!classRemoval: #CashierTest stamp: 'FedericoSabatini 11/30/2020 19:31:17'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectsFactory debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!

!classRemoval: #CartTest stamp: 'FedericoSabatini 11/30/2020 19:31:17'!
TestCase subclass: #CartTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!

----STARTUP---- (30 November 2020 19:31:22) as D:\facultad\Smalltalk\windows64\CuisUniversity-4384.image!


!classRemoval: #StoreTestObjectsFactory stamp: 'FedericoSabatini 11/30/2020 19:31:30'!
Object subclass: #StoreTestObjectsFactory
	instanceVariableNames: 'today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!

!classRemoval: #MerchantProcesorSimulator stamp: 'FedericoSabatini 11/30/2020 19:31:31'!
Object subclass: #MerchantProcesorSimulator
	instanceVariableNames: 'behavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!

!classRemoval: #FacadeTusLibros stamp: 'FedericoSabatini 11/30/2020 19:31:31'!
Object subclass: #FacadeTusLibros
	instanceVariableNames: 'authenticator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!

!classRemoval: #CreditCard stamp: 'FedericoSabatini 11/30/2020 19:31:31'!
Object subclass: #CreditCard
	instanceVariableNames: 'creditCardNumber expirationDate owner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!

!classRemoval: #Cashier stamp: 'FedericoSabatini 11/30/2020 19:31:32'!
Object subclass: #Cashier
	instanceVariableNames: 'mp sales'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!

!classRemoval: #Cart stamp: 'FedericoSabatini 11/30/2020 19:31:32'!
Object subclass: #Cart
	instanceVariableNames: 'items catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!

!classRemoval: #FacadeTusLibrosTest stamp: 'FedericoSabatini 11/30/2020 19:31:33'!
TestCase subclass: #FacadeTusLibrosTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!

!classRemoval: #CreditCardTest stamp: 'FedericoSabatini 11/30/2020 19:31:33'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!

!classRemoval: #CashierTest stamp: 'FedericoSabatini 11/30/2020 19:31:33'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectsFactory successCashier'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!

!classRemoval: #CartTest stamp: 'FedericoSabatini 11/30/2020 19:31:34'!
TestCase subclass: #CartTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!

----End fileIn of D:\facultad\Smalltalk\windows64\TusLibros-Solucion.st----!

----SNAPSHOT----(30 November 2020 19:31:56) CuisUniversity-4384.image priorSource: 17760674!
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/30/2020 19:41:49'!
test12CannotAddToCartOnExpiredCart

	| authenticator tusLibros cartID |

	authenticator := Dictionary with: 1 -> 'pass' with: 2 -> 'pass'.
	tusLibros := FacadeTusLibros withAuthenticator: authenticator withCatalog: testObjectsFactory defaultCatalog andExpiringTime: -1*minute.

	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.

	self should: [ tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore ]
		raise: Error
		withMessageText: FacadeTusLibros cartTimeExpiredErrorDescription.! !

!methodRemoval: FacadeTusLibrosTest #test12 stamp: 'FedericoSabatini 11/30/2020 19:41:49'!
test12

	| authenticator tusLibros cartID |

	authenticator := Dictionary with: 1 -> 'pass' with: 2 -> 'pass'.
	tusLibros := FacadeTusLibros withAuthenticator: authenticator withCatalog: testObjectsFactory defaultCatalog andExpiringTime: -1*minute.

	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.

	self should: [ tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore ]
		raise: Error
		withMessageText: FacadeTusLibros cartTimeExpiredErrorDescription.!
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/30/2020 19:42:13'!
test13CannotListOnExpiredCart

	| authenticator tusLibros cartID |

	authenticator := Dictionary with: 1 -> 'pass' with: 2 -> 'pass'.
	tusLibros := FacadeTusLibros withAuthenticator: authenticator withCatalog: testObjectsFactory defaultCatalog andExpiringTime: -1*minute.

	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.

	self should: [ tusLibros listCartFor: cartID ]
		raise: Error
		withMessageText: FacadeTusLibros cartTimeExpiredErrorDescription.! !

!methodRemoval: FacadeTusLibrosTest #test13 stamp: 'FedericoSabatini 11/30/2020 19:42:13'!
test13

	| authenticator tusLibros cartID |

	authenticator := Dictionary with: 1 -> 'pass' with: 2 -> 'pass'.
	tusLibros := FacadeTusLibros withAuthenticator: authenticator withCatalog: testObjectsFactory defaultCatalog andExpiringTime: -1*minute.

	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.

	self should: [ tusLibros listCartFor: cartID ]
		raise: Error
		withMessageText: FacadeTusLibros cartTimeExpiredErrorDescription.!
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/30/2020 19:42:19'!
test12CannotAddOnExpiredCart

	| authenticator tusLibros cartID |

	authenticator := Dictionary with: 1 -> 'pass' with: 2 -> 'pass'.
	tusLibros := FacadeTusLibros withAuthenticator: authenticator withCatalog: testObjectsFactory defaultCatalog andExpiringTime: -1*minute.

	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.

	self should: [ tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore ]
		raise: Error
		withMessageText: FacadeTusLibros cartTimeExpiredErrorDescription.! !

!methodRemoval: FacadeTusLibrosTest #test12CannotAddToCartOnExpiredCart stamp: 'FedericoSabatini 11/30/2020 19:42:19'!
test12CannotAddToCartOnExpiredCart

	| authenticator tusLibros cartID |

	authenticator := Dictionary with: 1 -> 'pass' with: 2 -> 'pass'.
	tusLibros := FacadeTusLibros withAuthenticator: authenticator withCatalog: testObjectsFactory defaultCatalog andExpiringTime: -1*minute.

	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.

	self should: [ tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore ]
		raise: Error
		withMessageText: FacadeTusLibros cartTimeExpiredErrorDescription.!
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/30/2020 19:42:32'!
test14CannotCheckoutOnExpiredCart

	| authenticator tusLibros cartID |

	authenticator := Dictionary with: 1 -> 'pass' with: 2 -> 'pass'.
	tusLibros := FacadeTusLibros withAuthenticator: authenticator withCatalog: testObjectsFactory defaultCatalog andExpiringTime: -1*minute.

	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.

	self should: [ self tusLibros: tusLibros checkoutCartID: cartID ]
		raise: Error
		withMessageText: FacadeTusLibros cartTimeExpiredErrorDescription.! !

!methodRemoval: FacadeTusLibrosTest #test14 stamp: 'FedericoSabatini 11/30/2020 19:42:33'!
test14

	| authenticator tusLibros cartID |

	authenticator := Dictionary with: 1 -> 'pass' with: 2 -> 'pass'.
	tusLibros := FacadeTusLibros withAuthenticator: authenticator withCatalog: testObjectsFactory defaultCatalog andExpiringTime: -1*minute.

	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.

	self should: [ self tusLibros: tusLibros checkoutCartID: cartID ]
		raise: Error
		withMessageText: FacadeTusLibros cartTimeExpiredErrorDescription.!

!methodRemoval: FacadeTusLibros class #with:and: stamp: 'FedericoSabatini 11/30/2020 19:45:25'!
with: anAuthenticator and: aCatalog 
	^self new initializeWith: anAuthenticator and: aCatalog.!

!methodRemoval: FacadeTusLibros #initializeWith:and: stamp: 'FedericoSabatini 11/30/2020 19:45:34'!
initializeWith: anAuthenticator and: aCatalog 

	authenticator := anAuthenticator.
	carts := Dictionary new. 
	catalog := aCatalog.
	currentID := 0.
	salesBook := OrderedCollection new.!

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'FedericoSabatini 11/30/2020 19:45:48'!
PASSED!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'FedericoSabatini 11/30/2020 19:45:49'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'FedericoSabatini 11/30/2020 19:45:49'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'FedericoSabatini 11/30/2020 19:45:49'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'FedericoSabatini 11/30/2020 19:45:49'!
PASSED!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'FedericoSabatini 11/30/2020 19:45:49'!
PASSED!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'FedericoSabatini 11/30/2020 19:45:49'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'FedericoSabatini 11/30/2020 19:45:49'!
PASSED!

!testRun: #FacadeTusLibrosTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'FedericoSabatini 11/30/2020 19:45:49'!
PASSED!

!testRun: #FacadeTusLibrosTest #test10CannotCheckoutToUnknownCartID stamp: 'FedericoSabatini 11/30/2020 19:45:49'!
PASSED!

!testRun: #FacadeTusLibrosTest #test11CannotListAnUnknownCartID stamp: 'FedericoSabatini 11/30/2020 19:45:49'!
PASSED!

!testRun: #FacadeTusLibrosTest #test12CannotAddOnExpiredCart stamp: 'FedericoSabatini 11/30/2020 19:45:49'!
PASSED!

!testRun: #FacadeTusLibrosTest #test13CannotListOnExpiredCart stamp: 'FedericoSabatini 11/30/2020 19:45:49'!
PASSED!

!testRun: #FacadeTusLibrosTest #test14CannotCheckoutOnExpiredCart stamp: 'FedericoSabatini 11/30/2020 19:45:49'!
PASSED!

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'FedericoSabatini 11/30/2020 19:45:54'!
PASSED!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'FedericoSabatini 11/30/2020 19:45:54'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'FedericoSabatini 11/30/2020 19:45:54'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'FedericoSabatini 11/30/2020 19:45:54'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'FedericoSabatini 11/30/2020 19:45:55'!
PASSED!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'FedericoSabatini 11/30/2020 19:45:55'!
PASSED!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'FedericoSabatini 11/30/2020 19:45:55'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'FedericoSabatini 11/30/2020 19:45:55'!
PASSED!

!testRun: #FacadeTusLibrosTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'FedericoSabatini 11/30/2020 19:45:55'!
PASSED!

!testRun: #FacadeTusLibrosTest #test10CannotCheckoutToUnknownCartID stamp: 'FedericoSabatini 11/30/2020 19:45:55'!
PASSED!

!testRun: #FacadeTusLibrosTest #test11CannotListAnUnknownCartID stamp: 'FedericoSabatini 11/30/2020 19:45:55'!
PASSED!

!testRun: #FacadeTusLibrosTest #test12CannotAddOnExpiredCart stamp: 'FedericoSabatini 11/30/2020 19:45:55'!
PASSED!

!testRun: #FacadeTusLibrosTest #test13CannotListOnExpiredCart stamp: 'FedericoSabatini 11/30/2020 19:45:55'!
PASSED!

!testRun: #FacadeTusLibrosTest #test14CannotCheckoutOnExpiredCart stamp: 'FedericoSabatini 11/30/2020 19:45:55'!
PASSED!

!methodRemoval: FacadeTusLibros #assertUnkownCartID: stamp: 'FedericoSabatini 11/30/2020 19:47:29'!
assertUnkownCartID: aCartID

	^(carts at: aCartID ifAbsent: [ self signalUnknownCartID ]) first.!

----SNAPSHOT----(30 November 2020 19:47:38) CuisUniversity-4384.image priorSource: 17836737!

!testRun: #FacadeTusLibrosTest #test11CannotListAnUnknownCartID stamp: 'FedericoSabatini 11/30/2020 19:47:41'!
PASSED!

!testRun: #FacadeTusLibrosTest #test12CannotAddOnExpiredCart stamp: 'FedericoSabatini 11/30/2020 19:47:41'!
PASSED!

!testRun: #FacadeTusLibrosTest #test13CannotListOnExpiredCart stamp: 'FedericoSabatini 11/30/2020 19:47:41'!
PASSED!

!testRun: #FacadeTusLibrosTest #test14CannotCheckoutOnExpiredCart stamp: 'FedericoSabatini 11/30/2020 19:47:41'!
PASSED!

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'FedericoSabatini 11/30/2020 19:47:43'!
PASSED!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'FedericoSabatini 11/30/2020 19:47:43'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'FedericoSabatini 11/30/2020 19:47:43'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'FedericoSabatini 11/30/2020 19:47:43'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'FedericoSabatini 11/30/2020 19:47:44'!
PASSED!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'FedericoSabatini 11/30/2020 19:47:44'!
PASSED!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'FedericoSabatini 11/30/2020 19:47:44'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'FedericoSabatini 11/30/2020 19:47:44'!
PASSED!

!testRun: #FacadeTusLibrosTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'FedericoSabatini 11/30/2020 19:47:44'!
PASSED!

!testRun: #FacadeTusLibrosTest #test10CannotCheckoutToUnknownCartID stamp: 'FedericoSabatini 11/30/2020 19:47:44'!
PASSED!

!testRun: #FacadeTusLibrosTest #test11CannotListAnUnknownCartID stamp: 'FedericoSabatini 11/30/2020 19:47:44'!
PASSED!

!testRun: #FacadeTusLibrosTest #test12CannotAddOnExpiredCart stamp: 'FedericoSabatini 11/30/2020 19:47:44'!
PASSED!

!testRun: #FacadeTusLibrosTest #test13CannotListOnExpiredCart stamp: 'FedericoSabatini 11/30/2020 19:47:44'!
PASSED!

!testRun: #FacadeTusLibrosTest #test14CannotCheckoutOnExpiredCart stamp: 'FedericoSabatini 11/30/2020 19:47:44'!
PASSED!
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/30/2020 20:18:24'!
now
	self ! !
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/30/2020 20:25:20' prior: 50889127!
test12CannotAddOnExpiredCart

	| authenticator tusLibros cartID |

	authenticator := Dictionary with: 1 -> 'pass' with: 2 -> 'pass'.
	tusLibros := FacadeTusLibros 
		withAuthenticator: authenticator 
		withCatalog: testObjectsFactory defaultCatalog 
		usingClock: self.
		
		

	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.

	self should: [ tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore ]
		raise: Error
		withMessageText: FacadeTusLibros cartTimeExpiredErrorDescription.! !

GregorianDateTime now!

!classDefinition: #FacadeTusLibrosTest category: 'TusLibros-Solucion' stamp: 'FedericoSabatini 11/30/2020 20:31:58'!
TestCase subclass: #FacadeTusLibrosTest
	instanceVariableNames: 'testObjectsFactory debitBehavior clockBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!
!FacadeTusLibrosTest methodsFor: 'setup' stamp: 'FedericoSabatini 11/30/2020 20:31:55' prior: 50888205 overrides: 16927572!
setUp

	testObjectsFactory := StoreTestObjectsFactory new.
	debitBehavior := [ :anAmount :aCreditCard | ].
	
	clockBehavior := [ TimeOfDay hours: 7*hour minutes: 0*minute seconds: 0*second ]! !
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/30/2020 20:32:30' prior: 50889407!
now
	^clockBehavior value.! !
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/30/2020 20:32:48' prior: 50889412!
test12CannotAddOnExpiredCart

	| authenticator tusLibros cartID |

	authenticator := Dictionary with: 1 -> 'pass' with: 2 -> 'pass'.
	tusLibros := FacadeTusLibros 
		withAuthenticator: authenticator 
		withCatalog: testObjectsFactory defaultCatalog 
		usingClock: self.
		
	clockBehavior := [ TimeOfDay hours: 7*hour minutes: 30*minute seconds: 0*second ].

	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.

	self should: [ tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore ]
		raise: Error
		withMessageText: FacadeTusLibros cartTimeExpiredErrorDescription.! !

!testRun: #FacadeTusLibrosTest #test12CannotAddOnExpiredCart stamp: 'FedericoSabatini 11/30/2020 20:33:18'!
ERROR!
!FacadeTusLibros class methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/30/2020 20:33:39'!
withAuthenticator: aDictionary withCatalog: aDictionary2 usingClock: aFacadeTusLibrosTest 
	self shouldBeImplemented.! !
!FacadeTusLibros class methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/30/2020 20:34:34' prior: 50889484!
withAuthenticator: anAuthenticator withCatalog: aCatalog usingClock: aClock
	^self new initializeWithAuthenticator: anAuthenticator withCatalog: aCatalog usingClock: aClock.! !

!testRun: #FacadeTusLibrosTest #test12CannotAddOnExpiredCart stamp: 'FedericoSabatini 11/30/2020 20:34:36'!
ERROR!

!classDefinition: #FacadeTusLibros category: 'TusLibros-Solucion' stamp: 'FedericoSabatini 11/30/2020 20:34:42'!
Object subclass: #FacadeTusLibros
	instanceVariableNames: 'authenticator carts currentID catalog salesBook expiringTime clock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!
!FacadeTusLibros methodsFor: 'initialization' stamp: 'FedericoSabatini 11/30/2020 20:34:42'!
initializeWithAuthenticator: anAuthenticator withCatalog: aCatalog usingClock: aClock 
	self shouldBeImplemented.
	authenticator := anAuthenticator.
	catalog := aCatalog.
	clock := aClock.! !
!FacadeTusLibros methodsFor: 'initialization' stamp: 'FedericoSabatini 11/30/2020 20:34:47' prior: 50889515!
initializeWithAuthenticator: anAuthenticator withCatalog: aCatalog usingClock: aClock 

	authenticator := anAuthenticator.
	catalog := aCatalog.
	clock := aClock.! !
!FacadeTusLibros methodsFor: 'initialization' stamp: 'FedericoSabatini 11/30/2020 20:35:11' prior: 50889525!
initializeWithAuthenticator: anAuthenticator withCatalog: aCatalog usingClock: aClock 
	
	authenticator := anAuthenticator.
	catalog := aCatalog.
	
	clock := aClock.
	
	carts := Dictionary new.
	currentID := 0.
	salesBook := OrderedCollection new.! !

!testRun: #FacadeTusLibrosTest #test12CannotAddOnExpiredCart stamp: 'FedericoSabatini 11/30/2020 20:35:25'!
ERROR!
!FacadeTusLibros methodsFor: 'api rest' stamp: 'FedericoSabatini 11/30/2020 20:36:26' prior: 50888779!
createCartForUser: anID withPassword: aPassword 

	| cart |

	self assertAuthenticate: anID withPassword: aPassword.
	
	currentID := currentID + 1.
	cart := Cart acceptingItemsOf: catalog.
	
	
	
	carts at: currentID put: (SessionCart for: cart expiringAt: clock now).

	^currentID.! !
!FacadeTusLibros methodsFor: 'api rest' stamp: 'FedericoSabatini 11/30/2020 20:36:42' prior: 50888745!
addToCart: aCartID aQuantity: aQuantity of: anItem
	
	| aSessionCart |

	"self assertUnkownCartID: aCartID.	"

	aSessionCart := self cartWith: aCartID.
	
	(aSessionCart expiringTimestamp < clock now) ifTrue: [ self error: self class cartTimeExpiredErrorDescription ].
	
	aSessionCart cart add: aQuantity of: anItem.
	
	! !
!FacadeTusLibros methodsFor: 'api rest' stamp: 'FedericoSabatini 11/30/2020 20:37:47' prior: 50889549!
createCartForUser: anID withPassword: aPassword 

	| cart |

	self assertAuthenticate: anID withPassword: aPassword.
	
	currentID := currentID + 1.
	cart := Cart acceptingItemsOf: catalog.
	
	carts at: currentID put: (SessionCart for: cart expiringAt: (clock now next: 30*minute)).

	^currentID.! !

!testRun: #FacadeTusLibrosTest #test12CannotAddOnExpiredCart stamp: 'FedericoSabatini 11/30/2020 20:38:03'!
ERROR!

!classDefinition: #StoreTestObjectsFactory category: 'TusLibros-Solucion' stamp: 'FedericoSabatini 11/30/2020 20:46:03'!
Object subclass: #StoreTestObjectsFactory
	instanceVariableNames: 'today debitBehavior gregorianDateTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!
!StoreTestObjectsFactory methodsFor: 'date' stamp: 'FedericoSabatini 11/30/2020 20:45:58'!
timestampNow
	
	^gregorianDateTime! !
!StoreTestObjectsFactory methodsFor: 'initialization' stamp: 'FedericoSabatini 11/30/2020 20:46:25' prior: 50889029 overrides: 16896425!
initialize

	today := DateAndTime now.
	gregorianDateTime := GregorianDateTime date: FixedGregorianDate today timeOfDay: TimeOfDay now.! !
!FacadeTusLibrosTest methodsFor: 'setup' stamp: 'FedericoSabatini 11/30/2020 20:46:57' prior: 50889443 overrides: 16927572!
setUp

	testObjectsFactory := StoreTestObjectsFactory new.
	debitBehavior := [ :anAmount :aCreditCard | ].
	
	clockBehavior := [ testObjectsFactory timestampNow ].! !
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/30/2020 20:47:51' prior: 50889458!
test12CannotAddOnExpiredCart

	| authenticator tusLibros cartID |

	authenticator := Dictionary with: 1 -> 'pass' with: 2 -> 'pass'.
	tusLibros := FacadeTusLibros 
		withAuthenticator: authenticator 
		withCatalog: testObjectsFactory defaultCatalog 
		usingClock: self.
		
	clockBehavior := [ testObjectsFactory timestampNow next: 30*minute ].

	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.

	self should: [ tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore ]
		raise: Error
		withMessageText: FacadeTusLibros cartTimeExpiredErrorDescription.! !

!testRun: #FacadeTusLibrosTest #test12CannotAddOnExpiredCart stamp: 'FedericoSabatini 11/30/2020 20:47:55'!
FAILURE!
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/30/2020 20:48:17' prior: 50889626!
test12CannotAddOnExpiredCart

	| authenticator tusLibros cartID |

	authenticator := Dictionary with: 1 -> 'pass' with: 2 -> 'pass'.
	tusLibros := FacadeTusLibros 
		withAuthenticator: authenticator 
		withCatalog: testObjectsFactory defaultCatalog 
		usingClock: self.
		
	clockBehavior := [ testObjectsFactory timestampNow next: 31*minute ].

	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.

	self should: [ tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore ]
		raise: Error
		withMessageText: FacadeTusLibros cartTimeExpiredErrorDescription.! !

!testRun: #FacadeTusLibrosTest #test12CannotAddOnExpiredCart stamp: 'FedericoSabatini 11/30/2020 20:48:18'!
FAILURE!

clock now!

aSessionCart expiringTimestamp !

clock now!

aSessionCart expiringTimestamp!

!testRun: #FacadeTusLibrosTest #test12CannotAddOnExpiredCart stamp: 'FedericoSabatini 11/30/2020 20:51:23'!
FAILURE!

!testRun: #FacadeTusLibrosTest #test12CannotAddOnExpiredCart stamp: 'FedericoSabatini 11/30/2020 20:51:58'!
FAILURE!
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/30/2020 20:52:41' prior: 50889653!
test12CannotAddOnExpiredCart

	| authenticator tusLibros cartID |

	authenticator := Dictionary with: 1 -> 'pass' with: 2 -> 'pass'.
	tusLibros := FacadeTusLibros 
		withAuthenticator: authenticator 
		withCatalog: testObjectsFactory defaultCatalog 
		usingClock: self.
		
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	clockBehavior := [ testObjectsFactory timestampNow next: 31*minute ].

	self should: [ tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore ]
		raise: Error
		withMessageText: FacadeTusLibros cartTimeExpiredErrorDescription.! !

----STARTUP---- (30 November 2020 20:53:00) as D:\facultad\Smalltalk\windows64\CuisUniversity-4384.image!

!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/30/2020 20:18:24'!
now
	self ! !
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/30/2020 20:25:20' prior: 50889127!
test12CannotAddOnExpiredCart

	| authenticator tusLibros cartID |

	authenticator := Dictionary with: 1 -> 'pass' with: 2 -> 'pass'.
	tusLibros := FacadeTusLibros 
		withAuthenticator: authenticator 
		withCatalog: testObjectsFactory defaultCatalog 
		usingClock: self.
		
		

	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.

	self should: [ tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore ]
		raise: Error
		withMessageText: FacadeTusLibros cartTimeExpiredErrorDescription.! !

!classDefinition: #FacadeTusLibrosTest category: 'TusLibros-Solucion' stamp: 'FedericoSabatini 11/30/2020 20:53:04'!
TestCase subclass: #FacadeTusLibrosTest
	instanceVariableNames: 'testObjectsFactory debitBehavior clockBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!
!FacadeTusLibrosTest methodsFor: 'setup' stamp: 'FedericoSabatini 11/30/2020 20:31:55' prior: 50888205 overrides: 16927572!
setUp

	testObjectsFactory := StoreTestObjectsFactory new.
	debitBehavior := [ :anAmount :aCreditCard | ].
	
	clockBehavior := [ TimeOfDay hours: 7*hour minutes: 0*minute seconds: 0*second ]! !
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/30/2020 20:32:30' prior: 50889716!
now
	^clockBehavior value.! !
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/30/2020 20:32:48' prior: 50889721!
test12CannotAddOnExpiredCart

	| authenticator tusLibros cartID |

	authenticator := Dictionary with: 1 -> 'pass' with: 2 -> 'pass'.
	tusLibros := FacadeTusLibros 
		withAuthenticator: authenticator 
		withCatalog: testObjectsFactory defaultCatalog 
		usingClock: self.
		
	clockBehavior := [ TimeOfDay hours: 7*hour minutes: 30*minute seconds: 0*second ].

	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.

	self should: [ tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore ]
		raise: Error
		withMessageText: FacadeTusLibros cartTimeExpiredErrorDescription.! !
!FacadeTusLibros class methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/30/2020 20:33:39'!
withAuthenticator: aDictionary withCatalog: aDictionary2 usingClock: aFacadeTusLibrosTest 
	self shouldBeImplemented.! !
!FacadeTusLibros class methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/30/2020 20:34:34' prior: 50889790!
withAuthenticator: anAuthenticator withCatalog: aCatalog usingClock: aClock
	^self new initializeWithAuthenticator: anAuthenticator withCatalog: aCatalog usingClock: aClock.! !

!classDefinition: #FacadeTusLibros category: 'TusLibros-Solucion' stamp: 'FedericoSabatini 11/30/2020 20:53:05'!
Object subclass: #FacadeTusLibros
	instanceVariableNames: 'authenticator carts currentID catalog salesBook expiringTime clock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!
!FacadeTusLibros methodsFor: 'initialization' stamp: 'FedericoSabatini 11/30/2020 20:34:42'!
initializeWithAuthenticator: anAuthenticator withCatalog: aCatalog usingClock: aClock 
	self shouldBeImplemented.
	authenticator := anAuthenticator.
	catalog := aCatalog.
	clock := aClock.! !
!FacadeTusLibros methodsFor: 'initialization' stamp: 'FedericoSabatini 11/30/2020 20:34:47' prior: 50889817!
initializeWithAuthenticator: anAuthenticator withCatalog: aCatalog usingClock: aClock 

	authenticator := anAuthenticator.
	catalog := aCatalog.
	clock := aClock.! !
!FacadeTusLibros methodsFor: 'initialization' stamp: 'FedericoSabatini 11/30/2020 20:35:11' prior: 50889827!
initializeWithAuthenticator: anAuthenticator withCatalog: aCatalog usingClock: aClock 
	
	authenticator := anAuthenticator.
	catalog := aCatalog.
	
	clock := aClock.
	
	carts := Dictionary new.
	currentID := 0.
	salesBook := OrderedCollection new.! !
!FacadeTusLibros methodsFor: 'api rest' stamp: 'FedericoSabatini 11/30/2020 20:36:26' prior: 50888779!
createCartForUser: anID withPassword: aPassword 

	| cart |

	self assertAuthenticate: anID withPassword: aPassword.
	
	currentID := currentID + 1.
	cart := Cart acceptingItemsOf: catalog.
	
	
	
	carts at: currentID put: (SessionCart for: cart expiringAt: clock now).

	^currentID.! !
!FacadeTusLibros methodsFor: 'api rest' stamp: 'FedericoSabatini 11/30/2020 20:36:42' prior: 50888745!
addToCart: aCartID aQuantity: aQuantity of: anItem
	
	| aSessionCart |

	"self assertUnkownCartID: aCartID.	"

	aSessionCart := self cartWith: aCartID.
	
	(aSessionCart expiringTimestamp < clock now) ifTrue: [ self error: self class cartTimeExpiredErrorDescription ].
	
	aSessionCart cart add: aQuantity of: anItem.
	
	! !
!FacadeTusLibros methodsFor: 'api rest' stamp: 'FedericoSabatini 11/30/2020 20:37:47' prior: 50889848!
createCartForUser: anID withPassword: aPassword 

	| cart |

	self assertAuthenticate: anID withPassword: aPassword.
	
	currentID := currentID + 1.
	cart := Cart acceptingItemsOf: catalog.
	
	carts at: currentID put: (SessionCart for: cart expiringAt: (clock now next: 30*minute)).

	^currentID.! !

!classDefinition: #StoreTestObjectsFactory category: 'TusLibros-Solucion' stamp: 'FedericoSabatini 11/30/2020 20:53:05'!
Object subclass: #StoreTestObjectsFactory
	instanceVariableNames: 'today debitBehavior gregorianDateTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!
!StoreTestObjectsFactory methodsFor: 'date' stamp: 'FedericoSabatini 11/30/2020 20:45:58'!
timestampNow
	
	^gregorianDateTime! !
!StoreTestObjectsFactory methodsFor: 'initialization' stamp: 'FedericoSabatini 11/30/2020 20:46:25' prior: 50889029 overrides: 16896425!
initialize

	today := DateAndTime now.
	gregorianDateTime := GregorianDateTime date: FixedGregorianDate today timeOfDay: TimeOfDay now.! !
!FacadeTusLibrosTest methodsFor: 'setup' stamp: 'FedericoSabatini 11/30/2020 20:46:57' prior: 50889752 overrides: 16927572!
setUp

	testObjectsFactory := StoreTestObjectsFactory new.
	debitBehavior := [ :anAmount :aCreditCard | ].
	
	clockBehavior := [ testObjectsFactory timestampNow ].! !
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/30/2020 20:47:51' prior: 50889767!
test12CannotAddOnExpiredCart

	| authenticator tusLibros cartID |

	authenticator := Dictionary with: 1 -> 'pass' with: 2 -> 'pass'.
	tusLibros := FacadeTusLibros 
		withAuthenticator: authenticator 
		withCatalog: testObjectsFactory defaultCatalog 
		usingClock: self.
		
	clockBehavior := [ testObjectsFactory timestampNow next: 30*minute ].

	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.

	self should: [ tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore ]
		raise: Error
		withMessageText: FacadeTusLibros cartTimeExpiredErrorDescription.! !
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/30/2020 20:48:17' prior: 50889921!
test12CannotAddOnExpiredCart

	| authenticator tusLibros cartID |

	authenticator := Dictionary with: 1 -> 'pass' with: 2 -> 'pass'.
	tusLibros := FacadeTusLibros 
		withAuthenticator: authenticator 
		withCatalog: testObjectsFactory defaultCatalog 
		usingClock: self.
		
	clockBehavior := [ testObjectsFactory timestampNow next: 31*minute ].

	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.

	self should: [ tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore ]
		raise: Error
		withMessageText: FacadeTusLibros cartTimeExpiredErrorDescription.! !
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/30/2020 20:52:41' prior: 50889944!
test12CannotAddOnExpiredCart

	| authenticator tusLibros cartID |

	authenticator := Dictionary with: 1 -> 'pass' with: 2 -> 'pass'.
	tusLibros := FacadeTusLibros 
		withAuthenticator: authenticator 
		withCatalog: testObjectsFactory defaultCatalog 
		usingClock: self.
		
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	clockBehavior := [ testObjectsFactory timestampNow next: 31*minute ].

	self should: [ tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore ]
		raise: Error
		withMessageText: FacadeTusLibros cartTimeExpiredErrorDescription.! !
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/30/2020 20:53:26' prior: 50889967!
test12CannotAddOnExpiredCart

	| authenticator tusLibros cartID |

	authenticator := Dictionary with: 1 -> 'pass' with: 2 -> 'pass'.
	
	tusLibros := FacadeTusLibros 
		withAuthenticator: authenticator 
		withCatalog: testObjectsFactory defaultCatalog 
		usingClock: self.
		
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	clockBehavior := [ testObjectsFactory timestampNow next: 31*minute ].

	self should: [ tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore ]
		raise: Error
		withMessageText: FacadeTusLibros cartTimeExpiredErrorDescription.! !

----SNAPSHOT----(30 November 2020 20:53:34) CuisUniversity-4384.image priorSource: 17845848!

!testRun: #FacadeTusLibrosTest #test12CannotAddOnExpiredCart stamp: 'FedericoSabatini 11/30/2020 20:53:37'!
PASSED!

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'FedericoSabatini 11/30/2020 20:53:37'!
ERROR!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'FedericoSabatini 11/30/2020 20:53:37'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'FedericoSabatini 11/30/2020 20:53:37'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'FedericoSabatini 11/30/2020 20:53:37'!
ERROR!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'FedericoSabatini 11/30/2020 20:53:37'!
ERROR!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'FedericoSabatini 11/30/2020 20:53:37'!
ERROR!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'FedericoSabatini 11/30/2020 20:53:37'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'FedericoSabatini 11/30/2020 20:53:37'!
ERROR!

!testRun: #FacadeTusLibrosTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'FedericoSabatini 11/30/2020 20:53:37'!
ERROR!

!testRun: #FacadeTusLibrosTest #test10CannotCheckoutToUnknownCartID stamp: 'FedericoSabatini 11/30/2020 20:53:38'!
PASSED!

!testRun: #FacadeTusLibrosTest #test11CannotListAnUnknownCartID stamp: 'FedericoSabatini 11/30/2020 20:53:38'!
PASSED!

!testRun: #FacadeTusLibrosTest #test12CannotAddOnExpiredCart stamp: 'FedericoSabatini 11/30/2020 20:53:38'!
PASSED!

!testRun: #FacadeTusLibrosTest #test13CannotListOnExpiredCart stamp: 'FedericoSabatini 11/30/2020 20:53:38'!
ERROR!

!testRun: #FacadeTusLibrosTest #test14CannotCheckoutOnExpiredCart stamp: 'FedericoSabatini 11/30/2020 20:53:38'!
ERROR!
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/30/2020 20:54:03' prior: 50889092!
test13CannotListOnExpiredCart

	| authenticator tusLibros cartID |

	authenticator := Dictionary with: 1 -> 'pass' with: 2 -> 'pass'.
	tusLibros := FacadeTusLibros 
		withAuthenticator: authenticator 
		withCatalog: testObjectsFactory defaultCatalog 
		usingClock: self.
		
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.

	self should: [ tusLibros listCartFor: cartID ]
		raise: Error
		withMessageText: FacadeTusLibros cartTimeExpiredErrorDescription.! !
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/30/2020 20:54:09' prior: 50889167!
test14CannotCheckoutOnExpiredCart

	| authenticator tusLibros cartID |

	authenticator := Dictionary with: 1 -> 'pass' with: 2 -> 'pass'.
	tusLibros := FacadeTusLibros 
		withAuthenticator: authenticator 
		withCatalog: testObjectsFactory defaultCatalog 
		usingClock: self.
		
		
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.

	self should: [ self tusLibros: tusLibros checkoutCartID: cartID ]
		raise: Error
		withMessageText: FacadeTusLibros cartTimeExpiredErrorDescription.! !
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/30/2020 20:54:20' prior: 50890074!
test13CannotListOnExpiredCart

	| authenticator tusLibros cartID |

	authenticator := Dictionary with: 1 -> 'pass' with: 2 -> 'pass'.
	tusLibros := FacadeTusLibros 
		withAuthenticator: authenticator 
		withCatalog: testObjectsFactory defaultCatalog 
		usingClock: self.
		
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	clockBehavior := [ testObjectsFactory timestampNow next: 31*minute ].

	self should: [ tusLibros listCartFor: cartID ]
		raise: Error
		withMessageText: FacadeTusLibros cartTimeExpiredErrorDescription.! !
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/30/2020 20:54:26' prior: 50890093!
test14CannotCheckoutOnExpiredCart

	| authenticator tusLibros cartID |

	authenticator := Dictionary with: 1 -> 'pass' with: 2 -> 'pass'.
	tusLibros := FacadeTusLibros 
		withAuthenticator: authenticator 
		withCatalog: testObjectsFactory defaultCatalog 
		usingClock: self.
		
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	clockBehavior := [ testObjectsFactory timestampNow next: 31*minute ].

	self should: [ self tusLibros: tusLibros checkoutCartID: cartID ]
		raise: Error
		withMessageText: FacadeTusLibros cartTimeExpiredErrorDescription.! !

!testRun: #FacadeTusLibrosTest #test14CannotCheckoutOnExpiredCart stamp: 'FedericoSabatini 11/30/2020 20:54:27'!
FAILURE!

!testRun: #FacadeTusLibrosTest #test14CannotCheckoutOnExpiredCart stamp: 'FedericoSabatini 11/30/2020 20:54:38'!
FAILURE!

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'FedericoSabatini 11/30/2020 20:54:45'!
ERROR!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'FedericoSabatini 11/30/2020 20:54:45'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'FedericoSabatini 11/30/2020 20:54:45'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'FedericoSabatini 11/30/2020 20:54:45'!
ERROR!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'FedericoSabatini 11/30/2020 20:54:45'!
ERROR!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'FedericoSabatini 11/30/2020 20:54:45'!
ERROR!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'FedericoSabatini 11/30/2020 20:54:45'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'FedericoSabatini 11/30/2020 20:54:45'!
ERROR!

!testRun: #FacadeTusLibrosTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'FedericoSabatini 11/30/2020 20:54:45'!
ERROR!

!testRun: #FacadeTusLibrosTest #test10CannotCheckoutToUnknownCartID stamp: 'FedericoSabatini 11/30/2020 20:54:45'!
PASSED!

!testRun: #FacadeTusLibrosTest #test11CannotListAnUnknownCartID stamp: 'FedericoSabatini 11/30/2020 20:54:45'!
PASSED!

!testRun: #FacadeTusLibrosTest #test12CannotAddOnExpiredCart stamp: 'FedericoSabatini 11/30/2020 20:54:45'!
PASSED!

!testRun: #FacadeTusLibrosTest #test13CannotListOnExpiredCart stamp: 'FedericoSabatini 11/30/2020 20:54:45'!
FAILURE!

!testRun: #FacadeTusLibrosTest #test14CannotCheckoutOnExpiredCart stamp: 'FedericoSabatini 11/30/2020 20:54:45'!
FAILURE!
!FacadeTusLibros methodsFor: 'api rest' stamp: 'FedericoSabatini 11/30/2020 20:55:11' prior: 50888793!
listCartFor: aCartID

	| aSessionCart |
	aSessionCart := self cartWith: aCartID.
	
	(aSessionCart expiringTimestamp < clock now) ifTrue: [ self error: self class cartTimeExpiredErrorDescription ].

	^aSessionCart cart items.! !
!FacadeTusLibros methodsFor: 'api rest' stamp: 'FedericoSabatini 11/30/2020 20:55:18' prior: 50888758!
checkOutCart: aCartID withCCN: anCCN withCCED: anCCED andCCO: anCCO throught: aMerchantProccesor on: aDate

	| creditCard aSessionCart cashier |
	
	"self assertUnkownCartID: aCartID."
	aSessionCart := self cartWith: aCartID.
	
	(aSessionCart expiringTimestamp < clock now) ifTrue: [ self error: self class cartTimeExpiredErrorDescription ].

	creditCard := CreditCard withNumber: anCCN withOwner: anCCO expiringOn: anCCED.
	cashier := Cashier toCheckout: aSessionCart cart charging: creditCard throught: aMerchantProccesor on: aDate registeringOn: salesBook.

	^cashier checkOut.! !

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'FedericoSabatini 11/30/2020 20:55:22'!
ERROR!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'FedericoSabatini 11/30/2020 20:55:22'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'FedericoSabatini 11/30/2020 20:55:22'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'FedericoSabatini 11/30/2020 20:55:22'!
ERROR!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'FedericoSabatini 11/30/2020 20:55:22'!
ERROR!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'FedericoSabatini 11/30/2020 20:55:23'!
ERROR!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'FedericoSabatini 11/30/2020 20:55:23'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'FedericoSabatini 11/30/2020 20:55:23'!
ERROR!

!testRun: #FacadeTusLibrosTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'FedericoSabatini 11/30/2020 20:55:23'!
ERROR!

!testRun: #FacadeTusLibrosTest #test10CannotCheckoutToUnknownCartID stamp: 'FedericoSabatini 11/30/2020 20:55:23'!
PASSED!

!testRun: #FacadeTusLibrosTest #test11CannotListAnUnknownCartID stamp: 'FedericoSabatini 11/30/2020 20:55:23'!
PASSED!

!testRun: #FacadeTusLibrosTest #test12CannotAddOnExpiredCart stamp: 'FedericoSabatini 11/30/2020 20:55:23'!
PASSED!

!testRun: #FacadeTusLibrosTest #test13CannotListOnExpiredCart stamp: 'FedericoSabatini 11/30/2020 20:55:23'!
PASSED!

!testRun: #FacadeTusLibrosTest #test14CannotCheckoutOnExpiredCart stamp: 'FedericoSabatini 11/30/2020 20:55:23'!
PASSED!
!StoreTestObjectsFactory methodsFor: 'tusLibros' stamp: 'FedericoSabatini 11/30/2020 20:57:14'!
tusLibros: aClock

	| authenticator |

	authenticator := Dictionary with: 1 -> 'pass' with: 2 -> 'pass'.

	^FacadeTusLibros 
		withAuthenticator: authenticator 
		withCatalog: self defaultCatalog
		usingClock: aClock.! !
!StoreTestObjectsFactory methodsFor: 'tusLibros' stamp: 'FedericoSabatini 11/30/2020 20:57:56' prior: 50889033!
tusLibros

	| authenticator |

	authenticator := Dictionary with: 1 -> 'pass' with: 2 -> 'pass'.

	^FacadeTusLibros 
		withAuthenticator: authenticator 
		withCatalog: self defaultCatalog
		usingClock: self defaultClock.! !
!StoreTestObjectsFactory methodsFor: 'tusLibros' stamp: 'FedericoSabatini 11/30/2020 20:58:40' prior: 50890316!
tusLibros

	| authenticator |

	authenticator := Dictionary with: 1 -> 'pass' with: 2 -> 'pass'.

	^FacadeTusLibros 
		withAuthenticator: authenticator 
		withCatalog: self defaultCatalog
		usingClock: self.! !
!StoreTestObjectsFactory methodsFor: 'date' stamp: 'FedericoSabatini 11/30/2020 20:59:02'!
now
	
	^gregorianDateTime! !

!methodRemoval: StoreTestObjectsFactory #timestampNow stamp: 'FedericoSabatini 11/30/2020 20:59:34'!
timestampNow
	
	^gregorianDateTime!

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'FedericoSabatini 11/30/2020 20:59:57'!
PASSED!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'FedericoSabatini 11/30/2020 20:59:57'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'FedericoSabatini 11/30/2020 20:59:57'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'FedericoSabatini 11/30/2020 20:59:57'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'FedericoSabatini 11/30/2020 20:59:57'!
PASSED!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'FedericoSabatini 11/30/2020 20:59:57'!
PASSED!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'FedericoSabatini 11/30/2020 20:59:57'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'FedericoSabatini 11/30/2020 20:59:58'!
PASSED!

!testRun: #FacadeTusLibrosTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'FedericoSabatini 11/30/2020 20:59:58'!
PASSED!

!testRun: #FacadeTusLibrosTest #test10CannotCheckoutToUnknownCartID stamp: 'FedericoSabatini 11/30/2020 20:59:58'!
PASSED!

!testRun: #FacadeTusLibrosTest #test11CannotListAnUnknownCartID stamp: 'FedericoSabatini 11/30/2020 20:59:58'!
PASSED!

!testRun: #FacadeTusLibrosTest #test12CannotAddOnExpiredCart stamp: 'FedericoSabatini 11/30/2020 20:59:58'!
ERROR!

!testRun: #FacadeTusLibrosTest #test13CannotListOnExpiredCart stamp: 'FedericoSabatini 11/30/2020 20:59:58'!
ERROR!

!testRun: #FacadeTusLibrosTest #test14CannotCheckoutOnExpiredCart stamp: 'FedericoSabatini 11/30/2020 20:59:58'!
ERROR!
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/30/2020 21:00:11' prior: 50890134!
test14CannotCheckoutOnExpiredCart

	| authenticator tusLibros cartID |

	authenticator := Dictionary with: 1 -> 'pass' with: 2 -> 'pass'.
	tusLibros := FacadeTusLibros 
		withAuthenticator: authenticator 
		withCatalog: testObjectsFactory defaultCatalog 
		usingClock: self.
		
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	clockBehavior := [ testObjectsFactory now next: 31*minute ].

	self should: [ self tusLibros: tusLibros checkoutCartID: cartID ]
		raise: Error
		withMessageText: FacadeTusLibros cartTimeExpiredErrorDescription.! !
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/30/2020 21:00:14' prior: 50890113!
test13CannotListOnExpiredCart

	| authenticator tusLibros cartID |

	authenticator := Dictionary with: 1 -> 'pass' with: 2 -> 'pass'.
	tusLibros := FacadeTusLibros 
		withAuthenticator: authenticator 
		withCatalog: testObjectsFactory defaultCatalog 
		usingClock: self.
		
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	clockBehavior := [ testObjectsFactory now next: 31*minute ].

	self should: [ tusLibros listCartFor: cartID ]
		raise: Error
		withMessageText: FacadeTusLibros cartTimeExpiredErrorDescription.! !
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/30/2020 21:00:16' prior: 50889990!
test12CannotAddOnExpiredCart

	| authenticator tusLibros cartID |

	authenticator := Dictionary with: 1 -> 'pass' with: 2 -> 'pass'.
	
	tusLibros := FacadeTusLibros 
		withAuthenticator: authenticator 
		withCatalog: testObjectsFactory defaultCatalog 
		usingClock: self.
		
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	clockBehavior := [ testObjectsFactory now next: 31*minute ].

	self should: [ tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore ]
		raise: Error
		withMessageText: FacadeTusLibros cartTimeExpiredErrorDescription.! !

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'FedericoSabatini 11/30/2020 21:00:18'!
PASSED!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'FedericoSabatini 11/30/2020 21:00:18'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'FedericoSabatini 11/30/2020 21:00:18'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'FedericoSabatini 11/30/2020 21:00:18'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'FedericoSabatini 11/30/2020 21:00:18'!
PASSED!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'FedericoSabatini 11/30/2020 21:00:18'!
PASSED!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'FedericoSabatini 11/30/2020 21:00:18'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'FedericoSabatini 11/30/2020 21:00:19'!
PASSED!

!testRun: #FacadeTusLibrosTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'FedericoSabatini 11/30/2020 21:00:19'!
PASSED!

!testRun: #FacadeTusLibrosTest #test10CannotCheckoutToUnknownCartID stamp: 'FedericoSabatini 11/30/2020 21:00:19'!
PASSED!

!testRun: #FacadeTusLibrosTest #test11CannotListAnUnknownCartID stamp: 'FedericoSabatini 11/30/2020 21:00:19'!
PASSED!

!testRun: #FacadeTusLibrosTest #test12CannotAddOnExpiredCart stamp: 'FedericoSabatini 11/30/2020 21:00:19'!
ERROR!

!testRun: #FacadeTusLibrosTest #test13CannotListOnExpiredCart stamp: 'FedericoSabatini 11/30/2020 21:00:19'!
ERROR!

!testRun: #FacadeTusLibrosTest #test14CannotCheckoutOnExpiredCart stamp: 'FedericoSabatini 11/30/2020 21:00:19'!
ERROR!

!testRun: #FacadeTusLibrosTest #test14CannotCheckoutOnExpiredCart stamp: 'FedericoSabatini 11/30/2020 21:00:23'!
ERROR!
!FacadeTusLibrosTest methodsFor: 'setup' stamp: 'FedericoSabatini 11/30/2020 21:00:34' prior: 50889912 overrides: 16927572!
setUp

	testObjectsFactory := StoreTestObjectsFactory new.
	debitBehavior := [ :anAmount :aCreditCard | ].
	
	clockBehavior := [ testObjectsFactory now ].! !

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'FedericoSabatini 11/30/2020 21:00:36'!
PASSED!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'FedericoSabatini 11/30/2020 21:00:36'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'FedericoSabatini 11/30/2020 21:00:36'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'FedericoSabatini 11/30/2020 21:00:36'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'FedericoSabatini 11/30/2020 21:00:37'!
PASSED!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'FedericoSabatini 11/30/2020 21:00:37'!
PASSED!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'FedericoSabatini 11/30/2020 21:00:37'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'FedericoSabatini 11/30/2020 21:00:37'!
PASSED!

!testRun: #FacadeTusLibrosTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'FedericoSabatini 11/30/2020 21:00:37'!
PASSED!

!testRun: #FacadeTusLibrosTest #test10CannotCheckoutToUnknownCartID stamp: 'FedericoSabatini 11/30/2020 21:00:37'!
PASSED!

!testRun: #FacadeTusLibrosTest #test11CannotListAnUnknownCartID stamp: 'FedericoSabatini 11/30/2020 21:00:37'!
PASSED!

!testRun: #FacadeTusLibrosTest #test12CannotAddOnExpiredCart stamp: 'FedericoSabatini 11/30/2020 21:00:37'!
PASSED!

!testRun: #FacadeTusLibrosTest #test13CannotListOnExpiredCart stamp: 'FedericoSabatini 11/30/2020 21:00:37'!
PASSED!

!testRun: #FacadeTusLibrosTest #test14CannotCheckoutOnExpiredCart stamp: 'FedericoSabatini 11/30/2020 21:00:37'!
PASSED!

----SNAPSHOT----(30 November 2020 21:00:45) CuisUniversity-4384.image priorSource: 17867543!
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/30/2020 21:07:33'!
test15

	| authenticator tusLibros cartID |

	authenticator := Dictionary with: 1 -> 'pass' with: 2 -> 'pass'.
	
	tusLibros := FacadeTusLibros 
		withAuthenticator: authenticator 
		withCatalog: testObjectsFactory defaultCatalog 
		usingClock: self.
		
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	clockBehavior := [ testObjectsFactory now next: 10*minute ].
	
	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	
	self assert: (tusLibros expirationOfCart: cartID isGreaterThan: (testObjectsFactory now next: 20*minute)).! !
!FacadeTusLibrosTest methodsFor: 'setup' stamp: 'FedericoSabatini 11/30/2020 21:12:28' prior: 50890525 overrides: 16927572!
setUp

	testObjectsFactory := StoreTestObjectsFactory new.
	
	debitBehavior := [ :anAmount :aCreditCard | ].
	clockBehavior := [ testObjectsFactory now ].! !

!methodRemoval: FacadeTusLibros #initializeWithAuthenticator:withCatalog:andExpiringTime: stamp: 'FedericoSabatini 11/30/2020 21:13:47'!
initializeWithAuthenticator: anAuthenticator withCatalog: aCatalog andExpiringTime: anExpiringTime 

	authenticator := anAuthenticator.
	catalog := aCatalog.
	expiringTime := anExpiringTime.
	carts := Dictionary new.
	currentID := 0.
	salesBook := OrderedCollection new.!

!methodRemoval: FacadeTusLibros class #withAuthenticator:withCatalog:andExpiringTime: stamp: 'FedericoSabatini 11/30/2020 21:13:51'!
withAuthenticator: anAuthenticator withCatalog: aCatalog andExpiringTime: anExpiringTime

	^self new initializeWithAuthenticator: anAuthenticator withCatalog: aCatalog andExpiringTime: anExpiringTime.!

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'FedericoSabatini 11/30/2020 21:13:55'!
PASSED!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'FedericoSabatini 11/30/2020 21:13:55'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'FedericoSabatini 11/30/2020 21:13:55'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'FedericoSabatini 11/30/2020 21:13:55'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'FedericoSabatini 11/30/2020 21:13:55'!
PASSED!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'FedericoSabatini 11/30/2020 21:13:55'!
PASSED!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'FedericoSabatini 11/30/2020 21:13:55'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'FedericoSabatini 11/30/2020 21:13:55'!
PASSED!

!testRun: #FacadeTusLibrosTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'FedericoSabatini 11/30/2020 21:13:55'!
PASSED!

!testRun: #FacadeTusLibrosTest #test10CannotCheckoutToUnknownCartID stamp: 'FedericoSabatini 11/30/2020 21:13:55'!
PASSED!

!testRun: #FacadeTusLibrosTest #test11CannotListAnUnknownCartID stamp: 'FedericoSabatini 11/30/2020 21:13:55'!
PASSED!

!testRun: #FacadeTusLibrosTest #test12CannotAddOnExpiredCart stamp: 'FedericoSabatini 11/30/2020 21:13:56'!
PASSED!

!testRun: #FacadeTusLibrosTest #test13CannotListOnExpiredCart stamp: 'FedericoSabatini 11/30/2020 21:13:56'!
PASSED!

!testRun: #FacadeTusLibrosTest #test14CannotCheckoutOnExpiredCart stamp: 'FedericoSabatini 11/30/2020 21:13:56'!
PASSED!

!testRun: #FacadeTusLibrosTest #test15 stamp: 'FedericoSabatini 11/30/2020 21:13:56'!
ERROR!

!testRun: #FacadeTusLibrosTest #test15 stamp: 'FedericoSabatini 11/30/2020 21:13:56'!
ERROR!
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 11/30/2020 21:26:15' prior: 50890591!
test15

	| authenticator tusLibros cartID |

	authenticator := Dictionary with: 1 -> 'pass' with: 2 -> 'pass'.
	
	tusLibros := FacadeTusLibros 
		withAuthenticator: authenticator 
		withCatalog: testObjectsFactory defaultCatalog 
		usingClock: self.
		
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	clockBehavior := [ testObjectsFactory now next: 10*minute ].
	
	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.! !

----SNAPSHOT----(30 November 2020 21:26:22) CuisUniversity-4384.image priorSource: 17885975!

----STARTUP---- (30 November 2020 21:28:54) as /mnt/sdb5/Ingenieria1/linux64/CuisUniversity-4384.image!


----End fileIn of /mnt/sdb5/Ingenieria1/linux64/TusLibros-Solucion.st----!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'DS 11/30/2020 21:29:19'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'DS 11/30/2020 21:29:19'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'DS 11/30/2020 21:29:19'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'DS 11/30/2020 21:29:19'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'DS 11/30/2020 21:29:19'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'DS 11/30/2020 21:29:19'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'DS 11/30/2020 21:29:19'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'DS 11/30/2020 21:29:19'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'DS 11/30/2020 21:29:19'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'DS 11/30/2020 21:29:19'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'DS 11/30/2020 21:29:19'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'DS 11/30/2020 21:29:19'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'DS 11/30/2020 21:29:19'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'DS 11/30/2020 21:29:19'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberShouldHave16Characters stamp: 'DS 11/30/2020 21:29:19'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardOwnerCanNotBeEmpty stamp: 'DS 11/30/2020 21:29:19'!
PASSED!

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'DS 11/30/2020 21:29:19'!
PASSED!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 11/30/2020 21:29:19'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/30/2020 21:29:19'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 11/30/2020 21:29:19'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/30/2020 21:29:19'!
PASSED!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/30/2020 21:29:19'!
PASSED!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'DS 11/30/2020 21:29:19'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'DS 11/30/2020 21:29:19'!
PASSED!

!testRun: #FacadeTusLibrosTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'DS 11/30/2020 21:29:19'!
PASSED!

!testRun: #FacadeTusLibrosTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 11/30/2020 21:29:19'!
PASSED!

!testRun: #FacadeTusLibrosTest #test11CannotListAnUnknownCartID stamp: 'DS 11/30/2020 21:29:19'!
PASSED!

!testRun: #FacadeTusLibrosTest #test12CannotAddOnExpiredCart stamp: 'DS 11/30/2020 21:29:19'!
PASSED!

!testRun: #FacadeTusLibrosTest #test13CannotListOnExpiredCart stamp: 'DS 11/30/2020 21:29:19'!
PASSED!

!testRun: #FacadeTusLibrosTest #test14CannotCheckoutOnExpiredCart stamp: 'DS 11/30/2020 21:29:19'!
PASSED!

!testRun: #FacadeTusLibrosTest #test15 stamp: 'DS 11/30/2020 21:29:19'!
PASSED!
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'DS 11/30/2020 21:34:48' prior: 50870531!
test15

	| authenticator tusLibros cartID updatedTime |

	authenticator := Dictionary with: 1 -> 'pass' with: 2 -> 'pass'.
	
	tusLibros := FacadeTusLibros 
		withAuthenticator: authenticator 
		withCatalog: testObjectsFactory defaultCatalog 
		usingClock: self.
		
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	clockBehavior := [ 
		updatedTime :=  testObjectsFactory now next: 10*minute.
		updatedTime.
	].

	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	
	self assert: (testObjectsFactory now next: 10*minute) equals: updatedTime.! !

!testRun: #FacadeTusLibrosTest #test15 stamp: 'DS 11/30/2020 21:34:49'!
PASSED!

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'DS 11/30/2020 21:34:49'!
PASSED!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 11/30/2020 21:34:49'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/30/2020 21:34:49'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 11/30/2020 21:34:49'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/30/2020 21:34:49'!
PASSED!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/30/2020 21:34:49'!
PASSED!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'DS 11/30/2020 21:34:49'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'DS 11/30/2020 21:34:49'!
PASSED!

!testRun: #FacadeTusLibrosTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'DS 11/30/2020 21:34:49'!
PASSED!

!testRun: #FacadeTusLibrosTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 11/30/2020 21:34:49'!
PASSED!

!testRun: #FacadeTusLibrosTest #test11CannotListAnUnknownCartID stamp: 'DS 11/30/2020 21:34:49'!
PASSED!

!testRun: #FacadeTusLibrosTest #test12CannotAddOnExpiredCart stamp: 'DS 11/30/2020 21:34:49'!
PASSED!

!testRun: #FacadeTusLibrosTest #test13CannotListOnExpiredCart stamp: 'DS 11/30/2020 21:34:49'!
PASSED!

!testRun: #FacadeTusLibrosTest #test14CannotCheckoutOnExpiredCart stamp: 'DS 11/30/2020 21:34:49'!
PASSED!

!testRun: #FacadeTusLibrosTest #test15 stamp: 'DS 11/30/2020 21:34:49'!
PASSED!
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'DS 11/30/2020 21:38:22' prior: 50871380!
test15

	| authenticator tusLibros cartID checkIfExpired updatedTime |

	authenticator := Dictionary with: 1 -> 'pass' with: 2 -> 'pass'.
	
	tusLibros := FacadeTusLibros 
		withAuthenticator: authenticator 
		withCatalog: testObjectsFactory defaultCatalog 
		usingClock: self.
		
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.

	checkIfExpired := False.
	clockBehavior := [
		checkIfExpired
			ifFalse: [
				checkIfExpired := True.
				testObjectsFactory now next: 10*minute.
			] ifTrue: [
				updatedTime :=  testObjectsFactory now next: 10*minute.
				updatedTime.
			].		
	].

	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	
	self assert: (testObjectsFactory now next: 10*minute) equals: updatedTime.! !

!testRun: #FacadeTusLibrosTest #test15 stamp: 'DS 11/30/2020 21:38:23'!
ERROR!

!testRun: #FacadeTusLibrosTest #test15 stamp: 'DS 11/30/2020 21:38:28'!
ERROR!

!testRun: #FacadeTusLibrosTest #test15 stamp: 'DS 11/30/2020 21:39:07'!
ERROR!

!testRun: #FacadeTusLibrosTest #test15 stamp: 'DS 11/30/2020 21:39:23'!
ERROR!

testObjectsFactory now!

testObjectsFactory now next: 10*minute.!

updatedTime!

clockBehavior value!
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'DS 11/30/2020 21:42:27' prior: 50871456!
test15

	| authenticator tusLibros cartID checkIfExpired updatedTime |

	authenticator := Dictionary with: 1 -> 'pass' with: 2 -> 'pass'.
	
	tusLibros := FacadeTusLibros 
		withAuthenticator: authenticator 
		withCatalog: testObjectsFactory defaultCatalog 
		usingClock: self.
		
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.

	checkIfExpired := False.
	clockBehavior := [
		checkIfExpired
			ifFalse: [
				checkIfExpired := True.
				testObjectsFactory now next: 10*minute.
			] ifTrue: [
				updatedTime :=  testObjectsFactory now next: 5*minute.
				updatedTime.
			].		
	].

	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	
	self assert: (testObjectsFactory now next: 5*minute) equals: updatedTime.! !

!testRun: #FacadeTusLibrosTest #test15 stamp: 'DS 11/30/2020 21:42:32'!
ERROR!

clockBehavior value!

clockBehavior value: True!
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'DS 11/30/2020 21:43:37' prior: 50871497!
test15

	| authenticator tusLibros cartID checkIfExpired updatedTime |

	authenticator := Dictionary with: 1 -> 'pass' with: 2 -> 'pass'.
	
	tusLibros := FacadeTusLibros 
		withAuthenticator: authenticator 
		withCatalog: testObjectsFactory defaultCatalog 
		usingClock: self.
		
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.

	checkIfExpired := False.
	clockBehavior := [
		checkIfExpired
			ifFalse: [
				checkIfExpired := True.
				^testObjectsFactory now next: 10*minute.
			] ifTrue: [
				updatedTime :=  testObjectsFactory now next: 5*minute.
				^updatedTime.
			].		
	].

	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	
	self assert: (testObjectsFactory now next: 5*minute) equals: updatedTime.! !

!testRun: #FacadeTusLibrosTest #test15 stamp: 'DS 11/30/2020 21:43:39'!
ERROR!

!testRun: #FacadeTusLibrosTest #test15 stamp: 'DS 11/30/2020 21:43:58'!
ERROR!

!testRun: #FacadeTusLibrosTest #test15 stamp: 'DS 11/30/2020 21:44:03'!
ERROR!
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'DS 11/30/2020 21:44:20' prior: 50871529!
test15

	| authenticator tusLibros cartID checkIfExpired updatedTime |

	authenticator := Dictionary with: 1 -> 'pass' with: 2 -> 'pass'.
	
	tusLibros := FacadeTusLibros 
		withAuthenticator: authenticator 
		withCatalog: testObjectsFactory defaultCatalog 
		usingClock: self.
		
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.

	checkIfExpired := False.
	clockBehavior := [
		checkIfExpired
			ifFalse: [
				checkIfExpired := True.
				^testObjectsFactory now next: 10*minute.
			] ifTrue: [
				updatedTime :=  testObjectsFactory now next: 5*minute.
				^updatedTime.
			].		
	].

	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	
	self assert: (testObjectsFactory now next: 5*minute) equals: updatedTime.! !

!testRun: #FacadeTusLibrosTest #test15 stamp: 'DS 11/30/2020 21:44:21'!
ERROR!

clockBehavior value!

!testRun: #FacadeTusLibrosTest #test15 stamp: 'DS 11/30/2020 21:44:47'!
ERROR!

!testRun: #FacadeTusLibrosTest #test15 stamp: 'DS 11/30/2020 21:44:54'!
ERROR!

clockBehavior!

self!

self value!
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'DS 11/30/2020 21:46:35' prior: 50871564!
test15

	| authenticator tusLibros cartID checkIfExpired updatedTime |

	authenticator := Dictionary with: 1 -> 'pass' with: 2 -> 'pass'.
	
	tusLibros := FacadeTusLibros 
		withAuthenticator: authenticator 
		withCatalog: testObjectsFactory defaultCatalog 
		usingClock: self.
		
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.

	checkIfExpired := 1.
	clockBehavior := [
		checkIfExpired = 1
			ifTrue: [
				checkIfExpired := 2.
				^testObjectsFactory now next: 10*minute.
			] ifFalse: [
				updatedTime :=  testObjectsFactory now next: 5*minute.
				^updatedTime.
			].		
	].

	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	
	self assert: (testObjectsFactory now next: 5*minute) equals: updatedTime.! !

!testRun: #FacadeTusLibrosTest #test15 stamp: 'DS 11/30/2020 21:46:36'!
PASSED!

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'DS 11/30/2020 21:46:36'!
PASSED!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 11/30/2020 21:46:36'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/30/2020 21:46:36'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 11/30/2020 21:46:36'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/30/2020 21:46:36'!
PASSED!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/30/2020 21:46:36'!
PASSED!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'DS 11/30/2020 21:46:36'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'DS 11/30/2020 21:46:36'!
PASSED!

!testRun: #FacadeTusLibrosTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'DS 11/30/2020 21:46:36'!
PASSED!

!testRun: #FacadeTusLibrosTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 11/30/2020 21:46:36'!
PASSED!

!testRun: #FacadeTusLibrosTest #test11CannotListAnUnknownCartID stamp: 'DS 11/30/2020 21:46:36'!
PASSED!

!testRun: #FacadeTusLibrosTest #test12CannotAddOnExpiredCart stamp: 'DS 11/30/2020 21:46:36'!
PASSED!

!testRun: #FacadeTusLibrosTest #test13CannotListOnExpiredCart stamp: 'DS 11/30/2020 21:46:36'!
PASSED!

!testRun: #FacadeTusLibrosTest #test14CannotCheckoutOnExpiredCart stamp: 'DS 11/30/2020 21:46:36'!
PASSED!

!testRun: #FacadeTusLibrosTest #test15 stamp: 'DS 11/30/2020 21:46:36'!
PASSED!

!testRun: #FacadeTusLibrosTest #test15 stamp: 'DS 11/30/2020 21:47:05'!
PASSED!

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'DS 11/30/2020 21:47:05'!
PASSED!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 11/30/2020 21:47:05'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/30/2020 21:47:05'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 11/30/2020 21:47:05'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/30/2020 21:47:05'!
PASSED!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/30/2020 21:47:05'!
PASSED!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'DS 11/30/2020 21:47:05'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'DS 11/30/2020 21:47:05'!
PASSED!

!testRun: #FacadeTusLibrosTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'DS 11/30/2020 21:47:05'!
PASSED!

!testRun: #FacadeTusLibrosTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 11/30/2020 21:47:05'!
PASSED!

!testRun: #FacadeTusLibrosTest #test11CannotListAnUnknownCartID stamp: 'DS 11/30/2020 21:47:05'!
PASSED!

!testRun: #FacadeTusLibrosTest #test12CannotAddOnExpiredCart stamp: 'DS 11/30/2020 21:47:05'!
PASSED!

!testRun: #FacadeTusLibrosTest #test13CannotListOnExpiredCart stamp: 'DS 11/30/2020 21:47:05'!
PASSED!

!testRun: #FacadeTusLibrosTest #test14CannotCheckoutOnExpiredCart stamp: 'DS 11/30/2020 21:47:05'!
PASSED!

!testRun: #FacadeTusLibrosTest #test15 stamp: 'DS 11/30/2020 21:47:05'!
PASSED!

false!
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'DS 11/30/2020 21:47:32' prior: 50871601!
test15

	| authenticator tusLibros cartID checkIfExpired updatedTime |

	authenticator := Dictionary with: 1 -> 'pass' with: 2 -> 'pass'.
	
	tusLibros := FacadeTusLibros 
		withAuthenticator: authenticator 
		withCatalog: testObjectsFactory defaultCatalog 
		usingClock: self.
		
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.

	checkIfExpired := false.
	clockBehavior := [
		checkIfExpired
			ifFalse: [
				checkIfExpired := true.
				^testObjectsFactory now next: 10*minute.
			] ifTrue: [
				updatedTime :=  testObjectsFactory now next: 5*minute.
				^updatedTime.
			].		
	].

	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	
	self assert: (testObjectsFactory now next: 5*minute) equals: updatedTime.! !

!testRun: #FacadeTusLibrosTest #test15 stamp: 'DS 11/30/2020 21:47:33'!
PASSED!

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'DS 11/30/2020 21:47:33'!
PASSED!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 11/30/2020 21:47:33'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/30/2020 21:47:33'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 11/30/2020 21:47:33'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/30/2020 21:47:33'!
PASSED!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/30/2020 21:47:33'!
PASSED!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'DS 11/30/2020 21:47:33'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'DS 11/30/2020 21:47:33'!
PASSED!

!testRun: #FacadeTusLibrosTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'DS 11/30/2020 21:47:33'!
PASSED!

!testRun: #FacadeTusLibrosTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 11/30/2020 21:47:33'!
PASSED!

!testRun: #FacadeTusLibrosTest #test11CannotListAnUnknownCartID stamp: 'DS 11/30/2020 21:47:33'!
PASSED!

!testRun: #FacadeTusLibrosTest #test12CannotAddOnExpiredCart stamp: 'DS 11/30/2020 21:47:33'!
PASSED!

!testRun: #FacadeTusLibrosTest #test13CannotListOnExpiredCart stamp: 'DS 11/30/2020 21:47:33'!
PASSED!

!testRun: #FacadeTusLibrosTest #test14CannotCheckoutOnExpiredCart stamp: 'DS 11/30/2020 21:47:33'!
PASSED!

!testRun: #FacadeTusLibrosTest #test15 stamp: 'DS 11/30/2020 21:47:33'!
PASSED!

!testRun: #FacadeTusLibrosTest #test15 stamp: 'DS 11/30/2020 21:49:56'!
PASSED!

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'DS 11/30/2020 21:49:56'!
PASSED!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 11/30/2020 21:49:56'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/30/2020 21:49:56'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 11/30/2020 21:49:56'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/30/2020 21:49:56'!
PASSED!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/30/2020 21:49:56'!
PASSED!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'DS 11/30/2020 21:49:56'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'DS 11/30/2020 21:49:56'!
PASSED!

!testRun: #FacadeTusLibrosTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'DS 11/30/2020 21:49:56'!
PASSED!

!testRun: #FacadeTusLibrosTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 11/30/2020 21:49:56'!
PASSED!

!testRun: #FacadeTusLibrosTest #test11CannotListAnUnknownCartID stamp: 'DS 11/30/2020 21:49:56'!
PASSED!

!testRun: #FacadeTusLibrosTest #test12CannotAddOnExpiredCart stamp: 'DS 11/30/2020 21:49:56'!
PASSED!

!testRun: #FacadeTusLibrosTest #test13CannotListOnExpiredCart stamp: 'DS 11/30/2020 21:49:56'!
PASSED!

!testRun: #FacadeTusLibrosTest #test14CannotCheckoutOnExpiredCart stamp: 'DS 11/30/2020 21:49:56'!
PASSED!

!testRun: #FacadeTusLibrosTest #test15 stamp: 'DS 11/30/2020 21:49:56'!
PASSED!
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'DS 11/30/2020 21:50:23' prior: 50871736!
test15

	| authenticator tusLibros cartID checkIfExpired updatedTime |

	authenticator := Dictionary with: 1 -> 'pass' with: 2 -> 'pass'.
	
	tusLibros := FacadeTusLibros 
		withAuthenticator: authenticator 
		withCatalog: testObjectsFactory defaultCatalog 
		usingClock: self.
		
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.

	checkIfExpired := false.
	clockBehavior := [
		checkIfExpired
			ifFalse: [
				checkIfExpired := true.
				^testObjectsFactory now next: 10*minute.
			] ifTrue: [
				updatedTime :=  testObjectsFactory now next: 5*minute.
				^updatedTime.
			].		
	].

	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	self halt.
	self assert: (testObjectsFactory now next: 5*minute) equals: updatedTime.! !

!testRun: #FacadeTusLibrosTest #test15 stamp: 'DS 11/30/2020 21:50:24'!
PASSED!

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'DS 11/30/2020 21:50:24'!
PASSED!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 11/30/2020 21:50:24'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/30/2020 21:50:24'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 11/30/2020 21:50:24'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/30/2020 21:50:24'!
PASSED!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/30/2020 21:50:24'!
PASSED!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'DS 11/30/2020 21:50:24'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'DS 11/30/2020 21:50:24'!
PASSED!

!testRun: #FacadeTusLibrosTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'DS 11/30/2020 21:50:24'!
PASSED!

!testRun: #FacadeTusLibrosTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 11/30/2020 21:50:24'!
PASSED!

!testRun: #FacadeTusLibrosTest #test11CannotListAnUnknownCartID stamp: 'DS 11/30/2020 21:50:24'!
PASSED!

!testRun: #FacadeTusLibrosTest #test12CannotAddOnExpiredCart stamp: 'DS 11/30/2020 21:50:24'!
PASSED!

!testRun: #FacadeTusLibrosTest #test13CannotListOnExpiredCart stamp: 'DS 11/30/2020 21:50:24'!
PASSED!

!testRun: #FacadeTusLibrosTest #test14CannotCheckoutOnExpiredCart stamp: 'DS 11/30/2020 21:50:24'!
PASSED!

!testRun: #FacadeTusLibrosTest #test15 stamp: 'DS 11/30/2020 21:50:24'!
PASSED!
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'DS 11/30/2020 21:50:29' prior: 50871871!
test15

	| authenticator tusLibros cartID checkIfExpired updatedTime |

	authenticator := Dictionary with: 1 -> 'pass' with: 2 -> 'pass'.
	
	tusLibros := FacadeTusLibros 
		withAuthenticator: authenticator 
		withCatalog: testObjectsFactory defaultCatalog 
		usingClock: self.
		
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.

	checkIfExpired := false.
	clockBehavior := [
		checkIfExpired
			ifFalse: [
				checkIfExpired := true.
				^testObjectsFactory now next: 10*minute.
			] ifTrue: [
				updatedTime :=  testObjectsFactory now next: 5*minute.
				^updatedTime.
			].		
	].

	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	self assert: (testObjectsFactory now next: 5*minute) equals: updatedTime.! !

!testRun: #FacadeTusLibrosTest #test15 stamp: 'DS 11/30/2020 21:50:30'!
PASSED!

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'DS 11/30/2020 21:50:30'!
PASSED!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 11/30/2020 21:50:30'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/30/2020 21:50:30'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 11/30/2020 21:50:30'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/30/2020 21:50:30'!
PASSED!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/30/2020 21:50:30'!
PASSED!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'DS 11/30/2020 21:50:30'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'DS 11/30/2020 21:50:30'!
PASSED!

!testRun: #FacadeTusLibrosTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'DS 11/30/2020 21:50:30'!
PASSED!

!testRun: #FacadeTusLibrosTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 11/30/2020 21:50:30'!
PASSED!

!testRun: #FacadeTusLibrosTest #test11CannotListAnUnknownCartID stamp: 'DS 11/30/2020 21:50:30'!
PASSED!

!testRun: #FacadeTusLibrosTest #test12CannotAddOnExpiredCart stamp: 'DS 11/30/2020 21:50:30'!
PASSED!

!testRun: #FacadeTusLibrosTest #test13CannotListOnExpiredCart stamp: 'DS 11/30/2020 21:50:30'!
PASSED!

!testRun: #FacadeTusLibrosTest #test14CannotCheckoutOnExpiredCart stamp: 'DS 11/30/2020 21:50:30'!
PASSED!

!testRun: #FacadeTusLibrosTest #test15 stamp: 'DS 11/30/2020 21:50:30'!
PASSED!
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'DS 11/30/2020 21:50:46' prior: 50871953!
test15

	| authenticator tusLibros cartID checkIfExpired updatedTime |

	authenticator := Dictionary with: 1 -> 'pass' with: 2 -> 'pass'.
	
	tusLibros := FacadeTusLibros 
		withAuthenticator: authenticator 
		withCatalog: testObjectsFactory defaultCatalog 
		usingClock: self.
		
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.

	checkIfExpired := 1.
	clockBehavior := [
		checkIfExpired
			ifFalse: [
				checkIfExpired := true.
				^testObjectsFactory now next: 10*minute.
			] ifTrue: [
				updatedTime :=  testObjectsFactory now next: 5*minute.
				^updatedTime.
			].		
	].

	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	self assert: (testObjectsFactory now next: 5*minute) equals: updatedTime.! !

!testRun: #FacadeTusLibrosTest #test15 stamp: 'DS 11/30/2020 21:50:47'!
ERROR!
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'DS 11/30/2020 21:51:25' prior: 50872034!
test15

	| authenticator tusLibros cartID checkIfExpired updatedTime |

	authenticator := Dictionary with: 1 -> 'pass' with: 2 -> 'pass'.
	
	tusLibros := FacadeTusLibros 
		withAuthenticator: authenticator 
		withCatalog: testObjectsFactory defaultCatalog 
		usingClock: self.
		
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.

	checkIfExpired := 1.
	clockBehavior := [
		checkIfExpired = 1
			ifTrue: [
				checkIfExpired := 2.
				^testObjectsFactory now next: 10*minute.
			] ifFalse: [
				updatedTime :=  testObjectsFactory now next: 5*minute.
				^updatedTime.
			].		
	].

	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	self assert: (testObjectsFactory now next: 5*minute) equals: updatedTime.! !

!testRun: #FacadeTusLibrosTest #test15 stamp: 'DS 11/30/2020 21:51:26'!
PASSED!

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'DS 11/30/2020 21:51:26'!
PASSED!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 11/30/2020 21:51:26'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/30/2020 21:51:26'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 11/30/2020 21:51:26'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/30/2020 21:51:26'!
PASSED!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/30/2020 21:51:26'!
PASSED!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'DS 11/30/2020 21:51:26'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'DS 11/30/2020 21:51:26'!
PASSED!

!testRun: #FacadeTusLibrosTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'DS 11/30/2020 21:51:26'!
PASSED!

!testRun: #FacadeTusLibrosTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 11/30/2020 21:51:26'!
PASSED!

!testRun: #FacadeTusLibrosTest #test11CannotListAnUnknownCartID stamp: 'DS 11/30/2020 21:51:26'!
PASSED!

!testRun: #FacadeTusLibrosTest #test12CannotAddOnExpiredCart stamp: 'DS 11/30/2020 21:51:26'!
PASSED!

!testRun: #FacadeTusLibrosTest #test13CannotListOnExpiredCart stamp: 'DS 11/30/2020 21:51:26'!
PASSED!

!testRun: #FacadeTusLibrosTest #test14CannotCheckoutOnExpiredCart stamp: 'DS 11/30/2020 21:51:26'!
PASSED!

!testRun: #FacadeTusLibrosTest #test15 stamp: 'DS 11/30/2020 21:51:26'!
PASSED!
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'DS 11/30/2020 21:51:30' prior: 50872064!
test15

	| authenticator tusLibros cartID checkIfExpired updatedTime |

	authenticator := Dictionary with: 1 -> 'pass' with: 2 -> 'pass'.
	
	tusLibros := FacadeTusLibros 
		withAuthenticator: authenticator 
		withCatalog: testObjectsFactory defaultCatalog 
		usingClock: self.
		
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.

	checkIfExpired := 1.
	clockBehavior := [
		checkIfExpired = 1
			ifTrue: [
				checkIfExpired := 2.
				^testObjectsFactory now next: 10*minute.
			] ifFalse: [
			self halt.
				updatedTime :=  testObjectsFactory now next: 5*minute.
				^updatedTime.
			].		
	].

	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	self assert: (testObjectsFactory now next: 5*minute) equals: updatedTime.! !

!testRun: #FacadeTusLibrosTest #test15 stamp: 'DS 11/30/2020 21:51:30'!
PASSED!

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'DS 11/30/2020 21:51:30'!
PASSED!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 11/30/2020 21:51:30'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/30/2020 21:51:30'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 11/30/2020 21:51:30'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/30/2020 21:51:30'!
PASSED!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/30/2020 21:51:30'!
PASSED!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'DS 11/30/2020 21:51:30'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'DS 11/30/2020 21:51:30'!
PASSED!

!testRun: #FacadeTusLibrosTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'DS 11/30/2020 21:51:30'!
PASSED!

!testRun: #FacadeTusLibrosTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 11/30/2020 21:51:30'!
PASSED!

!testRun: #FacadeTusLibrosTest #test11CannotListAnUnknownCartID stamp: 'DS 11/30/2020 21:51:30'!
PASSED!

!testRun: #FacadeTusLibrosTest #test12CannotAddOnExpiredCart stamp: 'DS 11/30/2020 21:51:30'!
PASSED!

!testRun: #FacadeTusLibrosTest #test13CannotListOnExpiredCart stamp: 'DS 11/30/2020 21:51:30'!
PASSED!

!testRun: #FacadeTusLibrosTest #test14CannotCheckoutOnExpiredCart stamp: 'DS 11/30/2020 21:51:30'!
PASSED!

!testRun: #FacadeTusLibrosTest #test15 stamp: 'DS 11/30/2020 21:51:30'!
PASSED!

self halt!
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'DS 11/30/2020 21:51:43' prior: 50872145!
test15

	| authenticator tusLibros cartID checkIfExpired updatedTime |

	authenticator := Dictionary with: 1 -> 'pass' with: 2 -> 'pass'.
	
	tusLibros := FacadeTusLibros 
		withAuthenticator: authenticator 
		withCatalog: testObjectsFactory defaultCatalog 
		usingClock: self.
		
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.

	checkIfExpired := 1.
	clockBehavior := [
		checkIfExpired = 1
			ifTrue: [
				checkIfExpired := 2.
				^testObjectsFactory now next: 10*minute.
			] ifFalse: [
				updatedTime :=  testObjectsFactory now next: 5*minute.
				^updatedTime.
			].		
	].

	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	self assert: (testObjectsFactory now next: 5*minute) equals: updatedTime.! !
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'DS 11/30/2020 21:51:57' prior: 50872227!
test15

	| authenticator tusLibros cartID checkIfExpired updatedTime |

	authenticator := Dictionary with: 1 -> 'pass' with: 2 -> 'pass'.
	
	tusLibros := FacadeTusLibros 
		withAuthenticator: authenticator 
		withCatalog: testObjectsFactory defaultCatalog 
		usingClock: self.
		
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.

	checkIfExpired := 1.
	clockBehavior := [
		checkIfExpired = 1
			ifTrue: [
				checkIfExpired := 2.
				^testObjectsFactory now next: 10*minute.
			] ifFalse: [
				updatedTime :=  testObjectsFactory now next: 5*minute.
				^updatedTime.
			].		
	].

	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	self assert: (testObjectsFactory now next: 5*minute) equals: updatedTime.
	self assert: updatedTime .! !

!testRun: #FacadeTusLibrosTest #test15 stamp: 'DS 11/30/2020 21:52:00'!
PASSED!

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'DS 11/30/2020 21:52:00'!
PASSED!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 11/30/2020 21:52:00'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/30/2020 21:52:00'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 11/30/2020 21:52:00'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/30/2020 21:52:00'!
PASSED!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/30/2020 21:52:00'!
PASSED!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'DS 11/30/2020 21:52:00'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'DS 11/30/2020 21:52:00'!
PASSED!

!testRun: #FacadeTusLibrosTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'DS 11/30/2020 21:52:00'!
PASSED!

!testRun: #FacadeTusLibrosTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 11/30/2020 21:52:00'!
PASSED!

!testRun: #FacadeTusLibrosTest #test11CannotListAnUnknownCartID stamp: 'DS 11/30/2020 21:52:00'!
PASSED!

!testRun: #FacadeTusLibrosTest #test12CannotAddOnExpiredCart stamp: 'DS 11/30/2020 21:52:00'!
PASSED!

!testRun: #FacadeTusLibrosTest #test13CannotListOnExpiredCart stamp: 'DS 11/30/2020 21:52:00'!
PASSED!

!testRun: #FacadeTusLibrosTest #test14CannotCheckoutOnExpiredCart stamp: 'DS 11/30/2020 21:52:00'!
PASSED!

!testRun: #FacadeTusLibrosTest #test15 stamp: 'DS 11/30/2020 21:52:00'!
PASSED!
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'DS 11/30/2020 21:52:10' prior: 50872254!
test15

	| authenticator tusLibros cartID checkIfExpired updatedTime |

	authenticator := Dictionary with: 1 -> 'pass' with: 2 -> 'pass'.
	
	tusLibros := FacadeTusLibros 
		withAuthenticator: authenticator 
		withCatalog: testObjectsFactory defaultCatalog 
		usingClock: self.
		
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.

	checkIfExpired := 1.
	clockBehavior := [
		checkIfExpired = 1
			ifTrue: [
				checkIfExpired := 2.
				testObjectsFactory now next: 10*minute.
			] ifFalse: [
				updatedTime :=  testObjectsFactory now next: 5*minute.
				updatedTime.
			].		
	].

	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	self assert: (testObjectsFactory now next: 5*minute) equals: updatedTime.! !

!testRun: #FacadeTusLibrosTest #test15 stamp: 'DS 11/30/2020 21:52:11'!
FAILURE!
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'DS 11/30/2020 21:52:31' prior: 50872336!
test15

	| authenticator tusLibros cartID checkIfExpired updatedTime |

	authenticator := Dictionary with: 1 -> 'pass' with: 2 -> 'pass'.
	
	tusLibros := FacadeTusLibros 
		withAuthenticator: authenticator 
		withCatalog: testObjectsFactory defaultCatalog 
		usingClock: self.
		
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.

	checkIfExpired := false.
	clockBehavior := [
		checkIfExpired
			ifFalse: [
				checkIfExpired := true.
				testObjectsFactory now next: 10*minute.
			] ifTrue: [
				updatedTime :=  testObjectsFactory now next: 5*minute.
				updatedTime.
			].		
	].

	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	self assert: (testObjectsFactory now next: 5*minute) equals: updatedTime.! !

!testRun: #FacadeTusLibrosTest #test15 stamp: 'DS 11/30/2020 21:52:35'!
FAILURE!
!FacadeTusLibros methodsFor: 'api rest' stamp: 'DS 11/30/2020 21:54:30' prior: 50870967!
addToCart: aCartID aQuantity: aQuantity of: anItem
	
	| aSessionCart |

	"self assertUnkownCartID: aCartID.	"

	aSessionCart := self cartWith: aCartID.
	
	(aSessionCart expiringTimestamp < clock now) ifTrue: [ self error: self class cartTimeExpiredErrorDescription ].
	carts at: aCartID put: (SessionCart for: aSessionCart cart expiringAt: clock now ).
	
	aSessionCart cart add: aQuantity of: anItem.
	
	! !

!testRun: #FacadeTusLibrosTest #test15 stamp: 'DS 11/30/2020 21:54:32'!
PASSED!

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'DS 11/30/2020 21:54:32'!
PASSED!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 11/30/2020 21:54:32'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/30/2020 21:54:32'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 11/30/2020 21:54:32'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/30/2020 21:54:32'!
PASSED!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/30/2020 21:54:32'!
PASSED!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'DS 11/30/2020 21:54:32'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'DS 11/30/2020 21:54:32'!
PASSED!

!testRun: #FacadeTusLibrosTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'DS 11/30/2020 21:54:32'!
PASSED!

!testRun: #FacadeTusLibrosTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 11/30/2020 21:54:32'!
PASSED!

!testRun: #FacadeTusLibrosTest #test11CannotListAnUnknownCartID stamp: 'DS 11/30/2020 21:54:32'!
PASSED!

!testRun: #FacadeTusLibrosTest #test12CannotAddOnExpiredCart stamp: 'DS 11/30/2020 21:54:32'!
PASSED!

!testRun: #FacadeTusLibrosTest #test13CannotListOnExpiredCart stamp: 'DS 11/30/2020 21:54:32'!
PASSED!

!testRun: #FacadeTusLibrosTest #test14CannotCheckoutOnExpiredCart stamp: 'DS 11/30/2020 21:54:32'!
PASSED!

!testRun: #FacadeTusLibrosTest #test15 stamp: 'DS 11/30/2020 21:54:32'!
PASSED!
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'DS 11/30/2020 21:55:06'!
test16

	| authenticator tusLibros cartID checkIfExpired updatedTime |

	authenticator := Dictionary with: 1 -> 'pass' with: 2 -> 'pass'.
	
	tusLibros := FacadeTusLibros 
		withAuthenticator: authenticator 
		withCatalog: testObjectsFactory defaultCatalog 
		usingClock: self.
		
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.

	checkIfExpired := false.
	clockBehavior := [
		checkIfExpired
			ifFalse: [
				checkIfExpired := true.
				testObjectsFactory now next: 10*minute.
			] ifTrue: [
				updatedTime :=  testObjectsFactory now next: 5*minute.
				updatedTime.
			].		
	].

	tusLibros listCartFor: cartID.
	self assert: (testObjectsFactory now next: 5*minute) equals: updatedTime.! !

!testRun: #FacadeTusLibrosTest #test16 stamp: 'DS 11/30/2020 21:55:07'!
FAILURE!
!FacadeTusLibros methodsFor: 'api rest' stamp: 'DS 11/30/2020 21:55:21' prior: 50871014!
listCartFor: aCartID

	| aSessionCart |
	aSessionCart := self cartWith: aCartID.
	
	(aSessionCart expiringTimestamp < clock now) ifTrue: [ self error: self class cartTimeExpiredErrorDescription ].
	carts at: aCartID put: (SessionCart for: aSessionCart cart expiringAt: clock now ).
	
	^aSessionCart cart items.! !
!FacadeTusLibros methodsFor: 'api rest' stamp: 'DS 11/30/2020 21:55:22' prior: 50872494!
listCartFor: aCartID

	| aSessionCart |
	aSessionCart := self cartWith: aCartID.
	
	(aSessionCart expiringTimestamp < clock now) ifTrue: [ self error: self class cartTimeExpiredErrorDescription ].
	carts at: aCartID put: (SessionCart for: aSessionCart cart expiringAt: clock now ).

	^aSessionCart cart items.! !

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'DS 11/30/2020 21:55:23'!
PASSED!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 11/30/2020 21:55:23'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/30/2020 21:55:23'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 11/30/2020 21:55:23'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/30/2020 21:55:23'!
PASSED!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/30/2020 21:55:23'!
PASSED!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'DS 11/30/2020 21:55:23'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'DS 11/30/2020 21:55:23'!
PASSED!

!testRun: #FacadeTusLibrosTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'DS 11/30/2020 21:55:23'!
PASSED!

!testRun: #FacadeTusLibrosTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 11/30/2020 21:55:23'!
PASSED!

!testRun: #FacadeTusLibrosTest #test11CannotListAnUnknownCartID stamp: 'DS 11/30/2020 21:55:23'!
PASSED!

!testRun: #FacadeTusLibrosTest #test12CannotAddOnExpiredCart stamp: 'DS 11/30/2020 21:55:23'!
PASSED!

!testRun: #FacadeTusLibrosTest #test13CannotListOnExpiredCart stamp: 'DS 11/30/2020 21:55:23'!
PASSED!

!testRun: #FacadeTusLibrosTest #test14CannotCheckoutOnExpiredCart stamp: 'DS 11/30/2020 21:55:23'!
PASSED!

!testRun: #FacadeTusLibrosTest #test15 stamp: 'DS 11/30/2020 21:55:23'!
PASSED!

!testRun: #FacadeTusLibrosTest #test16 stamp: 'DS 11/30/2020 21:55:23'!
PASSED!
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'DS 11/30/2020 21:57:13'!
test17

	| authenticator tusLibros cartID checkIfExpired updatedTime |

	authenticator := Dictionary with: 1 -> 'pass' with: 2 -> 'pass'.
	
	tusLibros := FacadeTusLibros 
		withAuthenticator: authenticator 
		withCatalog: testObjectsFactory defaultCatalog 
		usingClock: self.
		
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.

	checkIfExpired := false.
	clockBehavior := [
		checkIfExpired
			ifFalse: [
				checkIfExpired := true.
				testObjectsFactory now next: 10*minute.
			] ifTrue: [
				updatedTime :=  testObjectsFactory now next: 5*minute.
				updatedTime.
			].		
	].

	
	self assert: (testObjectsFactory now next: 5*minute) equals: updatedTime.! !
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'DS 11/30/2020 21:57:35' prior: 50872574!
test17

	| authenticator tusLibros cartID checkIfExpired updatedTime |

	authenticator := Dictionary with: 1 -> 'pass' with: 2 -> 'pass'.
	
	tusLibros := FacadeTusLibros 
		withAuthenticator: authenticator 
		withCatalog: testObjectsFactory defaultCatalog 
		usingClock: self.
		
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.

	checkIfExpired := false.
	clockBehavior := [
		checkIfExpired
			ifFalse: [
				checkIfExpired := true.
				testObjectsFactory now next: 10*minute.
			] ifTrue: [
				updatedTime :=  testObjectsFactory now next: 5*minute.
				updatedTime.
			].		
	].
	self tusLibros: tusLibros checkoutCartID: cartID.

	self assert: (testObjectsFactory now next: 5*minute) equals: updatedTime.! !

!testRun: #FacadeTusLibrosTest #test17 stamp: 'DS 11/30/2020 21:57:36'!
ERROR!
!FacadeTusLibros methodsFor: 'api rest' stamp: 'DS 11/30/2020 21:58:00' prior: 50870980!
checkOutCart: aCartID withCCN: anCCN withCCED: anCCED andCCO: anCCO throught: aMerchantProccesor on: aDate

	| creditCard aSessionCart cashier |
	
	"self assertUnkownCartID: aCartID."
	aSessionCart := self cartWith: aCartID.
	
	(aSessionCart expiringTimestamp < clock now) ifTrue: [ self error: self class cartTimeExpiredErrorDescription ].
	carts at: aCartID put: (SessionCart for: aSessionCart cart expiringAt: clock now ).

	creditCard := CreditCard withNumber: anCCN withOwner: anCCO expiringOn: anCCED.
	cashier := Cashier toCheckout: aSessionCart cart charging: creditCard throught: aMerchantProccesor on: aDate registeringOn: salesBook.

	^cashier checkOut.! !

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'DS 11/30/2020 21:58:01'!
PASSED!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 11/30/2020 21:58:01'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/30/2020 21:58:01'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 11/30/2020 21:58:01'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/30/2020 21:58:01'!
PASSED!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/30/2020 21:58:01'!
PASSED!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'DS 11/30/2020 21:58:01'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'DS 11/30/2020 21:58:01'!
PASSED!

!testRun: #FacadeTusLibrosTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'DS 11/30/2020 21:58:01'!
PASSED!

!testRun: #FacadeTusLibrosTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 11/30/2020 21:58:01'!
PASSED!

!testRun: #FacadeTusLibrosTest #test11CannotListAnUnknownCartID stamp: 'DS 11/30/2020 21:58:01'!
PASSED!

!testRun: #FacadeTusLibrosTest #test12CannotAddOnExpiredCart stamp: 'DS 11/30/2020 21:58:01'!
PASSED!

!testRun: #FacadeTusLibrosTest #test13CannotListOnExpiredCart stamp: 'DS 11/30/2020 21:58:01'!
PASSED!

!testRun: #FacadeTusLibrosTest #test14CannotCheckoutOnExpiredCart stamp: 'DS 11/30/2020 21:58:01'!
PASSED!

!testRun: #FacadeTusLibrosTest #test15 stamp: 'DS 11/30/2020 21:58:01'!
PASSED!

!testRun: #FacadeTusLibrosTest #test16 stamp: 'DS 11/30/2020 21:58:01'!
PASSED!

!testRun: #FacadeTusLibrosTest #test17 stamp: 'DS 11/30/2020 21:58:01'!
ERROR!

!testRun: #FacadeTusLibrosTest #test17 stamp: 'DS 11/30/2020 21:58:01'!
ERROR!

!testRun: #FacadeTusLibrosTest #test17 stamp: 'DS 11/30/2020 21:58:51'!
ERROR!

aSessionCart expiringTimestamp!

clock now!
!FacadeTusLibros methodsFor: 'api rest' stamp: 'DS 11/30/2020 22:00:35' prior: 50872396!
addToCart: aCartID aQuantity: aQuantity of: anItem
	
	| aSessionCart |

	"self assertUnkownCartID: aCartID.	"

	aSessionCart := self cartWith: aCartID.
	
	(aSessionCart expiringTimestamp < clock now) ifTrue: [ self error: self class cartTimeExpiredErrorDescription ].
	carts at: aCartID put: (SessionCart for: aSessionCart cart expiringAt:  (clock now next: 30*minute) ).
	
	aSessionCart cart add: aQuantity of: anItem.
	
	! !
!FacadeTusLibros methodsFor: 'api rest' stamp: 'DS 11/30/2020 22:00:42' prior: 50872507!
listCartFor: aCartID

	| aSessionCart |
	aSessionCart := self cartWith: aCartID.
	
	(aSessionCart expiringTimestamp < clock now) ifTrue: [ self error: self class cartTimeExpiredErrorDescription ].
	carts at: aCartID put: (SessionCart for: aSessionCart cart expiringAt:  (clock now next: 30*minute) ).

	^aSessionCart cart items.! !
!FacadeTusLibros methodsFor: 'api rest' stamp: 'DS 11/30/2020 22:00:47' prior: 50872633!
checkOutCart: aCartID withCCN: anCCN withCCED: anCCED andCCO: anCCO throught: aMerchantProccesor on: aDate

	| creditCard aSessionCart cashier |
	
	"self assertUnkownCartID: aCartID."
	aSessionCart := self cartWith: aCartID.
	
	(aSessionCart expiringTimestamp < clock now) ifTrue: [ self error: self class cartTimeExpiredErrorDescription ].
	carts at: aCartID put: (SessionCart for: aSessionCart cart expiringAt:  (clock now next: 30*minute) ).

	creditCard := CreditCard withNumber: anCCN withOwner: anCCO expiringOn: anCCED.
	cashier := Cashier toCheckout: aSessionCart cart charging: creditCard throught: aMerchantProccesor on: aDate registeringOn: salesBook.

	^cashier checkOut.! !

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'DS 11/30/2020 22:00:48'!
PASSED!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 11/30/2020 22:00:48'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/30/2020 22:00:48'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 11/30/2020 22:00:48'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/30/2020 22:00:48'!
PASSED!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/30/2020 22:00:48'!
PASSED!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'DS 11/30/2020 22:00:48'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'DS 11/30/2020 22:00:48'!
PASSED!

!testRun: #FacadeTusLibrosTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'DS 11/30/2020 22:00:48'!
PASSED!

!testRun: #FacadeTusLibrosTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 11/30/2020 22:00:48'!
PASSED!

!testRun: #FacadeTusLibrosTest #test11CannotListAnUnknownCartID stamp: 'DS 11/30/2020 22:00:48'!
PASSED!

!testRun: #FacadeTusLibrosTest #test12CannotAddOnExpiredCart stamp: 'DS 11/30/2020 22:00:48'!
PASSED!

!testRun: #FacadeTusLibrosTest #test13CannotListOnExpiredCart stamp: 'DS 11/30/2020 22:00:48'!
PASSED!

!testRun: #FacadeTusLibrosTest #test14CannotCheckoutOnExpiredCart stamp: 'DS 11/30/2020 22:00:48'!
PASSED!

!testRun: #FacadeTusLibrosTest #test15 stamp: 'DS 11/30/2020 22:00:48'!
PASSED!

!testRun: #FacadeTusLibrosTest #test16 stamp: 'DS 11/30/2020 22:00:48'!
PASSED!

!testRun: #FacadeTusLibrosTest #test17 stamp: 'DS 11/30/2020 22:00:48'!
PASSED!

----SNAPSHOT----(30 November 2020 22:00:52) CuisUniversity-4384.image priorSource: 17229980!
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'DS 11/30/2020 22:02:07' prior: 50870468!
test12CannotAddOnExpiredCart

	| tusLibros cartID |
	
	tusLibros := testObjectsFactory tusLibros: self.		
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	clockBehavior := [ testObjectsFactory now next: 31*minute ].

	self should: [ tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore ]
		raise: Error
		withMessageText: FacadeTusLibros cartTimeExpiredErrorDescription.! !

!testRun: #FacadeTusLibrosTest #test12CannotAddOnExpiredCart stamp: 'DS 11/30/2020 22:02:09'!
PASSED!

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'DS 11/30/2020 22:02:09'!
PASSED!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 11/30/2020 22:02:09'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/30/2020 22:02:09'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 11/30/2020 22:02:09'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/30/2020 22:02:09'!
PASSED!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/30/2020 22:02:09'!
PASSED!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'DS 11/30/2020 22:02:09'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'DS 11/30/2020 22:02:09'!
PASSED!

!testRun: #FacadeTusLibrosTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'DS 11/30/2020 22:02:09'!
PASSED!

!testRun: #FacadeTusLibrosTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 11/30/2020 22:02:09'!
PASSED!

!testRun: #FacadeTusLibrosTest #test11CannotListAnUnknownCartID stamp: 'DS 11/30/2020 22:02:09'!
PASSED!

!testRun: #FacadeTusLibrosTest #test12CannotAddOnExpiredCart stamp: 'DS 11/30/2020 22:02:09'!
PASSED!

!testRun: #FacadeTusLibrosTest #test13CannotListOnExpiredCart stamp: 'DS 11/30/2020 22:02:09'!
PASSED!

!testRun: #FacadeTusLibrosTest #test14CannotCheckoutOnExpiredCart stamp: 'DS 11/30/2020 22:02:09'!
PASSED!

!testRun: #FacadeTusLibrosTest #test15 stamp: 'DS 11/30/2020 22:02:09'!
PASSED!

!testRun: #FacadeTusLibrosTest #test16 stamp: 'DS 11/30/2020 22:02:09'!
PASSED!

!testRun: #FacadeTusLibrosTest #test17 stamp: 'DS 11/30/2020 22:02:09'!
PASSED!
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'DS 11/30/2020 22:02:20' prior: 50870490!
test13CannotListOnExpiredCart

	| tusLibros cartID |

	tusLibros := testObjectsFactory tusLibros: self.		
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	clockBehavior := [ testObjectsFactory now next: 31*minute ].

	self should: [ tusLibros listCartFor: cartID ]
		raise: Error
		withMessageText: FacadeTusLibros cartTimeExpiredErrorDescription.! !

!testRun: #FacadeTusLibrosTest #test13CannotListOnExpiredCart stamp: 'DS 11/30/2020 22:02:22'!
PASSED!

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'DS 11/30/2020 22:02:22'!
PASSED!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 11/30/2020 22:02:22'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/30/2020 22:02:22'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 11/30/2020 22:02:22'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/30/2020 22:02:22'!
PASSED!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/30/2020 22:02:22'!
PASSED!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'DS 11/30/2020 22:02:22'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'DS 11/30/2020 22:02:22'!
PASSED!

!testRun: #FacadeTusLibrosTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'DS 11/30/2020 22:02:22'!
PASSED!

!testRun: #FacadeTusLibrosTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 11/30/2020 22:02:22'!
PASSED!

!testRun: #FacadeTusLibrosTest #test11CannotListAnUnknownCartID stamp: 'DS 11/30/2020 22:02:22'!
PASSED!

!testRun: #FacadeTusLibrosTest #test12CannotAddOnExpiredCart stamp: 'DS 11/30/2020 22:02:22'!
PASSED!

!testRun: #FacadeTusLibrosTest #test13CannotListOnExpiredCart stamp: 'DS 11/30/2020 22:02:22'!
PASSED!

!testRun: #FacadeTusLibrosTest #test14CannotCheckoutOnExpiredCart stamp: 'DS 11/30/2020 22:02:22'!
PASSED!

!testRun: #FacadeTusLibrosTest #test15 stamp: 'DS 11/30/2020 22:02:22'!
PASSED!

!testRun: #FacadeTusLibrosTest #test16 stamp: 'DS 11/30/2020 22:02:22'!
PASSED!

!testRun: #FacadeTusLibrosTest #test17 stamp: 'DS 11/30/2020 22:02:22'!
PASSED!

!testRun: #FacadeTusLibrosTest #test14CannotCheckoutOnExpiredCart stamp: 'DS 11/30/2020 22:02:30'!
PASSED!

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'DS 11/30/2020 22:02:30'!
PASSED!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 11/30/2020 22:02:30'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/30/2020 22:02:30'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 11/30/2020 22:02:30'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/30/2020 22:02:30'!
PASSED!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/30/2020 22:02:30'!
PASSED!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'DS 11/30/2020 22:02:30'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'DS 11/30/2020 22:02:30'!
PASSED!

!testRun: #FacadeTusLibrosTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'DS 11/30/2020 22:02:30'!
PASSED!

!testRun: #FacadeTusLibrosTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 11/30/2020 22:02:30'!
PASSED!

!testRun: #FacadeTusLibrosTest #test11CannotListAnUnknownCartID stamp: 'DS 11/30/2020 22:02:30'!
PASSED!

!testRun: #FacadeTusLibrosTest #test12CannotAddOnExpiredCart stamp: 'DS 11/30/2020 22:02:30'!
PASSED!

!testRun: #FacadeTusLibrosTest #test13CannotListOnExpiredCart stamp: 'DS 11/30/2020 22:02:30'!
PASSED!

!testRun: #FacadeTusLibrosTest #test14CannotCheckoutOnExpiredCart stamp: 'DS 11/30/2020 22:02:30'!
PASSED!

!testRun: #FacadeTusLibrosTest #test15 stamp: 'DS 11/30/2020 22:02:30'!
PASSED!

!testRun: #FacadeTusLibrosTest #test16 stamp: 'DS 11/30/2020 22:02:30'!
PASSED!

!testRun: #FacadeTusLibrosTest #test17 stamp: 'DS 11/30/2020 22:02:30'!
PASSED!
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'DS 11/30/2020 22:02:34' prior: 50870510!
test14CannotCheckoutOnExpiredCart

	| tusLibros cartID |

	tusLibros := testObjectsFactory tusLibros: self.	
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	clockBehavior := [ testObjectsFactory now next: 31*minute ].

	self should: [ self tusLibros: tusLibros checkoutCartID: cartID ]
		raise: Error
		withMessageText: FacadeTusLibros cartTimeExpiredErrorDescription.! !

!testRun: #FacadeTusLibrosTest #test14CannotCheckoutOnExpiredCart stamp: 'DS 11/30/2020 22:02:36'!
PASSED!

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'DS 11/30/2020 22:02:36'!
PASSED!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 11/30/2020 22:02:36'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/30/2020 22:02:36'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 11/30/2020 22:02:36'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/30/2020 22:02:36'!
PASSED!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/30/2020 22:02:36'!
PASSED!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'DS 11/30/2020 22:02:36'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'DS 11/30/2020 22:02:36'!
PASSED!

!testRun: #FacadeTusLibrosTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'DS 11/30/2020 22:02:36'!
PASSED!

!testRun: #FacadeTusLibrosTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 11/30/2020 22:02:36'!
PASSED!

!testRun: #FacadeTusLibrosTest #test11CannotListAnUnknownCartID stamp: 'DS 11/30/2020 22:02:36'!
PASSED!

!testRun: #FacadeTusLibrosTest #test12CannotAddOnExpiredCart stamp: 'DS 11/30/2020 22:02:36'!
PASSED!

!testRun: #FacadeTusLibrosTest #test13CannotListOnExpiredCart stamp: 'DS 11/30/2020 22:02:36'!
PASSED!

!testRun: #FacadeTusLibrosTest #test14CannotCheckoutOnExpiredCart stamp: 'DS 11/30/2020 22:02:36'!
PASSED!

!testRun: #FacadeTusLibrosTest #test15 stamp: 'DS 11/30/2020 22:02:36'!
PASSED!

!testRun: #FacadeTusLibrosTest #test16 stamp: 'DS 11/30/2020 22:02:36'!
PASSED!

!testRun: #FacadeTusLibrosTest #test17 stamp: 'DS 11/30/2020 22:02:36'!
PASSED!
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'DS 11/30/2020 22:02:45' prior: 50872366!
test15

	| tusLibros cartID checkIfExpired updatedTime |

	tusLibros := testObjectsFactory tusLibros: self.	
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.

	checkIfExpired := false.
	clockBehavior := [
		checkIfExpired
			ifFalse: [
				checkIfExpired := true.
				testObjectsFactory now next: 10*minute.
			] ifTrue: [
				updatedTime :=  testObjectsFactory now next: 5*minute.
				updatedTime.
			].		
	].

	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	self assert: (testObjectsFactory now next: 5*minute) equals: updatedTime.! !

!testRun: #FacadeTusLibrosTest #test15 stamp: 'DS 11/30/2020 22:02:47'!
PASSED!

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'DS 11/30/2020 22:02:47'!
PASSED!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 11/30/2020 22:02:47'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/30/2020 22:02:47'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 11/30/2020 22:02:47'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/30/2020 22:02:47'!
PASSED!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/30/2020 22:02:47'!
PASSED!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'DS 11/30/2020 22:02:47'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'DS 11/30/2020 22:02:47'!
PASSED!

!testRun: #FacadeTusLibrosTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'DS 11/30/2020 22:02:47'!
PASSED!

!testRun: #FacadeTusLibrosTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 11/30/2020 22:02:47'!
PASSED!

!testRun: #FacadeTusLibrosTest #test11CannotListAnUnknownCartID stamp: 'DS 11/30/2020 22:02:47'!
PASSED!

!testRun: #FacadeTusLibrosTest #test12CannotAddOnExpiredCart stamp: 'DS 11/30/2020 22:02:47'!
PASSED!

!testRun: #FacadeTusLibrosTest #test13CannotListOnExpiredCart stamp: 'DS 11/30/2020 22:02:47'!
PASSED!

!testRun: #FacadeTusLibrosTest #test14CannotCheckoutOnExpiredCart stamp: 'DS 11/30/2020 22:02:47'!
PASSED!

!testRun: #FacadeTusLibrosTest #test15 stamp: 'DS 11/30/2020 22:02:47'!
PASSED!

!testRun: #FacadeTusLibrosTest #test16 stamp: 'DS 11/30/2020 22:02:47'!
PASSED!

!testRun: #FacadeTusLibrosTest #test17 stamp: 'DS 11/30/2020 22:02:47'!
PASSED!
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'DS 11/30/2020 22:02:56' prior: 50872466!
test16

	| tusLibros cartID checkIfExpired updatedTime |

	tusLibros := testObjectsFactory tusLibros: self.
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.

	checkIfExpired := false.
	clockBehavior := [
		checkIfExpired
			ifFalse: [
				checkIfExpired := true.
				testObjectsFactory now next: 10*minute.
			] ifTrue: [
				updatedTime :=  testObjectsFactory now next: 5*minute.
				updatedTime.
			].		
	].

	tusLibros listCartFor: cartID.
	self assert: (testObjectsFactory now next: 5*minute) equals: updatedTime.! !

!testRun: #FacadeTusLibrosTest #test16 stamp: 'DS 11/30/2020 22:02:57'!
PASSED!

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'DS 11/30/2020 22:02:57'!
PASSED!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 11/30/2020 22:02:57'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/30/2020 22:02:57'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 11/30/2020 22:02:57'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/30/2020 22:02:57'!
PASSED!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/30/2020 22:02:57'!
PASSED!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'DS 11/30/2020 22:02:57'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'DS 11/30/2020 22:02:57'!
PASSED!

!testRun: #FacadeTusLibrosTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'DS 11/30/2020 22:02:57'!
PASSED!

!testRun: #FacadeTusLibrosTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 11/30/2020 22:02:57'!
PASSED!

!testRun: #FacadeTusLibrosTest #test11CannotListAnUnknownCartID stamp: 'DS 11/30/2020 22:02:57'!
PASSED!

!testRun: #FacadeTusLibrosTest #test12CannotAddOnExpiredCart stamp: 'DS 11/30/2020 22:02:57'!
PASSED!

!testRun: #FacadeTusLibrosTest #test13CannotListOnExpiredCart stamp: 'DS 11/30/2020 22:02:57'!
PASSED!

!testRun: #FacadeTusLibrosTest #test14CannotCheckoutOnExpiredCart stamp: 'DS 11/30/2020 22:02:57'!
PASSED!

!testRun: #FacadeTusLibrosTest #test15 stamp: 'DS 11/30/2020 22:02:57'!
PASSED!

!testRun: #FacadeTusLibrosTest #test16 stamp: 'DS 11/30/2020 22:02:57'!
PASSED!

!testRun: #FacadeTusLibrosTest #test17 stamp: 'DS 11/30/2020 22:02:57'!
PASSED!
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'DS 11/30/2020 22:03:06' prior: 50872602!
test17

	| tusLibros cartID checkIfExpired updatedTime |

	tusLibros := testObjectsFactory tusLibros: self.
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.

	checkIfExpired := false.
	clockBehavior := [
		checkIfExpired
			ifFalse: [
				checkIfExpired := true.
				testObjectsFactory now next: 10*minute.
			] ifTrue: [
				updatedTime :=  testObjectsFactory now next: 5*minute.
				updatedTime.
			].		
	].
	self tusLibros: tusLibros checkoutCartID: cartID.

	self assert: (testObjectsFactory now next: 5*minute) equals: updatedTime.! !

!testRun: #FacadeTusLibrosTest #test17 stamp: 'DS 11/30/2020 22:03:07'!
PASSED!

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'DS 11/30/2020 22:03:07'!
PASSED!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 11/30/2020 22:03:07'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/30/2020 22:03:07'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 11/30/2020 22:03:07'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/30/2020 22:03:07'!
PASSED!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/30/2020 22:03:07'!
PASSED!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'DS 11/30/2020 22:03:07'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'DS 11/30/2020 22:03:07'!
PASSED!

!testRun: #FacadeTusLibrosTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'DS 11/30/2020 22:03:07'!
PASSED!

!testRun: #FacadeTusLibrosTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 11/30/2020 22:03:07'!
PASSED!

!testRun: #FacadeTusLibrosTest #test11CannotListAnUnknownCartID stamp: 'DS 11/30/2020 22:03:07'!
PASSED!

!testRun: #FacadeTusLibrosTest #test12CannotAddOnExpiredCart stamp: 'DS 11/30/2020 22:03:07'!
PASSED!

!testRun: #FacadeTusLibrosTest #test13CannotListOnExpiredCart stamp: 'DS 11/30/2020 22:03:07'!
PASSED!

!testRun: #FacadeTusLibrosTest #test14CannotCheckoutOnExpiredCart stamp: 'DS 11/30/2020 22:03:07'!
PASSED!

!testRun: #FacadeTusLibrosTest #test15 stamp: 'DS 11/30/2020 22:03:07'!
PASSED!

!testRun: #FacadeTusLibrosTest #test16 stamp: 'DS 11/30/2020 22:03:07'!
PASSED!

!testRun: #FacadeTusLibrosTest #test17 stamp: 'DS 11/30/2020 22:03:07'!
PASSED!
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'DS 11/30/2020 22:03:46'!
test15ExpirationTimeOfCartShouldRestartWhenAddAnItem

	| tusLibros cartID checkIfExpired updatedTime |

	tusLibros := testObjectsFactory tusLibros: self.	
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.

	checkIfExpired := false.
	clockBehavior := [
		checkIfExpired
			ifFalse: [
				checkIfExpired := true.
				testObjectsFactory now next: 10*minute.
			] ifTrue: [
				updatedTime :=  testObjectsFactory now next: 5*minute.
				updatedTime.
			].		
	].

	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	self assert: (testObjectsFactory now next: 5*minute) equals: updatedTime.! !

!methodRemoval: FacadeTusLibrosTest #test15 stamp: 'DS 11/30/2020 22:03:46'!
test15

	| tusLibros cartID checkIfExpired updatedTime |

	tusLibros := testObjectsFactory tusLibros: self.	
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.

	checkIfExpired := false.
	clockBehavior := [
		checkIfExpired
			ifFalse: [
				checkIfExpired := true.
				testObjectsFactory now next: 10*minute.
			] ifTrue: [
				updatedTime :=  testObjectsFactory now next: 5*minute.
				updatedTime.
			].		
	].

	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	self assert: (testObjectsFactory now next: 5*minute) equals: updatedTime.!
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'DS 11/30/2020 22:04:52'!
test15AddAnItemShouldRestartExpirationTime

	| tusLibros cartID checkIfExpired updatedTime |

	tusLibros := testObjectsFactory tusLibros: self.	
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.

	checkIfExpired := false.
	clockBehavior := [
		checkIfExpired
			ifFalse: [
				checkIfExpired := true.
				testObjectsFactory now next: 10*minute.
			] ifTrue: [
				updatedTime :=  testObjectsFactory now next: 5*minute.
				updatedTime.
			].		
	].

	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	self assert: (testObjectsFactory now next: 5*minute) equals: updatedTime.! !

!methodRemoval: FacadeTusLibrosTest #test15ExpirationTimeOfCartShouldRestartWhenAddAnItem stamp: 'DS 11/30/2020 22:04:52'!
test15ExpirationTimeOfCartShouldRestartWhenAddAnItem

	| tusLibros cartID checkIfExpired updatedTime |

	tusLibros := testObjectsFactory tusLibros: self.	
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.

	checkIfExpired := false.
	clockBehavior := [
		checkIfExpired
			ifFalse: [
				checkIfExpired := true.
				testObjectsFactory now next: 10*minute.
			] ifTrue: [
				updatedTime :=  testObjectsFactory now next: 5*minute.
				updatedTime.
			].		
	].

	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	self assert: (testObjectsFactory now next: 5*minute) equals: updatedTime.!
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'DS 11/30/2020 22:05:16'!
test16ListCartShouldRestartExpirationTime

	| tusLibros cartID checkIfExpired updatedTime |

	tusLibros := testObjectsFactory tusLibros: self.
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.

	checkIfExpired := false.
	clockBehavior := [
		checkIfExpired
			ifFalse: [
				checkIfExpired := true.
				testObjectsFactory now next: 10*minute.
			] ifTrue: [
				updatedTime :=  testObjectsFactory now next: 5*minute.
				updatedTime.
			].		
	].

	tusLibros listCartFor: cartID.
	self assert: (testObjectsFactory now next: 5*minute) equals: updatedTime.! !

!methodRemoval: FacadeTusLibrosTest #test16 stamp: 'DS 11/30/2020 22:05:16'!
test16

	| tusLibros cartID checkIfExpired updatedTime |

	tusLibros := testObjectsFactory tusLibros: self.
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.

	checkIfExpired := false.
	clockBehavior := [
		checkIfExpired
			ifFalse: [
				checkIfExpired := true.
				testObjectsFactory now next: 10*minute.
			] ifTrue: [
				updatedTime :=  testObjectsFactory now next: 5*minute.
				updatedTime.
			].		
	].

	tusLibros listCartFor: cartID.
	self assert: (testObjectsFactory now next: 5*minute) equals: updatedTime.!
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'DS 11/30/2020 22:05:27'!
test17CheckoutShouldRestartExpirationTime

	| tusLibros cartID checkIfExpired updatedTime |

	tusLibros := testObjectsFactory tusLibros: self.
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.

	checkIfExpired := false.
	clockBehavior := [
		checkIfExpired
			ifFalse: [
				checkIfExpired := true.
				testObjectsFactory now next: 10*minute.
			] ifTrue: [
				updatedTime :=  testObjectsFactory now next: 5*minute.
				updatedTime.
			].		
	].
	self tusLibros: tusLibros checkoutCartID: cartID.

	self assert: (testObjectsFactory now next: 5*minute) equals: updatedTime.! !

!methodRemoval: FacadeTusLibrosTest #test17 stamp: 'DS 11/30/2020 22:05:27'!
test17

	| tusLibros cartID checkIfExpired updatedTime |

	tusLibros := testObjectsFactory tusLibros: self.
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.

	checkIfExpired := false.
	clockBehavior := [
		checkIfExpired
			ifFalse: [
				checkIfExpired := true.
				testObjectsFactory now next: 10*minute.
			] ifTrue: [
				updatedTime :=  testObjectsFactory now next: 5*minute.
				updatedTime.
			].		
	].
	self tusLibros: tusLibros checkoutCartID: cartID.

	self assert: (testObjectsFactory now next: 5*minute) equals: updatedTime.!

!testRun: #FacadeTusLibrosTest #test17CheckoutShouldRestartExpirationTime stamp: 'DS 11/30/2020 22:05:32'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'DS 11/30/2020 22:05:32'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'DS 11/30/2020 22:05:32'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'DS 11/30/2020 22:05:32'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'DS 11/30/2020 22:05:32'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'DS 11/30/2020 22:05:32'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'DS 11/30/2020 22:05:32'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'DS 11/30/2020 22:05:32'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'DS 11/30/2020 22:05:32'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'DS 11/30/2020 22:05:32'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'DS 11/30/2020 22:05:32'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'DS 11/30/2020 22:05:32'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'DS 11/30/2020 22:05:32'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'DS 11/30/2020 22:05:32'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'DS 11/30/2020 22:05:32'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberShouldHave16Characters stamp: 'DS 11/30/2020 22:05:32'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardOwnerCanNotBeEmpty stamp: 'DS 11/30/2020 22:05:32'!
PASSED!

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'DS 11/30/2020 22:05:32'!
PASSED!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 11/30/2020 22:05:32'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/30/2020 22:05:32'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 11/30/2020 22:05:32'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/30/2020 22:05:32'!
PASSED!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/30/2020 22:05:32'!
PASSED!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'DS 11/30/2020 22:05:32'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'DS 11/30/2020 22:05:32'!
PASSED!

!testRun: #FacadeTusLibrosTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'DS 11/30/2020 22:05:32'!
PASSED!

!testRun: #FacadeTusLibrosTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 11/30/2020 22:05:32'!
PASSED!

!testRun: #FacadeTusLibrosTest #test11CannotListAnUnknownCartID stamp: 'DS 11/30/2020 22:05:32'!
PASSED!

!testRun: #FacadeTusLibrosTest #test12CannotAddOnExpiredCart stamp: 'DS 11/30/2020 22:05:32'!
PASSED!

!testRun: #FacadeTusLibrosTest #test13CannotListOnExpiredCart stamp: 'DS 11/30/2020 22:05:32'!
PASSED!

!testRun: #FacadeTusLibrosTest #test14CannotCheckoutOnExpiredCart stamp: 'DS 11/30/2020 22:05:32'!
PASSED!

!testRun: #FacadeTusLibrosTest #test15AddAnItemShouldRestartExpirationTime stamp: 'DS 11/30/2020 22:05:32'!
PASSED!

!testRun: #FacadeTusLibrosTest #test16ListCartShouldRestartExpirationTime stamp: 'DS 11/30/2020 22:05:32'!
PASSED!

!testRun: #FacadeTusLibrosTest #test17CheckoutShouldRestartExpirationTime stamp: 'DS 11/30/2020 22:05:32'!
PASSED!

----SNAPSHOT----(30 November 2020 22:05:38) CuisUniversity-4384.image priorSource: 17317783!
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'DS 11/30/2020 22:10:19'!
cartTimeShouldBeExpiredWhenTryTo: aTusLibrosBlock

	| tusLibros cartID |
	
	tusLibros := testObjectsFactory tusLibros: self.		
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	clockBehavior := [ testObjectsFactory now next: 31*minute ].

	self should: [ aTusLibrosBlock value: tusLibros value: cartID ]
		raise: Error
		withMessageText: FacadeTusLibros cartTimeExpiredErrorDescription.! !
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'DS 11/30/2020 22:11:11' prior: 50872835!
test12CannotAddOnExpiredCart

	self cartTimeShouldBeExpiredWhenTryTo: [ :tusLibros :cartID | tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore ].! !

!testRun: #FacadeTusLibrosTest #test12CannotAddOnExpiredCart stamp: 'DS 11/30/2020 22:11:11'!
PASSED!

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'DS 11/30/2020 22:11:11'!
PASSED!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 11/30/2020 22:11:11'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/30/2020 22:11:11'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 11/30/2020 22:11:11'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/30/2020 22:11:11'!
PASSED!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/30/2020 22:11:11'!
PASSED!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'DS 11/30/2020 22:11:11'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'DS 11/30/2020 22:11:11'!
PASSED!

!testRun: #FacadeTusLibrosTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'DS 11/30/2020 22:11:11'!
PASSED!

!testRun: #FacadeTusLibrosTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 11/30/2020 22:11:11'!
PASSED!

!testRun: #FacadeTusLibrosTest #test11CannotListAnUnknownCartID stamp: 'DS 11/30/2020 22:11:11'!
PASSED!

!testRun: #FacadeTusLibrosTest #test12CannotAddOnExpiredCart stamp: 'DS 11/30/2020 22:11:11'!
PASSED!

!testRun: #FacadeTusLibrosTest #test13CannotListOnExpiredCart stamp: 'DS 11/30/2020 22:11:11'!
PASSED!

!testRun: #FacadeTusLibrosTest #test14CannotCheckoutOnExpiredCart stamp: 'DS 11/30/2020 22:11:11'!
PASSED!

!testRun: #FacadeTusLibrosTest #test15AddAnItemShouldRestartExpirationTime stamp: 'DS 11/30/2020 22:11:11'!
PASSED!

!testRun: #FacadeTusLibrosTest #test16ListCartShouldRestartExpirationTime stamp: 'DS 11/30/2020 22:11:11'!
PASSED!

!testRun: #FacadeTusLibrosTest #test17CheckoutShouldRestartExpirationTime stamp: 'DS 11/30/2020 22:11:11'!
PASSED!
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'DS 11/30/2020 22:11:37' prior: 50872911!
test13CannotListOnExpiredCart

	self cartTimeShouldBeExpiredWhenTryTo: [ :tusLibros :cartID | tusLibros listCartFor: cartID ].! !

!testRun: #FacadeTusLibrosTest #test13CannotListOnExpiredCart stamp: 'DS 11/30/2020 22:11:37'!
PASSED!

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'DS 11/30/2020 22:11:37'!
PASSED!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 11/30/2020 22:11:37'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/30/2020 22:11:37'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 11/30/2020 22:11:37'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/30/2020 22:11:37'!
PASSED!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/30/2020 22:11:37'!
PASSED!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'DS 11/30/2020 22:11:37'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'DS 11/30/2020 22:11:37'!
PASSED!

!testRun: #FacadeTusLibrosTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'DS 11/30/2020 22:11:37'!
PASSED!

!testRun: #FacadeTusLibrosTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 11/30/2020 22:11:37'!
PASSED!

!testRun: #FacadeTusLibrosTest #test11CannotListAnUnknownCartID stamp: 'DS 11/30/2020 22:11:37'!
PASSED!

!testRun: #FacadeTusLibrosTest #test12CannotAddOnExpiredCart stamp: 'DS 11/30/2020 22:11:37'!
PASSED!

!testRun: #FacadeTusLibrosTest #test13CannotListOnExpiredCart stamp: 'DS 11/30/2020 22:11:37'!
PASSED!

!testRun: #FacadeTusLibrosTest #test14CannotCheckoutOnExpiredCart stamp: 'DS 11/30/2020 22:11:37'!
PASSED!

!testRun: #FacadeTusLibrosTest #test15AddAnItemShouldRestartExpirationTime stamp: 'DS 11/30/2020 22:11:37'!
PASSED!

!testRun: #FacadeTusLibrosTest #test16ListCartShouldRestartExpirationTime stamp: 'DS 11/30/2020 22:11:37'!
PASSED!

!testRun: #FacadeTusLibrosTest #test17CheckoutShouldRestartExpirationTime stamp: 'DS 11/30/2020 22:11:37'!
PASSED!
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'DS 11/30/2020 22:12:21' prior: 50873045!
test14CannotCheckoutOnExpiredCart

	self cartTimeShouldBeExpiredWhenTryTo: [ :tusLibros :cartID | self tusLibros: tusLibros checkoutCartID: cartID ].! !

!testRun: #FacadeTusLibrosTest #test14CannotCheckoutOnExpiredCart stamp: 'DS 11/30/2020 22:12:21'!
PASSED!

!testRun: #FacadeTusLibrosTest #test01CreateCartHaveEmptyList stamp: 'DS 11/30/2020 22:12:21'!
PASSED!

!testRun: #FacadeTusLibrosTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 11/30/2020 22:12:21'!
PASSED!

!testRun: #FacadeTusLibrosTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/30/2020 22:12:21'!
PASSED!

!testRun: #FacadeTusLibrosTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 11/30/2020 22:12:21'!
PASSED!

!testRun: #FacadeTusLibrosTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/30/2020 22:12:21'!
PASSED!

!testRun: #FacadeTusLibrosTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/30/2020 22:12:21'!
PASSED!

!testRun: #FacadeTusLibrosTest #test07CannotAddToUnknownCartID stamp: 'DS 11/30/2020 22:12:21'!
PASSED!

!testRun: #FacadeTusLibrosTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'DS 11/30/2020 22:12:21'!
PASSED!

!testRun: #FacadeTusLibrosTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'DS 11/30/2020 22:12:21'!
PASSED!

!testRun: #FacadeTusLibrosTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 11/30/2020 22:12:21'!
PASSED!

!testRun: #FacadeTusLibrosTest #test11CannotListAnUnknownCartID stamp: 'DS 11/30/2020 22:12:21'!
PASSED!

!testRun: #FacadeTusLibrosTest #test12CannotAddOnExpiredCart stamp: 'DS 11/30/2020 22:12:21'!
PASSED!

!testRun: #FacadeTusLibrosTest #test13CannotListOnExpiredCart stamp: 'DS 11/30/2020 22:12:21'!
PASSED!

!testRun: #FacadeTusLibrosTest #test14CannotCheckoutOnExpiredCart stamp: 'DS 11/30/2020 22:12:21'!
PASSED!

!testRun: #FacadeTusLibrosTest #test15AddAnItemShouldRestartExpirationTime stamp: 'DS 11/30/2020 22:12:21'!
PASSED!

!testRun: #FacadeTusLibrosTest #test16ListCartShouldRestartExpirationTime stamp: 'DS 11/30/2020 22:12:21'!
PASSED!

!testRun: #FacadeTusLibrosTest #test17CheckoutShouldRestartExpirationTime stamp: 'DS 11/30/2020 22:12:21'!
PASSED!

----SNAPSHOT----(30 November 2020 22:12:26) CuisUniversity-4384.image priorSource: 17344128!
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'DS 11/30/2020 22:16:22'!
assertUpdatedTimeToCartAfter: aTusLibrosBlock

	| tusLibros cartID checkIfExpired updatedTime |

	tusLibros := testObjectsFactory tusLibros: self.
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.

	checkIfExpired := false.
	clockBehavior := [
		checkIfExpired
			ifFalse: [
				checkIfExpired := true.
				testObjectsFactory now next: 10*minute.
			] ifTrue: [
				updatedTime :=  testObjectsFactory now next: 5*minute.
				updatedTime.
			].		
	].
	aTusLibrosBlock value: tusLibros value: cartID.

	self assert: (testObjectsFactory now next: 5*minute) equals: updatedTime.! !

!classRenamed: #FacadeTusLibros as: #InternalRestInterface stamp: 'DS 11/30/2020 22:16:51'!
Smalltalk renameClassNamed: #FacadeTusLibros as: #InternalRestInterface!
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'DS 11/30/2020 22:16:51' prior: 50870631!
test03CannotCreateCartWithUnknownUser

	| tusLibros |

	tusLibros := testObjectsFactory tusLibros.

	self should: [ tusLibros createCartForUser: 3 withPassword: 'pass'. ]
		raise: Error
		withMessageText: InternalRestInterface badAuthenticationErrorDescription.! !
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'DS 11/30/2020 22:16:51' prior: 50870620!
test02CannotCreateCartWithInvalidPassword

	| tusLibros |

	tusLibros := testObjectsFactory tusLibros.

	self should: [ tusLibros createCartForUser: 1 withPassword: 'bad password'.]
		raise: Error
 		withMessageText: InternalRestInterface badAuthenticationErrorDescription.! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'DS 11/30/2020 22:16:51' prior: 50871256!
tusLibros: aClock

	| authenticator |

	authenticator := Dictionary with: 1 -> 'pass' with: 2 -> 'pass'.

	^InternalRestInterface 
		withAuthenticator: authenticator 
		withCatalog: self defaultCatalog
		usingClock: aClock.! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'DS 11/30/2020 22:16:51' prior: 50871246!
tusLibros

	| authenticator |

	authenticator := Dictionary with: 1 -> 'pass' with: 2 -> 'pass'.

	^InternalRestInterface 
		withAuthenticator: authenticator 
		withCatalog: self defaultCatalog
		usingClock: self.! !
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'DS 11/30/2020 22:16:51' prior: 50870445!
test07CannotAddToUnknownCartID

	| tusLibros |

	tusLibros := testObjectsFactory tusLibros.

	self should: [tusLibros addToCart: 1 aQuantity: 5 of: testObjectsFactory itemSellByTheStore]
		raise: Error
		withMessageText: InternalRestInterface unknownCartIDErrorDescription.! !
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'DS 11/30/2020 22:16:51' prior: 50870586!
test10CannotCheckoutToUnknownCartID

	| tusLibros |

	tusLibros := testObjectsFactory tusLibros.

	self should: [ self tusLibros: tusLibros checkoutCartID: 1 ]
		raise: Error
		withMessageText: InternalRestInterface unknownCartIDErrorDescription.
		
	self assert: tusLibros salesBook isEmpty.! !
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'DS 11/30/2020 22:16:51' prior: 50870457!
test11CannotListAnUnknownCartID

	| tusLibros |

	tusLibros := testObjectsFactory tusLibros.
	self should: [ tusLibros listCartFor: 1 ]
		raise: Error
		withMessageText: InternalRestInterface unknownCartIDErrorDescription .! !
!FacadeTusLibrosTest methodsFor: 'as yet unclassified' stamp: 'DS 11/30/2020 22:16:51' prior: 50873658!
cartTimeShouldBeExpiredWhenTryTo: aTusLibrosBlock

	| tusLibros cartID |
	
	tusLibros := testObjectsFactory tusLibros: self.		
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	clockBehavior := [ testObjectsFactory now next: 31*minute ].

	self should: [ aTusLibrosBlock value: tusLibros value: cartID ]
		raise: Error
		withMessageText: InternalRestInterface cartTimeExpiredErrorDescription.! !

!classRenamed: #FacadeTusLibrosTest as: #InternalRestInterfaceTest stamp: 'DS 11/30/2020 22:17:03'!
Smalltalk renameClassNamed: #FacadeTusLibrosTest as: #InternalRestInterfaceTest!
!InternalRestInterfaceTest methodsFor: 'expiration tests' stamp: 'DS 11/30/2020 22:18:36' prior: 50873407!
test15AddAnItemShouldRestartExpirationTime

	self assertUpdatedTimeToCartAfter: [ :internalRestInterface :cartID | 
		internalRestInterface addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	].! !

!testRun: #InternalRestInterfaceTest #test15AddAnItemShouldRestartExpirationTime stamp: 'DS 11/30/2020 22:18:37'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01CreateCartHaveEmptyList stamp: 'DS 11/30/2020 22:18:37'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 11/30/2020 22:18:37'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/30/2020 22:18:37'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 11/30/2020 22:18:37'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/30/2020 22:18:37'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/30/2020 22:18:37'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CannotAddToUnknownCartID stamp: 'DS 11/30/2020 22:18:37'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'DS 11/30/2020 22:18:37'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'DS 11/30/2020 22:18:37'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 11/30/2020 22:18:37'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11CannotListAnUnknownCartID stamp: 'DS 11/30/2020 22:18:37'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAddOnExpiredCart stamp: 'DS 11/30/2020 22:18:37'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13CannotListOnExpiredCart stamp: 'DS 11/30/2020 22:18:37'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14CannotCheckoutOnExpiredCart stamp: 'DS 11/30/2020 22:18:37'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15AddAnItemShouldRestartExpirationTime stamp: 'DS 11/30/2020 22:18:37'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16ListCartShouldRestartExpirationTime stamp: 'DS 11/30/2020 22:18:37'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17CheckoutShouldRestartExpirationTime stamp: 'DS 11/30/2020 22:18:37'!
PASSED!
!InternalRestInterfaceTest methodsFor: 'expiration tests' stamp: 'DS 11/30/2020 22:19:13' prior: 50874026!
test15AddAnItemShouldRestartExpirationTime

	self assertUpdatedTimeToCartAfter: [ :anInternalRestInterface :cartID | 
		anInternalRestInterface addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	].! !
!InternalRestInterfaceTest methodsFor: 'expiration tests' stamp: 'DS 11/30/2020 22:20:12' prior: 50873453!
test16ListCartShouldRestartExpirationTime

	self assertUpdatedTimeToCartAfter: [ :anInternalRestInterface :aCartID | anInternalRestInterface listCartFor: aCartID ].! !

!testRun: #InternalRestInterfaceTest #test16ListCartShouldRestartExpirationTime stamp: 'DS 11/30/2020 22:20:13'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01CreateCartHaveEmptyList stamp: 'DS 11/30/2020 22:20:13'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 11/30/2020 22:20:13'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/30/2020 22:20:13'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 11/30/2020 22:20:13'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/30/2020 22:20:13'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/30/2020 22:20:13'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CannotAddToUnknownCartID stamp: 'DS 11/30/2020 22:20:13'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'DS 11/30/2020 22:20:13'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'DS 11/30/2020 22:20:13'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 11/30/2020 22:20:13'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11CannotListAnUnknownCartID stamp: 'DS 11/30/2020 22:20:13'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAddOnExpiredCart stamp: 'DS 11/30/2020 22:20:13'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13CannotListOnExpiredCart stamp: 'DS 11/30/2020 22:20:13'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14CannotCheckoutOnExpiredCart stamp: 'DS 11/30/2020 22:20:13'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15AddAnItemShouldRestartExpirationTime stamp: 'DS 11/30/2020 22:20:13'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16ListCartShouldRestartExpirationTime stamp: 'DS 11/30/2020 22:20:13'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17CheckoutShouldRestartExpirationTime stamp: 'DS 11/30/2020 22:20:13'!
PASSED!
!InternalRestInterfaceTest methodsFor: 'expiration tests' stamp: 'DS 11/30/2020 22:21:05' prior: 50873493!
test17CheckoutShouldRestartExpirationTime

	self assertUpdatedTimeToCartAfter: [ :anInternalRestInterface :aCartID | self tusLibros: anInternalRestInterface checkoutCartID: aCartID].! !

!testRun: #InternalRestInterfaceTest #test17CheckoutShouldRestartExpirationTime stamp: 'DS 11/30/2020 22:21:05'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01CreateCartHaveEmptyList stamp: 'DS 11/30/2020 22:21:05'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 11/30/2020 22:21:05'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/30/2020 22:21:05'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 11/30/2020 22:21:05'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/30/2020 22:21:05'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/30/2020 22:21:05'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CannotAddToUnknownCartID stamp: 'DS 11/30/2020 22:21:05'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'DS 11/30/2020 22:21:05'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'DS 11/30/2020 22:21:05'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 11/30/2020 22:21:05'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11CannotListAnUnknownCartID stamp: 'DS 11/30/2020 22:21:05'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAddOnExpiredCart stamp: 'DS 11/30/2020 22:21:05'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13CannotListOnExpiredCart stamp: 'DS 11/30/2020 22:21:05'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14CannotCheckoutOnExpiredCart stamp: 'DS 11/30/2020 22:21:05'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15AddAnItemShouldRestartExpirationTime stamp: 'DS 11/30/2020 22:21:05'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16ListCartShouldRestartExpirationTime stamp: 'DS 11/30/2020 22:21:05'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17CheckoutShouldRestartExpirationTime stamp: 'DS 11/30/2020 22:21:05'!
PASSED!
!InternalRestInterfaceTest methodsFor: 'expiration tests' stamp: 'DS 11/30/2020 22:21:31' prior: 50873674!
test12CannotAddOnExpiredCart

	self cartTimeShouldBeExpiredWhenTryTo: [ :anInternalRestInterface :cartID | anInternalRestInterface addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore ].! !
!InternalRestInterfaceTest methodsFor: 'expiration tests' stamp: 'DS 11/30/2020 22:21:43' prior: 50874266!
test12CannotAddOnExpiredCart

	self cartTimeShouldBeExpiredWhenTryTo: [ :anInternalRestInterface :aCartID | 
		anInternalRestInterface addToCart: aCartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore
	].! !
!InternalRestInterfaceTest methodsFor: 'expiration tests' stamp: 'DS 11/30/2020 22:21:50' prior: 50873746!
test13CannotListOnExpiredCart

	self cartTimeShouldBeExpiredWhenTryTo: [ :anInternalRestInterface :cartID | anInternalRestInterface listCartFor: cartID ].! !
!InternalRestInterfaceTest methodsFor: 'expiration tests' stamp: 'DS 11/30/2020 22:22:04' prior: 50874287!
test13CannotListOnExpiredCart

	self cartTimeShouldBeExpiredWhenTryTo: [ :anInternalRestInterface :aCartID |
		anInternalRestInterface listCartFor: aCartID
	].! !
!InternalRestInterfaceTest methodsFor: 'expiration tests' stamp: 'DS 11/30/2020 22:22:11' prior: 50873817!
test14CannotCheckoutOnExpiredCart

	self cartTimeShouldBeExpiredWhenTryTo: [ :anInternalRestInterface :cartID | self tusLibros: anInternalRestInterface checkoutCartID: cartID ].! !
!InternalRestInterfaceTest methodsFor: 'expiration tests' stamp: 'DS 11/30/2020 22:22:21' prior: 50874305!
test14CannotCheckoutOnExpiredCart

	self cartTimeShouldBeExpiredWhenTryTo: [ :anInternalRestInterface :aCartID |
		self tusLibros: anInternalRestInterface checkoutCartID: aCartID
	].! !
!InternalRestInterfaceTest methodsFor: 'expiration tests' stamp: 'DS 11/30/2020 22:22:32' prior: 50874103!
test15AddAnItemShouldRestartExpirationTime

	self assertUpdatedTimeToCartAfter: [ :anInternalRestInterface :aCartID | 
		anInternalRestInterface addToCart: aCartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	].! !
!InternalRestInterfaceTest methodsFor: 'expiration tests' stamp: 'DS 11/30/2020 22:23:54'!
shouldRaiseCartTimeExpiredErrorWhen: aTusLibrosBlock

	| tusLibros cartID |
	
	tusLibros := testObjectsFactory tusLibros: self.		
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	clockBehavior := [ testObjectsFactory now next: 31*minute ].

	self should: [ aTusLibrosBlock value: tusLibros value: cartID ]
		raise: Error
		withMessageText: InternalRestInterface cartTimeExpiredErrorDescription.! !
!InternalRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'DS 11/30/2020 22:23:54' prior: 50874276!
test12CannotAddOnExpiredCart

	self shouldRaiseCartTimeExpiredErrorWhen: [ :anInternalRestInterface :aCartID | 
		anInternalRestInterface addToCart: aCartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore
	].! !
!InternalRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'DS 11/30/2020 22:23:54' prior: 50874296!
test13CannotListOnExpiredCart

	self shouldRaiseCartTimeExpiredErrorWhen: [ :anInternalRestInterface :aCartID |
		anInternalRestInterface listCartFor: aCartID
	].! !
!InternalRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'DS 11/30/2020 22:23:54' prior: 50874314!
test14CannotCheckoutOnExpiredCart

	self shouldRaiseCartTimeExpiredErrorWhen: [ :anInternalRestInterface :aCartID |
		self tusLibros: anInternalRestInterface checkoutCartID: aCartID
	].! !

!methodRemoval: InternalRestInterfaceTest #cartTimeShouldBeExpiredWhenTryTo: stamp: 'DS 11/30/2020 22:23:54'!
cartTimeShouldBeExpiredWhenTryTo: aTusLibrosBlock

	| tusLibros cartID |
	
	tusLibros := testObjectsFactory tusLibros: self.		
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	clockBehavior := [ testObjectsFactory now next: 31*minute ].

	self should: [ aTusLibrosBlock value: tusLibros value: cartID ]
		raise: Error
		withMessageText: InternalRestInterface cartTimeExpiredErrorDescription.!

!testRun: #InternalRestInterfaceTest #test01CreateCartHaveEmptyList stamp: 'DS 11/30/2020 22:23:57'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 11/30/2020 22:23:57'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 11/30/2020 22:23:57'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 11/30/2020 22:23:57'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05AddedItemIsIncludedInCartList stamp: 'DS 11/30/2020 22:23:57'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 11/30/2020 22:23:57'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CannotAddToUnknownCartID stamp: 'DS 11/30/2020 22:23:57'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'DS 11/30/2020 22:23:57'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'DS 11/30/2020 22:23:57'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 11/30/2020 22:23:57'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11CannotListAnUnknownCartID stamp: 'DS 11/30/2020 22:23:57'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAddOnExpiredCart stamp: 'DS 11/30/2020 22:23:57'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13CannotListOnExpiredCart stamp: 'DS 11/30/2020 22:23:57'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14CannotCheckoutOnExpiredCart stamp: 'DS 11/30/2020 22:23:57'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15AddAnItemShouldRestartExpirationTime stamp: 'DS 11/30/2020 22:23:57'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16ListCartShouldRestartExpirationTime stamp: 'DS 11/30/2020 22:23:57'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17CheckoutShouldRestartExpirationTime stamp: 'DS 11/30/2020 22:23:57'!
PASSED!

----SNAPSHOT----(30 November 2020 22:24:13) CuisUniversity-4384.image priorSource: 17351575!

----End fileIn of D:\facultad\Smalltalk\windows64\TusLibros-Solucion.st----!
!Cart methodsFor: 'accesing' stamp: 'FedericoSabatini 12/1/2020 18:08:58' prior: 50891483!
items
	
	^items asDictionary.! !

!testRun: #InternalRestInterfaceTest #test01CreateCartHaveEmptyList stamp: 'FedericoSabatini 12/1/2020 18:09:01'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CannotCreateCartWithInvalidPassword stamp: 'FedericoSabatini 12/1/2020 18:09:01'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotCreateCartWithUnknownUser stamp: 'FedericoSabatini 12/1/2020 18:09:01'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04CannotAssignSameIDForDifferentCarts stamp: 'FedericoSabatini 12/1/2020 18:09:01'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05AddedItemIsIncludedInCartList stamp: 'FedericoSabatini 12/1/2020 18:09:01'!
ERROR!

!testRun: #InternalRestInterfaceTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'FedericoSabatini 12/1/2020 18:09:01'!
ERROR!

!testRun: #InternalRestInterfaceTest #test07CannotAddToUnknownCartID stamp: 'FedericoSabatini 12/1/2020 18:09:01'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'FedericoSabatini 12/1/2020 18:09:01'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'FedericoSabatini 12/1/2020 18:09:01'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10CannotCheckoutToUnknownCartID stamp: 'FedericoSabatini 12/1/2020 18:09:01'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11CannotListAnUnknownCartID stamp: 'FedericoSabatini 12/1/2020 18:09:01'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAddOnExpiredCart stamp: 'FedericoSabatini 12/1/2020 18:09:01'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13CannotListOnExpiredCart stamp: 'FedericoSabatini 12/1/2020 18:09:01'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14CannotCheckoutOnExpiredCart stamp: 'FedericoSabatini 12/1/2020 18:09:02'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15AddAnItemShouldRestartExpirationTime stamp: 'FedericoSabatini 12/1/2020 18:09:02'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16ListCartShouldRestartExpirationTime stamp: 'FedericoSabatini 12/1/2020 18:09:02'!
ERROR!

!testRun: #InternalRestInterfaceTest #test17CheckoutShouldRestartExpirationTime stamp: 'FedericoSabatini 12/1/2020 18:09:02'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01CreateCartHaveEmptyList stamp: 'FedericoSabatini 12/1/2020 18:09:12'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CannotCreateCartWithInvalidPassword stamp: 'FedericoSabatini 12/1/2020 18:09:12'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotCreateCartWithUnknownUser stamp: 'FedericoSabatini 12/1/2020 18:09:12'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04CannotAssignSameIDForDifferentCarts stamp: 'FedericoSabatini 12/1/2020 18:09:12'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05AddedItemIsIncludedInCartList stamp: 'FedericoSabatini 12/1/2020 18:09:12'!
ERROR!

!testRun: #InternalRestInterfaceTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'FedericoSabatini 12/1/2020 18:09:12'!
ERROR!

!testRun: #InternalRestInterfaceTest #test07CannotAddToUnknownCartID stamp: 'FedericoSabatini 12/1/2020 18:09:12'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'FedericoSabatini 12/1/2020 18:09:12'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'FedericoSabatini 12/1/2020 18:09:12'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10CannotCheckoutToUnknownCartID stamp: 'FedericoSabatini 12/1/2020 18:09:12'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11CannotListAnUnknownCartID stamp: 'FedericoSabatini 12/1/2020 18:09:12'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAddOnExpiredCart stamp: 'FedericoSabatini 12/1/2020 18:09:12'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13CannotListOnExpiredCart stamp: 'FedericoSabatini 12/1/2020 18:09:12'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14CannotCheckoutOnExpiredCart stamp: 'FedericoSabatini 12/1/2020 18:09:12'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15AddAnItemShouldRestartExpirationTime stamp: 'FedericoSabatini 12/1/2020 18:09:12'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16ListCartShouldRestartExpirationTime stamp: 'FedericoSabatini 12/1/2020 18:09:12'!
ERROR!

!testRun: #InternalRestInterfaceTest #test17CheckoutShouldRestartExpirationTime stamp: 'FedericoSabatini 12/1/2020 18:09:13'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05AddedItemIsIncludedInCartList stamp: 'FedericoSabatini 12/1/2020 18:09:17'!
ERROR!

!testRun: #InternalRestInterfaceTest #test05AddedItemIsIncludedInCartList stamp: 'FedericoSabatini 12/1/2020 18:09:36'!
ERROR!
!Cart methodsFor: 'accesing' stamp: 'FedericoSabatini 11/29/2020 16:36:53' prior: 50892030!
items
	
	| ocurrences |
	
	ocurrences := Dictionary new.
	
	items do: [ :item | (ocurrences includesKey: item) 
		ifTrue: [ocurrences at: item put: (ocurrences at: item) + 1] 
		ifFalse: [ocurrences at: item put: 1]].
	
	^ocurrences.! !

!testRun: #InternalRestInterfaceTest #test01CreateCartHaveEmptyList stamp: 'FedericoSabatini 12/1/2020 18:12:04'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CannotCreateCartWithInvalidPassword stamp: 'FedericoSabatini 12/1/2020 18:12:05'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotCreateCartWithUnknownUser stamp: 'FedericoSabatini 12/1/2020 18:12:05'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04CannotAssignSameIDForDifferentCarts stamp: 'FedericoSabatini 12/1/2020 18:12:05'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05AddedItemIsIncludedInCartList stamp: 'FedericoSabatini 12/1/2020 18:12:05'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'FedericoSabatini 12/1/2020 18:12:05'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CannotAddToUnknownCartID stamp: 'FedericoSabatini 12/1/2020 18:12:05'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'FedericoSabatini 12/1/2020 18:12:05'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'FedericoSabatini 12/1/2020 18:12:05'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10CannotCheckoutToUnknownCartID stamp: 'FedericoSabatini 12/1/2020 18:12:05'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11CannotListAnUnknownCartID stamp: 'FedericoSabatini 12/1/2020 18:12:05'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAddOnExpiredCart stamp: 'FedericoSabatini 12/1/2020 18:12:05'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13CannotListOnExpiredCart stamp: 'FedericoSabatini 12/1/2020 18:12:06'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14CannotCheckoutOnExpiredCart stamp: 'FedericoSabatini 12/1/2020 18:12:06'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15AddAnItemShouldRestartExpirationTime stamp: 'FedericoSabatini 12/1/2020 18:12:06'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16ListCartShouldRestartExpirationTime stamp: 'FedericoSabatini 12/1/2020 18:12:06'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17CheckoutShouldRestartExpirationTime stamp: 'FedericoSabatini 12/1/2020 18:12:06'!
PASSED!

items!

items asBag!

items asDictionary!

items asBag!
!Cart methodsFor: 'accesing' stamp: 'FedericoSabatini 12/1/2020 18:13:32' prior: 50892182!
items
	"
	| ocurrences |
	
	ocurrences := Dictionary new.
	
	items do: [ :item | (ocurrences includesKey: item) 
		ifTrue: [ocurrences at: item put: (ocurrences at: item) + 1] 
		ifFalse: [ocurrences at: item put: 1]].
	
	^ocurrences."
	
	^items asBag.! !

!testRun: #InternalRestInterfaceTest #test01CreateCartHaveEmptyList stamp: 'FedericoSabatini 12/1/2020 18:13:37'!
FAILURE!

!testRun: #InternalRestInterfaceTest #test02CannotCreateCartWithInvalidPassword stamp: 'FedericoSabatini 12/1/2020 18:13:37'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotCreateCartWithUnknownUser stamp: 'FedericoSabatini 12/1/2020 18:13:37'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04CannotAssignSameIDForDifferentCarts stamp: 'FedericoSabatini 12/1/2020 18:13:37'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05AddedItemIsIncludedInCartList stamp: 'FedericoSabatini 12/1/2020 18:13:37'!
FAILURE!

!testRun: #InternalRestInterfaceTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'FedericoSabatini 12/1/2020 18:13:37'!
FAILURE!

!testRun: #InternalRestInterfaceTest #test07CannotAddToUnknownCartID stamp: 'FedericoSabatini 12/1/2020 18:13:37'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'FedericoSabatini 12/1/2020 18:13:37'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'FedericoSabatini 12/1/2020 18:13:37'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10CannotCheckoutToUnknownCartID stamp: 'FedericoSabatini 12/1/2020 18:13:37'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11CannotListAnUnknownCartID stamp: 'FedericoSabatini 12/1/2020 18:13:37'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAddOnExpiredCart stamp: 'FedericoSabatini 12/1/2020 18:13:38'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13CannotListOnExpiredCart stamp: 'FedericoSabatini 12/1/2020 18:13:38'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14CannotCheckoutOnExpiredCart stamp: 'FedericoSabatini 12/1/2020 18:13:38'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15AddAnItemShouldRestartExpirationTime stamp: 'FedericoSabatini 12/1/2020 18:13:38'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16ListCartShouldRestartExpirationTime stamp: 'FedericoSabatini 12/1/2020 18:13:38'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17CheckoutShouldRestartExpirationTime stamp: 'FedericoSabatini 12/1/2020 18:13:38'!
PASSED!
!InternalRestInterfaceTest methodsFor: 'create' stamp: 'FedericoSabatini 12/1/2020 18:13:53' prior: 50891348!
test01CreateCartHaveEmptyList

	| tusLibros cartID |

	tusLibros := testObjectsFactory tusLibros.
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.

	self assert: (Bag new) equals: (tusLibros listCartFor: cartID).! !

!testRun: #InternalRestInterfaceTest #test01CreateCartHaveEmptyList stamp: 'FedericoSabatini 12/1/2020 18:13:59'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CannotCreateCartWithInvalidPassword stamp: 'FedericoSabatini 12/1/2020 18:13:59'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotCreateCartWithUnknownUser stamp: 'FedericoSabatini 12/1/2020 18:13:59'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04CannotAssignSameIDForDifferentCarts stamp: 'FedericoSabatini 12/1/2020 18:13:59'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05AddedItemIsIncludedInCartList stamp: 'FedericoSabatini 12/1/2020 18:13:59'!
FAILURE!

!testRun: #InternalRestInterfaceTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'FedericoSabatini 12/1/2020 18:13:59'!
FAILURE!

!testRun: #InternalRestInterfaceTest #test07CannotAddToUnknownCartID stamp: 'FedericoSabatini 12/1/2020 18:13:59'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'FedericoSabatini 12/1/2020 18:13:59'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'FedericoSabatini 12/1/2020 18:13:59'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10CannotCheckoutToUnknownCartID stamp: 'FedericoSabatini 12/1/2020 18:13:59'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11CannotListAnUnknownCartID stamp: 'FedericoSabatini 12/1/2020 18:13:59'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAddOnExpiredCart stamp: 'FedericoSabatini 12/1/2020 18:14:00'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13CannotListOnExpiredCart stamp: 'FedericoSabatini 12/1/2020 18:14:00'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14CannotCheckoutOnExpiredCart stamp: 'FedericoSabatini 12/1/2020 18:14:00'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15AddAnItemShouldRestartExpirationTime stamp: 'FedericoSabatini 12/1/2020 18:14:00'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16ListCartShouldRestartExpirationTime stamp: 'FedericoSabatini 12/1/2020 18:14:00'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17CheckoutShouldRestartExpirationTime stamp: 'FedericoSabatini 12/1/2020 18:14:00'!
PASSED!
!InternalRestInterfaceTest methodsFor: 'adding' stamp: 'FedericoSabatini 12/1/2020 18:14:05' prior: 50891123!
test05AddedItemIsIncludedInCartList

	| tusLibros cartID expectedCartList |

	expectedCartList := Bag with: testObjectsFactory itemSellByTheStore -> 1.

	tusLibros := testObjectsFactory tusLibros.	
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.

	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	self assert: expectedCartList equals: (tusLibros listCartFor: cartID).! !

!testRun: #InternalRestInterfaceTest #test01CreateCartHaveEmptyList stamp: 'FedericoSabatini 12/1/2020 18:14:10'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CannotCreateCartWithInvalidPassword stamp: 'FedericoSabatini 12/1/2020 18:14:10'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotCreateCartWithUnknownUser stamp: 'FedericoSabatini 12/1/2020 18:14:10'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04CannotAssignSameIDForDifferentCarts stamp: 'FedericoSabatini 12/1/2020 18:14:10'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05AddedItemIsIncludedInCartList stamp: 'FedericoSabatini 12/1/2020 18:14:10'!
FAILURE!

!testRun: #InternalRestInterfaceTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'FedericoSabatini 12/1/2020 18:14:10'!
FAILURE!

!testRun: #InternalRestInterfaceTest #test07CannotAddToUnknownCartID stamp: 'FedericoSabatini 12/1/2020 18:14:10'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'FedericoSabatini 12/1/2020 18:14:10'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'FedericoSabatini 12/1/2020 18:14:10'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10CannotCheckoutToUnknownCartID stamp: 'FedericoSabatini 12/1/2020 18:14:10'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11CannotListAnUnknownCartID stamp: 'FedericoSabatini 12/1/2020 18:14:10'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAddOnExpiredCart stamp: 'FedericoSabatini 12/1/2020 18:14:10'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13CannotListOnExpiredCart stamp: 'FedericoSabatini 12/1/2020 18:14:10'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14CannotCheckoutOnExpiredCart stamp: 'FedericoSabatini 12/1/2020 18:14:10'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15AddAnItemShouldRestartExpirationTime stamp: 'FedericoSabatini 12/1/2020 18:14:10'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16ListCartShouldRestartExpirationTime stamp: 'FedericoSabatini 12/1/2020 18:14:10'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17CheckoutShouldRestartExpirationTime stamp: 'FedericoSabatini 12/1/2020 18:14:10'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05AddedItemIsIncludedInCartList stamp: 'FedericoSabatini 12/1/2020 18:14:24'!
FAILURE!

items asBag!
!InternalRestInterfaceTest methodsFor: 'adding' stamp: 'FedericoSabatini 12/1/2020 18:15:12' prior: 50892427!
test05AddedItemIsIncludedInCartList

	| tusLibros cartID expectedCartList |

	expectedCartList := Bag with: testObjectsFactory itemSellByTheStore.

	tusLibros := testObjectsFactory tusLibros.	
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.

	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	self assert: expectedCartList equals: (tusLibros listCartFor: cartID).! !

!testRun: #InternalRestInterfaceTest #test01CreateCartHaveEmptyList stamp: 'FedericoSabatini 12/1/2020 18:15:31'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CannotCreateCartWithInvalidPassword stamp: 'FedericoSabatini 12/1/2020 18:15:31'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotCreateCartWithUnknownUser stamp: 'FedericoSabatini 12/1/2020 18:15:31'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04CannotAssignSameIDForDifferentCarts stamp: 'FedericoSabatini 12/1/2020 18:15:31'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05AddedItemIsIncludedInCartList stamp: 'FedericoSabatini 12/1/2020 18:15:31'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'FedericoSabatini 12/1/2020 18:15:31'!
FAILURE!

!testRun: #InternalRestInterfaceTest #test07CannotAddToUnknownCartID stamp: 'FedericoSabatini 12/1/2020 18:15:31'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'FedericoSabatini 12/1/2020 18:15:31'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'FedericoSabatini 12/1/2020 18:15:31'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10CannotCheckoutToUnknownCartID stamp: 'FedericoSabatini 12/1/2020 18:15:31'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11CannotListAnUnknownCartID stamp: 'FedericoSabatini 12/1/2020 18:15:32'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAddOnExpiredCart stamp: 'FedericoSabatini 12/1/2020 18:15:32'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13CannotListOnExpiredCart stamp: 'FedericoSabatini 12/1/2020 18:15:32'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14CannotCheckoutOnExpiredCart stamp: 'FedericoSabatini 12/1/2020 18:15:32'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15AddAnItemShouldRestartExpirationTime stamp: 'FedericoSabatini 12/1/2020 18:15:32'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16ListCartShouldRestartExpirationTime stamp: 'FedericoSabatini 12/1/2020 18:15:32'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17CheckoutShouldRestartExpirationTime stamp: 'FedericoSabatini 12/1/2020 18:15:32'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'FedericoSabatini 12/1/2020 18:15:32'!
FAILURE!
!InternalRestInterfaceTest methodsFor: 'adding' stamp: 'FedericoSabatini 12/1/2020 18:17:17' prior: 50892518!
test05AddedItemIsIncludedInCartList

	| tusLibros cartID expectedCartList |

	expectedCartList := Bag new.
	expectedCartList add: testObjectsFactory itemSellByTheStore withOccurrences: 1.

	tusLibros := testObjectsFactory tusLibros.	
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.

	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	self assert: expectedCartList equals: (tusLibros listCartFor: cartID).! !

!testRun: #InternalRestInterfaceTest #test01CreateCartHaveEmptyList stamp: 'FedericoSabatini 12/1/2020 18:17:19'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CannotCreateCartWithInvalidPassword stamp: 'FedericoSabatini 12/1/2020 18:17:20'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotCreateCartWithUnknownUser stamp: 'FedericoSabatini 12/1/2020 18:17:20'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04CannotAssignSameIDForDifferentCarts stamp: 'FedericoSabatini 12/1/2020 18:17:20'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05AddedItemIsIncludedInCartList stamp: 'FedericoSabatini 12/1/2020 18:17:20'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'FedericoSabatini 12/1/2020 18:17:20'!
FAILURE!

!testRun: #InternalRestInterfaceTest #test07CannotAddToUnknownCartID stamp: 'FedericoSabatini 12/1/2020 18:17:20'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'FedericoSabatini 12/1/2020 18:17:20'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'FedericoSabatini 12/1/2020 18:17:20'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10CannotCheckoutToUnknownCartID stamp: 'FedericoSabatini 12/1/2020 18:17:20'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11CannotListAnUnknownCartID stamp: 'FedericoSabatini 12/1/2020 18:17:20'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAddOnExpiredCart stamp: 'FedericoSabatini 12/1/2020 18:17:20'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13CannotListOnExpiredCart stamp: 'FedericoSabatini 12/1/2020 18:17:20'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14CannotCheckoutOnExpiredCart stamp: 'FedericoSabatini 12/1/2020 18:17:20'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15AddAnItemShouldRestartExpirationTime stamp: 'FedericoSabatini 12/1/2020 18:17:20'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16ListCartShouldRestartExpirationTime stamp: 'FedericoSabatini 12/1/2020 18:17:20'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17CheckoutShouldRestartExpirationTime stamp: 'FedericoSabatini 12/1/2020 18:17:20'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'FedericoSabatini 12/1/2020 18:17:20'!
FAILURE!
!InternalRestInterfaceTest methodsFor: 'adding' stamp: 'FedericoSabatini 12/1/2020 18:18:07' prior: 50891139!
test06AddedItemsInDifferentsCartsAreInRespectiveLists

	| tusLibros firstCartID secondCartID expectedFirstCart expectedSecondCart |

	expectedFirstCart := Bag new.
	expectedFirstCart add: testObjectsFactory itemSellByTheStore withOccurrences: 5.
	expectedSecondCart := Bag new. 
	expectedSecondCart add: testObjectsFactory itemSellByTheStore withOccurrences: 10.

	tusLibros := testObjectsFactory tusLibros.	
	firstCartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	secondCartID := tusLibros createCartForUser: 2 withPassword: 'pass'.

	tusLibros addToCart: firstCartID aQuantity: 5 of: testObjectsFactory itemSellByTheStore.
	tusLibros addToCart: secondCartID aQuantity: 10 of: testObjectsFactory itemSellByTheStore.
	
	self assert: expectedFirstCart equals: (tusLibros listCartFor: firstCartID).
	self assert: expectedSecondCart equals: (tusLibros listCartFor: secondCartID).! !

!testRun: #InternalRestInterfaceTest #test01CreateCartHaveEmptyList stamp: 'FedericoSabatini 12/1/2020 18:18:09'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CannotCreateCartWithInvalidPassword stamp: 'FedericoSabatini 12/1/2020 18:18:09'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotCreateCartWithUnknownUser stamp: 'FedericoSabatini 12/1/2020 18:18:09'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04CannotAssignSameIDForDifferentCarts stamp: 'FedericoSabatini 12/1/2020 18:18:10'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05AddedItemIsIncludedInCartList stamp: 'FedericoSabatini 12/1/2020 18:18:10'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'FedericoSabatini 12/1/2020 18:18:10'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CannotAddToUnknownCartID stamp: 'FedericoSabatini 12/1/2020 18:18:10'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'FedericoSabatini 12/1/2020 18:18:10'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'FedericoSabatini 12/1/2020 18:18:10'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10CannotCheckoutToUnknownCartID stamp: 'FedericoSabatini 12/1/2020 18:18:10'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11CannotListAnUnknownCartID stamp: 'FedericoSabatini 12/1/2020 18:18:10'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAddOnExpiredCart stamp: 'FedericoSabatini 12/1/2020 18:18:10'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13CannotListOnExpiredCart stamp: 'FedericoSabatini 12/1/2020 18:18:10'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14CannotCheckoutOnExpiredCart stamp: 'FedericoSabatini 12/1/2020 18:18:10'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15AddAnItemShouldRestartExpirationTime stamp: 'FedericoSabatini 12/1/2020 18:18:10'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16ListCartShouldRestartExpirationTime stamp: 'FedericoSabatini 12/1/2020 18:18:10'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17CheckoutShouldRestartExpirationTime stamp: 'FedericoSabatini 12/1/2020 18:18:10'!
PASSED!
!Cart methodsFor: 'accesing' stamp: 'FedericoSabatini 12/1/2020 18:19:05' prior: 50892264!
items
	
	^items asBag.! !

!testRun: #InternalRestInterfaceTest #test01CreateCartHaveEmptyList stamp: 'FedericoSabatini 12/1/2020 18:19:09'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CannotCreateCartWithInvalidPassword stamp: 'FedericoSabatini 12/1/2020 18:19:09'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotCreateCartWithUnknownUser stamp: 'FedericoSabatini 12/1/2020 18:19:09'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04CannotAssignSameIDForDifferentCarts stamp: 'FedericoSabatini 12/1/2020 18:19:09'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05AddedItemIsIncludedInCartList stamp: 'FedericoSabatini 12/1/2020 18:19:09'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'FedericoSabatini 12/1/2020 18:19:09'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CannotAddToUnknownCartID stamp: 'FedericoSabatini 12/1/2020 18:19:09'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'FedericoSabatini 12/1/2020 18:19:09'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'FedericoSabatini 12/1/2020 18:19:09'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10CannotCheckoutToUnknownCartID stamp: 'FedericoSabatini 12/1/2020 18:19:09'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11CannotListAnUnknownCartID stamp: 'FedericoSabatini 12/1/2020 18:19:09'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAddOnExpiredCart stamp: 'FedericoSabatini 12/1/2020 18:19:09'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13CannotListOnExpiredCart stamp: 'FedericoSabatini 12/1/2020 18:19:10'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14CannotCheckoutOnExpiredCart stamp: 'FedericoSabatini 12/1/2020 18:19:10'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15AddAnItemShouldRestartExpirationTime stamp: 'FedericoSabatini 12/1/2020 18:19:10'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16ListCartShouldRestartExpirationTime stamp: 'FedericoSabatini 12/1/2020 18:19:10'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17CheckoutShouldRestartExpirationTime stamp: 'FedericoSabatini 12/1/2020 18:19:10'!
PASSED!

----SNAPSHOT----(1 December 2020 18:20:46) CuisUniversity-4384.image priorSource: 17890358!

----SNAPSHOT----(1 December 2020 20:06:13) CuisUniversity-4384.image priorSource: 17959215!

----STARTUP---- (2 December 2020 11:07:12) as D:\facultad\Smalltalk\windows64\CuisUniversity-4384.image!

!InternalRestInterface methodsFor: 'api rest' stamp: 'FedericoSabatini 12/2/2020 11:16:25'!
listPurchases: aCartID

	| aSessionCart |
	aSessionCart := self cartWith: aCartID.
	
	(aSessionCart expiringTimestamp < clock now) ifTrue: [ self error: self class cartTimeExpiredErrorDescription ].
	carts at: aCartID put: (SessionCart for: aSessionCart cart expiringAt:  (clock now next: 30*minute) ).

	^100.! !
!InternalRestInterfaceTest methodsFor: 'checkout' stamp: 'FedericoSabatini 12/2/2020 11:18:49'!
test18listPurchasesShouldIncludeBookAndTotal

	| tusLibros expectedPurchases cartID |

	expectedPurchases := OrderedCollection with: (1) with: (1).
	tusLibros := testObjectsFactory tusLibros.
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	
	self assert: 100 equals: (self tusLibros: tusLibros checkoutCartID: cartID).! !
!InternalRestInterface methodsFor: 'api rest' stamp: 'FedericoSabatini 12/2/2020 11:20:52' prior: 50892886!
listPurchases: aCartID

	| aSessionCart |
	aSessionCart := self cartWith: aCartID.
	
	(aSessionCart expiringTimestamp < clock now) ifTrue: [ self error: self class cartTimeExpiredErrorDescription ].
	carts at: aCartID put: (SessionCart for: aSessionCart cart expiringAt:  (clock now next: 30*minute) ).

	^0.! !
!InternalRestInterfaceTest methodsFor: 'checkout' stamp: 'FedericoSabatini 12/2/2020 11:21:00' prior: 50892899!
test18listPurchasesShouldIncludeBookAndTotal

	| tusLibros expectedPurchases cartID |

	expectedPurchases := OrderedCollection with: 0.
	tusLibros := testObjectsFactory tusLibros.
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	
	self assert: 100 equals: (self tusLibros: tusLibros checkoutCartID: cartID).! !
!InternalRestInterfaceTest methodsFor: 'checkout' stamp: 'FedericoSabatini 12/2/2020 11:24:54' prior: 50892930!
test18listPurchasesShouldIncludeBookAndTotal

	| tusLibros expectedPurchases cartID |

	expectedPurchases := OrderedCollection with: 0.
	tusLibros := testObjectsFactory tusLibros.
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	
	self assert: 100 equals: (self tusLibros: tusLibros checkoutCartID: cartID).! !
!InternalRestInterfaceTest methodsFor: 'checkout' stamp: 'FedericoSabatini 12/2/2020 11:25:11' prior: 50892947!
test18listPurchasesShouldIncludeBookAndTotal

	| tusLibros expectedPurchases cartID |

	expectedPurchases := OrderedCollection with: 0.
	tusLibros := testObjectsFactory tusLibros.
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	
	self assert: 0 equals: (self tusLibros: tusLibros checkoutCartID: cartID).! !
!InternalRestInterfaceTest methodsFor: 'checkout' stamp: 'FedericoSabatini 12/2/2020 11:25:43' prior: 50892964!
test18listPurchasesShouldIncludeBookAndTotal

	| tusLibros expectedPurchases cartID |

	expectedPurchases := OrderedCollection with: 0.
	tusLibros := testObjectsFactory tusLibros.
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	
	self assert: 0 equals: (tusLibros listPurchases: cartID).! !
!InternalRestInterfaceTest methodsFor: 'checkout' stamp: 'FedericoSabatini 12/2/2020 11:25:52' prior: 50892981!
test18listPurchasesShouldIncludeBookAndTotal

	| tusLibros expectedPurchases cartID |

	expectedPurchases := OrderedCollection with: 0.
	tusLibros := testObjectsFactory tusLibros.
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	
	self assert: expectedPurchases equals: (tusLibros listPurchases: cartID).! !
!InternalRestInterface methodsFor: 'api rest' stamp: 'FedericoSabatini 12/2/2020 11:26:06' prior: 50892916!
listPurchases: aCartID

	| aSessionCart |
	aSessionCart := self cartWith: aCartID.
	
	(aSessionCart expiringTimestamp < clock now) ifTrue: [ self error: self class cartTimeExpiredErrorDescription ].
	carts at: aCartID put: (SessionCart for: aSessionCart cart expiringAt:  (clock now next: 30*minute) ).

	^OrderedCollection with: 0.! !

!testRun: #InternalRestInterfaceTest #test18listPurchasesShouldIncludeBookAndTotal stamp: 'FedericoSabatini 12/2/2020 11:26:29'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01CreateCartHaveEmptyList stamp: 'FedericoSabatini 12/2/2020 11:26:30'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CannotCreateCartWithInvalidPassword stamp: 'FedericoSabatini 12/2/2020 11:26:30'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotCreateCartWithUnknownUser stamp: 'FedericoSabatini 12/2/2020 11:26:30'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04CannotAssignSameIDForDifferentCarts stamp: 'FedericoSabatini 12/2/2020 11:26:30'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05AddedItemIsIncludedInCartList stamp: 'FedericoSabatini 12/2/2020 11:26:30'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'FedericoSabatini 12/2/2020 11:26:30'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CannotAddToUnknownCartID stamp: 'FedericoSabatini 12/2/2020 11:26:30'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'FedericoSabatini 12/2/2020 11:26:30'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'FedericoSabatini 12/2/2020 11:26:30'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10CannotCheckoutToUnknownCartID stamp: 'FedericoSabatini 12/2/2020 11:26:30'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11CannotListAnUnknownCartID stamp: 'FedericoSabatini 12/2/2020 11:26:30'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAddOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 11:26:30'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13CannotListOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 11:26:30'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14CannotCheckoutOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 11:26:30'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15AddAnItemShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 11:26:30'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16ListCartShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 11:26:30'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17CheckoutShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 11:26:31'!
PASSED!

!testRun: #InternalRestInterfaceTest #test18listPurchasesShouldIncludeBookAndTotal stamp: 'FedericoSabatini 12/2/2020 11:26:31'!
PASSED!
!InternalRestInterfaceTest methodsFor: 'checkout' stamp: 'FedericoSabatini 12/2/2020 11:27:14' prior: 50892997!
test18listPurchasesShouldIncludeBookAndTotal

	| tusLibros expectedPurchases cartID |

	expectedPurchases := OrderedCollection with: 0.
	tusLibros := testObjectsFactory tusLibros.
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	self assert: expectedPurchases equals: (tusLibros listPurchases: cartID).! !
!InternalRestInterfaceTest methodsFor: 'checkout' stamp: 'FedericoSabatini 12/2/2020 11:27:57'!
test19listPurchasesAfterAddToCartShouldIncludeBookAndTotal

	| tusLibros expectedPurchases cartID |

	expectedPurchases := OrderedCollection with: 0.
	tusLibros := testObjectsFactory tusLibros.
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	self assert: expectedPurchases equals: (tusLibros listPurchases: cartID).! !
!InternalRestInterfaceTest methodsFor: 'checkout' stamp: 'FedericoSabatini 12/2/2020 11:28:22'!
test18listPurchasesShouldReturnZeroOnEmptyCart

	| tusLibros expectedPurchases cartID |

	expectedPurchases := OrderedCollection with: 0.
	tusLibros := testObjectsFactory tusLibros.
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	self assert: expectedPurchases equals: (tusLibros listPurchases: cartID).! !

!methodRemoval: InternalRestInterfaceTest #test18listPurchasesShouldIncludeBookAndTotal stamp: 'FedericoSabatini 12/2/2020 11:28:28'!
test18listPurchasesShouldIncludeBookAndTotal

	| tusLibros expectedPurchases cartID |

	expectedPurchases := OrderedCollection with: 0.
	tusLibros := testObjectsFactory tusLibros.
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	self assert: expectedPurchases equals: (tusLibros listPurchases: cartID).!
!InternalRestInterfaceTest methodsFor: 'checkout' stamp: 'FedericoSabatini 12/2/2020 11:31:05' prior: 50893135!
test18listPurchasesShouldReturnZeroOnEmptyCart

	| tusLibros expectedPurchases cartID |

	expectedPurchases := OrderedCollection with: 0.
	tusLibros := testObjectsFactory tusLibros.
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	self assert: expectedPurchases equals: (tusLibros listPurchases: cartID).! !
!InternalRestInterfaceTest methodsFor: 'checkout' stamp: 'FedericoSabatini 12/2/2020 11:33:32' prior: 50893163!
test18listPurchasesShouldReturnZeroOnEmptyCart

	| tusLibros expectedPurchases cartID zero |
	
	zero := '0asas'.

	expectedPurchases := OrderedCollection with: 0.
	tusLibros := testObjectsFactory tusLibros.
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	self assert: expectedPurchases equals: (tusLibros listPurchases: cartID).! !
!InternalRestInterfaceTest methodsFor: 'checkout' stamp: 'FedericoSabatini 12/2/2020 11:34:14' prior: 50893177!
test18listPurchasesShouldReturnZeroOnEmptyCart

	| tusLibros expectedPurchases cartID  |

	expectedPurchases := OrderedCollection with: '0'.
	tusLibros := testObjectsFactory tusLibros.
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	self assert: expectedPurchases equals: (tusLibros listPurchases: cartID).! !

!testRun: #InternalRestInterfaceTest #test18listPurchasesShouldReturnZeroOnEmptyCart stamp: 'FedericoSabatini 12/2/2020 11:34:17'!
FAILURE!
!InternalRestInterface methodsFor: 'api rest' stamp: 'FedericoSabatini 12/2/2020 11:34:25' prior: 50893014!
listPurchases: aCartID

	| aSessionCart |
	aSessionCart := self cartWith: aCartID.
	
	(aSessionCart expiringTimestamp < clock now) ifTrue: [ self error: self class cartTimeExpiredErrorDescription ].
	carts at: aCartID put: (SessionCart for: aSessionCart cart expiringAt:  (clock now next: 30*minute) ).

	^OrderedCollection with: '0'.! !

!testRun: #InternalRestInterfaceTest #test18listPurchasesShouldReturnZeroOnEmptyCart stamp: 'FedericoSabatini 12/2/2020 11:34:31'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01CreateCartHaveEmptyList stamp: 'FedericoSabatini 12/2/2020 11:34:31'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CannotCreateCartWithInvalidPassword stamp: 'FedericoSabatini 12/2/2020 11:34:31'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotCreateCartWithUnknownUser stamp: 'FedericoSabatini 12/2/2020 11:34:31'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04CannotAssignSameIDForDifferentCarts stamp: 'FedericoSabatini 12/2/2020 11:34:31'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05AddedItemIsIncludedInCartList stamp: 'FedericoSabatini 12/2/2020 11:34:31'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'FedericoSabatini 12/2/2020 11:34:31'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CannotAddToUnknownCartID stamp: 'FedericoSabatini 12/2/2020 11:34:31'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'FedericoSabatini 12/2/2020 11:34:31'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'FedericoSabatini 12/2/2020 11:34:31'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10CannotCheckoutToUnknownCartID stamp: 'FedericoSabatini 12/2/2020 11:34:31'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11CannotListAnUnknownCartID stamp: 'FedericoSabatini 12/2/2020 11:34:31'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAddOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 11:34:31'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13CannotListOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 11:34:31'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14CannotCheckoutOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 11:34:31'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15AddAnItemShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 11:34:32'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16ListCartShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 11:34:32'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17CheckoutShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 11:34:32'!
PASSED!

!testRun: #InternalRestInterfaceTest #test18listPurchasesShouldReturnZeroOnEmptyCart stamp: 'FedericoSabatini 12/2/2020 11:34:32'!
PASSED!

!testRun: #InternalRestInterfaceTest #test19listPurchasesAfterAddToCartShouldIncludeBookAndTotal stamp: 'FedericoSabatini 12/2/2020 11:34:32'!
FAILURE!

!testRun: #InternalRestInterfaceTest #test19listPurchasesAfterAddToCartShouldIncludeBookAndTotal stamp: 'FedericoSabatini 12/2/2020 11:34:32'!
FAILURE!
!InternalRestInterfaceTest methodsFor: 'checkout' stamp: 'FedericoSabatini 12/2/2020 11:34:55' prior: 50893121!
test19listPurchasesAfterAddToCartShouldIncludeBookAndTotal

	| tusLibros expectedPurchases cartID |

	expectedPurchases := OrderedCollection with: '0'.
	tusLibros := testObjectsFactory tusLibros.
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	self assert: expectedPurchases equals: (tusLibros listPurchases: cartID).! !

!testRun: #InternalRestInterfaceTest #test19listPurchasesAfterAddToCartShouldIncludeBookAndTotal stamp: 'FedericoSabatini 12/2/2020 11:34:56'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01CreateCartHaveEmptyList stamp: 'FedericoSabatini 12/2/2020 11:34:56'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CannotCreateCartWithInvalidPassword stamp: 'FedericoSabatini 12/2/2020 11:34:57'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotCreateCartWithUnknownUser stamp: 'FedericoSabatini 12/2/2020 11:34:57'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04CannotAssignSameIDForDifferentCarts stamp: 'FedericoSabatini 12/2/2020 11:34:57'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05AddedItemIsIncludedInCartList stamp: 'FedericoSabatini 12/2/2020 11:34:57'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'FedericoSabatini 12/2/2020 11:34:57'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CannotAddToUnknownCartID stamp: 'FedericoSabatini 12/2/2020 11:34:57'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'FedericoSabatini 12/2/2020 11:34:57'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'FedericoSabatini 12/2/2020 11:34:57'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10CannotCheckoutToUnknownCartID stamp: 'FedericoSabatini 12/2/2020 11:34:57'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11CannotListAnUnknownCartID stamp: 'FedericoSabatini 12/2/2020 11:34:57'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAddOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 11:34:57'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13CannotListOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 11:34:57'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14CannotCheckoutOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 11:34:57'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15AddAnItemShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 11:34:57'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16ListCartShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 11:34:57'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17CheckoutShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 11:34:57'!
PASSED!

!testRun: #InternalRestInterfaceTest #test18listPurchasesShouldReturnZeroOnEmptyCart stamp: 'FedericoSabatini 12/2/2020 11:34:57'!
PASSED!

!testRun: #InternalRestInterfaceTest #test19listPurchasesAfterAddToCartShouldIncludeBookAndTotal stamp: 'FedericoSabatini 12/2/2020 11:34:57'!
PASSED!
!InternalRestInterface methodsFor: 'api rest' stamp: 'FedericoSabatini 12/2/2020 11:35:38' prior: 50893211!
listPurchases: aCartID

	| aSessionCart |
	aSessionCart := self cartWith: aCartID.
	

	^OrderedCollection with: '0'.! !

!testRun: #InternalRestInterfaceTest #test01CreateCartHaveEmptyList stamp: 'FedericoSabatini 12/2/2020 11:35:47'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CannotCreateCartWithInvalidPassword stamp: 'FedericoSabatini 12/2/2020 11:35:47'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotCreateCartWithUnknownUser stamp: 'FedericoSabatini 12/2/2020 11:35:47'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04CannotAssignSameIDForDifferentCarts stamp: 'FedericoSabatini 12/2/2020 11:35:47'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05AddedItemIsIncludedInCartList stamp: 'FedericoSabatini 12/2/2020 11:35:47'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'FedericoSabatini 12/2/2020 11:35:47'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CannotAddToUnknownCartID stamp: 'FedericoSabatini 12/2/2020 11:35:47'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'FedericoSabatini 12/2/2020 11:35:47'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'FedericoSabatini 12/2/2020 11:35:47'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10CannotCheckoutToUnknownCartID stamp: 'FedericoSabatini 12/2/2020 11:35:47'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11CannotListAnUnknownCartID stamp: 'FedericoSabatini 12/2/2020 11:35:48'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAddOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 11:35:48'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13CannotListOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 11:35:48'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14CannotCheckoutOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 11:35:48'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15AddAnItemShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 11:35:48'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16ListCartShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 11:35:48'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17CheckoutShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 11:35:48'!
PASSED!

!testRun: #InternalRestInterfaceTest #test18listPurchasesShouldReturnZeroOnEmptyCart stamp: 'FedericoSabatini 12/2/2020 11:35:48'!
PASSED!

!testRun: #InternalRestInterfaceTest #test19listPurchasesAfterAddToCartShouldIncludeBookAndTotal stamp: 'FedericoSabatini 12/2/2020 11:35:48'!
PASSED!
!InternalRestInterfaceTest methodsFor: 'checkout' stamp: 'FedericoSabatini 12/2/2020 11:37:42' prior: 50893314!
test19listPurchasesAfterAddToCartShouldIncludeBookAndTotal

	| tusLibros expectedPurchases cartID |

	expectedPurchases := OrderedCollection 
		with: testObjectsFactory itemSellByTheStore + '->' + testObjectsFactory itemSellByTheStorePrice 
		with: testObjectsFactory itemSellByTheStorePrice.
		
	tusLibros := testObjectsFactory tusLibros.
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	self assert: expectedPurchases equals: (tusLibros listPurchases: cartID).! !
!InternalRestInterfaceTest methodsFor: 'checkout' stamp: 'FedericoSabatini 12/2/2020 11:38:13' prior: 50893499!
test19listPurchasesAfterAddToCartShouldIncludeBookAndTotal

	| tusLibros expectedPurchases cartID |

	expectedPurchases := OrderedCollection 
		with: testObjectsFactory itemSellByTheStore + '->' + testObjectsFactory itemSellByTheStorePrice 
		with: testObjectsFactory itemSellByTheStorePrice.
		
	tusLibros := testObjectsFactory tusLibros.
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	
	self assert: expectedPurchases equals: (tusLibros listPurchases: cartID).! !

!testRun: #InternalRestInterfaceTest #test19listPurchasesAfterAddToCartShouldIncludeBookAndTotal stamp: 'FedericoSabatini 12/2/2020 11:38:23'!
ERROR!
!InternalRestInterfaceTest methodsFor: 'checkout' stamp: 'FedericoSabatini 12/2/2020 11:39:31' prior: 50893518!
test19listPurchasesAfterAddToCartShouldIncludeBookAndTotal

	| tusLibros expectedPurchases cartID |

	expectedPurchases := OrderedCollection 
		with: testObjectsFactory itemSellByTheStore, ' -> ', testObjectsFactory itemSellByTheStorePrice 
		with: testObjectsFactory itemSellByTheStorePrice.
		
	tusLibros := testObjectsFactory tusLibros.
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	
	self assert: expectedPurchases equals: (tusLibros listPurchases: cartID).! !
!InternalRestInterfaceTest methodsFor: 'checkout' stamp: 'FedericoSabatini 12/2/2020 11:39:35' prior: 50893545!
test19listPurchasesAfterAddToCartShouldIncludeBookAndTotal

	| tusLibros expectedPurchases cartID |

	expectedPurchases := OrderedCollection 
		with: (testObjectsFactory itemSellByTheStore, ' -> ', testObjectsFactory itemSellByTheStorePrice) 
		with: testObjectsFactory itemSellByTheStorePrice.
		
	tusLibros := testObjectsFactory tusLibros.
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	
	self assert: expectedPurchases equals: (tusLibros listPurchases: cartID).! !

!testRun: #InternalRestInterfaceTest #test19listPurchasesAfterAddToCartShouldIncludeBookAndTotal stamp: 'FedericoSabatini 12/2/2020 11:39:36'!
ERROR!
!InternalRestInterfaceTest methodsFor: 'checkout' stamp: 'FedericoSabatini 12/2/2020 11:39:53' prior: 50893567!
test19listPurchasesAfterAddToCartShouldIncludeBookAndTotal

	| tusLibros expectedPurchases cartID |

	expectedPurchases := OrderedCollection 
		with: (testObjectsFactory itemSellByTheStore + ' -> ' + testObjectsFactory itemSellByTheStorePrice) 
		with: testObjectsFactory itemSellByTheStorePrice.
		
	tusLibros := testObjectsFactory tusLibros.
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	
	self assert: expectedPurchases equals: (tusLibros listPurchases: cartID).! !

!testRun: #InternalRestInterfaceTest #test19listPurchasesAfterAddToCartShouldIncludeBookAndTotal stamp: 'FedericoSabatini 12/2/2020 11:39:55'!
ERROR!
!InternalRestInterfaceTest methodsFor: 'checkout' stamp: 'FedericoSabatini 12/2/2020 11:41:03' prior: 50893594!
test19listPurchasesAfterAddToCartShouldIncludeBookAndTotal

	| tusLibros expectedPurchases cartID |

	expectedPurchases := OrderedCollection 
		with: (testObjectsFactory itemSellByTheStore, ' -> ',testObjectsFactory itemSellByTheStorePrice) 
		with: testObjectsFactory itemSellByTheStorePrice.
		
	tusLibros := testObjectsFactory tusLibros.
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	
	self assert: expectedPurchases equals: (tusLibros listPurchases: cartID).! !

!testRun: #InternalRestInterfaceTest #test19listPurchasesAfterAddToCartShouldIncludeBookAndTotal stamp: 'FedericoSabatini 12/2/2020 11:41:05'!
ERROR!
!InternalRestInterfaceTest methodsFor: 'checkout' stamp: 'FedericoSabatini 12/2/2020 11:41:45' prior: 50893621!
test19listPurchasesAfterAddToCartShouldIncludeBookAndTotal

	| tusLibros expectedPurchases cartID |

	expectedPurchases := OrderedCollection 
		with: (testObjectsFactory itemSellByTheStore, testObjectsFactory itemSellByTheStorePrice)
		with: testObjectsFactory itemSellByTheStorePrice.
		
	tusLibros := testObjectsFactory tusLibros.
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	
	self assert: expectedPurchases equals: (tusLibros listPurchases: cartID).! !

!testRun: #InternalRestInterfaceTest #test19listPurchasesAfterAddToCartShouldIncludeBookAndTotal stamp: 'FedericoSabatini 12/2/2020 11:41:46'!
ERROR!
!InternalRestInterfaceTest methodsFor: 'checkout' stamp: 'FedericoSabatini 12/2/2020 11:42:20' prior: 50893648!
test19listPurchasesAfterAddToCartShouldIncludeBookAndTotal

	| tusLibros expectedPurchases cartID |

	expectedPurchases := OrderedCollection 
		with: (testObjectsFactory itemSellByTheStore, ' -> ', testObjectsFactory itemSellByTheStorePrice asString)
		with: testObjectsFactory itemSellByTheStorePrice asString.
		
	tusLibros := testObjectsFactory tusLibros.
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	
	self assert: expectedPurchases equals: (tusLibros listPurchases: cartID).! !

!testRun: #InternalRestInterfaceTest #test19listPurchasesAfterAddToCartShouldIncludeBookAndTotal stamp: 'FedericoSabatini 12/2/2020 11:42:21'!
FAILURE!
!InternalRestInterface methodsFor: 'api rest' stamp: 'FedericoSabatini 12/2/2020 11:43:57' prior: 50893412!
listPurchases: aCartID

	| aSessionCart purchaseList |
	aSessionCart := self cartWith: aCartID.
	
	purchaseList := OrderedCollection new.
	aSessionCart cart items do: [ :cartKey | ]
	
	^OrderedCollection with: '0'.! !
!InternalRestInterface methodsFor: 'api rest' stamp: 'FedericoSabatini 12/2/2020 11:44:51' prior: 50893701!
listPurchases: aCartID

	| aSessionCart purchaseList |
	aSessionCart := self cartWith: aCartID.
	
	purchaseList := OrderedCollection new.
	
	aSessionCart cart items do: [ :cartKey :cartValue | purchaseList add: (cartKey, catalog ) ]
	
	^OrderedCollection with: '0'.! !
!InternalRestInterface methodsFor: 'api rest' stamp: 'FedericoSabatini 12/2/2020 11:45:30' prior: 50893712!
listPurchases: aCartID

	| aSessionCart purchaseList |
	aSessionCart := self cartWith: aCartID.
	
	purchaseList := OrderedCollection new.
	
	aSessionCart cart items do: [ :cartKey :cartValue | purchaseList add: (cartKey, catalog at: cartKey) ]
	
	^OrderedCollection with: '0'.! !

!testRun: #InternalRestInterfaceTest #test19listPurchasesAfterAddToCartShouldIncludeBookAndTotal stamp: 'FedericoSabatini 12/2/2020 11:45:38'!
ERROR!

!testRun: #InternalRestInterfaceTest #test19listPurchasesAfterAddToCartShouldIncludeBookAndTotal stamp: 'FedericoSabatini 12/2/2020 11:45:47'!
ERROR!
!InternalRestInterface methodsFor: 'api rest' stamp: 'FedericoSabatini 12/2/2020 11:46:39' prior: 50893724!
listPurchases: aCartID

	| aSessionCart purchaseList |
	aSessionCart := self cartWith: aCartID.
	
	purchaseList := OrderedCollection new.
	
	(aSessionCart cart items) do: [ :cartKey | purchaseList add: (cartKey, catalog at: cartKey) ]
	
	^OrderedCollection with: '0'.! !

!testRun: #InternalRestInterfaceTest #test19listPurchasesAfterAddToCartShouldIncludeBookAndTotal stamp: 'FedericoSabatini 12/2/2020 11:46:40'!
ERROR!
!InternalRestInterface methodsFor: 'api rest' stamp: 'FedericoSabatini 12/2/2020 11:48:36' prior: 50893746!
listPurchases: aCartID

	| aSessionCart purchaseList |
	aSessionCart := self cartWith: aCartID.
	
	purchaseList := OrderedCollection new.
	
	(aSessionCart cart items) do: [ :cartKey | cartKey printString ].
	
	^OrderedCollection with: '0'.! !
!InternalRestInterface methodsFor: 'api rest' stamp: 'FedericoSabatini 12/2/2020 11:48:57' prior: 50893763!
listPurchases: aCartID

	| aSessionCart purchaseList |
	aSessionCart := self cartWith: aCartID.
	
	purchaseList := OrderedCollection new.
	
	(aSessionCart cart items) do: [ :cartKey | purchaseList addFirst: cartKey printString].
	
	^OrderedCollection with: '0'.! !

!testRun: #InternalRestInterfaceTest #test19listPurchasesAfterAddToCartShouldIncludeBookAndTotal stamp: 'FedericoSabatini 12/2/2020 11:49:03'!
FAILURE!
!InternalRestInterface methodsFor: 'api rest' stamp: 'FedericoSabatini 12/2/2020 11:49:41' prior: 50893774!
listPurchases: aCartID

	| aSessionCart purchaseList |
	aSessionCart := self cartWith: aCartID.
	
	purchaseList := OrderedCollection new.
	
	(aSessionCart cart items) do: [ :cartKey | purchaseList addFirst: cartKey].
	
	^OrderedCollection with: '0'.! !
!InternalRestInterface methodsFor: 'api rest' stamp: 'FedericoSabatini 12/2/2020 11:50:19' prior: 50893791!
listPurchases: aCartID

	| aSessionCart purchaseList |
	aSessionCart := self cartWith: aCartID.
	
	purchaseList := OrderedCollection new.
	
	(aSessionCart cart items) do: [ :cartKey | purchaseList addFirst: (cartKey, ' ->', catalog at: cartKey)].
	
	^OrderedCollection with: '0'.! !

!testRun: #InternalRestInterfaceTest #test19listPurchasesAfterAddToCartShouldIncludeBookAndTotal stamp: 'FedericoSabatini 12/2/2020 11:50:24'!
ERROR!
!InternalRestInterface methodsFor: 'api rest' stamp: 'FedericoSabatini 12/2/2020 11:50:45' prior: 50893803!
listPurchases: aCartID

	| aSessionCart purchaseList |
	aSessionCart := self cartWith: aCartID.
	
	purchaseList := OrderedCollection new.
	
	(aSessionCart cart items) do: [ :cartKey | purchaseList addFirst: (cartKey, ' ->', (catalog at: cartKey))].
	
	^OrderedCollection with: '0'.! !

!testRun: #InternalRestInterfaceTest #test19listPurchasesAfterAddToCartShouldIncludeBookAndTotal stamp: 'FedericoSabatini 12/2/2020 11:50:49'!
ERROR!
!InternalRestInterface methodsFor: 'api rest' stamp: 'FedericoSabatini 12/2/2020 11:51:15' prior: 50893820!
listPurchases: aCartID

	| aSessionCart purchaseList |
	aSessionCart := self cartWith: aCartID.
	
	purchaseList := OrderedCollection new.
	
	(aSessionCart cart items) do: [ :cartKey | purchaseList addFirst: cartKey, ' ->', (catalog at: cartKey) asString].
	
	^OrderedCollection with: '0'.! !
!InternalRestInterface methodsFor: 'api rest' stamp: 'FedericoSabatini 12/2/2020 11:51:25' prior: 50893837!
listPurchases: aCartID

	| aSessionCart purchaseList |
	aSessionCart := self cartWith: aCartID.
	
	purchaseList := OrderedCollection new.
	
	(aSessionCart cart items) do: [ :cartKey | purchaseList addFirst: cartKey, ' -> ', (catalog at: cartKey) asString].
	
	^OrderedCollection with: '0'.! !
!InternalRestInterface methodsFor: 'api rest' stamp: 'FedericoSabatini 12/2/2020 11:52:06' prior: 50893850!
listPurchases: aCartID

	| aSessionCart purchaseList |
	aSessionCart := self cartWith: aCartID.
	
	purchaseList := OrderedCollection new.
	
	(aSessionCart cart items) do: [ :cartKey | purchaseList addLast: cartKey, ' -> ', (catalog at: cartKey) asString].
	purchaseList addLast: '10'.
	
	^purchaseList.! !

!testRun: #InternalRestInterfaceTest #test19listPurchasesAfterAddToCartShouldIncludeBookAndTotal stamp: 'FedericoSabatini 12/2/2020 11:52:07'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01CreateCartHaveEmptyList stamp: 'FedericoSabatini 12/2/2020 11:52:07'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CannotCreateCartWithInvalidPassword stamp: 'FedericoSabatini 12/2/2020 11:52:08'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotCreateCartWithUnknownUser stamp: 'FedericoSabatini 12/2/2020 11:52:08'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04CannotAssignSameIDForDifferentCarts stamp: 'FedericoSabatini 12/2/2020 11:52:08'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05AddedItemIsIncludedInCartList stamp: 'FedericoSabatini 12/2/2020 11:52:08'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'FedericoSabatini 12/2/2020 11:52:08'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CannotAddToUnknownCartID stamp: 'FedericoSabatini 12/2/2020 11:52:08'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'FedericoSabatini 12/2/2020 11:52:08'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'FedericoSabatini 12/2/2020 11:52:08'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10CannotCheckoutToUnknownCartID stamp: 'FedericoSabatini 12/2/2020 11:52:08'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11CannotListAnUnknownCartID stamp: 'FedericoSabatini 12/2/2020 11:52:08'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAddOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 11:52:08'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13CannotListOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 11:52:08'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14CannotCheckoutOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 11:52:08'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15AddAnItemShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 11:52:08'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16ListCartShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 11:52:08'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17CheckoutShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 11:52:08'!
PASSED!

!testRun: #InternalRestInterfaceTest #test18listPurchasesShouldReturnZeroOnEmptyCart stamp: 'FedericoSabatini 12/2/2020 11:52:08'!
FAILURE!

!testRun: #InternalRestInterfaceTest #test19listPurchasesAfterAddToCartShouldIncludeBookAndTotal stamp: 'FedericoSabatini 12/2/2020 11:52:08'!
PASSED!

!testRun: #InternalRestInterfaceTest #test18listPurchasesShouldReturnZeroOnEmptyCart stamp: 'FedericoSabatini 12/2/2020 11:52:08'!
FAILURE!
!InternalRestInterface methodsFor: 'api rest' stamp: 'FedericoSabatini 12/2/2020 11:53:00' prior: 50893863!
listPurchases: aCartID

	| aSessionCart purchaseList |
	aSessionCart := self cartWith: aCartID.
	
	purchaseList := OrderedCollection new.
	
	(aSessionCart cart items) do: [ :cartKey | purchaseList addLast: cartKey, ' -> ', (catalog at: cartKey) asString].
	purchaseList addLast: aSessionCart sum.
	
	^purchaseList.! !

!testRun: #InternalRestInterfaceTest #test01CreateCartHaveEmptyList stamp: 'FedericoSabatini 12/2/2020 11:53:08'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CannotCreateCartWithInvalidPassword stamp: 'FedericoSabatini 12/2/2020 11:53:08'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotCreateCartWithUnknownUser stamp: 'FedericoSabatini 12/2/2020 11:53:08'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04CannotAssignSameIDForDifferentCarts stamp: 'FedericoSabatini 12/2/2020 11:53:08'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05AddedItemIsIncludedInCartList stamp: 'FedericoSabatini 12/2/2020 11:53:08'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'FedericoSabatini 12/2/2020 11:53:08'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CannotAddToUnknownCartID stamp: 'FedericoSabatini 12/2/2020 11:53:08'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'FedericoSabatini 12/2/2020 11:53:09'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'FedericoSabatini 12/2/2020 11:53:09'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10CannotCheckoutToUnknownCartID stamp: 'FedericoSabatini 12/2/2020 11:53:09'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11CannotListAnUnknownCartID stamp: 'FedericoSabatini 12/2/2020 11:53:09'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAddOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 11:53:09'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13CannotListOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 11:53:09'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14CannotCheckoutOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 11:53:09'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15AddAnItemShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 11:53:09'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16ListCartShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 11:53:09'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17CheckoutShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 11:53:09'!
PASSED!

!testRun: #InternalRestInterfaceTest #test18listPurchasesShouldReturnZeroOnEmptyCart stamp: 'FedericoSabatini 12/2/2020 11:53:09'!
ERROR!

!testRun: #InternalRestInterfaceTest #test19listPurchasesAfterAddToCartShouldIncludeBookAndTotal stamp: 'FedericoSabatini 12/2/2020 11:53:09'!
ERROR!
!InternalRestInterface methodsFor: 'api rest' stamp: 'FedericoSabatini 12/2/2020 11:53:38' prior: 50893964!
listPurchases: aCartID

	| aSessionCart purchaseList |
	aSessionCart := self cartWith: aCartID.
	
	purchaseList := OrderedCollection new.
	
	(aSessionCart cart items) do: [ :cartKey | purchaseList addLast: cartKey, ' -> ', (catalog at: cartKey) asString].
	purchaseList addLast: aSessionCart cart total.
	
	^purchaseList.! !

!testRun: #InternalRestInterfaceTest #test01CreateCartHaveEmptyList stamp: 'FedericoSabatini 12/2/2020 11:53:43'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CannotCreateCartWithInvalidPassword stamp: 'FedericoSabatini 12/2/2020 11:53:43'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotCreateCartWithUnknownUser stamp: 'FedericoSabatini 12/2/2020 11:53:43'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04CannotAssignSameIDForDifferentCarts stamp: 'FedericoSabatini 12/2/2020 11:53:43'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05AddedItemIsIncludedInCartList stamp: 'FedericoSabatini 12/2/2020 11:53:43'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'FedericoSabatini 12/2/2020 11:53:43'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CannotAddToUnknownCartID stamp: 'FedericoSabatini 12/2/2020 11:53:43'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'FedericoSabatini 12/2/2020 11:53:43'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'FedericoSabatini 12/2/2020 11:53:43'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10CannotCheckoutToUnknownCartID stamp: 'FedericoSabatini 12/2/2020 11:53:43'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11CannotListAnUnknownCartID stamp: 'FedericoSabatini 12/2/2020 11:53:43'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAddOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 11:53:43'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13CannotListOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 11:53:43'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14CannotCheckoutOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 11:53:43'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15AddAnItemShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 11:53:43'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16ListCartShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 11:53:43'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17CheckoutShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 11:53:43'!
PASSED!

!testRun: #InternalRestInterfaceTest #test18listPurchasesShouldReturnZeroOnEmptyCart stamp: 'FedericoSabatini 12/2/2020 11:53:43'!
ERROR!

!testRun: #InternalRestInterfaceTest #test19listPurchasesAfterAddToCartShouldIncludeBookAndTotal stamp: 'FedericoSabatini 12/2/2020 11:53:43'!
FAILURE!
!InternalRestInterface methodsFor: 'api rest' stamp: 'FedericoSabatini 12/2/2020 11:55:04' prior: 50894057!
listPurchases: aCartID

	| aSessionCart purchaseList |
	aSessionCart := self cartWith: aCartID.
	
	purchaseList := OrderedCollection new.
	
	(aSessionCart cart items) do: [ :cartKey | purchaseList addLast: cartKey, ' -> ', (catalog at: cartKey) asString].
	purchaseList addLast: aSessionCart total.
	
	^purchaseList.! !

!testRun: #InternalRestInterfaceTest #test04CannotAssignSameIDForDifferentCarts stamp: 'FedericoSabatini 12/2/2020 11:55:08'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01CreateCartHaveEmptyList stamp: 'FedericoSabatini 12/2/2020 11:55:11'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CannotCreateCartWithInvalidPassword stamp: 'FedericoSabatini 12/2/2020 11:55:11'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotCreateCartWithUnknownUser stamp: 'FedericoSabatini 12/2/2020 11:55:11'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04CannotAssignSameIDForDifferentCarts stamp: 'FedericoSabatini 12/2/2020 11:55:11'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05AddedItemIsIncludedInCartList stamp: 'FedericoSabatini 12/2/2020 11:55:11'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'FedericoSabatini 12/2/2020 11:55:11'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CannotAddToUnknownCartID stamp: 'FedericoSabatini 12/2/2020 11:55:11'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'FedericoSabatini 12/2/2020 11:55:11'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'FedericoSabatini 12/2/2020 11:55:11'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10CannotCheckoutToUnknownCartID stamp: 'FedericoSabatini 12/2/2020 11:55:11'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11CannotListAnUnknownCartID stamp: 'FedericoSabatini 12/2/2020 11:55:11'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAddOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 11:55:11'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13CannotListOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 11:55:11'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14CannotCheckoutOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 11:55:12'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15AddAnItemShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 11:55:12'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16ListCartShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 11:55:12'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17CheckoutShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 11:55:12'!
PASSED!

!testRun: #InternalRestInterfaceTest #test18listPurchasesShouldReturnZeroOnEmptyCart stamp: 'FedericoSabatini 12/2/2020 11:55:12'!
ERROR!

!testRun: #InternalRestInterfaceTest #test19listPurchasesAfterAddToCartShouldIncludeBookAndTotal stamp: 'FedericoSabatini 12/2/2020 11:55:12'!
ERROR!

!testRun: #InternalRestInterfaceTest #test18listPurchasesShouldReturnZeroOnEmptyCart stamp: 'FedericoSabatini 12/2/2020 11:55:15'!
ERROR!

(aSessionCart cart)!

aSessionCart cart!

aSessionCart cart!

aSessionCart cart total!
!Cart methodsFor: 'total' stamp: 'FedericoSabatini 12/2/2020 11:57:59' prior: 50891467!
total
	
	^ items sum: [ :anItem | catalog at: anItem ] ifEmpty: [0]! !

!testRun: #InternalRestInterfaceTest #test01CreateCartHaveEmptyList stamp: 'FedericoSabatini 12/2/2020 11:58:08'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CannotCreateCartWithInvalidPassword stamp: 'FedericoSabatini 12/2/2020 11:58:08'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotCreateCartWithUnknownUser stamp: 'FedericoSabatini 12/2/2020 11:58:08'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04CannotAssignSameIDForDifferentCarts stamp: 'FedericoSabatini 12/2/2020 11:58:08'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05AddedItemIsIncludedInCartList stamp: 'FedericoSabatini 12/2/2020 11:58:08'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'FedericoSabatini 12/2/2020 11:58:08'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CannotAddToUnknownCartID stamp: 'FedericoSabatini 12/2/2020 11:58:08'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'FedericoSabatini 12/2/2020 11:58:08'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'FedericoSabatini 12/2/2020 11:58:08'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10CannotCheckoutToUnknownCartID stamp: 'FedericoSabatini 12/2/2020 11:58:08'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11CannotListAnUnknownCartID stamp: 'FedericoSabatini 12/2/2020 11:58:08'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAddOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 11:58:08'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13CannotListOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 11:58:08'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14CannotCheckoutOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 11:58:08'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15AddAnItemShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 11:58:08'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16ListCartShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 11:58:08'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17CheckoutShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 11:58:08'!
PASSED!

!testRun: #InternalRestInterfaceTest #test18listPurchasesShouldReturnZeroOnEmptyCart stamp: 'FedericoSabatini 12/2/2020 11:58:08'!
ERROR!

!testRun: #InternalRestInterfaceTest #test19listPurchasesAfterAddToCartShouldIncludeBookAndTotal stamp: 'FedericoSabatini 12/2/2020 11:58:08'!
ERROR!

!testRun: #InternalRestInterfaceTest #test18listPurchasesShouldReturnZeroOnEmptyCart stamp: 'FedericoSabatini 12/2/2020 11:58:10'!
ERROR!

aSessionCart!

aSessionCart cart!

aSessionCart cart total!
!InternalRestInterface methodsFor: 'api rest' stamp: 'FedericoSabatini 12/2/2020 11:58:34' prior: 50894150!
listPurchases: aCartID

	| aSessionCart purchaseList |
	aSessionCart := self cartWith: aCartID.
	
	purchaseList := OrderedCollection new.
	
	(aSessionCart cart items) do: [ :cartKey | purchaseList addLast: cartKey, ' -> ', (catalog at: cartKey) asString].
	purchaseList addLast: aSessionCart cart total.
	
	^purchaseList.! !

!testRun: #InternalRestInterfaceTest #test18listPurchasesShouldReturnZeroOnEmptyCart stamp: 'FedericoSabatini 12/2/2020 11:58:35'!
FAILURE!
!InternalRestInterface methodsFor: 'api rest' stamp: 'FedericoSabatini 12/2/2020 11:58:50' prior: 50894344!
listPurchases: aCartID

	| aSessionCart purchaseList |
	aSessionCart := self cartWith: aCartID.
	
	purchaseList := OrderedCollection new.
	
	(aSessionCart cart items) do: [ :cartKey | purchaseList addLast: cartKey, ' -> ', (catalog at: cartKey) asString].
	purchaseList addLast: aSessionCart cart total asString.
	
	^purchaseList.! !

!testRun: #InternalRestInterfaceTest #test18listPurchasesShouldReturnZeroOnEmptyCart stamp: 'FedericoSabatini 12/2/2020 11:58:52'!
PASSED!

!testRun: #InternalRestInterfaceTest #test19listPurchasesAfterAddToCartShouldIncludeBookAndTotal stamp: 'FedericoSabatini 12/2/2020 11:58:55'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01CreateCartHaveEmptyList stamp: 'FedericoSabatini 12/2/2020 11:59:00'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CannotCreateCartWithInvalidPassword stamp: 'FedericoSabatini 12/2/2020 11:59:00'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotCreateCartWithUnknownUser stamp: 'FedericoSabatini 12/2/2020 11:59:00'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04CannotAssignSameIDForDifferentCarts stamp: 'FedericoSabatini 12/2/2020 11:59:00'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05AddedItemIsIncludedInCartList stamp: 'FedericoSabatini 12/2/2020 11:59:01'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'FedericoSabatini 12/2/2020 11:59:01'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CannotAddToUnknownCartID stamp: 'FedericoSabatini 12/2/2020 11:59:01'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'FedericoSabatini 12/2/2020 11:59:01'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'FedericoSabatini 12/2/2020 11:59:01'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10CannotCheckoutToUnknownCartID stamp: 'FedericoSabatini 12/2/2020 11:59:01'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11CannotListAnUnknownCartID stamp: 'FedericoSabatini 12/2/2020 11:59:01'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAddOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 11:59:01'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13CannotListOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 11:59:01'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14CannotCheckoutOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 11:59:01'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15AddAnItemShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 11:59:01'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16ListCartShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 11:59:01'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17CheckoutShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 11:59:01'!
PASSED!

!testRun: #InternalRestInterfaceTest #test18listPurchasesShouldReturnZeroOnEmptyCart stamp: 'FedericoSabatini 12/2/2020 11:59:01'!
PASSED!

!testRun: #InternalRestInterfaceTest #test19listPurchasesAfterAddToCartShouldIncludeBookAndTotal stamp: 'FedericoSabatini 12/2/2020 11:59:01'!
PASSED!
!InternalRestInterfaceTest methodsFor: 'checkout' stamp: 'FedericoSabatini 12/2/2020 12:00:01'!
test19listPurchasesAfterMultipleAddsShouldIncludeMultipleBooksAndTotal

	| tusLibros expectedPurchases cartID |

	expectedPurchases := OrderedCollection 
		with: (testObjectsFactory itemSellByTheStore, ' -> ', (testObjectsFactory itemSellByTheStorePrice * 5) asString)
		with: testObjectsFactory itemSellByTheStorePrice asString.
		
	tusLibros := testObjectsFactory tusLibros.
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	
	self assert: expectedPurchases equals: (tusLibros listPurchases: cartID).! !
!InternalRestInterfaceTest methodsFor: 'checkout' stamp: 'FedericoSabatini 12/2/2020 12:00:27'!
test19listPurchasesAfterMultipleAddsShouldIncludeBooksAndTotal

	| tusLibros expectedPurchases cartID |

	expectedPurchases := OrderedCollection 
		with: (testObjectsFactory itemSellByTheStore, ' -> ', (testObjectsFactory itemSellByTheStorePrice * 5) asString)
		with: testObjectsFactory itemSellByTheStorePrice asString.
		
	tusLibros := testObjectsFactory tusLibros.
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	
	self assert: expectedPurchases equals: (tusLibros listPurchases: cartID).! !

!methodRemoval: InternalRestInterfaceTest #test19listPurchasesAfterMultipleAddsShouldIncludeMultipleBooksAndTotal stamp: 'FedericoSabatini 12/2/2020 12:00:27'!
test19listPurchasesAfterMultipleAddsShouldIncludeMultipleBooksAndTotal

	| tusLibros expectedPurchases cartID |

	expectedPurchases := OrderedCollection 
		with: (testObjectsFactory itemSellByTheStore, ' -> ', (testObjectsFactory itemSellByTheStorePrice * 5) asString)
		with: testObjectsFactory itemSellByTheStorePrice asString.
		
	tusLibros := testObjectsFactory tusLibros.
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	
	self assert: expectedPurchases equals: (tusLibros listPurchases: cartID).!
!InternalRestInterfaceTest methodsFor: 'checkout' stamp: 'FedericoSabatini 12/2/2020 12:00:51'!
test20listPurchasesAfterMultipleAddsShouldIncludeBooksAndTotal

	| tusLibros expectedPurchases cartID |

	expectedPurchases := OrderedCollection 
		with: (testObjectsFactory itemSellByTheStore, ' -> ', (testObjectsFactory itemSellByTheStorePrice * 5) asString)
		with: testObjectsFactory itemSellByTheStorePrice asString.
		
	tusLibros := testObjectsFactory tusLibros.
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	tusLibros addToCart: cartID aQuantity: 5 of: testObjectsFactory itemSellByTheStore.
	
	self assert: expectedPurchases equals: (tusLibros listPurchases: cartID).! !

!methodRemoval: InternalRestInterfaceTest #test19listPurchasesAfterMultipleAddsShouldIncludeBooksAndTotal stamp: 'FedericoSabatini 12/2/2020 12:00:54'!
test19listPurchasesAfterMultipleAddsShouldIncludeBooksAndTotal

	| tusLibros expectedPurchases cartID |

	expectedPurchases := OrderedCollection 
		with: (testObjectsFactory itemSellByTheStore, ' -> ', (testObjectsFactory itemSellByTheStorePrice * 5) asString)
		with: testObjectsFactory itemSellByTheStorePrice asString.
		
	tusLibros := testObjectsFactory tusLibros.
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	
	self assert: expectedPurchases equals: (tusLibros listPurchases: cartID).!
!InternalRestInterfaceTest methodsFor: 'checkout' stamp: 'FedericoSabatini 12/2/2020 12:04:28'!
test20listPurchasesAfterAddingMultipleBooksShouldIncludeBooksAndTotal

	| tusLibros expectedPurchases cartID |

	expectedPurchases := OrderedCollection 
		with: (testObjectsFactory itemSellByTheStore, ' -> ', (testObjectsFactory itemSellByTheStorePrice * 5) asString)
		with: testObjectsFactory itemSellByTheStorePrice asString.
		
	tusLibros := testObjectsFactory tusLibros.
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	tusLibros addToCart: cartID aQuantity: 5 of: testObjectsFactory itemSellByTheStore.
	
	self assert: expectedPurchases equals: (tusLibros listPurchases: cartID).! !

!methodRemoval: InternalRestInterfaceTest #test20listPurchasesAfterMultipleAddsShouldIncludeBooksAndTotal stamp: 'FedericoSabatini 12/2/2020 12:04:43'!
test20listPurchasesAfterMultipleAddsShouldIncludeBooksAndTotal

	| tusLibros expectedPurchases cartID |

	expectedPurchases := OrderedCollection 
		with: (testObjectsFactory itemSellByTheStore, ' -> ', (testObjectsFactory itemSellByTheStorePrice * 5) asString)
		with: testObjectsFactory itemSellByTheStorePrice asString.
		
	tusLibros := testObjectsFactory tusLibros.
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	tusLibros addToCart: cartID aQuantity: 5 of: testObjectsFactory itemSellByTheStore.
	
	self assert: expectedPurchases equals: (tusLibros listPurchases: cartID).!

!testRun: #InternalRestInterfaceTest #test20listPurchasesAfterAddingMultipleBooksShouldIncludeBooksAndTotal stamp: 'FedericoSabatini 12/2/2020 12:05:35'!
FAILURE!

!testRun: #InternalRestInterfaceTest #test20listPurchasesAfterAddingMultipleBooksShouldIncludeBooksAndTotal stamp: 'FedericoSabatini 12/2/2020 12:06:11'!
FAILURE!

aSessionCart cart items!

aSessionCart cart items at: 'validBook'!

aSessionCart cart items occurrencesOf: 'validBook'!
!InternalRestInterface methodsFor: 'api rest' stamp: 'FedericoSabatini 12/2/2020 12:10:43' prior: 50894362!
listPurchases: aCartID

	| aSessionCart purchaseList |
	aSessionCart := self cartWith: aCartID.
	
	purchaseList := OrderedCollection new.
	
	(aSessionCart cart items) asSet do: [ :cartKey | purchaseList addLast: cartKey, ' -> ', (catalog at: cartKey) asString].
	purchaseList addLast: aSessionCart cart total asString.
	
	^purchaseList.! !

!testRun: #InternalRestInterfaceTest #test20listPurchasesAfterAddingMultipleBooksShouldIncludeBooksAndTotal stamp: 'FedericoSabatini 12/2/2020 12:10:49'!
FAILURE!
!InternalRestInterface methodsFor: 'api rest' stamp: 'FedericoSabatini 12/2/2020 12:12:01' prior: 50894638!
listPurchases: aCartID

	| aSessionCart purchaseList |
	aSessionCart := self cartWith: aCartID.
	
	purchaseList := OrderedCollection new.
	
	(aSessionCart cart items) asSet do: 
		[ :cartKey | purchaseList addLast: cartKey, ' -> ', ((catalog at: cartKey) * aSessionCart cart items occurrencesOf: cartKey ) asString].
	purchaseList addLast: aSessionCart cart total asString.
	
	^purchaseList.! !

!testRun: #InternalRestInterfaceTest #test20listPurchasesAfterAddingMultipleBooksShouldIncludeBooksAndTotal stamp: 'FedericoSabatini 12/2/2020 12:12:14'!
ERROR!
!InternalRestInterface methodsFor: 'api rest' stamp: 'FedericoSabatini 12/2/2020 12:12:36' prior: 50894658!
listPurchases: aCartID

	| aSessionCart purchaseList |
	aSessionCart := self cartWith: aCartID.
	
	purchaseList := OrderedCollection new.
	
	(aSessionCart cart items) asSet do: 
		[ :cartKey | purchaseList addLast: cartKey, ' -> ', ((catalog at: cartKey) * (aSessionCart cart items) occurrencesOf: cartKey ) asString].
	purchaseList addLast: aSessionCart cart total asString.
	
	^purchaseList.! !

!testRun: #InternalRestInterfaceTest #test20listPurchasesAfterAddingMultipleBooksShouldIncludeBooksAndTotal stamp: 'FedericoSabatini 12/2/2020 12:12:42'!
ERROR!
!InternalRestInterface methodsFor: 'api rest' stamp: 'FedericoSabatini 12/2/2020 12:13:18' prior: 50894679!
listPurchases: aCartID

	| aSessionCart purchaseList |
	aSessionCart := self cartWith: aCartID.
	
	purchaseList := OrderedCollection new.
	
	(aSessionCart cart items) asSet do: 
		[ :cartKey | purchaseList addLast: cartKey, ' -> ', ((catalog at: cartKey) * (aSessionCart cart items) occurrencesOf: cartKey ) asString].
	purchaseList addLast: aSessionCart cart total asString.
	
	^purchaseList.! !

aSessionCart!

aSessionCart cart!

aSessionCart cart items!

aSessionCart cart items occurrencesOf: 'validBook'!

aSessionCart cart items occurrencesOf: 'validBook'!

catalog at: 'validBook'!

(10 * 5) asString!

!testRun: #InternalRestInterfaceTest #test20listPurchasesAfterAddingMultipleBooksShouldIncludeBooksAndTotal stamp: 'FedericoSabatini 12/2/2020 12:15:12'!
ERROR!
!InternalRestInterface methodsFor: 'api rest' stamp: 'FedericoSabatini 12/2/2020 12:15:30' prior: 50894700!
listPurchases: aCartID

	| aSessionCart purchaseList |
	aSessionCart := self cartWith: aCartID.
	
	purchaseList := OrderedCollection new.
	
	(aSessionCart cart items) asSet do: 
		[ :cartKey | purchaseList addLast: cartKey, ' -> ', ((catalog at: cartKey) * (aSessionCart cart items occurrencesOf: cartKey)) asString].
	purchaseList addLast: aSessionCart cart total asString.
	
	^purchaseList.! !

!testRun: #InternalRestInterfaceTest #test20listPurchasesAfterAddingMultipleBooksShouldIncludeBooksAndTotal stamp: 'FedericoSabatini 12/2/2020 12:15:36'!
FAILURE!
!InternalRestInterfaceTest methodsFor: 'list purchases' stamp: 'FedericoSabatini 12/2/2020 12:15:48' prior: 50894578!
test20listPurchasesAfterAddingMultipleBooksShouldIncludeBooksAndTotal

	| tusLibros expectedPurchases cartID |

	expectedPurchases := OrderedCollection 
		with: (testObjectsFactory itemSellByTheStore, ' -> ', (testObjectsFactory itemSellByTheStorePrice * 5) asString)
		with: (testObjectsFactory itemSellByTheStorePrice * 5) asString.
		
	tusLibros := testObjectsFactory tusLibros.
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	tusLibros addToCart: cartID aQuantity: 5 of: testObjectsFactory itemSellByTheStore.
	
	self assert: expectedPurchases equals: (tusLibros listPurchases: cartID).! !

!testRun: #InternalRestInterfaceTest #test20listPurchasesAfterAddingMultipleBooksShouldIncludeBooksAndTotal stamp: 'FedericoSabatini 12/2/2020 12:15:50'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01CreateCartHaveEmptyList stamp: 'FedericoSabatini 12/2/2020 12:15:50'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CannotCreateCartWithInvalidPassword stamp: 'FedericoSabatini 12/2/2020 12:15:50'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotCreateCartWithUnknownUser stamp: 'FedericoSabatini 12/2/2020 12:15:50'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04CannotAssignSameIDForDifferentCarts stamp: 'FedericoSabatini 12/2/2020 12:15:50'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05AddedItemIsIncludedInCartList stamp: 'FedericoSabatini 12/2/2020 12:15:50'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'FedericoSabatini 12/2/2020 12:15:50'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CannotAddToUnknownCartID stamp: 'FedericoSabatini 12/2/2020 12:15:50'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'FedericoSabatini 12/2/2020 12:15:50'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'FedericoSabatini 12/2/2020 12:15:50'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10CannotCheckoutToUnknownCartID stamp: 'FedericoSabatini 12/2/2020 12:15:50'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11CannotListAnUnknownCartID stamp: 'FedericoSabatini 12/2/2020 12:15:50'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAddOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 12:15:50'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13CannotListOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 12:15:50'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14CannotCheckoutOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 12:15:50'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15AddAnItemShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 12:15:50'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16ListCartShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 12:15:50'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17CheckoutShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 12:15:50'!
PASSED!

!testRun: #InternalRestInterfaceTest #test18listPurchasesShouldReturnZeroOnEmptyCart stamp: 'FedericoSabatini 12/2/2020 12:15:50'!
PASSED!

!testRun: #InternalRestInterfaceTest #test19listPurchasesAfterAddToCartShouldIncludeBookAndTotal stamp: 'FedericoSabatini 12/2/2020 12:15:50'!
PASSED!

!testRun: #InternalRestInterfaceTest #test20listPurchasesAfterAddingMultipleBooksShouldIncludeBooksAndTotal stamp: 'FedericoSabatini 12/2/2020 12:15:50'!
PASSED!

----SNAPSHOT----(2 December 2020 12:15:54) CuisUniversity-4384.image priorSource: 17959308!
!InternalRestInterfaceTest methodsFor: 'expiration tests' stamp: 'FedericoSabatini 12/2/2020 12:16:32'!
test14CannotListPurchasesOnExpiredCart

	self shouldRaiseCartTimeExpiredErrorWhen: [ :anInternalRestInterface :aCartID |
		self tusLibros: anInternalRestInterface checkoutCartID: aCartID
	].! !
!InternalRestInterfaceTest methodsFor: 'expiration tests' stamp: 'FedericoSabatini 12/2/2020 12:16:43'!
test21CannotListPurchasesOnExpiredCart

	self shouldRaiseCartTimeExpiredErrorWhen: [ :anInternalRestInterface :aCartID |
		self tusLibros: anInternalRestInterface checkoutCartID: aCartID
	].! !

!methodRemoval: InternalRestInterfaceTest #test14CannotListPurchasesOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 12:16:47'!
test14CannotListPurchasesOnExpiredCart

	self shouldRaiseCartTimeExpiredErrorWhen: [ :anInternalRestInterface :aCartID |
		self tusLibros: anInternalRestInterface checkoutCartID: aCartID
	].!
!InternalRestInterfaceTest methodsFor: 'expiration tests' stamp: 'FedericoSabatini 12/2/2020 12:17:13' prior: 50894875!
test21CannotListPurchasesOnExpiredCart

	self shouldRaiseCartTimeExpiredErrorWhen: [ :anInternalRestInterface :aCartID |
		self tusLibros: anInternalRestInterface checkoutCartID: aCartID
	].! !
!InternalRestInterfaceTest methodsFor: 'checkout' stamp: 'FedericoSabatini 12/2/2020 12:19:36'!
tusLibros: aFacadeTusLibros listPurchasesOfCartID: aCartID

	^aFacadeTusLibros
		checkOutCart: aCartID
		withCCN: testObjectsFactory creditCardNumber 
		withCCED: testObjectsFactory notExpiredCreditCardDate 
		andCCO: testObjectsFactory creditCardOwner
		throught: self
		on: testObjectsFactory today.! !

!methodRemoval: InternalRestInterfaceTest #tusLibros:listPurchasesOfCartID: stamp: 'FedericoSabatini 12/2/2020 12:19:48'!
tusLibros: aFacadeTusLibros listPurchasesOfCartID: aCartID

	^aFacadeTusLibros
		checkOutCart: aCartID
		withCCN: testObjectsFactory creditCardNumber 
		withCCED: testObjectsFactory notExpiredCreditCardDate 
		andCCO: testObjectsFactory creditCardOwner
		throught: self
		on: testObjectsFactory today.!
!InternalRestInterfaceTest methodsFor: 'expiration tests' stamp: 'FedericoSabatini 12/2/2020 12:20:51' prior: 50894895!
test21CannotListPurchasesOnExpiredCart

	self shouldRaiseCartTimeExpiredErrorWhen: [ :anInternalRestInterface :aCartID | 
		anInternalRestInterface listPurchases: aCartID
	].! !

!testRun: #InternalRestInterfaceTest #test21CannotListPurchasesOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 12:20:53'!
FAILURE!
!InternalRestInterfaceTest methodsFor: 'expiration tests' stamp: 'FedericoSabatini 12/2/2020 12:21:31'!
test12ListPurchasesOfCartShouldRestartExpirationTime

	self assertUpdatedTimeToCartAfter: [ :anInternalRestInterface :aCartID | 
		anInternalRestInterface addToCart: aCartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	].! !
!InternalRestInterfaceTest methodsFor: 'expiration tests' stamp: 'FedericoSabatini 12/2/2020 12:21:34'!
test22ListPurchasesOfCartShouldRestartExpirationTime

	self assertUpdatedTimeToCartAfter: [ :anInternalRestInterface :aCartID | 
		anInternalRestInterface addToCart: aCartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	].! !

!methodRemoval: InternalRestInterfaceTest #test12ListPurchasesOfCartShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 12:21:39'!
test12ListPurchasesOfCartShouldRestartExpirationTime

	self assertUpdatedTimeToCartAfter: [ :anInternalRestInterface :aCartID | 
		anInternalRestInterface addToCart: aCartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	].!
!InternalRestInterfaceTest methodsFor: 'expiration tests' stamp: 'FedericoSabatini 12/2/2020 12:21:52' prior: 50894956!
test22ListPurchasesOfCartShouldRestartExpirationTime

	self assertUpdatedTimeToCartAfter: [ :anInternalRestInterface :aCartID | 
		anInternalRestInterface listPurchases: aCartID.
	].! !
!InternalRestInterfaceTest methodsFor: 'expiration tests' stamp: 'FedericoSabatini 12/2/2020 12:21:56' prior: 50894932!
test21CannotListPurchasesOnExpiredCart

	self shouldRaiseCartTimeExpiredErrorWhen: [ :anInternalRestInterface :aCartID | 
		anInternalRestInterface listPurchases: aCartID.
	].! !
!InternalRestInterface methodsFor: 'api rest' stamp: 'FedericoSabatini 12/2/2020 12:22:18' prior: 50894728!
listPurchases: aCartID

	| aSessionCart purchaseList |
	aSessionCart := self cartWith: aCartID.
	
	(aSessionCart expiringTimestamp < clock now) ifTrue: [ self error: self class cartTimeExpiredErrorDescription ].
	carts at: aCartID put: (SessionCart for: aSessionCart cart expiringAt:  (clock now next: 30*minute) ).
	
	purchaseList := OrderedCollection new.
	
	(aSessionCart cart items) asSet do: 
		[ :cartKey | purchaseList addLast: cartKey, ' -> ', ((catalog at: cartKey) * (aSessionCart cart items occurrencesOf: cartKey)) asString].
	purchaseList addLast: aSessionCart cart total asString.
	
	^purchaseList.! !

!testRun: #InternalRestInterfaceTest #test01CreateCartHaveEmptyList stamp: 'FedericoSabatini 12/2/2020 12:22:21'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CannotCreateCartWithInvalidPassword stamp: 'FedericoSabatini 12/2/2020 12:22:21'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotCreateCartWithUnknownUser stamp: 'FedericoSabatini 12/2/2020 12:22:21'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04CannotAssignSameIDForDifferentCarts stamp: 'FedericoSabatini 12/2/2020 12:22:21'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05AddedItemIsIncludedInCartList stamp: 'FedericoSabatini 12/2/2020 12:22:21'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'FedericoSabatini 12/2/2020 12:22:21'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CannotAddToUnknownCartID stamp: 'FedericoSabatini 12/2/2020 12:22:21'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'FedericoSabatini 12/2/2020 12:22:21'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'FedericoSabatini 12/2/2020 12:22:21'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10CannotCheckoutToUnknownCartID stamp: 'FedericoSabatini 12/2/2020 12:22:21'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11CannotListAnUnknownCartID stamp: 'FedericoSabatini 12/2/2020 12:22:21'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAddOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 12:22:21'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13CannotListOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 12:22:21'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14CannotCheckoutOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 12:22:21'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15AddAnItemShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 12:22:21'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16ListCartShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 12:22:21'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17CheckoutShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 12:22:21'!
PASSED!

!testRun: #InternalRestInterfaceTest #test18listPurchasesShouldReturnZeroOnEmptyCart stamp: 'FedericoSabatini 12/2/2020 12:22:21'!
PASSED!

!testRun: #InternalRestInterfaceTest #test19listPurchasesAfterAddToCartShouldIncludeBookAndTotal stamp: 'FedericoSabatini 12/2/2020 12:22:21'!
PASSED!

!testRun: #InternalRestInterfaceTest #test20listPurchasesAfterAddingMultipleBooksShouldIncludeBooksAndTotal stamp: 'FedericoSabatini 12/2/2020 12:22:21'!
PASSED!

!testRun: #InternalRestInterfaceTest #test21CannotListPurchasesOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 12:22:21'!
PASSED!

!testRun: #InternalRestInterfaceTest #test22ListPurchasesOfCartShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 12:22:21'!
PASSED!

----SNAPSHOT----(2 December 2020 12:22:36) CuisUniversity-4384.image priorSource: 18022724!

----QUIT----(2 December 2020 12:22:50) CuisUniversity-4384.image priorSource: 18030778!

----STARTUP---- (2 December 2020 15:29:47) as D:\facultad\Smalltalk\windows64\CuisUniversity-4384.image!

!InternalRestInterfaceTest methodsFor: 'list purchases' stamp: 'FedericoSabatini 12/2/2020 15:32:43' prior: 50894750!
test20listPurchasesAfterAddingMultipleBooksShouldIncludeBooksAndTotal

	| tusLibros expectedPurchases cartID |

	expectedPurchases := OrderedCollection 
		with: (testObjectsFactory itemSellByTheStore, ' -> ', (testObjectsFactory itemSellByTheStorePrice * 5) asString)
		with: (testObjectsFactory itemSellByTheStorePrice * 5) asString.
		
	tusLibros := testObjectsFactory tusLibros.
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	tusLibros addToCart: cartID aQuantity: 10 of: testObjectsFactory itemSellByTheStore.
	
	self assert: expectedPurchases equals: (tusLibros listPurchases: cartID).! !

!testRun: #InternalRestInterfaceTest #test20listPurchasesAfterAddingMultipleBooksShouldIncludeBooksAndTotal stamp: 'FedericoSabatini 12/2/2020 15:32:43'!
FAILURE!
!InternalRestInterfaceTest methodsFor: 'list purchases' stamp: 'FedericoSabatini 12/2/2020 15:33:06' prior: 50895123!
test20listPurchasesAfterAddingMultipleBooksShouldIncludeBooksAndTotal

	| tusLibros expectedPurchases cartID |

	expectedPurchases := OrderedCollection 
		with: (testObjectsFactory itemSellByTheStore, ' -> ', (testObjectsFactory itemSellByTheStorePrice * 5) asString)
		with: (testObjectsFactory itemSellByTheStorePrice * 5) asString.
		
	tusLibros := testObjectsFactory tusLibros.
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	tusLibros addToCart: cartID aQuantity: 5 of: testObjectsFactory itemSellByTheStore.
	
	self assert: expectedPurchases equals: (tusLibros listPurchases: cartID).! !

!testRun: #InternalRestInterfaceTest #test20listPurchasesAfterAddingMultipleBooksShouldIncludeBooksAndTotal stamp: 'FedericoSabatini 12/2/2020 15:33:08'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01CreateCartHaveEmptyList stamp: 'FedericoSabatini 12/2/2020 15:33:08'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CannotCreateCartWithInvalidPassword stamp: 'FedericoSabatini 12/2/2020 15:33:08'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotCreateCartWithUnknownUser stamp: 'FedericoSabatini 12/2/2020 15:33:08'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04CannotAssignSameIDForDifferentCarts stamp: 'FedericoSabatini 12/2/2020 15:33:08'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05AddedItemIsIncludedInCartList stamp: 'FedericoSabatini 12/2/2020 15:33:08'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'FedericoSabatini 12/2/2020 15:33:08'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CannotAddToUnknownCartID stamp: 'FedericoSabatini 12/2/2020 15:33:08'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'FedericoSabatini 12/2/2020 15:33:08'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'FedericoSabatini 12/2/2020 15:33:09'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10CannotCheckoutToUnknownCartID stamp: 'FedericoSabatini 12/2/2020 15:33:09'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11CannotListAnUnknownCartID stamp: 'FedericoSabatini 12/2/2020 15:33:09'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAddOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 15:33:09'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13CannotListOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 15:33:09'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14CannotCheckoutOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 15:33:09'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15AddAnItemShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 15:33:09'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16ListCartShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 15:33:09'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17CheckoutShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 15:33:09'!
PASSED!

!testRun: #InternalRestInterfaceTest #test18listPurchasesShouldReturnZeroOnEmptyCart stamp: 'FedericoSabatini 12/2/2020 15:33:09'!
PASSED!

!testRun: #InternalRestInterfaceTest #test19listPurchasesAfterAddToCartShouldIncludeBookAndTotal stamp: 'FedericoSabatini 12/2/2020 15:33:09'!
PASSED!

!testRun: #InternalRestInterfaceTest #test20listPurchasesAfterAddingMultipleBooksShouldIncludeBooksAndTotal stamp: 'FedericoSabatini 12/2/2020 15:33:09'!
PASSED!

!testRun: #InternalRestInterfaceTest #test21CannotListPurchasesOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 15:33:09'!
PASSED!

!testRun: #InternalRestInterfaceTest #test22ListPurchasesOfCartShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 15:33:09'!
PASSED!
!InternalRestInterfaceTest methodsFor: 'list purchases' stamp: 'FedericoSabatini 12/2/2020 15:34:04' prior: 50895151!
test20listPurchasesAfterAddingMultipleBooksShouldIncludeBooksAndTotal

	| tusLibros expectedPurchases cartID |

	expectedPurchases := OrderedCollection 
		with: (testObjectsFactory itemSellByTheStore, ' -> ', (testObjectsFactory itemSellByTheStorePrice * 5) asString)
		with: (testObjectsFactory itemSellByTheStorePrice * 5) asString.
		
	tusLibros := testObjectsFactory tusLibros.
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	tusLibros addToCart: cartID aQuantity: 5 of: testObjectsFactory itemSellByTheStore.
	
	self assert: expectedPurchases equals: (tusLibros listPurchases: cartID).! !
!InternalRestInterface methodsFor: 'api rest' stamp: 'FedericoSabatini 12/2/2020 15:41:47'!
listPurchasesWithUser: userID withPassword: pass

	| aSessionCart purchaseList |
	
	self assertAuthenticate: userID withPassword: pass.

	
	purchaseList := OrderedCollection new.
	
	(aSessionCart cart items) asSet do: 
		[ :cartKey | purchaseList addLast: cartKey, ' -> ', ((catalog at: cartKey) * (aSessionCart cart items occurrencesOf: cartKey)) asString].
	purchaseList addLast: aSessionCart cart total asString.
	
	^purchaseList.! !
!InternalRestInterface methodsFor: 'api rest' stamp: 'FedericoSabatini 12/2/2020 15:42:39' prior: 50895295!
listPurchasesWithUser: userID withPassword: pass

	| aSessionCart purchaseList |
	
	self assertAuthenticate: userID withPassword: pass.

	
	purchaseList := OrderedCollection new.
	
	(aSessionCart cart items) asSet do: 
		[ :cartKey | purchaseList addLast: cartKey, ' -> ', ((catalog at: cartKey) * (aSessionCart cart items occurrencesOf: cartKey)) asString].
	purchaseList addLast: aSessionCart cart total asString.
	
	^purchaseList.! !
!InternalRestInterface methodsFor: 'api rest' stamp: 'FedericoSabatini 12/2/2020 15:42:47' prior: 50895313!
listPurchasesWithUser: userID withPassword: pass

	
	
	self assertAuthenticate: userID withPassword: pass.
! !
!InternalRestInterface methodsFor: 'api rest' stamp: 'FedericoSabatini 12/2/2020 15:44:00' prior: 50895331!
listPurchasesWithUser: userID withPassword: pass

	self assertAuthenticate: userID withPassword: pass.
! !

Object subclass: #UserSalesHistory
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!

!classDefinition: #UserSalesHistory category: 'TusLibros-Solucion' stamp: 'FedericoSabatini 12/2/2020 15:46:19'!
Object subclass: #UserSalesHistory
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!
!InternalRestInterfaceTest methodsFor: 'list purchases' stamp: 'FedericoSabatini 12/2/2020 15:46:48'!
test18listPurchasesShouldReturnZeroOnEmptyUser

	| tusLibros expectedPurchases cartID  |

	expectedPurchases := OrderedCollection with: '0'.
	tusLibros := testObjectsFactory tusLibros.
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	self assert: expectedPurchases equals: (tusLibros listPurchases: cartID).! !

!methodRemoval: InternalRestInterfaceTest #test18listPurchasesShouldReturnZeroOnEmptyCart stamp: 'FedericoSabatini 12/2/2020 15:46:53'!
test18listPurchasesShouldReturnZeroOnEmptyCart

	| tusLibros expectedPurchases cartID  |

	expectedPurchases := OrderedCollection with: '0'.
	tusLibros := testObjectsFactory tusLibros.
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	self assert: expectedPurchases equals: (tusLibros listPurchases: cartID).!
!InternalRestInterfaceTest methodsFor: 'list purchases' stamp: 'FedericoSabatini 12/2/2020 15:47:21'!
test18listPurchasesShouldReturnZeroWithNewUser

	| tusLibros expectedPurchases cartID  |

	expectedPurchases := OrderedCollection with: '0'.
	tusLibros := testObjectsFactory tusLibros.
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	self assert: expectedPurchases equals: (tusLibros listPurchases: cartID).! !

!methodRemoval: InternalRestInterfaceTest #test18listPurchasesShouldReturnZeroOnEmptyUser stamp: 'FedericoSabatini 12/2/2020 15:47:24'!
test18listPurchasesShouldReturnZeroOnEmptyUser

	| tusLibros expectedPurchases cartID  |

	expectedPurchases := OrderedCollection with: '0'.
	tusLibros := testObjectsFactory tusLibros.
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	self assert: expectedPurchases equals: (tusLibros listPurchases: cartID).!
!InternalRestInterfaceTest methodsFor: 'list purchases' stamp: 'FedericoSabatini 12/2/2020 15:47:56' prior: 50895385!
test18listPurchasesShouldReturnZeroWithNewUser

	| tusLibros expectedPurchases cartID  |

	expectedPurchases := OrderedCollection with: '0'.
	tusLibros := testObjectsFactory tusLibros.
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	self assert: expectedPurchases equals: (tusLibros listPurchasesWithUser: 1 withPassword: 'pass').! !
!InternalRestInterfaceTest methodsFor: 'list purchases' stamp: 'FedericoSabatini 12/2/2020 15:48:06' prior: 50895414!
test18listPurchasesShouldReturnZeroWithNewUser

	| tusLibros expectedPurchases cartID  |

	expectedPurchases := OrderedCollection with: '0'.
	tusLibros := testObjectsFactory tusLibros.
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	self assert: expectedPurchases equals: (tusLibros listPurchasesWithUser: 1 withPassword: 'pass').! !
!InternalRestInterfaceTest methodsFor: 'create' stamp: 'FedericoSabatini 12/2/2020 15:48:41' prior: 50891381!
test04CannotAssignSameIDForDifferentCarts

	| tusLibros cartID cartID2 |

	tusLibros := testObjectsFactory tusLibros.
	
	cartID := tusLibros createCartForUser: '1'withPassword: 'pass'.
	cartID2 := tusLibros createCartForUser: '2' withPassword: 'pass'.

	self assert: (cartID ~= cartID2).! !

!testRun: #InternalRestInterfaceTest #test01CreateCartHaveEmptyList stamp: 'FedericoSabatini 12/2/2020 15:48:44'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CannotCreateCartWithInvalidPassword stamp: 'FedericoSabatini 12/2/2020 15:48:44'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotCreateCartWithUnknownUser stamp: 'FedericoSabatini 12/2/2020 15:48:44'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04CannotAssignSameIDForDifferentCarts stamp: 'FedericoSabatini 12/2/2020 15:48:44'!
ERROR!

!testRun: #InternalRestInterfaceTest #test05AddedItemIsIncludedInCartList stamp: 'FedericoSabatini 12/2/2020 15:48:44'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'FedericoSabatini 12/2/2020 15:48:44'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CannotAddToUnknownCartID stamp: 'FedericoSabatini 12/2/2020 15:48:44'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'FedericoSabatini 12/2/2020 15:48:44'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'FedericoSabatini 12/2/2020 15:48:44'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10CannotCheckoutToUnknownCartID stamp: 'FedericoSabatini 12/2/2020 15:48:44'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11CannotListAnUnknownCartID stamp: 'FedericoSabatini 12/2/2020 15:48:45'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAddOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 15:48:45'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13CannotListOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 15:48:45'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14CannotCheckoutOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 15:48:45'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15AddAnItemShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 15:48:45'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16ListCartShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 15:48:45'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17CheckoutShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 15:48:45'!
PASSED!

!testRun: #InternalRestInterfaceTest #test18listPurchasesShouldReturnZeroWithNewUser stamp: 'FedericoSabatini 12/2/2020 15:48:45'!
FAILURE!

!testRun: #InternalRestInterfaceTest #test19listPurchasesAfterAddToCartShouldIncludeBookAndTotal stamp: 'FedericoSabatini 12/2/2020 15:48:45'!
PASSED!

!testRun: #InternalRestInterfaceTest #test20listPurchasesAfterAddingMultipleBooksShouldIncludeBooksAndTotal stamp: 'FedericoSabatini 12/2/2020 15:48:45'!
PASSED!

!testRun: #InternalRestInterfaceTest #test21CannotListPurchasesOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 15:48:45'!
PASSED!

!testRun: #InternalRestInterfaceTest #test22ListPurchasesOfCartShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 15:48:45'!
PASSED!
!InternalRestInterfaceTest methodsFor: 'create' stamp: 'FedericoSabatini 12/2/2020 15:48:50' prior: 50895444!
test04CannotAssignSameIDForDifferentCarts

	| tusLibros cartID cartID2 |

	tusLibros := testObjectsFactory tusLibros.
	
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	cartID2 := tusLibros createCartForUser: 2 withPassword: 'pass'.

	self assert: (cartID ~= cartID2).! !
!InternalRestInterface methodsFor: 'api rest' stamp: 'FedericoSabatini 12/2/2020 15:49:44' prior: 50895338!
listPurchasesWithUser: userID withPassword: pass

	self assertAuthenticate: userID withPassword: pass.
	
	^OrderedCollection with: '0'.	
! !

!testRun: #InternalRestInterfaceTest #test18listPurchasesShouldReturnZeroWithNewUser stamp: 'FedericoSabatini 12/2/2020 15:49:51'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01CreateCartHaveEmptyList stamp: 'FedericoSabatini 12/2/2020 15:49:51'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CannotCreateCartWithInvalidPassword stamp: 'FedericoSabatini 12/2/2020 15:49:51'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotCreateCartWithUnknownUser stamp: 'FedericoSabatini 12/2/2020 15:49:51'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04CannotAssignSameIDForDifferentCarts stamp: 'FedericoSabatini 12/2/2020 15:49:51'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05AddedItemIsIncludedInCartList stamp: 'FedericoSabatini 12/2/2020 15:49:51'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'FedericoSabatini 12/2/2020 15:49:51'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CannotAddToUnknownCartID stamp: 'FedericoSabatini 12/2/2020 15:49:52'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'FedericoSabatini 12/2/2020 15:49:52'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'FedericoSabatini 12/2/2020 15:49:52'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10CannotCheckoutToUnknownCartID stamp: 'FedericoSabatini 12/2/2020 15:49:52'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11CannotListAnUnknownCartID stamp: 'FedericoSabatini 12/2/2020 15:49:52'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAddOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 15:49:52'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13CannotListOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 15:49:52'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14CannotCheckoutOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 15:49:52'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15AddAnItemShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 15:49:52'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16ListCartShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 15:49:52'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17CheckoutShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 15:49:52'!
PASSED!

!testRun: #InternalRestInterfaceTest #test18listPurchasesShouldReturnZeroWithNewUser stamp: 'FedericoSabatini 12/2/2020 15:49:52'!
PASSED!

!testRun: #InternalRestInterfaceTest #test19listPurchasesAfterAddToCartShouldIncludeBookAndTotal stamp: 'FedericoSabatini 12/2/2020 15:49:52'!
PASSED!

!testRun: #InternalRestInterfaceTest #test20listPurchasesAfterAddingMultipleBooksShouldIncludeBooksAndTotal stamp: 'FedericoSabatini 12/2/2020 15:49:52'!
PASSED!

!testRun: #InternalRestInterfaceTest #test21CannotListPurchasesOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 15:49:52'!
PASSED!

!testRun: #InternalRestInterfaceTest #test22ListPurchasesOfCartShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 15:49:52'!
PASSED!

!classRenamed: #UserSalesHistory as: #UserHistory stamp: 'FedericoSabatini 12/2/2020 15:51:39'!
Smalltalk renameClassNamed: #UserSalesHistory as: #UserHistory!

Object subclass: #InternalRestInterface
	instanceVariableNames: 'authenticator carts currentID catalog salesBook expiringTime clock usersHistory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!

!classDefinition: #InternalRestInterface category: 'TusLibros-Solucion' stamp: 'FedericoSabatini 12/2/2020 15:52:02'!
Object subclass: #InternalRestInterface
	instanceVariableNames: 'authenticator carts currentID catalog salesBook expiringTime clock usersHistory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!
!InternalRestInterface methodsFor: 'initialization' stamp: 'FedericoSabatini 12/2/2020 15:52:33' prior: 50891697!
initializeWithAuthenticator: anAuthenticator withCatalog: aCatalog usingClock: aClock 
	
	authenticator := anAuthenticator.
	catalog := aCatalog.
	
	clock := aClock.
	
	carts := Dictionary new.
	currentID := 0.
	salesBook := OrderedCollection new.
	
	usersHistory := Dictionary new.! !
!InternalRestInterface methodsFor: 'api rest' stamp: 'FedericoSabatini 12/2/2020 15:58:26' prior: 50891749!
createCartForUser: anID withPassword: aPassword 

	| cart |

	self assertAuthenticate: anID withPassword: aPassword.
	
	currentID := currentID + 1.
	cart := Cart acceptingItemsOf: catalog.
	
	carts at: currentID put: (SessionCart for: cart expiringAt: (clock now next: 30*minute) withUser: anID).

	^currentID.! !

!classDefinition: #SessionCart category: 'TusLibros-Solucion' stamp: 'FedericoSabatini 12/2/2020 15:59:01'!
Object subclass: #SessionCart
	instanceVariableNames: 'cart expiringTimestamp userID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!
!SessionCart methodsFor: 'initialization' stamp: 'FedericoSabatini 12/2/2020 15:59:05'!
initializeFor: aCart expiringAt: aGregorianDateTime withUser: anUserID

	cart := aCart.
	userID := anUserID.
	expiringTimestamp := aGregorianDateTime.! !

!methodRemoval: SessionCart #initializeFor:expiringAt: stamp: 'FedericoSabatini 12/2/2020 15:59:12'!
initializeFor: aCart expiringAt: aGregorianDateTime

	cart := aCart.
	expiringTimestamp := aGregorianDateTime.!
!SessionCart class methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 12/2/2020 15:59:46'!
for: aCart expiringAt: aGregorianDateTime withUser: anUserID

	^self new initializeFor: aCart expiringAt: aGregorianDateTime withUser: anUserID.! !

!methodRemoval: SessionCart class #for:expiringAt: stamp: 'FedericoSabatini 12/2/2020 15:59:50'!
for: aCart expiringAt: aGregorianDateTime

	^self new initializeFor: aCart expiringAt: aGregorianDateTime.!
!SessionCart methodsFor: 'nil' stamp: 'FedericoSabatini 12/2/2020 16:00:13'!
user
	^userID ! !
!InternalRestInterface methodsFor: 'api rest' stamp: 'FedericoSabatini 12/2/2020 16:02:08' prior: 50891724!
checkOutCart: aCartID withCCN: anCCN withCCED: anCCED andCCO: anCCO throught: aMerchantProccesor on: aDate

	| creditCard aSessionCart cashier |
	
	"self assertUnkownCartID: aCartID."
	aSessionCart := self cartWith: aCartID.
	
	(aSessionCart expiringTimestamp < clock now) ifTrue: [ self error: self class cartTimeExpiredErrorDescription ].
	carts at: aCartID put: (SessionCart for: aSessionCart cart expiringAt:  (clock now next: 30*minute) ).

	creditCard := CreditCard withNumber: anCCN withOwner: anCCO expiringOn: anCCED.
	cashier := Cashier toCheckout: aSessionCart cart charging: creditCard throught: aMerchantProccesor on: aDate registeringOn: salesBook.

	usersHistory 
	^cashier checkOut.! !
!InternalRestInterface methodsFor: 'api rest' stamp: 'FedericoSabatini 12/2/2020 16:05:33' prior: 50895759!
checkOutCart: aCartID withCCN: anCCN withCCED: anCCED andCCO: anCCO throught: aMerchantProccesor on: aDate

	| creditCard aSessionCart cashier |
	
	"self assertUnkownCartID: aCartID."
	aSessionCart := self cartWith: aCartID.
	
	(aSessionCart expiringTimestamp < clock now) ifTrue: [ self error: self class cartTimeExpiredErrorDescription ].
	carts at: aCartID put: (SessionCart for: aSessionCart cart expiringAt:  (clock now next: 30*minute) ).

	creditCard := CreditCard withNumber: anCCN withOwner: anCCO expiringOn: anCCED.
	cashier := Cashier toCheckout: aSessionCart cart charging: creditCard throught: aMerchantProccesor on: aDate registeringOn: salesBook.

	(usersHistory includes: aSessionCart user) ifFalse: [usersHistory at: aSessionCart user put: UserHistory new].

	
	^cashier checkOut.! !
!InternalRestInterface methodsFor: 'api rest' stamp: 'FedericoSabatini 12/2/2020 16:07:18' prior: 50895785!
checkOutCart: aCartID withCCN: anCCN withCCED: anCCED andCCO: anCCO throught: aMerchantProccesor on: aDate

	| creditCard aSessionCart owner cashier |
	
	"self assertUnkownCartID: aCartID."
	aSessionCart := self cartWith: aCartID.
	owner := aSessionCart user.
	
	(aSessionCart expiringTimestamp < clock now) ifTrue: [ self error: self class cartTimeExpiredErrorDescription ].
	carts at: aCartID put: (SessionCart for: aSessionCart cart expiringAt:  (clock now next: 30*minute) withUser: owner).

	creditCard := CreditCard withNumber: anCCN withOwner: anCCO expiringOn: anCCED.
	cashier := Cashier toCheckout: aSessionCart cart charging: creditCard throught: aMerchantProccesor on: aDate registeringOn: salesBook.

	(usersHistory includes: aSessionCart user) ifFalse: [usersHistory at: aSessionCart user put: UserHistory new].

	
	^cashier checkOut.! !
!InternalRestInterface methodsFor: 'api rest' stamp: 'FedericoSabatini 12/2/2020 16:07:37' prior: 50891708!
addToCart: aCartID aQuantity: aQuantity of: anItem
	
	| aSessionCart owner |

	"self assertUnkownCartID: aCartID.	"

	aSessionCart := self cartWith: aCartID.
	owner := aSessionCart user.
	
	(aSessionCart expiringTimestamp < clock now) ifTrue: [ self error: self class cartTimeExpiredErrorDescription ].
	carts at: aCartID put: (SessionCart for: aSessionCart cart expiringAt:  (clock now next: 30*minute) withUser: owner).
	
	aSessionCart cart add: aQuantity of: anItem.
	
	! !
!InternalRestInterface methodsFor: 'api rest' stamp: 'FedericoSabatini 12/2/2020 16:07:48' prior: 50891761!
listCartFor: aCartID

	| aSessionCart owner |
	aSessionCart := self cartWith: aCartID.
	owner := aSessionCart user.
	
	(aSessionCart expiringTimestamp < clock now) ifTrue: [ self error: self class cartTimeExpiredErrorDescription ].
	carts at: aCartID put: (SessionCart for: aSessionCart cart expiringAt:  (clock now next: 30*minute) withUser: owner).

	^aSessionCart cart items.! !
!InternalRestInterface methodsFor: 'api rest' stamp: 'FedericoSabatini 12/2/2020 16:10:06' prior: 50895814!
checkOutCart: aCartID withCCN: anCCN withCCED: anCCED andCCO: anCCO throught: aMerchantProccesor on: aDate

	| creditCard aSessionCart owner cashier |
	
	"self assertUnkownCartID: aCartID."
	aSessionCart := self cartWith: aCartID.
	owner := aSessionCart user.
	
	(aSessionCart expiringTimestamp < clock now) ifTrue: [ self error: self class cartTimeExpiredErrorDescription ].
	carts at: aCartID put: (SessionCart for: aSessionCart cart expiringAt:  (clock now next: 30*minute) withUser: owner).

	creditCard := CreditCard withNumber: anCCN withOwner: anCCO expiringOn: anCCED.
	cashier := Cashier toCheckout: aSessionCart cart charging: creditCard throught: aMerchantProccesor on: aDate registeringOn: salesBook.

	(usersHistory includes: aSessionCart user) ifFalse: [usersHistory at: aSessionCart user put: UserHistory new].
	(usersHistory at: aSessionCart user) addCartSale: aSessionCart cart.

	
	^cashier checkOut.! !
!UserHistory methodsFor: 'nil' stamp: 'FedericoSabatini 12/2/2020 16:10:48'!
addCartSale: aCart
	! !
!UserHistory methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 12/2/2020 16:11:34'!
history: userID
	^OrderedCollection with: '0'.! !

!testRun: #InternalRestInterfaceTest #test01CreateCartHaveEmptyList stamp: 'FedericoSabatini 12/2/2020 16:11:56'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CannotCreateCartWithInvalidPassword stamp: 'FedericoSabatini 12/2/2020 16:11:57'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotCreateCartWithUnknownUser stamp: 'FedericoSabatini 12/2/2020 16:11:57'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04CannotAssignSameIDForDifferentCarts stamp: 'FedericoSabatini 12/2/2020 16:11:57'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05AddedItemIsIncludedInCartList stamp: 'FedericoSabatini 12/2/2020 16:11:57'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'FedericoSabatini 12/2/2020 16:11:57'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CannotAddToUnknownCartID stamp: 'FedericoSabatini 12/2/2020 16:11:57'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'FedericoSabatini 12/2/2020 16:11:57'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'FedericoSabatini 12/2/2020 16:11:57'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10CannotCheckoutToUnknownCartID stamp: 'FedericoSabatini 12/2/2020 16:11:57'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11CannotListAnUnknownCartID stamp: 'FedericoSabatini 12/2/2020 16:11:57'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAddOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 16:11:57'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13CannotListOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 16:11:57'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14CannotCheckoutOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 16:11:57'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15AddAnItemShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 16:11:57'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16ListCartShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 16:11:57'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17CheckoutShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 16:11:57'!
PASSED!

!testRun: #InternalRestInterfaceTest #test18listPurchasesShouldReturnZeroWithNewUser stamp: 'FedericoSabatini 12/2/2020 16:11:57'!
PASSED!

!testRun: #InternalRestInterfaceTest #test19listPurchasesAfterAddToCartShouldIncludeBookAndTotal stamp: 'FedericoSabatini 12/2/2020 16:11:57'!
ERROR!

!testRun: #InternalRestInterfaceTest #test20listPurchasesAfterAddingMultipleBooksShouldIncludeBooksAndTotal stamp: 'FedericoSabatini 12/2/2020 16:11:57'!
ERROR!

!testRun: #InternalRestInterfaceTest #test21CannotListPurchasesOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 16:11:57'!
PASSED!

!testRun: #InternalRestInterfaceTest #test22ListPurchasesOfCartShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 16:11:58'!
ERROR!
!InternalRestInterface methodsFor: 'api rest' stamp: 'FedericoSabatini 12/2/2020 16:13:26' prior: 50895563!
listPurchasesWithUser: userID withPassword: pass

	self assertAuthenticate: userID withPassword: pass.
	
	^(usersHistory at: userID) history.
! !
!UserHistory methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 12/2/2020 16:13:36'!
history
	^OrderedCollection with: '0'.! !

!methodRemoval: UserHistory #history: stamp: 'FedericoSabatini 12/2/2020 16:13:41'!
history: userID
	^OrderedCollection with: '0'.!

Object subclass: #UserHistory
	instanceVariableNames: 'purchases'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!

!classDefinition: #UserHistory category: 'TusLibros-Solucion' stamp: 'FedericoSabatini 12/2/2020 16:14:37'!
Object subclass: #UserHistory
	instanceVariableNames: 'purchases'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!
!UserHistory methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 12/2/2020 16:16:17'!
historyWithCatalog: aCatalog
	^OrderedCollection with: '0'.! !
!InternalRestInterface methodsFor: 'api rest' stamp: 'FedericoSabatini 12/2/2020 16:16:42' prior: 50896013!
listPurchasesWithUser: userID withPassword: pass

	self assertAuthenticate: userID withPassword: pass.
	
	^(usersHistory at: userID) historyWithCatalog: catalog.
! !
!InternalRestInterface methodsFor: 'api rest' stamp: 'FedericoSabatini 12/2/2020 16:16:52' prior: 50896048!
listPurchasesWithUser: userID withPassword: pass

	self assertAuthenticate: userID withPassword: pass.
	
	^(usersHistory at: userID) history.
! !
!InternalRestInterface methodsFor: 'api rest' stamp: 'FedericoSabatini 12/2/2020 16:17:11' prior: 50895879!
checkOutCart: aCartID withCCN: anCCN withCCED: anCCED andCCO: anCCO throught: aMerchantProccesor on: aDate

	| creditCard aSessionCart owner cashier |
	
	"self assertUnkownCartID: aCartID."
	aSessionCart := self cartWith: aCartID.
	owner := aSessionCart user.
	
	(aSessionCart expiringTimestamp < clock now) ifTrue: [ self error: self class cartTimeExpiredErrorDescription ].
	carts at: aCartID put: (SessionCart for: aSessionCart cart expiringAt:  (clock now next: 30*minute) withUser: owner).

	creditCard := CreditCard withNumber: anCCN withOwner: anCCO expiringOn: anCCED.
	cashier := Cashier toCheckout: aSessionCart cart charging: creditCard throught: aMerchantProccesor on: aDate registeringOn: salesBook.

	(usersHistory includes: aSessionCart user) ifFalse: [usersHistory at: aSessionCart user put: UserHistory with: catalog].
	(usersHistory at: aSessionCart user) addCartSale: aSessionCart cart.

	
	^cashier checkOut.! !
!InternalRestInterface methodsFor: 'api rest' stamp: 'FedericoSabatini 12/2/2020 16:17:35' prior: 50896065!
checkOutCart: aCartID withCCN: anCCN withCCED: anCCED andCCO: anCCO throught: aMerchantProccesor on: aDate

	| creditCard aSessionCart owner cashier |
	
	"self assertUnkownCartID: aCartID."
	aSessionCart := self cartWith: aCartID.
	owner := aSessionCart user.
	
	(aSessionCart expiringTimestamp < clock now) ifTrue: [ self error: self class cartTimeExpiredErrorDescription ].
	carts at: aCartID put: (SessionCart for: aSessionCart cart expiringAt:  (clock now next: 30*minute) withUser: owner).

	creditCard := CreditCard withNumber: anCCN withOwner: anCCO expiringOn: anCCED.
	cashier := Cashier toCheckout: aSessionCart cart charging: creditCard throught: aMerchantProccesor on: aDate registeringOn: salesBook.

	(usersHistory includes: aSessionCart user) ifFalse: [usersHistory at: aSessionCart user put: UserHistory withCatalog: catalog].
	(usersHistory at: aSessionCart user) addCartSale: aSessionCart cart.

	
	^cashier checkOut.! !
!UserHistory class methodsFor: 'nil' stamp: 'FedericoSabatini 12/2/2020 16:18:09'!
withCatalog: withCatalog
	^self new initializeWithCatalog: withCatalog! !

!methodRemoval: UserHistory #historyWithCatalog: stamp: 'FedericoSabatini 12/2/2020 16:18:33'!
historyWithCatalog: aCatalog
	^OrderedCollection with: '0'.!

!classDefinition: #UserHistory category: 'TusLibros-Solucion' stamp: 'FedericoSabatini 12/2/2020 16:19:17'!
Object subclass: #UserHistory
	instanceVariableNames: 'purchases catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!
!UserHistory methodsFor: 'nil' stamp: 'FedericoSabatini 12/2/2020 16:19:16'!
initializeWithCatalog: aCatalog
	
	catalog := aCatalog.! !
!InternalRestInterface methodsFor: 'api rest' stamp: 'FedericoSabatini 12/2/2020 16:19:50' prior: 50896098!
checkOutCart: aCartID withCCN: anCCN withCCED: anCCED andCCO: anCCO throught: aMerchantProccesor on: aDate

	| creditCard aSessionCart owner cashier |
	
	"self assertUnkownCartID: aCartID."
	aSessionCart := self cartWith: aCartID.
	owner := aSessionCart user.
	
	(aSessionCart expiringTimestamp < clock now) ifTrue: [ self error: self class cartTimeExpiredErrorDescription ].
	carts at: aCartID put: (SessionCart for: aSessionCart cart expiringAt:  (clock now next: 30*minute) withUser: owner).

	creditCard := CreditCard withNumber: anCCN withOwner: anCCO expiringOn: anCCED.
	cashier := Cashier toCheckout: aSessionCart cart charging: creditCard throught: aMerchantProccesor on: aDate registeringOn: salesBook.

	(usersHistory includes: aSessionCart user) ifFalse: [usersHistory at: aSessionCart user put: (UserHistory withCatalog: catalog)].
	(usersHistory at: aSessionCart user) addCartSale: aSessionCart cart.

	
	^cashier checkOut.! !

!testRun: #InternalRestInterfaceTest #test18listPurchasesShouldReturnZeroWithNewUser stamp: 'FedericoSabatini 12/2/2020 16:20:16'!
ERROR!

!testRun: #InternalRestInterfaceTest #test18listPurchasesShouldReturnZeroWithNewUser stamp: 'FedericoSabatini 12/2/2020 16:20:31'!
ERROR!
!InternalRestInterface methodsFor: 'api rest' stamp: 'FedericoSabatini 12/2/2020 16:23:49' prior: 50896057!
listPurchasesWithUser: userID withPassword: pass

	self assertAuthenticate: userID withPassword: pass.
	
	(usersHistory includes: userID) ifFalse: [^UserHistory with: catalog].
	
	^(usersHistory at: userID) history.
! !

!testRun: #InternalRestInterfaceTest #test18listPurchasesShouldReturnZeroWithNewUser stamp: 'FedericoSabatini 12/2/2020 16:24:08'!
ERROR!
!InternalRestInterface methodsFor: 'api rest' stamp: 'FedericoSabatini 12/2/2020 16:24:46' prior: 50896154!
checkOutCart: aCartID withCCN: anCCN withCCED: anCCED andCCO: anCCO throught: aMerchantProccesor on: aDate

	| creditCard aSessionCart owner cashier |
	
	"self assertUnkownCartID: aCartID."
	aSessionCart := self cartWith: aCartID.
	owner := aSessionCart user.
	
	(aSessionCart expiringTimestamp < clock now) ifTrue: [ self error: self class cartTimeExpiredErrorDescription ].
	carts at: aCartID put: (SessionCart for: aSessionCart cart expiringAt:  (clock now next: 30*minute) withUser: owner).

	creditCard := CreditCard withNumber: anCCN withOwner: anCCO expiringOn: anCCED.
	cashier := Cashier toCheckout: aSessionCart cart charging: creditCard throught: aMerchantProccesor on: aDate registeringOn: salesBook.

	(usersHistory at: aSessionCart user) addCartSale: aSessionCart cart.

	
	^cashier checkOut.! !
!InternalRestInterface methodsFor: 'api rest' stamp: 'FedericoSabatini 12/2/2020 16:24:51' prior: 50896196!
listPurchasesWithUser: userID withPassword: pass

	self assertAuthenticate: userID withPassword: pass.
	
	
	^(usersHistory at: userID) history.
! !
!InternalRestInterface methodsFor: 'api rest' stamp: 'FedericoSabatini 12/2/2020 16:25:29' prior: 50895704!
createCartForUser: anID withPassword: aPassword 

	| cart |

	self assertAuthenticate: anID withPassword: aPassword.
	
	currentID := currentID + 1.
	cart := Cart acceptingItemsOf: catalog.
	
	carts at: currentID put: (SessionCart for: cart expiringAt: (clock now next: 30*minute) withUser: anID).
	
	(usersHistory includes: anID) ifFalse: [usersHistory at: anID put: (UserHistory withCatalog: catalog)].

	^currentID.! !
!InternalRestInterface methodsFor: 'initialization' stamp: 'FedericoSabatini 12/2/2020 16:29:10' prior: 50895691!
initializeWithAuthenticator: anAuthenticator withCatalog: aCatalog usingClock: aClock 
	
	authenticator := anAuthenticator.
	catalog := aCatalog.
	
	clock := aClock.
	
	carts := Dictionary new.
	currentID := 0.
	salesBook := OrderedCollection new.
	
	usersHistory := Dictionary new.
	
	authenticator keysDo: [:aKey | usersHistory at: aKey put: (UserHistory withCatalog: catalog)].! !

!testRun: #InternalRestInterfaceTest #test18listPurchasesShouldReturnZeroWithNewUser stamp: 'FedericoSabatini 12/2/2020 16:29:39'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01CreateCartHaveEmptyList stamp: 'FedericoSabatini 12/2/2020 16:29:40'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CannotCreateCartWithInvalidPassword stamp: 'FedericoSabatini 12/2/2020 16:29:40'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotCreateCartWithUnknownUser stamp: 'FedericoSabatini 12/2/2020 16:29:40'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04CannotAssignSameIDForDifferentCarts stamp: 'FedericoSabatini 12/2/2020 16:29:40'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05AddedItemIsIncludedInCartList stamp: 'FedericoSabatini 12/2/2020 16:29:40'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'FedericoSabatini 12/2/2020 16:29:40'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CannotAddToUnknownCartID stamp: 'FedericoSabatini 12/2/2020 16:29:40'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'FedericoSabatini 12/2/2020 16:29:40'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'FedericoSabatini 12/2/2020 16:29:40'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10CannotCheckoutToUnknownCartID stamp: 'FedericoSabatini 12/2/2020 16:29:40'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11CannotListAnUnknownCartID stamp: 'FedericoSabatini 12/2/2020 16:29:40'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAddOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 16:29:40'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13CannotListOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 16:29:40'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14CannotCheckoutOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 16:29:41'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15AddAnItemShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 16:29:41'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16ListCartShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 16:29:41'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17CheckoutShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 16:29:41'!
PASSED!

!testRun: #InternalRestInterfaceTest #test18listPurchasesShouldReturnZeroWithNewUser stamp: 'FedericoSabatini 12/2/2020 16:29:41'!
PASSED!

!testRun: #InternalRestInterfaceTest #test19listPurchasesAfterAddToCartShouldIncludeBookAndTotal stamp: 'FedericoSabatini 12/2/2020 16:29:41'!
ERROR!

!testRun: #InternalRestInterfaceTest #test20listPurchasesAfterAddingMultipleBooksShouldIncludeBooksAndTotal stamp: 'FedericoSabatini 12/2/2020 16:29:41'!
ERROR!

!testRun: #InternalRestInterfaceTest #test21CannotListPurchasesOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 16:29:41'!
PASSED!

!testRun: #InternalRestInterfaceTest #test22ListPurchasesOfCartShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 16:29:41'!
ERROR!

!methodRemoval: InternalRestInterfaceTest #test22ListPurchasesOfCartShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 16:29:52'!
test22ListPurchasesOfCartShouldRestartExpirationTime

	self assertUpdatedTimeToCartAfter: [ :anInternalRestInterface :aCartID | 
		anInternalRestInterface listPurchases: aCartID.
	].!

!methodRemoval: InternalRestInterfaceTest #test21CannotListPurchasesOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 16:29:54'!
test21CannotListPurchasesOnExpiredCart

	self shouldRaiseCartTimeExpiredErrorWhen: [ :anInternalRestInterface :aCartID | 
		anInternalRestInterface listPurchases: aCartID.
	].!

!testRun: #InternalRestInterfaceTest #test01CreateCartHaveEmptyList stamp: 'FedericoSabatini 12/2/2020 16:30:05'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CannotCreateCartWithInvalidPassword stamp: 'FedericoSabatini 12/2/2020 16:30:05'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotCreateCartWithUnknownUser stamp: 'FedericoSabatini 12/2/2020 16:30:06'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04CannotAssignSameIDForDifferentCarts stamp: 'FedericoSabatini 12/2/2020 16:30:06'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05AddedItemIsIncludedInCartList stamp: 'FedericoSabatini 12/2/2020 16:30:06'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'FedericoSabatini 12/2/2020 16:30:06'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CannotAddToUnknownCartID stamp: 'FedericoSabatini 12/2/2020 16:30:06'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'FedericoSabatini 12/2/2020 16:30:06'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'FedericoSabatini 12/2/2020 16:30:06'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10CannotCheckoutToUnknownCartID stamp: 'FedericoSabatini 12/2/2020 16:30:06'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11CannotListAnUnknownCartID stamp: 'FedericoSabatini 12/2/2020 16:30:06'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAddOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 16:30:06'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13CannotListOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 16:30:06'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14CannotCheckoutOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 16:30:06'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15AddAnItemShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 16:30:06'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16ListCartShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 16:30:06'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17CheckoutShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 16:30:06'!
PASSED!

!testRun: #InternalRestInterfaceTest #test18listPurchasesShouldReturnZeroWithNewUser stamp: 'FedericoSabatini 12/2/2020 16:30:06'!
PASSED!

!testRun: #InternalRestInterfaceTest #test19listPurchasesAfterAddToCartShouldIncludeBookAndTotal stamp: 'FedericoSabatini 12/2/2020 16:30:06'!
ERROR!

!testRun: #InternalRestInterfaceTest #test20listPurchasesAfterAddingMultipleBooksShouldIncludeBooksAndTotal stamp: 'FedericoSabatini 12/2/2020 16:30:06'!
ERROR!

----SNAPSHOT----(2 December 2020 16:30:10) CuisUniversity-4384.image priorSource: 18030871!
!UserHistory methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 12/2/2020 16:32:15' prior: 50895911!
addCartSale: aCart

	| purchaseCartList | 
	purchaseCartList := aCart items.
	
	purchases addAll: purchaseCartList.! !
!UserHistory methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 12/2/2020 16:32:30' prior: 50896148!
initializeWithCatalog: aCatalog
	
	catalog := aCatalog.
	purchases := Bag new.! !
!UserHistory methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 12/2/2020 16:35:20' prior: 50896021!
history
	
	| purchaseList sum |
	
	purchaseList := OrderedCollection new.
	
	purchases asSet do: 
		[ :cartKey | purchaseList addLast: cartKey, ' -> ', ((catalog at: cartKey) * (purchases occurrencesOf: cartKey)) asString].
		
	purchaseList addLast: (purchases sum: [] ifEmpty: [0]).
	
	^purchaseList.! !
!UserHistory methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 12/2/2020 16:36:38' prior: 50896498!
history
	
	| purchaseList sum |
	
	purchaseList := OrderedCollection new.
	
	purchases asSet do: 
		[ :cartKey | purchaseList addLast: cartKey, ' -> ', ((catalog at: cartKey) * (purchases occurrencesOf: cartKey)) asString].
		
	sum := 0.

	purchaseList addLast: (purchases do: [:purchase | sum := sum + purchase]).
	
	^purchaseList.! !
!UserHistory methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 12/2/2020 16:36:40' prior: 50896511!
history
	
	| purchaseList sum |
	
	purchaseList := OrderedCollection new.
	
	purchases asSet do: 
		[ :cartKey | purchaseList addLast: cartKey, ' -> ', ((catalog at: cartKey) * (purchases occurrencesOf: cartKey)) asString].
		
	sum := 0.
	purchaseList addLast: (purchases do: [:purchase | sum := sum + purchase]).
	
	^purchaseList.! !

!testRun: #InternalRestInterfaceTest #test18listPurchasesShouldReturnZeroWithNewUser stamp: 'FedericoSabatini 12/2/2020 16:36:49'!
FAILURE!

!testRun: #InternalRestInterfaceTest #test01CreateCartHaveEmptyList stamp: 'FedericoSabatini 12/2/2020 16:37:31'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CannotCreateCartWithInvalidPassword stamp: 'FedericoSabatini 12/2/2020 16:37:31'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotCreateCartWithUnknownUser stamp: 'FedericoSabatini 12/2/2020 16:37:31'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04CannotAssignSameIDForDifferentCarts stamp: 'FedericoSabatini 12/2/2020 16:37:31'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05AddedItemIsIncludedInCartList stamp: 'FedericoSabatini 12/2/2020 16:37:31'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'FedericoSabatini 12/2/2020 16:37:31'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CannotAddToUnknownCartID stamp: 'FedericoSabatini 12/2/2020 16:37:31'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'FedericoSabatini 12/2/2020 16:37:31'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'FedericoSabatini 12/2/2020 16:37:31'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10CannotCheckoutToUnknownCartID stamp: 'FedericoSabatini 12/2/2020 16:37:32'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11CannotListAnUnknownCartID stamp: 'FedericoSabatini 12/2/2020 16:37:32'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAddOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 16:37:32'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13CannotListOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 16:37:32'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14CannotCheckoutOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 16:37:32'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15AddAnItemShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 16:37:32'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16ListCartShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 16:37:32'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17CheckoutShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 16:37:32'!
PASSED!

!testRun: #InternalRestInterfaceTest #test18listPurchasesShouldReturnZeroWithNewUser stamp: 'FedericoSabatini 12/2/2020 16:37:32'!
FAILURE!

!testRun: #InternalRestInterfaceTest #test19listPurchasesAfterAddToCartShouldIncludeBookAndTotal stamp: 'FedericoSabatini 12/2/2020 16:37:32'!
ERROR!

!testRun: #InternalRestInterfaceTest #test20listPurchasesAfterAddingMultipleBooksShouldIncludeBooksAndTotal stamp: 'FedericoSabatini 12/2/2020 16:37:32'!
ERROR!

!testRun: #InternalRestInterfaceTest #test18listPurchasesShouldReturnZeroWithNewUser stamp: 'FedericoSabatini 12/2/2020 16:37:38'!
FAILURE!
!UserHistory methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 12/2/2020 16:38:33' prior: 50896525!
history
	
	| purchaseList sum |
	
	purchaseList := OrderedCollection new.
	
	purchases asSet do: 
		[ :cartKey | purchaseList addLast: cartKey, ' -> ', ((catalog at: cartKey) * (purchases occurrencesOf: cartKey)) asString].
		
	sum := 0.
	purchaseList addLast: (purchases do: [:purchase | sum := sum + purchase]) asString.
	
	^purchaseList.! !

!testRun: #InternalRestInterfaceTest #test18listPurchasesShouldReturnZeroWithNewUser stamp: 'FedericoSabatini 12/2/2020 16:38:40'!
FAILURE!
!UserHistory methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 12/2/2020 16:39:16' prior: 50896632!
history
	
	| purchaseList sum |
	
	purchaseList := OrderedCollection new.
	
	purchases asSet do: 
		[ :cartKey | purchaseList addLast: cartKey, ' -> ', ((catalog at: cartKey) * (purchases occurrencesOf: cartKey)) asString].
		
	sum := 0.
	purchases do: [:purchase | sum := sum + purchase].
	
	purchaseList addLast: sum asString.
	
	^purchaseList.! !

!testRun: #InternalRestInterfaceTest #test01CreateCartHaveEmptyList stamp: 'FedericoSabatini 12/2/2020 16:39:19'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CannotCreateCartWithInvalidPassword stamp: 'FedericoSabatini 12/2/2020 16:39:19'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotCreateCartWithUnknownUser stamp: 'FedericoSabatini 12/2/2020 16:39:19'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04CannotAssignSameIDForDifferentCarts stamp: 'FedericoSabatini 12/2/2020 16:39:19'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05AddedItemIsIncludedInCartList stamp: 'FedericoSabatini 12/2/2020 16:39:19'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'FedericoSabatini 12/2/2020 16:39:19'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CannotAddToUnknownCartID stamp: 'FedericoSabatini 12/2/2020 16:39:19'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'FedericoSabatini 12/2/2020 16:39:19'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'FedericoSabatini 12/2/2020 16:39:19'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10CannotCheckoutToUnknownCartID stamp: 'FedericoSabatini 12/2/2020 16:39:19'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11CannotListAnUnknownCartID stamp: 'FedericoSabatini 12/2/2020 16:39:19'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAddOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 16:39:19'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13CannotListOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 16:39:19'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14CannotCheckoutOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 16:39:19'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15AddAnItemShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 16:39:19'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16ListCartShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 16:39:19'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17CheckoutShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 16:39:19'!
PASSED!

!testRun: #InternalRestInterfaceTest #test18listPurchasesShouldReturnZeroWithNewUser stamp: 'FedericoSabatini 12/2/2020 16:39:20'!
PASSED!

!testRun: #InternalRestInterfaceTest #test19listPurchasesAfterAddToCartShouldIncludeBookAndTotal stamp: 'FedericoSabatini 12/2/2020 16:39:20'!
ERROR!

!testRun: #InternalRestInterfaceTest #test20listPurchasesAfterAddingMultipleBooksShouldIncludeBooksAndTotal stamp: 'FedericoSabatini 12/2/2020 16:39:20'!
ERROR!

!testRun: #InternalRestInterfaceTest #test19listPurchasesAfterAddToCartShouldIncludeBookAndTotal stamp: 'FedericoSabatini 12/2/2020 16:39:24'!
ERROR!
!InternalRestInterfaceTest methodsFor: 'list purchases' stamp: 'FedericoSabatini 12/2/2020 16:39:51' prior: 50893674!
test19listPurchasesAfterAddToCartShouldIncludeBookAndTotal

	| tusLibros expectedPurchases cartID |

	expectedPurchases := OrderedCollection 
		with: (testObjectsFactory itemSellByTheStore, ' -> ', testObjectsFactory itemSellByTheStorePrice asString)
		with: testObjectsFactory itemSellByTheStorePrice asString.
		
	tusLibros := testObjectsFactory tusLibros.
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	
	self assert: expectedPurchases equals: (tusLibros listPurchasesWithUser: 1 withPassword: 'pass').! !
!InternalRestInterfaceTest methodsFor: 'list purchases' stamp: 'FedericoSabatini 12/2/2020 16:39:55' prior: 50895272!
test20listPurchasesAfterAddingMultipleBooksShouldIncludeBooksAndTotal

	| tusLibros expectedPurchases cartID |

	expectedPurchases := OrderedCollection 
		with: (testObjectsFactory itemSellByTheStore, ' -> ', (testObjectsFactory itemSellByTheStorePrice * 5) asString)
		with: (testObjectsFactory itemSellByTheStorePrice * 5) asString.
		
	tusLibros := testObjectsFactory tusLibros.
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	tusLibros addToCart: cartID aQuantity: 5 of: testObjectsFactory itemSellByTheStore.
	
	self assert: expectedPurchases equals: (tusLibros listPurchasesWithUser: 1 withPassword: 'pass').! !

!testRun: #InternalRestInterfaceTest #test01CreateCartHaveEmptyList stamp: 'FedericoSabatini 12/2/2020 16:39:58'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CannotCreateCartWithInvalidPassword stamp: 'FedericoSabatini 12/2/2020 16:39:58'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotCreateCartWithUnknownUser stamp: 'FedericoSabatini 12/2/2020 16:39:58'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04CannotAssignSameIDForDifferentCarts stamp: 'FedericoSabatini 12/2/2020 16:39:58'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05AddedItemIsIncludedInCartList stamp: 'FedericoSabatini 12/2/2020 16:39:58'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'FedericoSabatini 12/2/2020 16:39:58'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CannotAddToUnknownCartID stamp: 'FedericoSabatini 12/2/2020 16:39:58'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'FedericoSabatini 12/2/2020 16:39:58'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'FedericoSabatini 12/2/2020 16:39:58'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10CannotCheckoutToUnknownCartID stamp: 'FedericoSabatini 12/2/2020 16:39:58'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11CannotListAnUnknownCartID stamp: 'FedericoSabatini 12/2/2020 16:39:58'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAddOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 16:39:58'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13CannotListOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 16:39:58'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14CannotCheckoutOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 16:39:58'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15AddAnItemShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 16:39:58'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16ListCartShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 16:39:58'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17CheckoutShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 16:39:58'!
PASSED!

!testRun: #InternalRestInterfaceTest #test18listPurchasesShouldReturnZeroWithNewUser stamp: 'FedericoSabatini 12/2/2020 16:39:58'!
PASSED!

!testRun: #InternalRestInterfaceTest #test19listPurchasesAfterAddToCartShouldIncludeBookAndTotal stamp: 'FedericoSabatini 12/2/2020 16:39:58'!
FAILURE!

!testRun: #InternalRestInterfaceTest #test20listPurchasesAfterAddingMultipleBooksShouldIncludeBooksAndTotal stamp: 'FedericoSabatini 12/2/2020 16:39:58'!
FAILURE!

!testRun: #InternalRestInterfaceTest #test19listPurchasesAfterAddToCartShouldIncludeBookAndTotal stamp: 'FedericoSabatini 12/2/2020 16:40:02'!
FAILURE!

!methodRemoval: InternalRestInterface #listPurchases: stamp: 'FedericoSabatini 12/2/2020 16:41:46'!
listPurchases: aCartID

	| aSessionCart purchaseList |
	aSessionCart := self cartWith: aCartID.
	
	(aSessionCart expiringTimestamp < clock now) ifTrue: [ self error: self class cartTimeExpiredErrorDescription ].
	carts at: aCartID put: (SessionCart for: aSessionCart cart expiringAt:  (clock now next: 30*minute) ).
	
	purchaseList := OrderedCollection new.
	
	(aSessionCart cart items) asSet do: 
		[ :cartKey | purchaseList addLast: cartKey, ' -> ', ((catalog at: cartKey) * (aSessionCart cart items occurrencesOf: cartKey)) asString].
	purchaseList addLast: aSessionCart cart total asString.
	
	^purchaseList.!

!testRun: #InternalRestInterfaceTest #test19listPurchasesAfterAddToCartShouldIncludeBookAndTotal stamp: 'FedericoSabatini 12/2/2020 16:41:58'!
FAILURE!
!InternalRestInterfaceTest methodsFor: 'list purchases' stamp: 'FedericoSabatini 12/2/2020 16:42:48' prior: 50896755!
test19listPurchasesAfterAddToCartShouldIncludeBookAndTotal

	| tusLibros expectedPurchases cartID |

	expectedPurchases := OrderedCollection 
		with: (testObjectsFactory itemSellByTheStore, ' -> ', testObjectsFactory itemSellByTheStorePrice asString)
		with: testObjectsFactory itemSellByTheStorePrice asString.
		
	tusLibros := testObjectsFactory tusLibros.
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	self tusLibros: tusLibros checkoutCartID: cartID.
	
	self assert: expectedPurchases equals: (tusLibros listPurchasesWithUser: 1 withPassword: 'pass').! !

!testRun: #InternalRestInterfaceTest #test19listPurchasesAfterAddToCartShouldIncludeBookAndTotal stamp: 'FedericoSabatini 12/2/2020 16:42:56'!
ERROR!

!testRun: #InternalRestInterfaceTest #test19listPurchasesAfterAddToCartShouldIncludeBookAndTotal stamp: 'FedericoSabatini 12/2/2020 16:43:47'!
ERROR!
!UserHistory methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 12/2/2020 16:44:05' prior: 50896651!
history
	
	| purchaseList sum |
	
	purchaseList := OrderedCollection new.
	
	purchases asSet do: 
		[ :cartKey | purchaseList addLast: cartKey, ' -> ', ((catalog at: cartKey) * (purchases occurrencesOf: cartKey)) asString].
		
	sum := 0.
	purchases do: [:purchase | sum := (sum + purchase)].
	
	purchaseList addLast: sum asString.
	
	^purchaseList.! !

!testRun: #InternalRestInterfaceTest #test01CreateCartHaveEmptyList stamp: 'FedericoSabatini 12/2/2020 16:44:09'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CannotCreateCartWithInvalidPassword stamp: 'FedericoSabatini 12/2/2020 16:44:10'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotCreateCartWithUnknownUser stamp: 'FedericoSabatini 12/2/2020 16:44:10'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04CannotAssignSameIDForDifferentCarts stamp: 'FedericoSabatini 12/2/2020 16:44:10'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05AddedItemIsIncludedInCartList stamp: 'FedericoSabatini 12/2/2020 16:44:10'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'FedericoSabatini 12/2/2020 16:44:10'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CannotAddToUnknownCartID stamp: 'FedericoSabatini 12/2/2020 16:44:10'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'FedericoSabatini 12/2/2020 16:44:10'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'FedericoSabatini 12/2/2020 16:44:10'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10CannotCheckoutToUnknownCartID stamp: 'FedericoSabatini 12/2/2020 16:44:10'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11CannotListAnUnknownCartID stamp: 'FedericoSabatini 12/2/2020 16:44:10'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAddOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 16:44:10'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13CannotListOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 16:44:10'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14CannotCheckoutOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 16:44:10'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15AddAnItemShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 16:44:10'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16ListCartShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 16:44:10'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17CheckoutShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 16:44:10'!
PASSED!

!testRun: #InternalRestInterfaceTest #test18listPurchasesShouldReturnZeroWithNewUser stamp: 'FedericoSabatini 12/2/2020 16:44:10'!
PASSED!

!testRun: #InternalRestInterfaceTest #test19listPurchasesAfterAddToCartShouldIncludeBookAndTotal stamp: 'FedericoSabatini 12/2/2020 16:44:10'!
ERROR!

!testRun: #InternalRestInterfaceTest #test20listPurchasesAfterAddingMultipleBooksShouldIncludeBooksAndTotal stamp: 'FedericoSabatini 12/2/2020 16:44:10'!
FAILURE!

!testRun: #InternalRestInterfaceTest #test19listPurchasesAfterAddToCartShouldIncludeBookAndTotal stamp: 'FedericoSabatini 12/2/2020 16:44:15'!
ERROR!
!UserHistory methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 12/2/2020 16:45:56' prior: 50896952!
history
	
	| purchaseList sum |
	
	purchaseList := OrderedCollection new.
	
	purchases asSet do: 
		[ :cartKey | purchaseList addLast: cartKey, ' -> ', ((catalog at: cartKey) * (purchases occurrencesOf: cartKey)) asString].
		
	sum := 0.
	purchases do: [:purchase | sum := (sum + catalog at: purchase)].
	
	purchaseList addLast: sum asString.
	
	^purchaseList.! !

!testRun: #InternalRestInterfaceTest #test19listPurchasesAfterAddToCartShouldIncludeBookAndTotal stamp: 'FedericoSabatini 12/2/2020 16:45:58'!
PASSED!

!testRun: #InternalRestInterfaceTest #test20listPurchasesAfterAddingMultipleBooksShouldIncludeBooksAndTotal stamp: 'FedericoSabatini 12/2/2020 16:46:02'!
FAILURE!
!InternalRestInterfaceTest methodsFor: 'list purchases' stamp: 'FedericoSabatini 12/2/2020 16:46:19' prior: 50896778!
test20listPurchasesAfterAddingMultipleBooksShouldIncludeBooksAndTotal

	| tusLibros expectedPurchases cartID |

	expectedPurchases := OrderedCollection 
		with: (testObjectsFactory itemSellByTheStore, ' -> ', (testObjectsFactory itemSellByTheStorePrice * 5) asString)
		with: (testObjectsFactory itemSellByTheStorePrice * 5) asString.
		
	tusLibros := testObjectsFactory tusLibros.
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	tusLibros addToCart: cartID aQuantity: 5 of: testObjectsFactory itemSellByTheStore.
	self tusLibros: tusLibros checkoutCartID: cartID.
	
	self assert: expectedPurchases equals: (tusLibros listPurchasesWithUser: 1 withPassword: 'pass').! !

!testRun: #InternalRestInterfaceTest #test20listPurchasesAfterAddingMultipleBooksShouldIncludeBooksAndTotal stamp: 'FedericoSabatini 12/2/2020 16:46:20'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01CreateCartHaveEmptyList stamp: 'FedericoSabatini 12/2/2020 16:46:20'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CannotCreateCartWithInvalidPassword stamp: 'FedericoSabatini 12/2/2020 16:46:20'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotCreateCartWithUnknownUser stamp: 'FedericoSabatini 12/2/2020 16:46:20'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04CannotAssignSameIDForDifferentCarts stamp: 'FedericoSabatini 12/2/2020 16:46:21'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05AddedItemIsIncludedInCartList stamp: 'FedericoSabatini 12/2/2020 16:46:21'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'FedericoSabatini 12/2/2020 16:46:21'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CannotAddToUnknownCartID stamp: 'FedericoSabatini 12/2/2020 16:46:21'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'FedericoSabatini 12/2/2020 16:46:21'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'FedericoSabatini 12/2/2020 16:46:21'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10CannotCheckoutToUnknownCartID stamp: 'FedericoSabatini 12/2/2020 16:46:21'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11CannotListAnUnknownCartID stamp: 'FedericoSabatini 12/2/2020 16:46:21'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAddOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 16:46:21'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13CannotListOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 16:46:21'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14CannotCheckoutOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 16:46:21'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15AddAnItemShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 16:46:21'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16ListCartShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 16:46:21'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17CheckoutShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 16:46:21'!
PASSED!

!testRun: #InternalRestInterfaceTest #test18listPurchasesShouldReturnZeroWithNewUser stamp: 'FedericoSabatini 12/2/2020 16:46:21'!
PASSED!

!testRun: #InternalRestInterfaceTest #test19listPurchasesAfterAddToCartShouldIncludeBookAndTotal stamp: 'FedericoSabatini 12/2/2020 16:46:21'!
PASSED!

!testRun: #InternalRestInterfaceTest #test20listPurchasesAfterAddingMultipleBooksShouldIncludeBooksAndTotal stamp: 'FedericoSabatini 12/2/2020 16:46:21'!
PASSED!

----SNAPSHOT----(2 December 2020 16:46:28) CuisUniversity-4384.image priorSource: 18074543!

----SNAPSHOT----(2 December 2020 16:46:40) CuisUniversity-4384.image priorSource: 18097391!

----SNAPSHOT----(2 December 2020 16:49:12) CuisUniversity-4384.image priorSource: 18097484!
!InternalRestInterfaceTest methodsFor: 'create' stamp: 'FedericoSabatini 12/2/2020 16:57:14'!
test21CannotListPurchasesWithUnknownUser

	| tusLibros |

	tusLibros := testObjectsFactory tusLibros.

	self should: [ tusLibros createCartForUser: 3 withPassword: 'pass'. ]
		raise: Error
		withMessageText: InternalRestInterface badAuthenticationErrorDescription.! !
!InternalRestInterfaceTest methodsFor: 'list purchases' stamp: 'FedericoSabatini 12/2/2020 16:57:45' prior: 50897204!
test21CannotListPurchasesWithUnknownUser

	| tusLibros expectedPurchases cartID  |

	expectedPurchases := OrderedCollection with: '0'.
	tusLibros := testObjectsFactory tusLibros.
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.

	self should: [ tusLibros createCartForUser: 3 withPassword: 'pass'. ]
		raise: Error
		withMessageText: InternalRestInterface badAuthenticationErrorDescription.! !
!InternalRestInterfaceTest methodsFor: 'list purchases' stamp: 'FedericoSabatini 12/2/2020 16:58:13' prior: 50897217!
test21CannotListPurchasesWithUnknownUser

	| tusLibros |

	tusLibros := testObjectsFactory tusLibros.

	self should: [ tusLibros listPurchasesWithUser: 3 withPassword: 'pass'. ]
		raise: Error
		withMessageText: InternalRestInterface badAuthenticationErrorDescription.! !

!testRun: #InternalRestInterfaceTest #test21CannotListPurchasesWithUnknownUser stamp: 'FedericoSabatini 12/2/2020 16:58:20'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01CreateCartHaveEmptyList stamp: 'FedericoSabatini 12/2/2020 16:58:20'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CannotCreateCartWithInvalidPassword stamp: 'FedericoSabatini 12/2/2020 16:58:20'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotCreateCartWithUnknownUser stamp: 'FedericoSabatini 12/2/2020 16:58:20'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04CannotAssignSameIDForDifferentCarts stamp: 'FedericoSabatini 12/2/2020 16:58:20'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05AddedItemIsIncludedInCartList stamp: 'FedericoSabatini 12/2/2020 16:58:20'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'FedericoSabatini 12/2/2020 16:58:21'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CannotAddToUnknownCartID stamp: 'FedericoSabatini 12/2/2020 16:58:21'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'FedericoSabatini 12/2/2020 16:58:21'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'FedericoSabatini 12/2/2020 16:58:21'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10CannotCheckoutToUnknownCartID stamp: 'FedericoSabatini 12/2/2020 16:58:21'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11CannotListAnUnknownCartID stamp: 'FedericoSabatini 12/2/2020 16:58:21'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAddOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 16:58:21'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13CannotListOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 16:58:21'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14CannotCheckoutOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 16:58:21'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15AddAnItemShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 16:58:21'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16ListCartShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 16:58:21'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17CheckoutShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 16:58:21'!
PASSED!

!testRun: #InternalRestInterfaceTest #test18listPurchasesShouldReturnZeroWithNewUser stamp: 'FedericoSabatini 12/2/2020 16:58:21'!
PASSED!

!testRun: #InternalRestInterfaceTest #test19listPurchasesAfterAddToCartShouldIncludeBookAndTotal stamp: 'FedericoSabatini 12/2/2020 16:58:21'!
PASSED!

!testRun: #InternalRestInterfaceTest #test20listPurchasesAfterAddingMultipleBooksShouldIncludeBooksAndTotal stamp: 'FedericoSabatini 12/2/2020 16:58:21'!
PASSED!

!testRun: #InternalRestInterfaceTest #test21CannotListPurchasesWithUnknownUser stamp: 'FedericoSabatini 12/2/2020 16:58:21'!
PASSED!

----SNAPSHOT----(2 December 2020 16:58:32) CuisUniversity-4384.image priorSource: 18097577!
!InternalRestInterface methodsFor: 'api rest' stamp: 'FedericoSabatini 12/2/2020 16:59:17' prior: 50896240!
listPurchasesWithUser: userID withPassword: pass

	self assertAuthenticate: userID withPassword: pass.
	
	^(usersHistory at: userID) history.
! !

----SNAPSHOT----(2 December 2020 16:59:41) CuisUniversity-4384.image priorSource: 18101976!
!InternalRestInterfaceTest methodsFor: 'list purchases' stamp: 'FedericoSabatini 12/2/2020 17:29:36' prior: 50896918!
test19listPurchasesAfterAddToCartShouldIncludeBookAndTotal

	| tusLibros expectedPurchases cartID |

	expectedPurchases := OrderedCollection 
		with: (testObjectsFactory itemSellByTheStore, ' -> ', testObjectsFactory itemSellByTheStorePrice asString)
		with: testObjectsFactory itemSellByTheStorePrice asString.
		
	tusLibros := testObjectsFactory tusLibros.
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	self tusLibros: tusLibros checkoutCartID: cartID.
	
	self assert: expectedPurchases equals: (tusLibros listPurchasesWithUser: 1 withPassword: 'pass').! !
!InternalRestInterface methodsFor: 'api rest' stamp: 'FedericoSabatini 12/2/2020 17:33:01' prior: 50897342!
listPurchasesWithUser: userID withPassword: pass

	self assertAuthenticate: userID withPassword: pass.
	
	(usersHistory includes: userID) ifFalse: [UserHistory withCatalog: catalog ].
	^(usersHistory at: userID ) history.
! !
!InternalRestInterface methodsFor: 'api rest' stamp: 'FedericoSabatini 12/2/2020 17:33:28' prior: 50897379!
listPurchasesWithUser: userID withPassword: pass

	self assertAuthenticate: userID withPassword: pass.
	
	(usersHistory includes: userID) ifFalse: [UserHistory new ].
	^(usersHistory at: userID ) history.
! !
!InternalRestInterface methodsFor: 'api rest' stamp: 'FedericoSabatini 12/2/2020 17:33:32' prior: 50897390!
listPurchasesWithUser: userID withPassword: pass

	self assertAuthenticate: userID withPassword: pass.
	
	(usersHistory includes: userID) ifFalse: [UserHistory withCatalog: catalog ].
	^(usersHistory at: userID ) history.
! !
!UserHistory methodsFor: 'as yet unclassified' stamp: 'FedericoSabatini 12/2/2020 17:34:36' prior: 50897056!
history
	
	| purchaseList sum |
	
	purchaseList := OrderedCollection new.
	
	purchases asSet do: 
		[ :cartKey | purchaseList addLast: cartKey, ' -> ', (purchases occurrencesOf: cartKey) asString].
		
	sum := 0.
	purchases do: [:purchase | sum := (sum + catalog at: purchase)].
	
	purchaseList addLast: sum asString.
	
	^purchaseList.! !
!InternalRestInterface methodsFor: 'initialization' stamp: 'FedericoSabatini 12/2/2020 18:13:46' prior: 50896265!
initializeWithAuthenticator: anAuthenticator withCatalog: aCatalog usingClock: aClock 
	
	authenticator := anAuthenticator.
	catalog := aCatalog.
	
	clock := aClock.
	
	carts := Dictionary new.
	currentID := 0.
	salesBook := OrderedCollection new.
	
	usersHistory := Dictionary new.
! !

!testRun: #InternalRestInterfaceTest #test01CreateCartHaveEmptyList stamp: 'FedericoSabatini 12/2/2020 18:14:03'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CannotCreateCartWithInvalidPassword stamp: 'FedericoSabatini 12/2/2020 18:14:03'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotCreateCartWithUnknownUser stamp: 'FedericoSabatini 12/2/2020 18:14:03'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04CannotAssignSameIDForDifferentCarts stamp: 'FedericoSabatini 12/2/2020 18:14:03'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05AddedItemIsIncludedInCartList stamp: 'FedericoSabatini 12/2/2020 18:14:03'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'FedericoSabatini 12/2/2020 18:14:03'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CannotAddToUnknownCartID stamp: 'FedericoSabatini 12/2/2020 18:14:03'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'FedericoSabatini 12/2/2020 18:14:03'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'FedericoSabatini 12/2/2020 18:14:03'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10CannotCheckoutToUnknownCartID stamp: 'FedericoSabatini 12/2/2020 18:14:04'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11CannotListAnUnknownCartID stamp: 'FedericoSabatini 12/2/2020 18:14:04'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAddOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 18:14:04'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13CannotListOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 18:14:04'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14CannotCheckoutOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 18:14:04'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15AddAnItemShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 18:14:04'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16ListCartShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 18:14:04'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17CheckoutShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 18:14:04'!
PASSED!

!testRun: #InternalRestInterfaceTest #test18listPurchasesShouldReturnZeroWithNewUser stamp: 'FedericoSabatini 12/2/2020 18:14:04'!
PASSED!

!testRun: #InternalRestInterfaceTest #test19listPurchasesAfterAddToCartShouldIncludeBookAndTotal stamp: 'FedericoSabatini 12/2/2020 18:14:04'!
FAILURE!

!testRun: #InternalRestInterfaceTest #test20listPurchasesAfterAddingMultipleBooksShouldIncludeBooksAndTotal stamp: 'FedericoSabatini 12/2/2020 18:14:04'!
FAILURE!

!testRun: #InternalRestInterfaceTest #test21CannotListPurchasesWithUnknownUser stamp: 'FedericoSabatini 12/2/2020 18:14:04'!
PASSED!

!testRun: #InternalRestInterfaceTest #test19listPurchasesAfterAddToCartShouldIncludeBookAndTotal stamp: 'FedericoSabatini 12/2/2020 18:14:13'!
FAILURE!
!InternalRestInterface methodsFor: 'api rest' stamp: 'FedericoSabatini 12/2/2020 18:17:44' prior: 50896211!
checkOutCart: aCartID withCCN: anCCN withCCED: anCCED andCCO: anCCO throught: aMerchantProccesor on: aDate

	| creditCard aSessionCart owner cashier |
	
	"self assertUnkownCartID: aCartID."
	aSessionCart := self cartWith: aCartID.
	owner := aSessionCart user.
	
	(aSessionCart expiringTimestamp < clock now) ifTrue: [ self error: self class cartTimeExpiredErrorDescription ].
	carts at: aCartID put: (SessionCart for: aSessionCart cart expiringAt:  (clock now next: 30*minute) withUser: owner).

	creditCard := CreditCard withNumber: anCCN withOwner: anCCO expiringOn: anCCED.
	cashier := Cashier toCheckout: aSessionCart cart charging: creditCard throught: aMerchantProccesor on: aDate registeringOn: salesBook.

	(usersHistory includes: aSessionCart user) ifFalse: [UserHistory withCatalog: catalog ].
	(usersHistory at: aSessionCart user) addCartSale: aSessionCart cart.

	
	^cashier checkOut.! !

!testRun: #InternalRestInterfaceTest #test01CreateCartHaveEmptyList stamp: 'FedericoSabatini 12/2/2020 18:17:48'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CannotCreateCartWithInvalidPassword stamp: 'FedericoSabatini 12/2/2020 18:17:48'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotCreateCartWithUnknownUser stamp: 'FedericoSabatini 12/2/2020 18:17:48'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04CannotAssignSameIDForDifferentCarts stamp: 'FedericoSabatini 12/2/2020 18:17:49'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05AddedItemIsIncludedInCartList stamp: 'FedericoSabatini 12/2/2020 18:17:49'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'FedericoSabatini 12/2/2020 18:17:49'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CannotAddToUnknownCartID stamp: 'FedericoSabatini 12/2/2020 18:17:49'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'FedericoSabatini 12/2/2020 18:17:49'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'FedericoSabatini 12/2/2020 18:17:49'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10CannotCheckoutToUnknownCartID stamp: 'FedericoSabatini 12/2/2020 18:17:49'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11CannotListAnUnknownCartID stamp: 'FedericoSabatini 12/2/2020 18:17:49'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAddOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 18:17:49'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13CannotListOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 18:17:49'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14CannotCheckoutOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 18:17:49'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15AddAnItemShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 18:17:49'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16ListCartShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 18:17:49'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17CheckoutShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 18:17:49'!
PASSED!

!testRun: #InternalRestInterfaceTest #test18listPurchasesShouldReturnZeroWithNewUser stamp: 'FedericoSabatini 12/2/2020 18:17:49'!
PASSED!

!testRun: #InternalRestInterfaceTest #test19listPurchasesAfterAddToCartShouldIncludeBookAndTotal stamp: 'FedericoSabatini 12/2/2020 18:17:49'!
FAILURE!

!testRun: #InternalRestInterfaceTest #test20listPurchasesAfterAddingMultipleBooksShouldIncludeBooksAndTotal stamp: 'FedericoSabatini 12/2/2020 18:17:49'!
FAILURE!

!testRun: #InternalRestInterfaceTest #test21CannotListPurchasesWithUnknownUser stamp: 'FedericoSabatini 12/2/2020 18:17:49'!
PASSED!

!testRun: #InternalRestInterfaceTest #test19listPurchasesAfterAddToCartShouldIncludeBookAndTotal stamp: 'FedericoSabatini 12/2/2020 18:17:52'!
FAILURE!

userID!
!InternalRestInterfaceTest methodsFor: 'list purchases' stamp: 'FedericoSabatini 12/2/2020 18:19:26' prior: 50897354!
test19listPurchasesAfterAddToCartShouldIncludeBookAndTotal

	| tusLibros expectedPurchases cartID |

	expectedPurchases := OrderedCollection 
		with: (testObjectsFactory itemSellByTheStore, ' -> 1')
		with: testObjectsFactory itemSellByTheStorePrice asString.
		
	tusLibros := testObjectsFactory tusLibros.
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	self tusLibros: tusLibros checkoutCartID: cartID.
	
	self assert: expectedPurchases equals: (tusLibros listPurchasesWithUser: 1 withPassword: 'pass').! !

!methodRemoval: InternalRestInterfaceTest #test20listPurchasesAfterAddingMultipleBooksShouldIncludeBooksAndTotal stamp: 'FedericoSabatini 12/2/2020 18:19:37'!
test20listPurchasesAfterAddingMultipleBooksShouldIncludeBooksAndTotal

	| tusLibros expectedPurchases cartID |

	expectedPurchases := OrderedCollection 
		with: (testObjectsFactory itemSellByTheStore, ' -> ', (testObjectsFactory itemSellByTheStorePrice * 5) asString)
		with: (testObjectsFactory itemSellByTheStorePrice * 5) asString.
		
	tusLibros := testObjectsFactory tusLibros.
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	tusLibros addToCart: cartID aQuantity: 5 of: testObjectsFactory itemSellByTheStore.
	self tusLibros: tusLibros checkoutCartID: cartID.
	
	self assert: expectedPurchases equals: (tusLibros listPurchasesWithUser: 1 withPassword: 'pass').!

!testRun: #InternalRestInterfaceTest #test01CreateCartHaveEmptyList stamp: 'FedericoSabatini 12/2/2020 18:19:43'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CannotCreateCartWithInvalidPassword stamp: 'FedericoSabatini 12/2/2020 18:19:43'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotCreateCartWithUnknownUser stamp: 'FedericoSabatini 12/2/2020 18:19:43'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04CannotAssignSameIDForDifferentCarts stamp: 'FedericoSabatini 12/2/2020 18:19:43'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05AddedItemIsIncludedInCartList stamp: 'FedericoSabatini 12/2/2020 18:19:43'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'FedericoSabatini 12/2/2020 18:19:43'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CannotAddToUnknownCartID stamp: 'FedericoSabatini 12/2/2020 18:19:43'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'FedericoSabatini 12/2/2020 18:19:43'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'FedericoSabatini 12/2/2020 18:19:43'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10CannotCheckoutToUnknownCartID stamp: 'FedericoSabatini 12/2/2020 18:19:43'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11CannotListAnUnknownCartID stamp: 'FedericoSabatini 12/2/2020 18:19:43'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAddOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 18:19:43'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13CannotListOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 18:19:43'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14CannotCheckoutOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 18:19:43'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15AddAnItemShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 18:19:43'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16ListCartShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 18:19:43'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17CheckoutShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 18:19:44'!
PASSED!

!testRun: #InternalRestInterfaceTest #test18listPurchasesShouldReturnZeroWithNewUser stamp: 'FedericoSabatini 12/2/2020 18:19:44'!
PASSED!

!testRun: #InternalRestInterfaceTest #test19listPurchasesAfterAddToCartShouldIncludeBookAndTotal stamp: 'FedericoSabatini 12/2/2020 18:19:44'!
PASSED!

!testRun: #InternalRestInterfaceTest #test21CannotListPurchasesWithUnknownUser stamp: 'FedericoSabatini 12/2/2020 18:19:44'!
PASSED!
!InternalRestInterface methodsFor: 'api rest' stamp: 'FedericoSabatini 12/2/2020 18:20:04' prior: 50897532!
checkOutCart: aCartID withCCN: anCCN withCCED: anCCED andCCO: anCCO throught: aMerchantProccesor on: aDate

	| creditCard aSessionCart owner cashier |
	
	"self assertUnkownCartID: aCartID."
	aSessionCart := self cartWith: aCartID.
	owner := aSessionCart user.
	
	(aSessionCart expiringTimestamp < clock now) ifTrue: [ self error: self class cartTimeExpiredErrorDescription ].
	carts at: aCartID put: (SessionCart for: aSessionCart cart expiringAt:  (clock now next: 30*minute) withUser: owner).

	creditCard := CreditCard withNumber: anCCN withOwner: anCCO expiringOn: anCCED.
	cashier := Cashier toCheckout: aSessionCart cart charging: creditCard throught: aMerchantProccesor on: aDate registeringOn: salesBook.


	(usersHistory includes: aSessionCart user) ifFalse: [UserHistory withCatalog: catalog ].
	(usersHistory at: aSessionCart user) addCartSale: aSessionCart cart.

	
	^cashier checkOut.! !
!InternalRestInterface methodsFor: 'api rest' stamp: 'FedericoSabatini 12/2/2020 18:22:16' prior: 50897400!
listPurchasesWithUser: userID withPassword: pass

	self assertAuthenticate: userID withPassword: pass.
	
	(usersHistory includes: userID) ifFalse: [UserHistory withCatalog: catalog ].
	^(usersHistory at: userID ) history.
! !
!InternalRestInterface methodsFor: 'api rest' stamp: 'FedericoSabatini 12/2/2020 18:23:32' prior: 50897790!
checkOutCart: aCartID withCCN: anCCN withCCED: anCCED andCCO: anCCO throught: aMerchantProccesor on: aDate

	| creditCard aSessionCart owner cashier purchases |
	
	"self assertUnkownCartID: aCartID."
	aSessionCart := self cartWith: aCartID.
	owner := aSessionCart user.
	
	(aSessionCart expiringTimestamp < clock now) ifTrue: [ self error: self class cartTimeExpiredErrorDescription ].
	carts at: aCartID put: (SessionCart for: aSessionCart cart expiringAt:  (clock now next: 30*minute) withUser: owner).

	creditCard := CreditCard withNumber: anCCN withOwner: anCCO expiringOn: anCCED.
	cashier := Cashier toCheckout: aSessionCart cart charging: creditCard throught: aMerchantProccesor on: aDate registeringOn: salesBook.


	(usersHistory includes: aSessionCart user) ifFalse: [UserHistory withCatalog: catalog ].
	
	purchases := (usersHistory at: aSessionCart user).
	purchases addAll: aSessionCart cart items.
	
	^cashier checkOut.! !
!InternalRestInterface methodsFor: 'api rest' stamp: 'FedericoSabatini 12/2/2020 18:23:58' prior: 50897833!
checkOutCart: aCartID withCCN: anCCN withCCED: anCCED andCCO: anCCO throught: aMerchantProccesor on: aDate

	| creditCard aSessionCart owner cashier |
	
	"self assertUnkownCartID: aCartID."
	aSessionCart := self cartWith: aCartID.
	owner := aSessionCart user.
	
	(aSessionCart expiringTimestamp < clock now) ifTrue: [ self error: self class cartTimeExpiredErrorDescription ].
	carts at: aCartID put: (SessionCart for: aSessionCart cart expiringAt:  (clock now next: 30*minute) withUser: owner).

	creditCard := CreditCard withNumber: anCCN withOwner: anCCO expiringOn: anCCED.
	cashier := Cashier toCheckout: aSessionCart cart charging: creditCard throught: aMerchantProccesor on: aDate registeringOn: salesBook.


	(usersHistory includes: aSessionCart user) ifFalse: [UserHistory withCatalog: catalog ].
	
	(usersHistory at: aSessionCart user) addAll: aSessionCart cart items.
	
	^cashier checkOut.! !
!Cashier methodsFor: 'checkout - private' stamp: 'FedericoSabatini 12/2/2020 18:33:03' prior: 50891534!
registerSale

	^salesBook add: self createSale! !
!Cashier methodsFor: 'checkout - private' stamp: 'FedericoSabatini 12/2/2020 18:33:07' prior: 50897898!
registerSale

	salesBook add: self createSale! !

!classRemoval: #UserHistory stamp: 'FedericoSabatini 12/2/2020 18:45:20'!
Object subclass: #UserHistory
	instanceVariableNames: 'purchases catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!

!classRemoval: #StoreTestObjectsFactory stamp: 'FedericoSabatini 12/2/2020 18:45:21'!
Object subclass: #StoreTestObjectsFactory
	instanceVariableNames: 'today debitBehavior gregorianDateTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!

!classRemoval: #SessionCart stamp: 'FedericoSabatini 12/2/2020 18:45:21'!
Object subclass: #SessionCart
	instanceVariableNames: 'cart expiringTimestamp userID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!

!classRemoval: #Sale stamp: 'FedericoSabatini 12/2/2020 18:45:22'!
Object subclass: #Sale
	instanceVariableNames: 'total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!

!classRemoval: #InternalRestInterface stamp: 'FedericoSabatini 12/2/2020 18:45:22'!
Object subclass: #InternalRestInterface
	instanceVariableNames: 'authenticator carts currentID catalog salesBook expiringTime clock usersHistory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!

!classRemoval: #CreditCard stamp: 'FedericoSabatini 12/2/2020 18:45:23'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration number owner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!

!classRemoval: #Cashier stamp: 'FedericoSabatini 12/2/2020 18:45:23'!
Object subclass: #Cashier
	instanceVariableNames: 'cart salesBook merchantProcessor creditCard total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!

!classRemoval: #Cart stamp: 'FedericoSabatini 12/2/2020 18:45:24'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!

!classRemoval: #InternalRestInterfaceTest stamp: 'FedericoSabatini 12/2/2020 18:45:24'!
TestCase subclass: #InternalRestInterfaceTest
	instanceVariableNames: 'testObjectsFactory debitBehavior clockBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!

!classRemoval: #CreditCardTest stamp: 'FedericoSabatini 12/2/2020 18:45:25'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!

!classRemoval: #CashierTest stamp: 'FedericoSabatini 12/2/2020 18:45:25'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectsFactory debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!

!classRemoval: #CartTest stamp: 'FedericoSabatini 12/2/2020 18:45:26'!
TestCase subclass: #CartTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!

----End fileIn of D:\facultad\Smalltalk\windows64\TusLibros-Solucion.st----!
!InternalRestInterface methodsFor: 'initialization' stamp: 'FedericoSabatini 12/2/2020 18:50:42' prior: 50898961!
initializeWithAuthenticator: anAuthenticator withCatalog: aCatalog usingClock: aClock 
	
	authenticator := anAuthenticator.
	catalog := aCatalog.
	
	clock := aClock.
	
	carts := Dictionary new.
	currentID := 0.
	salesBook := OrderedCollection new.
	
	usersHistory := Dictionary new.! !
!InternalRestInterface methodsFor: 'initialization' stamp: 'FedericoSabatini 12/2/2020 18:50:58' prior: 50899381!
initializeWithAuthenticator: anAuthenticator withCatalog: aCatalog usingClock: aClock 
	
	authenticator := anAuthenticator.
	catalog := aCatalog.
	
	clock := aClock.
	
	carts := Dictionary new.
	currentID := 0.
	salesBook := OrderedCollection new.
	
	usersHistory := Dictionary new. "user -> Collection('Carts')"! !
!InternalRestInterface methodsFor: 'api rest' stamp: 'FedericoSabatini 12/2/2020 18:54:51' prior: 50898994!
checkOutCart: aCartID withCCN: anCCN withCCED: anCCED andCCO: anCCO throught: aMerchantProccesor on: aDate

	| creditCard aSessionCart owner cashier purchases |
	
	"self assertUnkownCartID: aCartID."
	aSessionCart := self cartWith: aCartID.
	owner := aSessionCart user.
	
	(aSessionCart expiringTimestamp < clock now) ifTrue: [ self error: self class cartTimeExpiredErrorDescription ].
	carts at: aCartID put: (SessionCart for: aSessionCart cart expiringAt:  (clock now next: 30*minute) withUser: owner).

	creditCard := CreditCard withNumber: anCCN withOwner: anCCO expiringOn: anCCED.
	cashier := Cashier toCheckout: aSessionCart cart charging: creditCard throught: aMerchantProccesor on: aDate registeringOn: salesBook.

	purchases := usersHistory at: aSessionCart user ifAbsent: 
		[usersHistory at: aSessionCart user put: OrderedCollection new].
	
	purchases addLast: aSessionCart cart.
	
	^cashier checkOut.! !
!InternalRestInterface methodsFor: 'api rest' stamp: 'FedericoSabatini 12/2/2020 18:55:43' prior: 50899055!
listPurchasesWithUser: userID withPassword: pass

	self assertAuthenticate: userID withPassword: pass.
	
	^(usersHistory at: userID) history.
	
	"
		| purchaseList sum |
	
	purchaseList := OrderedCollection new.
	
	purchases asSet do: 
		[ :cartKey | purchaseList addLast: cartKey, ' -> ', ((catalog at: cartKey) * (purchases occurrencesOf: cartKey)) asString].
		
	sum := 0.
	purchases do: [:purchase | sum := (sum + catalog at: purchase)].
	
	purchaseList addLast: sum asString.
	
	^purchaseList."
! !
!InternalRestInterface methodsFor: 'api rest' stamp: 'FedericoSabatini 12/2/2020 18:56:08' prior: 50899441!
listPurchasesWithUser: userID withPassword: pass

	
	
	self assertAuthenticate: userID withPassword: pass.
	
	^(usersHistory at: userID) history.
	
	"
		| purchaseList sum |
	
	purchaseList := OrderedCollection new.
	
	purchases asSet do: 
		[ :cartKey | purchaseList addLast: cartKey, ' -> ', ((catalog at: cartKey) * (purchases occurrencesOf: cartKey)) asString].
		
	sum := 0.
	purchases do: [:purchase | sum := (sum + catalog at: purchase)].
	
	purchaseList addLast: sum asString.
	
	^purchaseList."
! !
!InternalRestInterface methodsFor: 'api rest' stamp: 'FedericoSabatini 12/2/2020 18:59:27' prior: 50899461!
listPurchasesWithUser: userID withPassword: pass

	| purchases |
	
	self assertAuthenticate: userID withPassword: pass.
	
	purchases := Bag new.
	
	(usersHistory at: userID) do: [:aCart | purchases addAll: aCart items].
	
	^(usersHistory at: userID) history.
	
	"
		| purchaseList sum |
	
	purchaseList := OrderedCollection new.
	
	purchases asSet do: 
		[ :cartKey | purchaseList addLast: cartKey, ' -> ', ((catalog at: cartKey) * (purchases occurrencesOf: cartKey)) asString].
		
	sum := 0.
	purchases do: [:purchase | sum := (sum + catalog at: purchase)].
	
	purchaseList addLast: sum asString.
	
	^purchaseList."
! !
!InternalRestInterface methodsFor: 'api rest' stamp: 'FedericoSabatini 12/2/2020 19:01:28' prior: 50899481!
listPurchasesWithUser: userID withPassword: pass

	| purchases history |
	
	self assertAuthenticate: userID withPassword: pass.
	
	purchases := Bag new.
	history := usersHistory at: userID ifAbsent: [OrderedCollection new].
	
	(usersHistory at: userID) do: [:aCart | purchases addAll: aCart items].
	
	^(usersHistory at: userID) history.
	
	"
		| purchaseList sum |
	
	purchaseList := OrderedCollection new.
	
	purchases asSet do: 
		[ :cartKey | purchaseList addLast: cartKey, ' -> ', ((catalog at: cartKey) * (purchases occurrencesOf: cartKey)) asString].
		
	sum := 0.
	purchases do: [:purchase | sum := (sum + catalog at: purchase)].
	
	purchaseList addLast: sum asString.
	
	^purchaseList."
! !

aBag := Bag new.!

aBag addFirst: 'validBook'.!

aBag add: 'validBook' withOcurrences: 1.!

aBag add: 'validBook' withOccurrences: 1.!

aBag add: 'validBook' withOccurrences: 1.!

aBag add: 'validBook' withOccurrences: 1.!

aBag add: 'validBook' withOccurrences: 1.!

aBag add: 'validBook' withOccurrences: 1.!

aBag!

aBag occurrencesOf: 'validBook'!

purchases := Bag new.!

purchases := OrderedCollection new.!

aBag asSet do: [:aBook | purchases add: aBook withOccurrences: 5].!

purchases!

aBag := Bag new.!

purchases := OrderedCollection new.!

aBag asSet do: [:aBook | purchases addLast: (aBag occurrencesOf: 'validBook')]. !

purchases!
!InternalRestInterface methodsFor: 'api rest' stamp: 'FedericoSabatini 12/2/2020 19:14:23' prior: 50899504!
listPurchasesWithUser: userID withPassword: pass

	| purchases history sum |
	
	self assertAuthenticate: userID withPassword: pass.
	
	purchases := Bag new.
	history := usersHistory at: userID ifAbsent: [OrderedCollection new].
	
	history do: [:aCart | purchases addAll: aCart items].
	
	sum := 0.
	history sum: [:aCart | sum := sum + aCart total ].
	
	purchases at: 'total' put: sum.
	^purchases.! !

!testRun: #InternalRestInterfaceTest #test01CreateCartHaveEmptyList stamp: 'FedericoSabatini 12/2/2020 19:14:28'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CannotCreateCartWithInvalidPassword stamp: 'FedericoSabatini 12/2/2020 19:14:28'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotCreateCartWithUnknownUser stamp: 'FedericoSabatini 12/2/2020 19:14:28'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04CannotAssignSameIDForDifferentCarts stamp: 'FedericoSabatini 12/2/2020 19:14:28'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05AddedItemIsIncludedInCartList stamp: 'FedericoSabatini 12/2/2020 19:14:29'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'FedericoSabatini 12/2/2020 19:14:29'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CannotAddToUnknownCartID stamp: 'FedericoSabatini 12/2/2020 19:14:29'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'FedericoSabatini 12/2/2020 19:14:29'!
ERROR!

!testRun: #InternalRestInterfaceTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'FedericoSabatini 12/2/2020 19:14:29'!
FAILURE!

!testRun: #InternalRestInterfaceTest #test10CannotCheckoutToUnknownCartID stamp: 'FedericoSabatini 12/2/2020 19:14:29'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11CannotListAnUnknownCartID stamp: 'FedericoSabatini 12/2/2020 19:14:29'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAddOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 19:14:29'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13CannotListOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 19:14:29'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14CannotCheckoutOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 19:14:29'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15AddAnItemShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 19:14:29'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16ListCartShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 19:14:29'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17CheckoutShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 19:14:29'!
ERROR!

!testRun: #InternalRestInterfaceTest #test18listPurchasesShouldReturnZeroWithNewUser stamp: 'FedericoSabatini 12/2/2020 19:14:29'!
ERROR!

!testRun: #InternalRestInterfaceTest #test19listPurchasesAfterAddToCartShouldIncludeBookAndTotal stamp: 'FedericoSabatini 12/2/2020 19:14:29'!
ERROR!

!testRun: #InternalRestInterfaceTest #test20listPurchasesAfterAddingMultipleBooksShouldIncludeBooksAndTotal stamp: 'FedericoSabatini 12/2/2020 19:14:29'!
ERROR!

!testRun: #InternalRestInterfaceTest #test21CannotListPurchasesWithUnknownUser stamp: 'FedericoSabatini 12/2/2020 19:14:30'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'FedericoSabatini 12/2/2020 19:14:41'!
ERROR!

!testRun: #InternalRestInterfaceTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'FedericoSabatini 12/2/2020 19:14:52'!
ERROR!

!testRun: #InternalRestInterfaceTest #test01CreateCartHaveEmptyList stamp: 'FedericoSabatini 12/2/2020 19:15:20'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CannotCreateCartWithInvalidPassword stamp: 'FedericoSabatini 12/2/2020 19:15:20'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotCreateCartWithUnknownUser stamp: 'FedericoSabatini 12/2/2020 19:15:21'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04CannotAssignSameIDForDifferentCarts stamp: 'FedericoSabatini 12/2/2020 19:15:21'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05AddedItemIsIncludedInCartList stamp: 'FedericoSabatini 12/2/2020 19:15:21'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'FedericoSabatini 12/2/2020 19:15:21'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CannotAddToUnknownCartID stamp: 'FedericoSabatini 12/2/2020 19:15:21'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'FedericoSabatini 12/2/2020 19:15:21'!
ERROR!

!testRun: #InternalRestInterfaceTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'FedericoSabatini 12/2/2020 19:15:21'!
FAILURE!

!testRun: #InternalRestInterfaceTest #test10CannotCheckoutToUnknownCartID stamp: 'FedericoSabatini 12/2/2020 19:15:21'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11CannotListAnUnknownCartID stamp: 'FedericoSabatini 12/2/2020 19:15:21'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAddOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 19:15:21'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13CannotListOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 19:15:21'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14CannotCheckoutOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 19:15:21'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15AddAnItemShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 19:15:21'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16ListCartShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 19:15:21'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17CheckoutShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 19:15:21'!
ERROR!

!testRun: #InternalRestInterfaceTest #test18listPurchasesShouldReturnZeroWithNewUser stamp: 'FedericoSabatini 12/2/2020 19:15:21'!
ERROR!

!testRun: #InternalRestInterfaceTest #test19listPurchasesAfterAddToCartShouldIncludeBookAndTotal stamp: 'FedericoSabatini 12/2/2020 19:15:21'!
ERROR!

!testRun: #InternalRestInterfaceTest #test20listPurchasesAfterAddingMultipleBooksShouldIncludeBooksAndTotal stamp: 'FedericoSabatini 12/2/2020 19:15:21'!
ERROR!

!testRun: #InternalRestInterfaceTest #test21CannotListPurchasesWithUnknownUser stamp: 'FedericoSabatini 12/2/2020 19:15:21'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'FedericoSabatini 12/2/2020 19:15:23'!
ERROR!

!testRun: #InternalRestInterfaceTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'FedericoSabatini 12/2/2020 19:15:35'!
ERROR!

purchases!

purchases!
!InternalRestInterface methodsFor: 'api rest' stamp: 'FedericoSabatini 12/2/2020 19:18:35' prior: 50899023!
createCartForUser: anID withPassword: aPassword 

	| cart |

	self assertAuthenticate: anID withPassword: aPassword.
	
	currentID := currentID + 1.
	cart := Cart acceptingItemsOf: catalog.
	
	carts at: currentID put: (SessionCart for: cart expiringAt: (clock now next: 30*minute) withUser: anID).

	^currentID.! !

!testRun: #InternalRestInterfaceTest #test01CreateCartHaveEmptyList stamp: 'FedericoSabatini 12/2/2020 19:18:48'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CannotCreateCartWithInvalidPassword stamp: 'FedericoSabatini 12/2/2020 19:18:48'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotCreateCartWithUnknownUser stamp: 'FedericoSabatini 12/2/2020 19:18:48'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04CannotAssignSameIDForDifferentCarts stamp: 'FedericoSabatini 12/2/2020 19:18:48'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05AddedItemIsIncludedInCartList stamp: 'FedericoSabatini 12/2/2020 19:18:48'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'FedericoSabatini 12/2/2020 19:18:48'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CannotAddToUnknownCartID stamp: 'FedericoSabatini 12/2/2020 19:18:48'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'FedericoSabatini 12/2/2020 19:18:48'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'FedericoSabatini 12/2/2020 19:18:49'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10CannotCheckoutToUnknownCartID stamp: 'FedericoSabatini 12/2/2020 19:18:49'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11CannotListAnUnknownCartID stamp: 'FedericoSabatini 12/2/2020 19:18:49'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAddOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 19:18:49'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13CannotListOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 19:18:49'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14CannotCheckoutOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 19:18:49'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15AddAnItemShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 19:18:49'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16ListCartShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 19:18:49'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17CheckoutShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 19:18:49'!
PASSED!

!testRun: #InternalRestInterfaceTest #test18listPurchasesShouldReturnZeroWithNewUser stamp: 'FedericoSabatini 12/2/2020 19:18:49'!
ERROR!

!testRun: #InternalRestInterfaceTest #test19listPurchasesAfterAddToCartShouldIncludeBookAndTotal stamp: 'FedericoSabatini 12/2/2020 19:18:49'!
ERROR!

!testRun: #InternalRestInterfaceTest #test20listPurchasesAfterAddingMultipleBooksShouldIncludeBooksAndTotal stamp: 'FedericoSabatini 12/2/2020 19:18:49'!
ERROR!

!testRun: #InternalRestInterfaceTest #test21CannotListPurchasesWithUnknownUser stamp: 'FedericoSabatini 12/2/2020 19:18:49'!
PASSED!

----SNAPSHOT----(2 December 2020 19:18:59) CuisUniversity-4384.image priorSource: 18102353!

!testRun: #InternalRestInterfaceTest #test18listPurchasesShouldReturnZeroWithNewUser stamp: 'FedericoSabatini 12/2/2020 19:19:15'!
ERROR!
!InternalRestInterface methodsFor: 'api rest' stamp: 'FedericoSabatini 12/2/2020 19:19:57' prior: 50899550!
listPurchasesWithUser: userID withPassword: pass

	| purchases history sum |
	
	self assertAuthenticate: userID withPassword: pass.
	
	purchases := Bag new.
	history := usersHistory at: userID ifAbsent: [OrderedCollection new].
	
	history do: [:aCart | purchases addAll: aCart items].
	
	sum := 0.
	history sum: [:aCart | sum := sum + aCart total ] ifEmpty: [0].
	
	purchases at: 'total' put: sum.
	^purchases.! !

!testRun: #InternalRestInterfaceTest #test01CreateCartHaveEmptyList stamp: 'FedericoSabatini 12/2/2020 19:20:01'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CannotCreateCartWithInvalidPassword stamp: 'FedericoSabatini 12/2/2020 19:20:01'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotCreateCartWithUnknownUser stamp: 'FedericoSabatini 12/2/2020 19:20:02'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04CannotAssignSameIDForDifferentCarts stamp: 'FedericoSabatini 12/2/2020 19:20:02'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05AddedItemIsIncludedInCartList stamp: 'FedericoSabatini 12/2/2020 19:20:02'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'FedericoSabatini 12/2/2020 19:20:02'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CannotAddToUnknownCartID stamp: 'FedericoSabatini 12/2/2020 19:20:02'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'FedericoSabatini 12/2/2020 19:20:02'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'FedericoSabatini 12/2/2020 19:20:02'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10CannotCheckoutToUnknownCartID stamp: 'FedericoSabatini 12/2/2020 19:20:02'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11CannotListAnUnknownCartID stamp: 'FedericoSabatini 12/2/2020 19:20:02'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAddOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 19:20:02'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13CannotListOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 19:20:02'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14CannotCheckoutOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 19:20:02'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15AddAnItemShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 19:20:03'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16ListCartShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 19:20:03'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17CheckoutShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 19:20:03'!
PASSED!

!testRun: #InternalRestInterfaceTest #test18listPurchasesShouldReturnZeroWithNewUser stamp: 'FedericoSabatini 12/2/2020 19:20:03'!
ERROR!

!testRun: #InternalRestInterfaceTest #test19listPurchasesAfterAddToCartShouldIncludeBookAndTotal stamp: 'FedericoSabatini 12/2/2020 19:20:03'!
ERROR!

!testRun: #InternalRestInterfaceTest #test20listPurchasesAfterAddingMultipleBooksShouldIncludeBooksAndTotal stamp: 'FedericoSabatini 12/2/2020 19:20:03'!
ERROR!

!testRun: #InternalRestInterfaceTest #test21CannotListPurchasesWithUnknownUser stamp: 'FedericoSabatini 12/2/2020 19:20:03'!
PASSED!
!InternalRestInterfaceTest methodsFor: 'list purchases' stamp: 'FedericoSabatini 12/2/2020 19:20:16' prior: 50898607!
test18listPurchasesShouldReturnZeroWithNewUser

	| tusLibros expectedPurchases cartID  |

	expectedPurchases := OrderedCollection with: 0.
	tusLibros := testObjectsFactory tusLibros.
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	self assert: expectedPurchases equals: (tusLibros listPurchasesWithUser: 1 withPassword: 'pass').! !

!testRun: #InternalRestInterfaceTest #test18listPurchasesShouldReturnZeroWithNewUser stamp: 'FedericoSabatini 12/2/2020 19:20:17'!
ERROR!

!testRun: #InternalRestInterfaceTest #test18listPurchasesShouldReturnZeroWithNewUser stamp: 'FedericoSabatini 12/2/2020 19:20:22'!
ERROR!

!testRun: #InternalRestInterfaceTest #test18listPurchasesShouldReturnZeroWithNewUser stamp: 'FedericoSabatini 12/2/2020 19:20:37'!
ERROR!

!testRun: #InternalRestInterfaceTest #test01CreateCartHaveEmptyList stamp: 'FedericoSabatini 12/2/2020 19:21:02'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CannotCreateCartWithInvalidPassword stamp: 'FedericoSabatini 12/2/2020 19:21:02'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotCreateCartWithUnknownUser stamp: 'FedericoSabatini 12/2/2020 19:21:02'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04CannotAssignSameIDForDifferentCarts stamp: 'FedericoSabatini 12/2/2020 19:21:02'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05AddedItemIsIncludedInCartList stamp: 'FedericoSabatini 12/2/2020 19:21:02'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'FedericoSabatini 12/2/2020 19:21:02'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CannotAddToUnknownCartID stamp: 'FedericoSabatini 12/2/2020 19:21:03'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'FedericoSabatini 12/2/2020 19:21:03'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'FedericoSabatini 12/2/2020 19:21:03'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10CannotCheckoutToUnknownCartID stamp: 'FedericoSabatini 12/2/2020 19:21:03'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11CannotListAnUnknownCartID stamp: 'FedericoSabatini 12/2/2020 19:21:03'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAddOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 19:21:03'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13CannotListOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 19:21:03'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14CannotCheckoutOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 19:21:03'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15AddAnItemShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 19:21:03'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16ListCartShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 19:21:03'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17CheckoutShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 19:21:03'!
PASSED!

!testRun: #InternalRestInterfaceTest #test18listPurchasesShouldReturnZeroWithNewUser stamp: 'FedericoSabatini 12/2/2020 19:21:03'!
ERROR!

!testRun: #InternalRestInterfaceTest #test19listPurchasesAfterAddToCartShouldIncludeBookAndTotal stamp: 'FedericoSabatini 12/2/2020 19:21:03'!
ERROR!

!testRun: #InternalRestInterfaceTest #test20listPurchasesAfterAddingMultipleBooksShouldIncludeBooksAndTotal stamp: 'FedericoSabatini 12/2/2020 19:21:03'!
ERROR!

!testRun: #InternalRestInterfaceTest #test21CannotListPurchasesWithUnknownUser stamp: 'FedericoSabatini 12/2/2020 19:21:03'!
PASSED!

!testRun: #InternalRestInterfaceTest #test19listPurchasesAfterAddToCartShouldIncludeBookAndTotal stamp: 'FedericoSabatini 12/2/2020 19:21:06'!
ERROR!
!InternalRestInterface methodsFor: 'api rest' stamp: 'FedericoSabatini 12/2/2020 19:28:11' prior: 50899869!
listPurchasesWithUser: userID withPassword: pass

	| purchases cartItems history sum |
	
	self assertAuthenticate: userID withPassword: pass.
	
	purchases := OrderedCollection new.
	cartItems := Bag new.
	history := usersHistory at: userID ifAbsent: [OrderedCollection new].
	
	history do: [:aCart | cartItems addAll: aCart items].
	
	sum := 0.
	history sum: [:aCart | sum := sum + aCart total ] ifEmpty: [0].
	
	cartItems asSet do: [:aBook | purchases add: (aBook -> cartItems occurrencesOf: aBook)].	
	purchases add: ('total' -> sum).
	
	^purchases.! !

!testRun: #InternalRestInterfaceTest #test01CreateCartHaveEmptyList stamp: 'FedericoSabatini 12/2/2020 19:28:16'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CannotCreateCartWithInvalidPassword stamp: 'FedericoSabatini 12/2/2020 19:28:17'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotCreateCartWithUnknownUser stamp: 'FedericoSabatini 12/2/2020 19:28:17'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04CannotAssignSameIDForDifferentCarts stamp: 'FedericoSabatini 12/2/2020 19:28:17'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05AddedItemIsIncludedInCartList stamp: 'FedericoSabatini 12/2/2020 19:28:17'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'FedericoSabatini 12/2/2020 19:28:17'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CannotAddToUnknownCartID stamp: 'FedericoSabatini 12/2/2020 19:28:17'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'FedericoSabatini 12/2/2020 19:28:17'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'FedericoSabatini 12/2/2020 19:28:17'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10CannotCheckoutToUnknownCartID stamp: 'FedericoSabatini 12/2/2020 19:28:17'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11CannotListAnUnknownCartID stamp: 'FedericoSabatini 12/2/2020 19:28:17'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAddOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 19:28:17'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13CannotListOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 19:28:17'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14CannotCheckoutOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 19:28:18'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15AddAnItemShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 19:28:18'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16ListCartShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 19:28:18'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17CheckoutShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 19:28:18'!
PASSED!

!testRun: #InternalRestInterfaceTest #test18listPurchasesShouldReturnZeroWithNewUser stamp: 'FedericoSabatini 12/2/2020 19:28:18'!
FAILURE!

!testRun: #InternalRestInterfaceTest #test19listPurchasesAfterAddToCartShouldIncludeBookAndTotal stamp: 'FedericoSabatini 12/2/2020 19:28:18'!
ERROR!

!testRun: #InternalRestInterfaceTest #test20listPurchasesAfterAddingMultipleBooksShouldIncludeBooksAndTotal stamp: 'FedericoSabatini 12/2/2020 19:28:18'!
ERROR!

!testRun: #InternalRestInterfaceTest #test21CannotListPurchasesWithUnknownUser stamp: 'FedericoSabatini 12/2/2020 19:28:18'!
PASSED!

!testRun: #InternalRestInterfaceTest #test18listPurchasesShouldReturnZeroWithNewUser stamp: 'FedericoSabatini 12/2/2020 19:28:26'!
FAILURE!
!InternalRestInterfaceTest methodsFor: 'list purchases' stamp: 'FedericoSabatini 12/2/2020 19:28:55' prior: 50899974!
test18listPurchasesShouldReturnZeroWithNewUser

	| tusLibros expectedPurchases cartID  |

	expectedPurchases := OrderedCollection with: ('total' -> 0).
	tusLibros := testObjectsFactory tusLibros.
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	self assert: expectedPurchases equals: (tusLibros listPurchasesWithUser: 1 withPassword: 'pass').! !
!InternalRestInterfaceTest methodsFor: 'list purchases' stamp: 'FedericoSabatini 12/2/2020 19:29:05' prior: 50900209!
test18listPurchasesShouldReturnZeroWithNewUser

	| tusLibros expectedPurchases  |

	expectedPurchases := OrderedCollection with: ('total' -> 0).
	tusLibros := testObjectsFactory tusLibros.
	
	self assert: expectedPurchases equals: (tusLibros listPurchasesWithUser: 1 withPassword: 'pass').! !

!testRun: #InternalRestInterfaceTest #test18listPurchasesShouldReturnZeroWithNewUser stamp: 'FedericoSabatini 12/2/2020 19:29:07'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01CreateCartHaveEmptyList stamp: 'FedericoSabatini 12/2/2020 19:29:07'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CannotCreateCartWithInvalidPassword stamp: 'FedericoSabatini 12/2/2020 19:29:07'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotCreateCartWithUnknownUser stamp: 'FedericoSabatini 12/2/2020 19:29:07'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04CannotAssignSameIDForDifferentCarts stamp: 'FedericoSabatini 12/2/2020 19:29:07'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05AddedItemIsIncludedInCartList stamp: 'FedericoSabatini 12/2/2020 19:29:07'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'FedericoSabatini 12/2/2020 19:29:07'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CannotAddToUnknownCartID stamp: 'FedericoSabatini 12/2/2020 19:29:07'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'FedericoSabatini 12/2/2020 19:29:07'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'FedericoSabatini 12/2/2020 19:29:07'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10CannotCheckoutToUnknownCartID stamp: 'FedericoSabatini 12/2/2020 19:29:07'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11CannotListAnUnknownCartID stamp: 'FedericoSabatini 12/2/2020 19:29:07'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAddOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 19:29:07'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13CannotListOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 19:29:08'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14CannotCheckoutOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 19:29:08'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15AddAnItemShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 19:29:08'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16ListCartShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 19:29:08'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17CheckoutShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 19:29:08'!
PASSED!

!testRun: #InternalRestInterfaceTest #test18listPurchasesShouldReturnZeroWithNewUser stamp: 'FedericoSabatini 12/2/2020 19:29:08'!
PASSED!

!testRun: #InternalRestInterfaceTest #test19listPurchasesAfterAddToCartShouldIncludeBookAndTotal stamp: 'FedericoSabatini 12/2/2020 19:29:08'!
ERROR!

!testRun: #InternalRestInterfaceTest #test20listPurchasesAfterAddingMultipleBooksShouldIncludeBooksAndTotal stamp: 'FedericoSabatini 12/2/2020 19:29:08'!
ERROR!

!testRun: #InternalRestInterfaceTest #test21CannotListPurchasesWithUnknownUser stamp: 'FedericoSabatini 12/2/2020 19:29:08'!
PASSED!

!testRun: #InternalRestInterfaceTest #test19listPurchasesAfterAddToCartShouldIncludeBookAndTotal stamp: 'FedericoSabatini 12/2/2020 19:29:10'!
ERROR!
!InternalRestInterface methodsFor: 'api rest' stamp: 'FedericoSabatini 12/2/2020 19:29:35' prior: 50900095!
listPurchasesWithUser: userID withPassword: pass

	| purchases cartItems history sum |
	
	self assertAuthenticate: userID withPassword: pass.
	
	purchases := OrderedCollection new.
	cartItems := Bag new.
	history := usersHistory at: userID ifAbsent: [OrderedCollection new].
	
	history do: [:aCart | cartItems addAll: aCart items].
	
	sum := 0.
	history sum: [:aCart | sum := sum + aCart total ] ifEmpty: [0].
	
	cartItems asSet do: [:aBook | purchases add: (aBook -> (cartItems occurrencesOf: aBook))].	
	purchases add: ('total' -> sum).
	
	^purchases.! !

!testRun: #InternalRestInterfaceTest #test01CreateCartHaveEmptyList stamp: 'FedericoSabatini 12/2/2020 19:29:38'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CannotCreateCartWithInvalidPassword stamp: 'FedericoSabatini 12/2/2020 19:29:38'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotCreateCartWithUnknownUser stamp: 'FedericoSabatini 12/2/2020 19:29:38'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04CannotAssignSameIDForDifferentCarts stamp: 'FedericoSabatini 12/2/2020 19:29:38'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05AddedItemIsIncludedInCartList stamp: 'FedericoSabatini 12/2/2020 19:29:38'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'FedericoSabatini 12/2/2020 19:29:39'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CannotAddToUnknownCartID stamp: 'FedericoSabatini 12/2/2020 19:29:39'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'FedericoSabatini 12/2/2020 19:29:39'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'FedericoSabatini 12/2/2020 19:29:39'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10CannotCheckoutToUnknownCartID stamp: 'FedericoSabatini 12/2/2020 19:29:39'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11CannotListAnUnknownCartID stamp: 'FedericoSabatini 12/2/2020 19:29:39'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAddOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 19:29:39'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13CannotListOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 19:29:39'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14CannotCheckoutOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 19:29:39'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15AddAnItemShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 19:29:39'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16ListCartShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 19:29:39'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17CheckoutShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 19:29:39'!
PASSED!

!testRun: #InternalRestInterfaceTest #test18listPurchasesShouldReturnZeroWithNewUser stamp: 'FedericoSabatini 12/2/2020 19:29:39'!
PASSED!

!testRun: #InternalRestInterfaceTest #test19listPurchasesAfterAddToCartShouldIncludeBookAndTotal stamp: 'FedericoSabatini 12/2/2020 19:29:40'!
FAILURE!

!testRun: #InternalRestInterfaceTest #test20listPurchasesAfterAddingMultipleBooksShouldIncludeBooksAndTotal stamp: 'FedericoSabatini 12/2/2020 19:29:40'!
FAILURE!

!testRun: #InternalRestInterfaceTest #test21CannotListPurchasesWithUnknownUser stamp: 'FedericoSabatini 12/2/2020 19:29:40'!
PASSED!

!testRun: #InternalRestInterfaceTest #test19listPurchasesAfterAddToCartShouldIncludeBookAndTotal stamp: 'FedericoSabatini 12/2/2020 19:29:43'!
FAILURE!
!InternalRestInterfaceTest methodsFor: 'list purchases' stamp: 'FedericoSabatini 12/2/2020 19:30:50' prior: 50898622!
test19listPurchasesAfterAddToCartShouldIncludeBookAndTotal

	| tusLibros expectedPurchases cartID |

	expectedPurchases := OrderedCollection 
		with: (testObjectsFactory itemSellByTheStore -> 1)
		with: 'total' -> testObjectsFactory itemSellByTheStorePrice.
		
	tusLibros := testObjectsFactory tusLibros.
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	self tusLibros: tusLibros checkoutCartID: cartID.
	
	self assert: expectedPurchases equals: (tusLibros listPurchasesWithUser: 1 withPassword: 'pass').! !
!InternalRestInterfaceTest methodsFor: 'list purchases' stamp: 'FedericoSabatini 12/2/2020 19:31:12' prior: 50898646!
test20listPurchasesAfterAddingMultipleBooksShouldIncludeBooksAndTotal

	| tusLibros expectedPurchases cartID |

	expectedPurchases := OrderedCollection 
		with: (testObjectsFactory itemSellByTheStore -> 5)
		with: 'total' -> testObjectsFactory itemSellByTheStorePrice * 5.
		
	tusLibros := testObjectsFactory tusLibros.
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	tusLibros addToCart: cartID aQuantity: 5 of: testObjectsFactory itemSellByTheStore.
	self tusLibros: tusLibros checkoutCartID: cartID.
	
	self assert: expectedPurchases equals: (tusLibros listPurchasesWithUser: 1 withPassword: 'pass').! !

!testRun: #InternalRestInterfaceTest #test01CreateCartHaveEmptyList stamp: 'FedericoSabatini 12/2/2020 19:31:15'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CannotCreateCartWithInvalidPassword stamp: 'FedericoSabatini 12/2/2020 19:31:15'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotCreateCartWithUnknownUser stamp: 'FedericoSabatini 12/2/2020 19:31:15'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04CannotAssignSameIDForDifferentCarts stamp: 'FedericoSabatini 12/2/2020 19:31:15'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05AddedItemIsIncludedInCartList stamp: 'FedericoSabatini 12/2/2020 19:31:15'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'FedericoSabatini 12/2/2020 19:31:15'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CannotAddToUnknownCartID stamp: 'FedericoSabatini 12/2/2020 19:31:15'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'FedericoSabatini 12/2/2020 19:31:15'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'FedericoSabatini 12/2/2020 19:31:15'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10CannotCheckoutToUnknownCartID stamp: 'FedericoSabatini 12/2/2020 19:31:15'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11CannotListAnUnknownCartID stamp: 'FedericoSabatini 12/2/2020 19:31:15'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAddOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 19:31:16'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13CannotListOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 19:31:16'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14CannotCheckoutOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 19:31:16'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15AddAnItemShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 19:31:16'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16ListCartShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 19:31:16'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17CheckoutShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 19:31:16'!
PASSED!

!testRun: #InternalRestInterfaceTest #test18listPurchasesShouldReturnZeroWithNewUser stamp: 'FedericoSabatini 12/2/2020 19:31:16'!
PASSED!

!testRun: #InternalRestInterfaceTest #test19listPurchasesAfterAddToCartShouldIncludeBookAndTotal stamp: 'FedericoSabatini 12/2/2020 19:31:16'!
PASSED!

!testRun: #InternalRestInterfaceTest #test20listPurchasesAfterAddingMultipleBooksShouldIncludeBooksAndTotal stamp: 'FedericoSabatini 12/2/2020 19:31:16'!
ERROR!

!testRun: #InternalRestInterfaceTest #test21CannotListPurchasesWithUnknownUser stamp: 'FedericoSabatini 12/2/2020 19:31:16'!
PASSED!

!testRun: #InternalRestInterfaceTest #test20listPurchasesAfterAddingMultipleBooksShouldIncludeBooksAndTotal stamp: 'FedericoSabatini 12/2/2020 19:31:16'!
ERROR!
!InternalRestInterfaceTest methodsFor: 'list purchases' stamp: 'FedericoSabatini 12/2/2020 19:31:35' prior: 50900473!
test20listPurchasesAfterAddingMultipleBooksShouldIncludeBooksAndTotal

	| tusLibros expectedPurchases cartID |

	expectedPurchases := OrderedCollection 
		with: (testObjectsFactory itemSellByTheStore -> 5)
		with: 'total' -> (testObjectsFactory itemSellByTheStorePrice * 5).
		
	tusLibros := testObjectsFactory tusLibros.
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	tusLibros addToCart: cartID aQuantity: 5 of: testObjectsFactory itemSellByTheStore.
	self tusLibros: tusLibros checkoutCartID: cartID.
	
	self assert: expectedPurchases equals: (tusLibros listPurchasesWithUser: 1 withPassword: 'pass').! !

!testRun: #InternalRestInterfaceTest #test20listPurchasesAfterAddingMultipleBooksShouldIncludeBooksAndTotal stamp: 'FedericoSabatini 12/2/2020 19:31:36'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01CreateCartHaveEmptyList stamp: 'FedericoSabatini 12/2/2020 19:31:36'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CannotCreateCartWithInvalidPassword stamp: 'FedericoSabatini 12/2/2020 19:31:36'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotCreateCartWithUnknownUser stamp: 'FedericoSabatini 12/2/2020 19:31:36'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04CannotAssignSameIDForDifferentCarts stamp: 'FedericoSabatini 12/2/2020 19:31:36'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05AddedItemIsIncludedInCartList stamp: 'FedericoSabatini 12/2/2020 19:31:36'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'FedericoSabatini 12/2/2020 19:31:36'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CannotAddToUnknownCartID stamp: 'FedericoSabatini 12/2/2020 19:31:36'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'FedericoSabatini 12/2/2020 19:31:36'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'FedericoSabatini 12/2/2020 19:31:36'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10CannotCheckoutToUnknownCartID stamp: 'FedericoSabatini 12/2/2020 19:31:36'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11CannotListAnUnknownCartID stamp: 'FedericoSabatini 12/2/2020 19:31:37'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAddOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 19:31:37'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13CannotListOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 19:31:37'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14CannotCheckoutOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 19:31:37'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15AddAnItemShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 19:31:37'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16ListCartShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 19:31:37'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17CheckoutShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 19:31:37'!
PASSED!

!testRun: #InternalRestInterfaceTest #test18listPurchasesShouldReturnZeroWithNewUser stamp: 'FedericoSabatini 12/2/2020 19:31:37'!
PASSED!

!testRun: #InternalRestInterfaceTest #test19listPurchasesAfterAddToCartShouldIncludeBookAndTotal stamp: 'FedericoSabatini 12/2/2020 19:31:37'!
PASSED!

!testRun: #InternalRestInterfaceTest #test20listPurchasesAfterAddingMultipleBooksShouldIncludeBooksAndTotal stamp: 'FedericoSabatini 12/2/2020 19:31:37'!
PASSED!

!testRun: #InternalRestInterfaceTest #test21CannotListPurchasesWithUnknownUser stamp: 'FedericoSabatini 12/2/2020 19:31:37'!
PASSED!
!InternalRestInterfaceTest methodsFor: 'checkout' stamp: 'FedericoSabatini 12/2/2020 19:38:11' prior: 50898466!
test08CheckoutShouldBeRegisterInSalesBook

	| tusLibros cartID |

	tusLibros := testObjectsFactory tusLibros.
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	tusLibros addToCart: cartID aQuantity: 10 of: testObjectsFactory itemSellByTheStore.
	
	self assert: 1 equals: (self tusLibros: tusLibros checkoutCartID: cartID).
	self assert: 100 equals: (tusLibros salesBook first total).
	self assert: 1 equals: (tusLibros salesBook size).! !

!testRun: #InternalRestInterfaceTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'FedericoSabatini 12/2/2020 19:38:13'!
FAILURE!
!InternalRestInterface methodsFor: 'api rest' stamp: 'FedericoSabatini 12/2/2020 19:39:11' prior: 50899408!
checkOutCart: aCartID withCCN: anCCN withCCED: anCCED andCCO: anCCO throught: aMerchantProccesor on: aDate

	| creditCard aSessionCart owner cashier purchases |
	
	"self assertUnkownCartID: aCartID."
	aSessionCart := self cartWith: aCartID.
	owner := aSessionCart user.
	
	(aSessionCart expiringTimestamp < clock now) ifTrue: [ self error: self class cartTimeExpiredErrorDescription ].
	carts at: aCartID put: (SessionCart for: aSessionCart cart expiringAt:  (clock now next: 30*minute) withUser: owner).

	creditCard := CreditCard withNumber: anCCN withOwner: anCCO expiringOn: anCCED.
	cashier := Cashier toCheckout: aSessionCart cart charging: creditCard throught: aMerchantProccesor on: aDate registeringOn: salesBook.

	purchases := usersHistory at: aSessionCart user ifAbsent: 
		[usersHistory at: aSessionCart user put: OrderedCollection new].
	
	purchases addLast: aSessionCart cart.
	
	^1.! !
!InternalRestInterface methodsFor: 'api rest' stamp: 'FedericoSabatini 12/2/2020 19:40:17' prior: 50900729!
checkOutCart: aCartID withCCN: anCCN withCCED: anCCED andCCO: anCCO throught: aMerchantProccesor on: aDate

	| creditCard aSessionCart owner purchases |
	
	"self assertUnkownCartID: aCartID."
	aSessionCart := self cartWith: aCartID.
	owner := aSessionCart user.
	
	(aSessionCart expiringTimestamp < clock now) ifTrue: [ self error: self class cartTimeExpiredErrorDescription ].
	carts at: aCartID put: (SessionCart for: aSessionCart cart expiringAt:  (clock now next: 30*minute) withUser: owner).

	creditCard := CreditCard withNumber: anCCN withOwner: anCCO expiringOn: anCCED.
	Cashier toCheckout: aSessionCart cart charging: creditCard throught: aMerchantProccesor on: aDate registeringOn: salesBook.

	purchases := usersHistory at: aSessionCart user ifAbsent: 
		[usersHistory at: aSessionCart user put: OrderedCollection new].
	
	purchases addLast: aSessionCart cart.
	
	^1.! !

!testRun: #InternalRestInterfaceTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'FedericoSabatini 12/2/2020 19:40:19'!
ERROR!
!InternalRestInterfaceTest methodsFor: 'checkout' stamp: 'FedericoSabatini 12/2/2020 19:40:59' prior: 50900707!
test08CheckoutShouldBeRegisterInSalesBook

	| tusLibros cartID |

	tusLibros := testObjectsFactory tusLibros.
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	tusLibros addToCart: cartID aQuantity: 10 of: testObjectsFactory itemSellByTheStore.
	
	self assert: 100 equals: (self tusLibros: tusLibros checkoutCartID: cartID).
	self assert: 100 equals: (tusLibros salesBook first total).
	self assert: 1 equals: (tusLibros salesBook size).! !
!InternalRestInterface methodsFor: 'initialization' stamp: 'FedericoSabatini 12/2/2020 19:41:07' prior: 50899394!
initializeWithAuthenticator: anAuthenticator withCatalog: aCatalog usingClock: aClock 
	
	authenticator := anAuthenticator.
	catalog := aCatalog.
	
	clock := aClock.
	
	carts := Dictionary new.
	currentID := 0.
	salesBook := OrderedCollection new.
	
	usersHistory := Dictionary new. ! !
!InternalRestInterface methodsFor: 'api rest' stamp: 'FedericoSabatini 12/2/2020 19:41:35' prior: 50900761!
checkOutCart: aCartID withCCN: anCCN withCCED: anCCED andCCO: anCCO throught: aMerchantProccesor on: aDate

	| creditCard aSessionCart owner purchases cashier|
	
	"self assertUnkownCartID: aCartID."
	aSessionCart := self cartWith: aCartID.
	owner := aSessionCart user.
	
	(aSessionCart expiringTimestamp < clock now) ifTrue: [ self error: self class cartTimeExpiredErrorDescription ].
	carts at: aCartID put: (SessionCart for: aSessionCart cart expiringAt:  (clock now next: 30*minute) withUser: owner).

	creditCard := CreditCard withNumber: anCCN withOwner: anCCO expiringOn: anCCED.
	cashier := Cashier toCheckout: aSessionCart cart charging: creditCard throught: aMerchantProccesor on: aDate registeringOn: salesBook.

	purchases := usersHistory at: aSessionCart user ifAbsent: 
		[usersHistory at: aSessionCart user put: OrderedCollection new].
	
	purchases addLast: aSessionCart cart.
	
	^cashier checkOut.! !

!testRun: #InternalRestInterfaceTest #test01CreateCartHaveEmptyList stamp: 'FedericoSabatini 12/2/2020 19:41:39'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CannotCreateCartWithInvalidPassword stamp: 'FedericoSabatini 12/2/2020 19:41:39'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotCreateCartWithUnknownUser stamp: 'FedericoSabatini 12/2/2020 19:41:39'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04CannotAssignSameIDForDifferentCarts stamp: 'FedericoSabatini 12/2/2020 19:41:39'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05AddedItemIsIncludedInCartList stamp: 'FedericoSabatini 12/2/2020 19:41:39'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'FedericoSabatini 12/2/2020 19:41:39'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CannotAddToUnknownCartID stamp: 'FedericoSabatini 12/2/2020 19:41:39'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'FedericoSabatini 12/2/2020 19:41:39'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'FedericoSabatini 12/2/2020 19:41:39'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10CannotCheckoutToUnknownCartID stamp: 'FedericoSabatini 12/2/2020 19:41:39'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11CannotListAnUnknownCartID stamp: 'FedericoSabatini 12/2/2020 19:41:39'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAddOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 19:41:39'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13CannotListOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 19:41:39'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14CannotCheckoutOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 19:41:39'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15AddAnItemShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 19:41:39'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16ListCartShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 19:41:39'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17CheckoutShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 19:41:40'!
PASSED!

!testRun: #InternalRestInterfaceTest #test18listPurchasesShouldReturnZeroWithNewUser stamp: 'FedericoSabatini 12/2/2020 19:41:40'!
PASSED!

!testRun: #InternalRestInterfaceTest #test19listPurchasesAfterAddToCartShouldIncludeBookAndTotal stamp: 'FedericoSabatini 12/2/2020 19:41:40'!
PASSED!

!testRun: #InternalRestInterfaceTest #test20listPurchasesAfterAddingMultipleBooksShouldIncludeBooksAndTotal stamp: 'FedericoSabatini 12/2/2020 19:41:40'!
PASSED!

!testRun: #InternalRestInterfaceTest #test21CannotListPurchasesWithUnknownUser stamp: 'FedericoSabatini 12/2/2020 19:41:40'!
PASSED!
!InternalRestInterface methodsFor: 'api rest' stamp: 'FedericoSabatini 12/2/2020 19:42:52' prior: 50900335!
listPurchasesWithUser: userID withPassword: pass

	| purchases cartItems history sum |
	
	self assertAuthenticate: userID withPassword: pass.
	
	purchases := OrderedCollection new.
	cartItems := Bag new.
	
	history := usersHistory at: userID ifAbsent: [OrderedCollection new].

	history do: [:aCart | cartItems addAll: aCart items].
		
	sum := 0.
	history sum: [:aCart | sum := sum + aCart total ] ifEmpty: [0].
	
	cartItems asSet do: [:aBook | purchases add: (aBook -> (cartItems occurrencesOf: aBook))].	
	purchases add: ('total' -> sum).
	
	^purchases.! !
!InternalRestInterface methodsFor: 'api rest' stamp: 'FedericoSabatini 12/2/2020 19:44:11' prior: 50900949!
listPurchasesWithUser: userID withPassword: pass

	| purchases items history sum |
	
	self assertAuthenticate: userID withPassword: pass.
	
	purchases := OrderedCollection new.
	items := Bag new.
	
	history := usersHistory at: userID ifAbsent: [OrderedCollection new].

	history do: [:aCart | items addAll: aCart items].
		
	sum := 0.
	history sum: [:aCart | sum := sum + aCart total ] ifEmpty: [0].
	
	items asSet do: [:aBook | purchases add: (aBook -> (items occurrencesOf: aBook))].	
	purchases add: ('total' -> sum).
	
	^purchases.! !
!InternalRestInterface methodsFor: 'api rest' stamp: 'FedericoSabatini 12/2/2020 19:47:03' prior: 50900970!
listPurchasesWithUser: userID withPassword: pass

	| purchases items history sum |
	
	self assertAuthenticate: userID withPassword: pass.
	
	purchases := OrderedCollection new.
	items := Bag new.
	
	history := usersHistory at: userID ifAbsent: [OrderedCollection new].

	history do: [:aCart | items addAll: aCart items].
		
	sum := 0.
	history sum: [:aCart | sum := sum + aCart total ] ifEmpty: [0].
	
	items asSet do: [:aBook | purchases add: (aBook -> (items occurrencesOf: aBook))].	
	
	purchases add: ('total' -> sum).
	
	^purchases.! !

!classRemoval: #UserHistory stamp: 'FedericoSabatini 12/2/2020 19:47:07'!
Object subclass: #UserHistory
	instanceVariableNames: 'purchases catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!
!InternalRestInterface methodsFor: 'api rest' stamp: 'FedericoSabatini 12/2/2020 19:47:21' prior: 50900991!
listPurchasesWithUser: userID withPassword: pass

	| purchases items history sum |
	
	self assertAuthenticate: userID withPassword: pass.
	
	purchases := OrderedCollection new.
	items := Bag new.
	
	history := usersHistory at: userID ifAbsent: [OrderedCollection new].
	history do: [:aCart | items addAll: aCart items].
	sum := 0.
	history sum: [:aCart | sum := sum + aCart total ] ifEmpty: [0].
	
	items asSet do: [:aBook | purchases add: (aBook -> (items occurrencesOf: aBook))].	
	
	purchases add: ('total' -> sum).
	
	^purchases.! !
!InternalRestInterface methodsFor: 'api rest' stamp: 'FedericoSabatini 12/2/2020 19:50:26' prior: 50901019!
listPurchasesWithUser: userID withPassword: pass

	| purchases items history sum |
	
	self assertAuthenticate: userID withPassword: pass.
	
	purchases := OrderedCollection new.
	items := Bag new.
	
	history := usersHistory at: userID ifAbsent: [OrderedCollection new].
	history do: [:aCart | items addAll: aCart items].
	
	sum := 0.
	history sum: [:aCart | sum := sum + aCart total ] ifEmpty: [0].
	
	items asSet do: [:aBook | purchases add: (aBook -> (items occurrencesOf: aBook))].	
	
	purchases add: ('total' -> sum).
	
	^purchases.! !

----SNAPSHOT----(2 December 2020 19:51:36) CuisUniversity-4384.image priorSource: 18182713!

!testRun: #InternalRestInterfaceTest #test01CreateCartHaveEmptyList stamp: 'FedericoSabatini 12/2/2020 19:51:47'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CannotCreateCartWithInvalidPassword stamp: 'FedericoSabatini 12/2/2020 19:51:47'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotCreateCartWithUnknownUser stamp: 'FedericoSabatini 12/2/2020 19:51:47'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04CannotAssignSameIDForDifferentCarts stamp: 'FedericoSabatini 12/2/2020 19:51:47'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05AddedItemIsIncludedInCartList stamp: 'FedericoSabatini 12/2/2020 19:51:47'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'FedericoSabatini 12/2/2020 19:51:47'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CannotAddToUnknownCartID stamp: 'FedericoSabatini 12/2/2020 19:51:47'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'FedericoSabatini 12/2/2020 19:51:47'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'FedericoSabatini 12/2/2020 19:51:48'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10CannotCheckoutToUnknownCartID stamp: 'FedericoSabatini 12/2/2020 19:51:48'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11CannotListAnUnknownCartID stamp: 'FedericoSabatini 12/2/2020 19:51:48'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAddOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 19:51:48'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13CannotListOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 19:51:48'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14CannotCheckoutOnExpiredCart stamp: 'FedericoSabatini 12/2/2020 19:51:48'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15AddAnItemShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 19:51:48'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16ListCartShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 19:51:48'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17CheckoutShouldRestartExpirationTime stamp: 'FedericoSabatini 12/2/2020 19:51:48'!
PASSED!

!testRun: #InternalRestInterfaceTest #test18listPurchasesShouldReturnZeroWithNewUser stamp: 'FedericoSabatini 12/2/2020 19:51:48'!
PASSED!

!testRun: #InternalRestInterfaceTest #test19listPurchasesAfterAddToCartShouldIncludeBookAndTotal stamp: 'FedericoSabatini 12/2/2020 19:51:48'!
PASSED!

!testRun: #InternalRestInterfaceTest #test20listPurchasesAfterAddingMultipleBooksShouldIncludeBooksAndTotal stamp: 'FedericoSabatini 12/2/2020 19:51:48'!
PASSED!

!testRun: #InternalRestInterfaceTest #test21CannotListPurchasesWithUnknownUser stamp: 'FedericoSabatini 12/2/2020 19:51:49'!
PASSED!

----SNAPSHOT----(2 December 2020 19:52:10) CuisUniversity-4384.image priorSource: 18221082!

----STARTUP---- (2 December 2020 19:56:47) as /mnt/sdb5/Ingenieria1/linux64/CuisUniversity-4384.image!


!classRemoval: #UserHistory stamp: 'DS 12/2/2020 19:57:00'!
Object subclass: #UserHistory
	instanceVariableNames: 'purchases catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!

!classRemoval: #StoreTestObjectsFactory stamp: 'DS 12/2/2020 19:57:00'!
Object subclass: #StoreTestObjectsFactory
	instanceVariableNames: 'today debitBehavior gregorianDateTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!

!classRemoval: #SessionCart stamp: 'DS 12/2/2020 19:57:01'!
Object subclass: #SessionCart
	instanceVariableNames: 'cart expiringTimestamp userID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!

!classRemoval: #Sale stamp: 'DS 12/2/2020 19:57:01'!
Object subclass: #Sale
	instanceVariableNames: 'total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!

!classRemoval: #InternalRestInterface stamp: 'DS 12/2/2020 19:57:01'!
Object subclass: #InternalRestInterface
	instanceVariableNames: 'authenticator carts currentID catalog salesBook expiringTime clock usersHistory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!

!classRemoval: #CreditCard stamp: 'DS 12/2/2020 19:57:02'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration number owner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!

!classRemoval: #Cashier stamp: 'DS 12/2/2020 19:57:02'!
Object subclass: #Cashier
	instanceVariableNames: 'cart salesBook merchantProcessor creditCard total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!

!classRemoval: #Cart stamp: 'DS 12/2/2020 19:57:02'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!

!classRemoval: #InternalRestInterfaceTest stamp: 'DS 12/2/2020 19:57:03'!
TestCase subclass: #InternalRestInterfaceTest
	instanceVariableNames: 'testObjectsFactory debitBehavior clockBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!

!classRemoval: #CreditCardTest stamp: 'DS 12/2/2020 19:57:03'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!

!classRemoval: #CashierTest stamp: 'DS 12/2/2020 19:57:04'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectsFactory debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!

!classRemoval: #CartTest stamp: 'DS 12/2/2020 19:57:04'!
TestCase subclass: #CartTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!

----End fileIn of /mnt/sdb5/Ingenieria1/linux64/TusLibros-Solucion.st----!
!InternalRestInterface methodsFor: 'api rest' stamp: 'DS 12/2/2020 19:58:27' prior: 50877003!
checkOutCart: aCartID withCCN: anCCN withCCED: anCCED andCCO: anCCO throught: aMerchantProccesor on: aDate

	| creditCard aSessionCart owner purchases cashier|
	
	"self assertUnkownCartID: aCartID."
	aSessionCart := self cartWith: aCartID.
	owner := aSessionCart user.
	
	(aSessionCart expiringTimestamp < clock now) ifTrue: [ self error: self class cartTimeExpiredErrorDescription ].
	carts at: aCartID put: (SessionCart for: aSessionCart cart expiringAt:  (clock now next: 30*minute) withUser: owner).

	creditCard := CreditCard withNumber: anCCN withOwner: anCCO expiringOn: anCCED.
	cashier := Cashier toCheckout: aSessionCart cart charging: creditCard throught: aMerchantProccesor on: aDate registeringOn: salesBook.
	cashier checkOut.

	purchases := usersHistory at: aSessionCart user ifAbsent: 
		[usersHistory at: aSessionCart user put: OrderedCollection new].
	
	purchases addLast: aSessionCart cart.
	
	^1.! !
!InternalRestInterfaceTest methodsFor: 'checkout' stamp: 'DS 12/2/2020 19:58:59' prior: 50876485!
test08CheckoutShouldBeRegisterInSalesBook

	| tusLibros cartID |

	tusLibros := testObjectsFactory tusLibros.
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	tusLibros addToCart: cartID aQuantity: 10 of: testObjectsFactory itemSellByTheStore.
	self tusLibros: tusLibros checkoutCartID: cartID.

	"self assert: 100 equals: (self tusLibros: tusLibros checkoutCartID: cartID)."
	self assert: 100 equals: (tusLibros salesBook first total).
	self assert: 1 equals: (tusLibros salesBook size).! !
!InternalRestInterfaceTest methodsFor: 'checkout' stamp: 'DS 12/2/2020 19:59:04' prior: 50877377!
test08CheckoutShouldBeRegisterInSalesBook

	| tusLibros cartID |

	tusLibros := testObjectsFactory tusLibros.
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	tusLibros addToCart: cartID aQuantity: 10 of: testObjectsFactory itemSellByTheStore.
	self tusLibros: tusLibros checkoutCartID: cartID.

	self assert: 100 equals: (tusLibros salesBook first total).
	self assert: 1 equals: (tusLibros salesBook size).! !
!InternalRestInterfaceTest methodsFor: 'checkout' stamp: 'DS 12/2/2020 19:59:07' prior: 50877396!
test08CheckoutShouldBeRegisterInSalesBook

	| tusLibros cartID |

	tusLibros := testObjectsFactory tusLibros.
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	tusLibros addToCart: cartID aQuantity: 10 of: testObjectsFactory itemSellByTheStore.
	self tusLibros: tusLibros checkoutCartID: cartID.

	self assert: 100 equals: (tusLibros salesBook first total).
	self assert: 1 equals: (tusLibros salesBook size).! !

!testRun: #InternalRestInterfaceTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'DS 12/2/2020 19:59:17'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'DS 12/2/2020 19:59:17'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 12/2/2020 19:59:17'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11CannotListAnUnknownCartID stamp: 'DS 12/2/2020 19:59:17'!
PASSED!
!InternalRestInterfaceTest methodsFor: 'checkout' stamp: 'DS 12/2/2020 20:00:06'!
test12

	| tusLibros cartID |

	tusLibros := testObjectsFactory tusLibros.
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	tusLibros addToCart: cartID aQuantity: 10 of: testObjectsFactory itemSellByTheStore.
	self tusLibros: tusLibros checkoutCartID: cartID.

	self assert: 100 equals: (tusLibros salesBook first total).
	self assert: 1 equals: (tusLibros salesBook size).! !
!InternalRestInterfaceTest methodsFor: 'checkout' stamp: 'DS 12/2/2020 20:00:10' prior: 50877444!
test12

	| tusLibros firstCartID |

	tusLibros := testObjectsFactory tusLibros.
	firstCartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	tusLibros addToCart: firstCartID aQuantity: 10 of: testObjectsFactory itemSellByTheStore.
	self tusLibros: tusLibros checkoutCartID: firstCartID.

	self assert: 100 equals: (tusLibros salesBook first total).
	self assert: 1 equals: (tusLibros salesBook size).! !
!InternalRestInterfaceTest methodsFor: 'checkout' stamp: 'DS 12/2/2020 20:01:24' prior: 50877460!
test12

	| tusLibros firstCartID secondCartID firstTransactionID secondTransactionID |

	tusLibros := testObjectsFactory tusLibros.
	firstCartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	secondCartID := tusLibros createCartForUser: 2 withPassword: 'pass'.
	
	tusLibros addToCart: firstCartID aQuantity: 10 of: testObjectsFactory itemSellByTheStore.
	tusLibros addToCart: secondCartID aQuantity: 10 of: testObjectsFactory itemSellByTheStore.
	
	firstTransactionID := self tusLibros: tusLibros checkoutCartID: firstCartID.
	secondTransactionID := self tusLibros: tusLibros checkoutCartID: secondCartID.

	self deny: firstTransactionID = secondTransactionID.! !

!testRun: #InternalRestInterfaceTest #test12 stamp: 'DS 12/2/2020 20:01:25'!
FAILURE!
!InternalRestInterface methodsFor: 'api rest' stamp: 'DS 12/2/2020 20:01:50' prior: 50877345!
checkOutCart: aCartID withCCN: anCCN withCCED: anCCED andCCO: anCCO throught: aMerchantProccesor on: aDate

	| creditCard aSessionCart owner purchases cashier|
	
	"self assertUnkownCartID: aCartID."
	aSessionCart := self cartWith: aCartID.
	owner := aSessionCart user.
	
	(aSessionCart expiringTimestamp < clock now) ifTrue: [ self error: self class cartTimeExpiredErrorDescription ].
	carts at: aCartID put: (SessionCart for: aSessionCart cart expiringAt:  (clock now next: 30*minute) withUser: owner).

	creditCard := CreditCard withNumber: anCCN withOwner: anCCO expiringOn: anCCED.
	cashier := Cashier toCheckout: aSessionCart cart charging: creditCard throught: aMerchantProccesor on: aDate registeringOn: salesBook.
	cashier checkOut.

	purchases := usersHistory at: aSessionCart user ifAbsent: 
		[usersHistory at: aSessionCart user put: OrderedCollection new].
	
	purchases addLast: aSessionCart cart.
	
	^aCartID.! !

!testRun: #InternalRestInterfaceTest #test12 stamp: 'DS 12/2/2020 20:01:51'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01CreateCartHaveEmptyList stamp: 'DS 12/2/2020 20:01:51'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 12/2/2020 20:01:51'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 12/2/2020 20:01:51'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 12/2/2020 20:01:51'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05AddedItemIsIncludedInCartList stamp: 'DS 12/2/2020 20:01:51'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 12/2/2020 20:01:51'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CannotAddToUnknownCartID stamp: 'DS 12/2/2020 20:01:51'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'DS 12/2/2020 20:01:51'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'DS 12/2/2020 20:01:51'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 12/2/2020 20:01:51'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11CannotListAnUnknownCartID stamp: 'DS 12/2/2020 20:01:51'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12 stamp: 'DS 12/2/2020 20:01:51'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAddOnExpiredCart stamp: 'DS 12/2/2020 20:01:51'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13CannotListOnExpiredCart stamp: 'DS 12/2/2020 20:01:51'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14CannotCheckoutOnExpiredCart stamp: 'DS 12/2/2020 20:01:51'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15AddAnItemShouldRestartExpirationTime stamp: 'DS 12/2/2020 20:01:51'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16ListCartShouldRestartExpirationTime stamp: 'DS 12/2/2020 20:01:51'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17CheckoutShouldRestartExpirationTime stamp: 'DS 12/2/2020 20:01:51'!
PASSED!

!testRun: #InternalRestInterfaceTest #test18listPurchasesShouldReturnZeroWithNewUser stamp: 'DS 12/2/2020 20:01:51'!
PASSED!

!testRun: #InternalRestInterfaceTest #test19listPurchasesAfterAddToCartShouldIncludeBookAndTotal stamp: 'DS 12/2/2020 20:01:51'!
PASSED!

!testRun: #InternalRestInterfaceTest #test20listPurchasesAfterAddingMultipleBooksShouldIncludeBooksAndTotal stamp: 'DS 12/2/2020 20:01:51'!
PASSED!

!testRun: #InternalRestInterfaceTest #test21CannotListPurchasesWithUnknownUser stamp: 'DS 12/2/2020 20:01:51'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12 stamp: 'DS 12/2/2020 20:01:54'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01CreateCartHaveEmptyList stamp: 'DS 12/2/2020 20:01:54'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 12/2/2020 20:01:54'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 12/2/2020 20:01:54'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 12/2/2020 20:01:54'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05AddedItemIsIncludedInCartList stamp: 'DS 12/2/2020 20:01:54'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 12/2/2020 20:01:54'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CannotAddToUnknownCartID stamp: 'DS 12/2/2020 20:01:54'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'DS 12/2/2020 20:01:54'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'DS 12/2/2020 20:01:54'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 12/2/2020 20:01:54'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11CannotListAnUnknownCartID stamp: 'DS 12/2/2020 20:01:54'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12 stamp: 'DS 12/2/2020 20:01:54'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAddOnExpiredCart stamp: 'DS 12/2/2020 20:01:54'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13CannotListOnExpiredCart stamp: 'DS 12/2/2020 20:01:54'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14CannotCheckoutOnExpiredCart stamp: 'DS 12/2/2020 20:01:54'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15AddAnItemShouldRestartExpirationTime stamp: 'DS 12/2/2020 20:01:54'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16ListCartShouldRestartExpirationTime stamp: 'DS 12/2/2020 20:01:54'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17CheckoutShouldRestartExpirationTime stamp: 'DS 12/2/2020 20:01:54'!
PASSED!

!testRun: #InternalRestInterfaceTest #test18listPurchasesShouldReturnZeroWithNewUser stamp: 'DS 12/2/2020 20:01:54'!
PASSED!

!testRun: #InternalRestInterfaceTest #test19listPurchasesAfterAddToCartShouldIncludeBookAndTotal stamp: 'DS 12/2/2020 20:01:54'!
PASSED!

!testRun: #InternalRestInterfaceTest #test20listPurchasesAfterAddingMultipleBooksShouldIncludeBooksAndTotal stamp: 'DS 12/2/2020 20:01:54'!
PASSED!

!testRun: #InternalRestInterfaceTest #test21CannotListPurchasesWithUnknownUser stamp: 'DS 12/2/2020 20:01:54'!
PASSED!
!InternalRestInterfaceTest methodsFor: 'checkout' stamp: 'DS 12/2/2020 20:02:30'!
test12CannotAssignSameIDForDifferentsCheckoutTransactions

	| tusLibros firstCartID secondCartID firstTransactionID secondTransactionID |

	tusLibros := testObjectsFactory tusLibros.
	firstCartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	secondCartID := tusLibros createCartForUser: 2 withPassword: 'pass'.
	
	tusLibros addToCart: firstCartID aQuantity: 10 of: testObjectsFactory itemSellByTheStore.
	tusLibros addToCart: secondCartID aQuantity: 10 of: testObjectsFactory itemSellByTheStore.
	
	firstTransactionID := self tusLibros: tusLibros checkoutCartID: firstCartID.
	secondTransactionID := self tusLibros: tusLibros checkoutCartID: secondCartID.

	self deny: firstTransactionID = secondTransactionID.! !

!methodRemoval: InternalRestInterfaceTest #test12 stamp: 'DS 12/2/2020 20:02:30'!
test12

	| tusLibros firstCartID secondCartID firstTransactionID secondTransactionID |

	tusLibros := testObjectsFactory tusLibros.
	firstCartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	secondCartID := tusLibros createCartForUser: 2 withPassword: 'pass'.
	
	tusLibros addToCart: firstCartID aQuantity: 10 of: testObjectsFactory itemSellByTheStore.
	tusLibros addToCart: secondCartID aQuantity: 10 of: testObjectsFactory itemSellByTheStore.
	
	firstTransactionID := self tusLibros: tusLibros checkoutCartID: firstCartID.
	secondTransactionID := self tusLibros: tusLibros checkoutCartID: secondCartID.

	self deny: firstTransactionID = secondTransactionID.!
!InternalRestInterfaceTest methodsFor: 'checkout' stamp: 'DS 12/2/2020 20:02:45'!
test12CannotAssignSameIDForDifferentCheckoutTransactions

	| tusLibros firstCartID secondCartID firstTransactionID secondTransactionID |

	tusLibros := testObjectsFactory tusLibros.
	firstCartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	secondCartID := tusLibros createCartForUser: 2 withPassword: 'pass'.
	
	tusLibros addToCart: firstCartID aQuantity: 10 of: testObjectsFactory itemSellByTheStore.
	tusLibros addToCart: secondCartID aQuantity: 10 of: testObjectsFactory itemSellByTheStore.
	
	firstTransactionID := self tusLibros: tusLibros checkoutCartID: firstCartID.
	secondTransactionID := self tusLibros: tusLibros checkoutCartID: secondCartID.

	self deny: firstTransactionID = secondTransactionID.! !

!methodRemoval: InternalRestInterfaceTest #test12CannotAssignSameIDForDifferentsCheckoutTransactions stamp: 'DS 12/2/2020 20:02:45'!
test12CannotAssignSameIDForDifferentsCheckoutTransactions

	| tusLibros firstCartID secondCartID firstTransactionID secondTransactionID |

	tusLibros := testObjectsFactory tusLibros.
	firstCartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	secondCartID := tusLibros createCartForUser: 2 withPassword: 'pass'.
	
	tusLibros addToCart: firstCartID aQuantity: 10 of: testObjectsFactory itemSellByTheStore.
	tusLibros addToCart: secondCartID aQuantity: 10 of: testObjectsFactory itemSellByTheStore.
	
	firstTransactionID := self tusLibros: tusLibros checkoutCartID: firstCartID.
	secondTransactionID := self tusLibros: tusLibros checkoutCartID: secondCartID.

	self deny: firstTransactionID = secondTransactionID.!

----SNAPSHOT----(2 December 2020 20:02:48) CuisUniversity-4384.image priorSource: 17416876!
!InternalRestInterface methodsFor: 'api rest' stamp: 'DS 12/2/2020 20:03:29'!
signalCartTimeExpired

	^ self error: self class cartTimeExpiredErrorDescription! !
!InternalRestInterface methodsFor: 'api rest' stamp: 'DS 12/2/2020 20:03:29' prior: 50876985!
addToCart: aCartID aQuantity: aQuantity of: anItem
	
	| aSessionCart owner |

	"self assertUnkownCartID: aCartID.	"

	aSessionCart := self cartWith: aCartID.
	owner := aSessionCart user.
	
	(aSessionCart expiringTimestamp < clock now) ifTrue: [ self signalCartTimeExpired ].
	carts at: aCartID put: (SessionCart for: aSessionCart cart expiringAt:  (clock now next: 30*minute) withUser: owner).
	
	aSessionCart cart add: aQuantity of: anItem.
	
	! !
!InternalRestInterface methodsFor: 'api rest' stamp: 'DS 12/2/2020 20:03:44'!
assertSessionExpired: aSessionCart

	^ (aSessionCart expiringTimestamp < clock now) ifTrue: [ self signalCartTimeExpired ]! !
!InternalRestInterface methodsFor: 'api rest' stamp: 'DS 12/2/2020 20:03:44' prior: 50877815!
addToCart: aCartID aQuantity: aQuantity of: anItem
	
	| aSessionCart owner |

	"self assertUnkownCartID: aCartID.	"

	aSessionCart := self cartWith: aCartID.
	owner := aSessionCart user.
	
	self assertSessionExpired: aSessionCart.
	carts at: aCartID put: (SessionCart for: aSessionCart cart expiringAt:  (clock now next: 30*minute) withUser: owner).
	
	aSessionCart cart add: aQuantity of: anItem.
	
	! !
!InternalRestInterface methodsFor: 'api rest' stamp: 'DS 12/2/2020 20:04:11' prior: 50877839!
addToCart: aCartID aQuantity: aQuantity of: anItem
	
	| aSessionCart owner |

	aSessionCart := self cartWith: aCartID.
	owner := aSessionCart user.
	
	self assertSessionExpired: aSessionCart.
	carts at: aCartID put: (SessionCart for: aSessionCart cart expiringAt:  (clock now next: 30*minute) withUser: owner).
	
	aSessionCart cart add: aQuantity of: anItem.
	
	! !
!InternalRestInterface methodsFor: 'api rest' stamp: 'DS 12/2/2020 20:06:27' prior: 50877035!
createCartForUser: anID withPassword: aPassword 

	| cart |

	self assertAuthenticate: anID withPassword: aPassword.
	
	currentID := currentID + 1.
	cart := Cart acceptingItemsOf: catalog.
	
	carts at: currentID put: (SessionCart for: cart withUser: anID using: clock).

	^currentID.! !
!SessionCart class methodsFor: 'as yet unclassified' stamp: 'DS 12/2/2020 20:07:03'!
for: aCart withUser: anUserID using: aClock

	^self new initializeFor: aCart withUser: anUserID using: aClock.! !

!classDefinition: #SessionCart category: 'TusLibros-Solucion' stamp: 'DS 12/2/2020 20:07:44'!
Object subclass: #SessionCart
	instanceVariableNames: 'cart expiringTimestamp userID clock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!
!SessionCart methodsFor: 'initialization' stamp: 'DS 12/2/2020 20:07:53'!
initializeFor: aCart withUser: anUserID using: aClock

	cart := aCart.
	userID := anUserID.
	clock := aClock.
	expiringTimestamp := clock now next: 30*minute.
	! !
!SessionCart methodsFor: 'initialization' stamp: 'DS 12/2/2020 20:08:00' prior: 50877897!
initializeFor: aCart withUser: anUserID using: aClock

	cart := aCart.
	userID := anUserID.
	clock := aClock.
	expiringTimestamp := clock now next: 30*minute.
	! !
!SessionCart methodsFor: 'initialization' stamp: 'DS 12/2/2020 20:08:28' prior: 50877905!
initializeFor: aCart withUser: anUserID using: aClock

	cart := aCart.
	userID := anUserID.
	clock := aClock.
	expiringTimestamp := clock now next: 30*minute.
	! !
!SessionCart methodsFor: 'initialization' stamp: 'DS 12/2/2020 20:08:45'!
refreshSession

	^ clock now next: 30*minute! !
!SessionCart methodsFor: 'initialization' stamp: 'DS 12/2/2020 20:08:45' prior: 50877913!
initializeFor: aCart withUser: anUserID using: aClock

	cart := aCart.
	userID := anUserID.
	clock := aClock.
	expiringTimestamp := self refreshSession.
	! !
!SessionCart methodsFor: 'initialization' stamp: 'DS 12/2/2020 20:08:49' prior: 50877926!
initializeFor: aCart withUser: anUserID using: aClock

	cart := aCart.
	userID := anUserID.
	clock := aClock.
	expiringTimestamp := self refreshSession.! !
!InternalRestInterface methodsFor: 'api rest' stamp: 'DS 12/2/2020 20:09:28' prior: 50877870!
createCartForUser: anID withPassword: aPassword 

	| cart |

	self assertAuthenticate: anID withPassword: aPassword.
	
	currentID := currentID + 1.
	cart := Cart acceptingItemsOf: catalog.

	carts at: currentID put: (SessionCart for: cart withUser: anID using: clock).

	^currentID.! !
!InternalRestInterface methodsFor: 'api rest' stamp: 'DS 12/2/2020 20:10:47'!
nextAvailableID

	^ currentID := currentID + 1! !
!InternalRestInterface methodsFor: 'api rest' stamp: 'DS 12/2/2020 20:10:47' prior: 50877942!
createCartForUser: anID withPassword: aPassword 

	| cart |

	self assertAuthenticate: anID withPassword: aPassword.
	
	self nextAvailableID.
	cart := Cart acceptingItemsOf: catalog.

	carts at: currentID put: (SessionCart for: cart withUser: anID using: clock).

	^currentID.! !
!InternalRestInterface methodsFor: 'api rest' stamp: 'DS 12/2/2020 20:10:56' prior: 50877959!
createCartForUser: anID withPassword: aPassword 

	| cart |

	self assertAuthenticate: anID withPassword: aPassword.

	cart := Cart acceptingItemsOf: catalog.

	carts at: self nextAvailableID put: (SessionCart for: cart withUser: anID using: clock).

	^currentID.! !
!InternalRestInterface methodsFor: 'api rest' stamp: 'DS 12/2/2020 20:10:58' prior: 50877971!
createCartForUser: anID withPassword: aPassword 

	| cart |

	self assertAuthenticate: anID withPassword: aPassword.

	cart := Cart acceptingItemsOf: catalog.
	carts at: self nextAvailableID put: (SessionCart for: cart withUser: anID using: clock).

	^currentID.! !
!InternalRestInterface methodsFor: 'api rest' stamp: 'DS 12/2/2020 20:11:25' prior: 50877983!
createCartForUser: anID withPassword: aPassword 

	| cart |

	self assertAuthenticate: anID withPassword: aPassword.

	cart := Cart acceptingItemsOf: catalog.
	carts at: self nextAvailableID
		put: (SessionCart for: cart withUser: anID using: clock).

	^currentID.! !
!InternalRestInterface methodsFor: 'api rest' stamp: 'DS 12/2/2020 20:12:07' prior: 50877954!
nextAvailableID

	| id |

	id := currentID.
	currentID := currentID + 1.

	^id.! !

!testRun: #InternalRestInterfaceTest #test01CreateCartHaveEmptyList stamp: 'DS 12/2/2020 20:12:15'!
ERROR!

!testRun: #InternalRestInterfaceTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 12/2/2020 20:12:15'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 12/2/2020 20:12:15'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 12/2/2020 20:12:15'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05AddedItemIsIncludedInCartList stamp: 'DS 12/2/2020 20:12:15'!
ERROR!

!testRun: #InternalRestInterfaceTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 12/2/2020 20:12:15'!
ERROR!

!testRun: #InternalRestInterfaceTest #test07CannotAddToUnknownCartID stamp: 'DS 12/2/2020 20:12:15'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'DS 12/2/2020 20:12:15'!
ERROR!

!testRun: #InternalRestInterfaceTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'DS 12/2/2020 20:12:15'!
ERROR!

!testRun: #InternalRestInterfaceTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 12/2/2020 20:12:15'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11CannotListAnUnknownCartID stamp: 'DS 12/2/2020 20:12:15'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAddOnExpiredCart stamp: 'DS 12/2/2020 20:12:15'!
FAILURE!

!testRun: #InternalRestInterfaceTest #test12CannotAssignSameIDForDifferentCheckoutTransactions stamp: 'DS 12/2/2020 20:12:15'!
ERROR!

!testRun: #InternalRestInterfaceTest #test13CannotListOnExpiredCart stamp: 'DS 12/2/2020 20:12:15'!
FAILURE!

!testRun: #InternalRestInterfaceTest #test14CannotCheckoutOnExpiredCart stamp: 'DS 12/2/2020 20:12:15'!
FAILURE!

!testRun: #InternalRestInterfaceTest #test15AddAnItemShouldRestartExpirationTime stamp: 'DS 12/2/2020 20:12:15'!
ERROR!

!testRun: #InternalRestInterfaceTest #test16ListCartShouldRestartExpirationTime stamp: 'DS 12/2/2020 20:12:15'!
ERROR!

!testRun: #InternalRestInterfaceTest #test17CheckoutShouldRestartExpirationTime stamp: 'DS 12/2/2020 20:12:15'!
ERROR!

!testRun: #InternalRestInterfaceTest #test18listPurchasesShouldReturnZeroWithNewUser stamp: 'DS 12/2/2020 20:12:15'!
PASSED!

!testRun: #InternalRestInterfaceTest #test19listPurchasesAfterAddToCartShouldIncludeBookAndTotal stamp: 'DS 12/2/2020 20:12:15'!
ERROR!

!testRun: #InternalRestInterfaceTest #test20listPurchasesAfterAddingMultipleBooksShouldIncludeBooksAndTotal stamp: 'DS 12/2/2020 20:12:15'!
ERROR!

!testRun: #InternalRestInterfaceTest #test21CannotListPurchasesWithUnknownUser stamp: 'DS 12/2/2020 20:12:15'!
PASSED!
!InternalRestInterface methodsFor: 'api rest' stamp: 'DS 12/2/2020 20:13:46' prior: 50877855!
addToCart: aCartID aQuantity: aQuantity of: anItem
	
	| aSessionCart owner |

	aSessionCart := self cartWith: aCartID.
	owner := aSessionCart user.
	
	self assertSessionExpired: aSessionCart.
	
	aSessionCart refreshSession.

	aSessionCart cart add: aQuantity of: anItem.
	
	! !
!InternalRestInterface methodsFor: 'api rest' stamp: 'DS 12/2/2020 20:14:03' prior: 50878096!
addToCart: aCartID aQuantity: aQuantity of: anItem
	
	| aSessionCart |

	aSessionCart := self cartWith: aCartID.
	
	self assertSessionExpired: aSessionCart.
	
	aSessionCart refreshSession.

	aSessionCart cart add: aQuantity of: anItem.
	
	! !
!SessionCart methodsFor: 'initialization' stamp: 'DS 12/2/2020 20:14:49'!
assertSessionExpired

	^ (self expiringTimestamp < clock now) ifTrue: [ self signalCartTimeExpired ].! !
!SessionCart methodsFor: 'initialization' stamp: 'DS 12/2/2020 20:16:08' prior: 50877921!
refreshSession

	self assertSessionExpired.

	^ clock now next: 30*minute! !
!SessionCart methodsFor: 'initialization' stamp: 'DS 12/2/2020 20:17:23' prior: 50878125!
refreshSession

	self assertSessionExpired.

	expiringTimestamp :=	clock now next: 30*minute.! !

!methodRemoval: SessionCart #expiringTimestamp stamp: 'DS 12/2/2020 20:17:40'!
expiringTimestamp

	^expiringTimestamp.!
!SessionCart methodsFor: 'accesing' stamp: 'DS 12/2/2020 20:17:47' prior: 50878118!
assertSessionExpired

	^ (expiringTimestamp < clock now) ifTrue: [ self signalCartTimeExpired ].! !
!SessionCart methodsFor: 'accesing' stamp: 'DS 12/2/2020 20:21:53'!
allowContinueWithSession

	self assertSessionExpired.

	expiringTimestamp :=	clock now next: 30*minute.! !
!SessionCart methodsFor: 'accesing' stamp: 'DS 12/2/2020 20:22:06' prior: 50878147!
allowContinueWithSession

	self assertSessionExpired.
	self refreshSession.! !
!SessionCart methodsFor: 'accesing' stamp: 'DS 12/2/2020 20:22:11' prior: 50878131!
refreshSession

	expiringTimestamp :=	clock now next: 30*minute.! !
!SessionCart methodsFor: 'initialization' stamp: 'DS 12/2/2020 20:22:25' prior: 50877934!
initializeFor: aCart withUser: anUserID using: aClock

	cart := aCart.
	userID := anUserID.
	clock := aClock.
	self refreshSession.! !

!methodRemoval: SessionCart #initializeFor:expiringAt:withUser: stamp: 'DS 12/2/2020 20:22:32'!
initializeFor: aCart expiringAt: aGregorianDateTime withUser: anUserID

	cart := aCart.
	userID := anUserID.
	expiringTimestamp := aGregorianDateTime.!

!methodRemoval: SessionCart class #for:expiringAt:withUser: stamp: 'DS 12/2/2020 20:22:37'!
for: aCart expiringAt: aGregorianDateTime withUser: anUserID

	^self new initializeFor: aCart expiringAt: aGregorianDateTime withUser: anUserID.!
!SessionCart methodsFor: 'accesing' stamp: 'DS 12/2/2020 20:23:47' prior: 50877203!
user

	^userID ! !
!InternalRestInterface methodsFor: 'api rest' stamp: 'DS 12/2/2020 20:24:38' prior: 50878108!
addToCart: aCartID aQuantity: aQuantity of: anItem
	
	| aSessionCart |

	aSessionCart := self cartWith: aCartID.
	aSessionCart allowContinueWithSession.

	aSessionCart cart add: aQuantity of: anItem.
	
	! !
!InternalRestInterface methodsFor: 'api rest' stamp: 'DS 12/2/2020 20:25:06' prior: 50878191!
addToCart: aCartID aQuantity: aQuantity of: anItem
	
	| aSessionCart |

	aSessionCart := self cartWith: aCartID.
	aSessionCart allowContinueWithSession.

	aSessionCart add: aQuantity of: anItem.
	
	! !
!InternalRestInterface methodsFor: 'api rest' stamp: 'DS 12/2/2020 20:24:38' prior: 50878201!
addToCart: aCartID aQuantity: aQuantity of: anItem
	
	| aSessionCart |

	aSessionCart := self cartWith: aCartID.
	aSessionCart allowContinueWithSession.

	aSessionCart cart add: aQuantity of: anItem.
	
	! !
!InternalRestInterface methodsFor: 'api rest' stamp: 'DS 12/2/2020 20:27:06' prior: 50877048!
listCartFor: aCartID

	| aSessionCart |
	aSessionCart := self cartWith: aCartID.
	aSessionCart allowContinueWithSession.

	^aSessionCart cart items.! !
!InternalRestInterface methodsFor: 'api rest' stamp: 'DS 12/2/2020 20:27:14' prior: 50878221!
listCartFor: aCartID

	| aSessionCart |

	aSessionCart := self cartWith: aCartID.
	aSessionCart allowContinueWithSession.

	^aSessionCart cart items.! !
!InternalRestInterface methodsFor: 'api rest' stamp: 'DS 12/2/2020 20:28:13' prior: 50877995!
createCartForUser: aUserID withPassword: aPassword 

	| cart |

	self assertAuthenticate: aUserID withPassword: aPassword.

	cart := Cart acceptingItemsOf: catalog.
	carts at: self nextAvailableID
		put: (SessionCart for: cart withUser: aUserID using: clock).

	^currentID.! !
!InternalRestInterface methodsFor: 'initialization' stamp: 'DS 12/2/2020 20:29:02' prior: 50876973!
initializeWithAuthenticator: anAuthenticator withCatalog: aCatalog usingClock: aClock 
	
	authenticator := anAuthenticator.
	catalog := aCatalog.
	
	clock := aClock.
	
	carts := Dictionary new.
	currentID := self initialAvailableID.
	salesBook := OrderedCollection new.
	
	usersHistory := Dictionary new. ! !
!InternalRestInterface methodsFor: 'id management' stamp: 'DS 12/2/2020 20:29:35'!
initialAvailableID

	^1.! !
!InternalRestInterface methodsFor: 'api rest' stamp: 'DS 12/2/2020 20:30:57' prior: 50877504!
checkOutCart: aCartID withCCN: anCCN withCCED: anCCED andCCO: anCCO throught: aMerchantProccesor on: aDate

	| creditCard aSessionCart purchases cashier|

	aSessionCart := self cartWith: aCartID.
	aSessionCart allowContinueWithSession.

	creditCard := CreditCard withNumber: anCCN withOwner: anCCO expiringOn: anCCED.
	cashier := Cashier
				toCheckout: aSessionCart cart 
				charging: creditCard
				throught: aMerchantProccesor
				on: aDate
				registeringOn: salesBook.
	cashier checkOut.

	purchases := usersHistory at: aSessionCart user ifAbsent: 
		[usersHistory at: aSessionCart user put: OrderedCollection new].
	
	purchases addLast: aSessionCart cart.
	
	^aCartID.! !
!InternalRestInterface methodsFor: 'api rest' stamp: 'DS 12/2/2020 20:31:06' prior: 50878266!
checkOutCart: aCartID withCCN: anCCN withCCED: anCCED andCCO: anCCO throught: aMerchantProccesor on: aDate

	| creditCard aSessionCart purchases cashier|

	aSessionCart := self cartWith: aCartID.
	aSessionCart allowContinueWithSession.

	creditCard := CreditCard withNumber: anCCN withOwner: anCCO expiringOn: anCCED.
	cashier := Cashier
				toCheckout: aSessionCart cart 
				charging: creditCard
				throught: aMerchantProccesor
				on: aDate
				registeringOn: salesBook.
	cashier checkOut.

	purchases := usersHistory at: aSessionCart user ifAbsent: 	[usersHistory at: aSessionCart user put: OrderedCollection new].
	
	purchases addLast: aSessionCart cart.
	
	^aCartID.! !
!InternalRestInterface methodsFor: 'api rest' stamp: 'DS 12/2/2020 20:31:56' prior: 50878291!
checkOutCart: aCartID withCCN: anCCN withCCED: anCCED andCCO: anCCO throught: aMerchantProccesor on: aDate

	| creditCard aSessionCart purchases cashier|

	aSessionCart := self cartWith: aCartID.
	aSessionCart allowContinueWithSession.

	creditCard := CreditCard withNumber: anCCN withOwner: anCCO expiringOn: anCCED.
	cashier := Cashier
				toCheckout: aSessionCart cart 
				charging: creditCard
				throught: aMerchantProccesor
				on: aDate
				registeringOn: salesBook.
	cashier checkOut.

	purchases := usersHistory at: aSessionCart user ifAbsent: 	[usersHistory at: aSessionCart user put: OrderedCollection new].
	purchases addLast: aSessionCart cart.
	
	^aCartID.! !

!classDefinition: #InternalRestInterface category: 'TusLibros-Solucion' stamp: 'DS 12/2/2020 20:34:11'!
Object subclass: #InternalRestInterface
	instanceVariableNames: 'authenticator carts currentID catalog salesBook expiringTime clock purchasesByUser'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!
!InternalRestInterface methodsFor: 'as yet unclassified' stamp: 'DS 12/2/2020 20:34:11' prior: 50878249!
initializeWithAuthenticator: anAuthenticator withCatalog: aCatalog usingClock: aClock 
	
	authenticator := anAuthenticator.
	catalog := aCatalog.
	
	clock := aClock.
	
	carts := Dictionary new.
	currentID := self initialAvailableID.
	salesBook := OrderedCollection new.
	
	purchasesByUser := Dictionary new. ! !
!InternalRestInterface methodsFor: 'as yet unclassified' stamp: 'DS 12/2/2020 20:34:11' prior: 50878316!
checkOutCart: aCartID withCCN: anCCN withCCED: anCCED andCCO: anCCO throught: aMerchantProccesor on: aDate

	| creditCard aSessionCart purchases cashier|

	aSessionCart := self cartWith: aCartID.
	aSessionCart allowContinueWithSession.

	creditCard := CreditCard withNumber: anCCN withOwner: anCCO expiringOn: anCCED.
	cashier := Cashier
				toCheckout: aSessionCart cart 
				charging: creditCard
				throught: aMerchantProccesor
				on: aDate
				registeringOn: salesBook.
	cashier checkOut.

	purchases := purchasesByUser at: aSessionCart user ifAbsent: 	[purchasesByUser at: aSessionCart user put: OrderedCollection new].
	purchases addLast: aSessionCart cart.
	
	^aCartID.! !
!InternalRestInterface methodsFor: 'as yet unclassified' stamp: 'DS 12/2/2020 20:34:12' prior: 50877063!
listPurchasesWithUser: userID withPassword: pass

	| purchases items history sum |
	
	self assertAuthenticate: userID withPassword: pass.
	
	purchases := OrderedCollection new.
	items := Bag new.
	
	history := purchasesByUser at: userID ifAbsent: [OrderedCollection new].
	history do: [:aCart | items addAll: aCart items].
	
	sum := 0.
	history sum: [:aCart | sum := sum + aCart total ] ifEmpty: [0].
	
	items asSet do: [:aBook | purchases add: (aBook -> (items occurrencesOf: aBook))].	
	
	purchases add: ('total' -> sum).
	
	^purchases.! !
!InternalRestInterface methodsFor: 'api rest' stamp: 'DS 12/2/2020 20:34:47' prior: 50878365!
checkOutCart: aCartID withCCN: anCCN withCCED: anCCED andCCO: anCCO throught: aMerchantProccesor on: aDate

	| creditCard aSessionCart purchases cashier|

	aSessionCart := self cartWith: aCartID.
	aSessionCart allowContinueWithSession.

	creditCard := CreditCard withNumber: anCCN withOwner: anCCO expiringOn: anCCED.
	cashier := Cashier
				toCheckout: aSessionCart cart 
				charging: creditCard
				throught: aMerchantProccesor
				on: aDate
				registeringOn: salesBook.
	cashier checkOut.

	purchases := purchasesByUser at: aSessionCart user ifAbsent: 	[purchasesByUser at: aSessionCart user put: OrderedCollection new].
	purchases addLast: aSessionCart cart.
	
	^aCartID.! !
!InternalRestInterface methodsFor: 'api rest' stamp: 'DS 12/2/2020 20:35:26'!
purchsesForUser: aSessionCart

	^ purchasesByUser at: aSessionCart user ifAbsent: 	[purchasesByUser at: aSessionCart user put: OrderedCollection new]! !
!InternalRestInterface methodsFor: 'api rest' stamp: 'DS 12/2/2020 20:35:26' prior: 50878410!
checkOutCart: aCartID withCCN: anCCN withCCED: anCCED andCCO: anCCO throught: aMerchantProccesor on: aDate

	| creditCard aSessionCart purchases cashier|

	aSessionCart := self cartWith: aCartID.
	aSessionCart allowContinueWithSession.

	creditCard := CreditCard withNumber: anCCN withOwner: anCCO expiringOn: anCCED.
	cashier := Cashier
				toCheckout: aSessionCart cart 
				charging: creditCard
				throught: aMerchantProccesor
				on: aDate
				registeringOn: salesBook.
	cashier checkOut.

	purchases := self purchsesForUser: aSessionCart.
	purchases addLast: aSessionCart cart.
	
	^aCartID.! !

----SNAPSHOT----(2 December 2020 20:35:44) CuisUniversity-4384.image priorSource: 17476972!
!InternalRestInterface methodsFor: 'api rest' stamp: 'DS 12/2/2020 20:35:58' prior: 50878442!
checkOutCart: aCartID withCCN: anCCN withCCED: anCCED andCCO: anCCO throught: aMerchantProccesor on: aDate

	| creditCard aSessionCart purchases cashier|

	aSessionCart := self cartWith: aCartID.
	aSessionCart allowContinueWithSession.

	creditCard := CreditCard withNumber: anCCN withOwner: anCCO expiringOn: anCCED.
	cashier := Cashier
				toCheckout: aSessionCart cart 
				charging: creditCard
				throught: aMerchantProccesor
				on: aDate
				registeringOn: salesBook.
	cashier checkOut.

	purchases := self purchsesForUser: aSessionCart user.
	purchases addLast: aSessionCart cart.
	
	^aCartID.! !
!InternalRestInterface methodsFor: 'api rest' stamp: 'DS 12/2/2020 20:36:22' prior: 50878434!
purchsesForUser: aUserID

	^ purchasesByUser at: aUserID user ifAbsent: 	[purchasesByUser at: aUserID user put: OrderedCollection new]! !
!InternalRestInterface methodsFor: 'api rest' stamp: 'DS 12/2/2020 20:36:25' prior: 50878489!
purchsesForUser: aUserID

	^ purchasesByUser at: aUserID ifAbsent: 	[purchasesByUser at: aUserID user put: OrderedCollection new]! !
!InternalRestInterface methodsFor: 'api rest' stamp: 'DS 12/2/2020 20:36:31' prior: 50878497!
purchsesForUser: aUserID

	^purchasesByUser at: aUserID ifAbsent: 	[purchasesByUser at: aUserID user put: OrderedCollection new].! !
!InternalRestInterface methodsFor: 'api rest' stamp: 'DS 12/2/2020 20:36:33' prior: 50878505!
purchsesForUser: aUserID

	^purchasesByUser at: aUserID ifAbsent: 	[purchasesByUser at: aUserID user put: OrderedCollection new].! !
!InternalRestInterface methodsFor: 'api rest' stamp: 'DS 12/2/2020 20:36:50' prior: 50878513!
purchsesForUser: aUserID

	^purchasesByUser
		at: aUserID 
		ifAbsent: 	[ purchasesByUser at: aUserID  put: OrderedCollection new ].! !
!InternalRestInterface methodsFor: 'api rest' stamp: 'DS 12/2/2020 20:36:56' prior: 50878521!
purchsesForUser: aUserID

	^purchasesByUser
		at: aUserID 
		ifAbsent: 	[ purchasesByUser at: aUserID put: OrderedCollection new ].! !
!InternalRestInterface methodsFor: 'accessing' stamp: 'DS 12/2/2020 20:38:11'!
purchsesOfUser: aUserID

	^purchasesByUser
		at: aUserID 
		ifAbsent: 	[ purchasesByUser at: aUserID put: OrderedCollection new ].! !
!InternalRestInterface methodsFor: 'as yet unclassified' stamp: 'DS 12/2/2020 20:38:11' prior: 50878467!
checkOutCart: aCartID withCCN: anCCN withCCED: anCCED andCCO: anCCO throught: aMerchantProccesor on: aDate

	| creditCard aSessionCart purchases cashier|

	aSessionCart := self cartWith: aCartID.
	aSessionCart allowContinueWithSession.

	creditCard := CreditCard withNumber: anCCN withOwner: anCCO expiringOn: anCCED.
	cashier := Cashier
				toCheckout: aSessionCart cart 
				charging: creditCard
				throught: aMerchantProccesor
				on: aDate
				registeringOn: salesBook.
	cashier checkOut.

	purchases := self purchsesOfUser: aSessionCart user.
	purchases addLast: aSessionCart cart.
	
	^aCartID.! !

!methodRemoval: InternalRestInterface #purchsesForUser: stamp: 'DS 12/2/2020 20:38:11'!
purchsesForUser: aUserID

	^purchasesByUser
		at: aUserID 
		ifAbsent: 	[ purchasesByUser at: aUserID put: OrderedCollection new ].!
!InternalRestInterface methodsFor: 'api rest' stamp: 'DS 12/2/2020 20:38:35' prior: 50878544!
checkOutCart: aCartID withCCN: anCCN withCCED: anCCED andCCO: anCCO throught: aMerchantProccesor on: aDate

	| creditCard aSessionCart purchases cashier |

	aSessionCart := self cartWith: aCartID.
	aSessionCart allowContinueWithSession.

	creditCard := CreditCard withNumber: anCCN withOwner: anCCO expiringOn: anCCED.

	cashier := Cashier
				toCheckout: aSessionCart cart 
				charging: creditCard
				throught: aMerchantProccesor
				on: aDate
				registeringOn: salesBook.
	cashier checkOut.

	purchases := self purchsesOfUser: aSessionCart user.
	purchases addLast: aSessionCart cart.
	
	^aCartID.! !
!InternalRestInterface methodsFor: 'assertions' stamp: 'DS 12/2/2020 20:42:54'!
sessionCartWith: aCartID

	| sessionCart |

	sessionCart := carts at: aCartID ifAbsent: [ self signalUnknownCartID ].	
	sessionCart allowContinueWithSession.

	^sessionCart.! !

!classDefinition: #InternalRestInterface category: 'TusLibros-Solucion' stamp: 'DS 12/2/2020 20:43:06'!
Object subclass: #InternalRestInterface
	instanceVariableNames: 'authenticator sessionCarts currentID catalog salesBook expiringTime clock purchasesByUser'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Solucion'!
!InternalRestInterface methodsFor: 'as yet unclassified' stamp: 'DS 12/2/2020 20:43:06' prior: 50878595!
sessionCartWith: aCartID

	| sessionCart |

	sessionCart := sessionCarts at: aCartID ifAbsent: [ self signalUnknownCartID ].	
	sessionCart allowContinueWithSession.

	^sessionCart.! !
!InternalRestInterface methodsFor: 'as yet unclassified' stamp: 'DS 12/2/2020 20:43:06' prior: 50878237!
createCartForUser: aUserID withPassword: aPassword 

	| cart |

	self assertAuthenticate: aUserID withPassword: aPassword.

	cart := Cart acceptingItemsOf: catalog.
	sessionCarts at: self nextAvailableID
		put: (SessionCart for: cart withUser: aUserID using: clock).

	^currentID.! !
!InternalRestInterface methodsFor: 'as yet unclassified' stamp: 'DS 12/2/2020 20:43:06' prior: 50878351!
initializeWithAuthenticator: anAuthenticator withCatalog: aCatalog usingClock: aClock 
	
	authenticator := anAuthenticator.
	catalog := aCatalog.
	
	clock := aClock.
	
	sessionCarts := Dictionary new.
	currentID := self initialAvailableID.
	salesBook := OrderedCollection new.
	
	purchasesByUser := Dictionary new. ! !
!InternalRestInterface methodsFor: 'as yet unclassified' stamp: 'DS 12/2/2020 20:43:06' prior: 50877105!
cartWith: aCartID

	^(sessionCarts at: aCartID ifAbsent: [ self signalUnknownCartID ]).! !

!methodRemoval: InternalRestInterface #assertSessionExpired: stamp: 'DS 12/2/2020 20:43:24'!
assertSessionExpired: aSessionCart

	^ (aSessionCart expiringTimestamp < clock now) ifTrue: [ self signalCartTimeExpired ]!

!methodRemoval: InternalRestInterface #cartWith: stamp: 'DS 12/2/2020 20:43:34'!
cartWith: aCartID

	^(sessionCarts at: aCartID ifAbsent: [ self signalUnknownCartID ]).!
!InternalRestInterface methodsFor: 'api rest' stamp: 'DS 12/2/2020 20:44:36' prior: 50878211!
addToCart: aCartID aQuantity: aQuantity of: anItem
	
	| aSessionCart |

	aSessionCart := self sessionCartWith: aCartID.

	aSessionCart cart add: aQuantity of: anItem.
	
	! !
!InternalRestInterface methodsFor: 'api rest' stamp: 'DS 12/2/2020 20:44:38' prior: 50878670!
addToCart: aCartID aQuantity: aQuantity of: anItem
	
	| aSessionCart |

	aSessionCart := self sessionCartWith: aCartID.
	aSessionCart cart add: aQuantity of: anItem.
	
	! !
!InternalRestInterface methodsFor: 'api rest' stamp: 'DS 12/2/2020 20:44:48' prior: 50878679!
addToCart: aSessionCartID aQuantity: aQuantity of: anItem
	
	| aSessionCart |

	aSessionCart := self sessionCartWith: aSessionCartID.
	aSessionCart cart add: aQuantity of: anItem.
	
	! !
!InternalRestInterface methodsFor: 'api rest' stamp: 'DS 12/2/2020 20:44:59' prior: 50878229!
listCartFor: aSessionCartID

	| aSessionCart |

	aSessionCart := self cartWith: aSessionCartID.
	aSessionCart allowContinueWithSession.

	^aSessionCart cart items.! !
!InternalRestInterface methodsFor: 'api rest' stamp: 'DS 12/2/2020 20:45:07' prior: 50878697!
listCartFor: aSessionCartID

	| aSessionCart |

	aSessionCart := self sessionCartWith: aSessionCartID.

	^aSessionCart cart items.! !
!InternalRestInterface methodsFor: 'api rest' stamp: 'DS 12/2/2020 20:45:22' prior: 50878573!
checkOutCart: aCartID withCCN: anCCN withCCED: anCCED andCCO: anCCO throught: aMerchantProccesor on: aDate

	| creditCard aSessionCart purchases cashier |

	aSessionCart := self sessionCartWith: aCartID.

	creditCard := CreditCard withNumber: anCCN withOwner: anCCO expiringOn: anCCED.

	cashier := Cashier
				toCheckout: aSessionCart cart 
				charging: creditCard
				throught: aMerchantProccesor
				on: aDate
				registeringOn: salesBook.
	cashier checkOut.

	purchases := self purchsesOfUser: aSessionCart user.
	purchases addLast: aSessionCart cart.
	
	^aCartID.! !
!InternalRestInterface methodsFor: 'api rest' stamp: 'DS 12/2/2020 20:45:29' prior: 50878714!
checkOutCart: aSessionCartID withCCN: anCCN withCCED: anCCED andCCO: anCCO throught: aMerchantProccesor on: aDate

	| creditCard aSessionCart purchases cashier |

	aSessionCart := self sessionCartWith: aSessionCartID.

	creditCard := CreditCard withNumber: anCCN withOwner: anCCO expiringOn: anCCED.

	cashier := Cashier
				toCheckout: aSessionCart cart 
				charging: creditCard
				throught: aMerchantProccesor
				on: aDate
				registeringOn: salesBook.
	cashier checkOut.

	purchases := self purchsesOfUser: aSessionCart user.
	purchases addLast: aSessionCart cart.
	
	^aSessionCartID.! !
!InternalRestInterface methodsFor: 'api rest' stamp: 'DS 12/2/2020 20:46:20' prior: 50878625!
createCartForUser: aUserID withPassword: aPassword 

	| cart sessionCartID |

	self assertAuthenticate: aUserID withPassword: aPassword.

	cart := Cart acceptingItemsOf: catalog.
	sessionCartID := self nextAvailableID.
	sessionCarts at: sessionCartID
		put: (SessionCart for: cart withUser: aUserID using: clock).

	^sessionCartID.! !
!InternalRestInterface methodsFor: 'api rest' stamp: 'DS 12/2/2020 20:46:24' prior: 50878757!
createCartForUser: aUserID withPassword: aPassword 

	| cart aSessionCartID |

	self assertAuthenticate: aUserID withPassword: aPassword.

	cart := Cart acceptingItemsOf: catalog.
	aSessionCartID := self nextAvailableID.
	sessionCarts at: aSessionCartID
		put: (SessionCart for: cart withUser: aUserID using: clock).

	^aSessionCartID.! !
!InternalRestInterface methodsFor: 'api rest' stamp: 'DS 12/2/2020 20:46:34' prior: 50878771!
createCartForUser: aUserID withPassword: aPassword 

	| cart aSessionCartID |

	self assertAuthenticate: aUserID withPassword: aPassword.

	cart := Cart acceptingItemsOf: catalog.
	aSessionCartID := self nextAvailableID.

	sessionCarts at: aSessionCartID
		put: (SessionCart for: cart withUser: aUserID using: clock).

	^aSessionCartID.! !
!SessionCart methodsFor: 'errors' stamp: 'DS 12/2/2020 20:48:29'!
signalCartTimeExpired

	^self error: InternalRestInterface cartTimeExpiredErrorDescription.! !

!methodRemoval: InternalRestInterface #signalCartTimeExpired stamp: 'DS 12/2/2020 20:48:58'!
signalCartTimeExpired

	^ self error: self class cartTimeExpiredErrorDescription!

!testRun: #InternalRestInterfaceTest #test01CreateCartHaveEmptyList stamp: 'DS 12/2/2020 20:49:03'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 12/2/2020 20:49:03'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 12/2/2020 20:49:03'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 12/2/2020 20:49:03'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05AddedItemIsIncludedInCartList stamp: 'DS 12/2/2020 20:49:03'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 12/2/2020 20:49:03'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CannotAddToUnknownCartID stamp: 'DS 12/2/2020 20:49:03'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'DS 12/2/2020 20:49:03'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'DS 12/2/2020 20:49:03'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 12/2/2020 20:49:03'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11CannotListAnUnknownCartID stamp: 'DS 12/2/2020 20:49:03'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAddOnExpiredCart stamp: 'DS 12/2/2020 20:49:03'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAssignSameIDForDifferentCheckoutTransactions stamp: 'DS 12/2/2020 20:49:03'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13CannotListOnExpiredCart stamp: 'DS 12/2/2020 20:49:03'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14CannotCheckoutOnExpiredCart stamp: 'DS 12/2/2020 20:49:03'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15AddAnItemShouldRestartExpirationTime stamp: 'DS 12/2/2020 20:49:03'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16ListCartShouldRestartExpirationTime stamp: 'DS 12/2/2020 20:49:03'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17CheckoutShouldRestartExpirationTime stamp: 'DS 12/2/2020 20:49:03'!
PASSED!

!testRun: #InternalRestInterfaceTest #test18listPurchasesShouldReturnZeroWithNewUser stamp: 'DS 12/2/2020 20:49:03'!
PASSED!

!testRun: #InternalRestInterfaceTest #test19listPurchasesAfterAddToCartShouldIncludeBookAndTotal stamp: 'DS 12/2/2020 20:49:03'!
PASSED!

!testRun: #InternalRestInterfaceTest #test20listPurchasesAfterAddingMultipleBooksShouldIncludeBooksAndTotal stamp: 'DS 12/2/2020 20:49:03'!
PASSED!

!testRun: #InternalRestInterfaceTest #test21CannotListPurchasesWithUnknownUser stamp: 'DS 12/2/2020 20:49:03'!
PASSED!

----SNAPSHOT----(2 December 2020 20:49:11) CuisUniversity-4384.image priorSource: 17498007!

----SNAPSHOT----(2 December 2020 20:49:17) CuisUniversity-4384.image priorSource: 17511731!

b := Bag new.!

b := Bag new.!

b add: 'b' withOccurrences: 4.!

v!

b!

b contents.!

b contents.!
!InternalRestInterfaceTest methodsFor: 'list purchases' stamp: 'DS 12/2/2020 20:58:28'!
test21listPurchasesAfterAddingMultipleBooksShouldIncludeBooksAndTotal

	| tusLibros expectedPurchases cartID |

	expectedPurchases := OrderedCollection 
		with: (testObjectsFactory itemSellByTheStore -> 10)
		with: 'total' -> (testObjectsFactory itemSellByTheStorePrice * 10).
		
	tusLibros := testObjectsFactory tusLibros.
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	tusLibros addToCart: cartID aQuantity: 5 of: testObjectsFactory itemSellByTheStore.
	self tusLibros: tusLibros checkoutCartID: cartID.
	self tusLibros: tusLibros checkoutCartID: cartID.
	
	self assert: expectedPurchases equals: (tusLibros listPurchasesWithUser: 1 withPassword: 'pass').! !

!testRun: #InternalRestInterfaceTest #test21listPurchasesAfterAddingMultipleBooksShouldIncludeBooksAndTotal stamp: 'DS 12/2/2020 20:58:29'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01CreateCartHaveEmptyList stamp: 'DS 12/2/2020 20:58:29'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 12/2/2020 20:58:29'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 12/2/2020 20:58:29'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 12/2/2020 20:58:29'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05AddedItemIsIncludedInCartList stamp: 'DS 12/2/2020 20:58:29'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 12/2/2020 20:58:29'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CannotAddToUnknownCartID stamp: 'DS 12/2/2020 20:58:29'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'DS 12/2/2020 20:58:29'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'DS 12/2/2020 20:58:29'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 12/2/2020 20:58:29'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11CannotListAnUnknownCartID stamp: 'DS 12/2/2020 20:58:29'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAddOnExpiredCart stamp: 'DS 12/2/2020 20:58:29'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAssignSameIDForDifferentCheckoutTransactions stamp: 'DS 12/2/2020 20:58:29'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13CannotListOnExpiredCart stamp: 'DS 12/2/2020 20:58:29'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14CannotCheckoutOnExpiredCart stamp: 'DS 12/2/2020 20:58:29'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15AddAnItemShouldRestartExpirationTime stamp: 'DS 12/2/2020 20:58:29'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16ListCartShouldRestartExpirationTime stamp: 'DS 12/2/2020 20:58:29'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17CheckoutShouldRestartExpirationTime stamp: 'DS 12/2/2020 20:58:29'!
PASSED!

!testRun: #InternalRestInterfaceTest #test18listPurchasesShouldReturnZeroWithNewUser stamp: 'DS 12/2/2020 20:58:29'!
PASSED!

!testRun: #InternalRestInterfaceTest #test19listPurchasesAfterAddToCartShouldIncludeBookAndTotal stamp: 'DS 12/2/2020 20:58:29'!
PASSED!

!testRun: #InternalRestInterfaceTest #test20listPurchasesAfterAddingMultipleBooksShouldIncludeBooksAndTotal stamp: 'DS 12/2/2020 20:58:29'!
PASSED!

!testRun: #InternalRestInterfaceTest #test21CannotListPurchasesWithUnknownUser stamp: 'DS 12/2/2020 20:58:29'!
PASSED!

!testRun: #InternalRestInterfaceTest #test21listPurchasesAfterAddingMultipleBooksShouldIncludeBooksAndTotal stamp: 'DS 12/2/2020 20:58:29'!
PASSED!

!methodRemoval: InternalRestInterfaceTest #test21listPurchasesAfterAddingMultipleBooksShouldIncludeBooksAndTotal stamp: 'DS 12/2/2020 20:58:38'!
test21listPurchasesAfterAddingMultipleBooksShouldIncludeBooksAndTotal

	| tusLibros expectedPurchases cartID |

	expectedPurchases := OrderedCollection 
		with: (testObjectsFactory itemSellByTheStore -> 10)
		with: 'total' -> (testObjectsFactory itemSellByTheStorePrice * 10).
		
	tusLibros := testObjectsFactory tusLibros.
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	tusLibros addToCart: cartID aQuantity: 5 of: testObjectsFactory itemSellByTheStore.
	self tusLibros: tusLibros checkoutCartID: cartID.
	self tusLibros: tusLibros checkoutCartID: cartID.
	
	self assert: expectedPurchases equals: (tusLibros listPurchasesWithUser: 1 withPassword: 'pass').!
!InternalRestInterfaceTest methodsFor: 'list purchases' stamp: 'DS 12/2/2020 20:59:17' prior: 50876626!
test18listPurchasesShouldReturnZeroWithNewUser

	| tusLibros expectedPurchases  |

	expectedPurchases := Dictionary with: ('total' -> 0).
	tusLibros := testObjectsFactory tusLibros.
	
	self assert: expectedPurchases equals: (tusLibros listPurchasesWithUser: 1 withPassword: 'pass').! !
!InternalRestInterfaceTest methodsFor: 'list purchases' stamp: 'DS 12/2/2020 20:59:23' prior: 50876639!
test19listPurchasesAfterAddToCartShouldIncludeBookAndTotal

	| tusLibros expectedPurchases cartID |

	expectedPurchases := Dictionary 
		with: (testObjectsFactory itemSellByTheStore -> 1)
		with: 'total' -> testObjectsFactory itemSellByTheStorePrice.
		
	tusLibros := testObjectsFactory tusLibros.
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	self tusLibros: tusLibros checkoutCartID: cartID.
	
	self assert: expectedPurchases equals: (tusLibros listPurchasesWithUser: 1 withPassword: 'pass').! !
!InternalRestInterfaceTest methodsFor: 'list purchases' stamp: 'DS 12/2/2020 20:59:28' prior: 50876662!
test20listPurchasesAfterAddingMultipleBooksShouldIncludeBooksAndTotal

	| tusLibros expectedPurchases cartID |

	expectedPurchases := Dictionary 
		with: (testObjectsFactory itemSellByTheStore -> 5)
		with: 'total' -> (testObjectsFactory itemSellByTheStorePrice * 5).
		
	tusLibros := testObjectsFactory tusLibros.
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	tusLibros addToCart: cartID aQuantity: 5 of: testObjectsFactory itemSellByTheStore.
	self tusLibros: tusLibros checkoutCartID: cartID.
	
	self assert: expectedPurchases equals: (tusLibros listPurchasesWithUser: 1 withPassword: 'pass').! !

!testRun: #InternalRestInterfaceTest #test21CannotListPurchasesWithUnknownUser stamp: 'DS 12/2/2020 20:59:31'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01CreateCartHaveEmptyList stamp: 'DS 12/2/2020 20:59:34'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 12/2/2020 20:59:34'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 12/2/2020 20:59:34'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 12/2/2020 20:59:34'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05AddedItemIsIncludedInCartList stamp: 'DS 12/2/2020 20:59:34'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 12/2/2020 20:59:34'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CannotAddToUnknownCartID stamp: 'DS 12/2/2020 20:59:34'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'DS 12/2/2020 20:59:34'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'DS 12/2/2020 20:59:34'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 12/2/2020 20:59:34'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11CannotListAnUnknownCartID stamp: 'DS 12/2/2020 20:59:34'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAddOnExpiredCart stamp: 'DS 12/2/2020 20:59:34'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAssignSameIDForDifferentCheckoutTransactions stamp: 'DS 12/2/2020 20:59:34'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13CannotListOnExpiredCart stamp: 'DS 12/2/2020 20:59:34'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14CannotCheckoutOnExpiredCart stamp: 'DS 12/2/2020 20:59:34'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15AddAnItemShouldRestartExpirationTime stamp: 'DS 12/2/2020 20:59:34'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16ListCartShouldRestartExpirationTime stamp: 'DS 12/2/2020 20:59:34'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17CheckoutShouldRestartExpirationTime stamp: 'DS 12/2/2020 20:59:34'!
PASSED!

!testRun: #InternalRestInterfaceTest #test18listPurchasesShouldReturnZeroWithNewUser stamp: 'DS 12/2/2020 20:59:34'!
FAILURE!

!testRun: #InternalRestInterfaceTest #test19listPurchasesAfterAddToCartShouldIncludeBookAndTotal stamp: 'DS 12/2/2020 20:59:34'!
FAILURE!

!testRun: #InternalRestInterfaceTest #test20listPurchasesAfterAddingMultipleBooksShouldIncludeBooksAndTotal stamp: 'DS 12/2/2020 20:59:34'!
FAILURE!

!testRun: #InternalRestInterfaceTest #test21CannotListPurchasesWithUnknownUser stamp: 'DS 12/2/2020 20:59:34'!
PASSED!
!InternalRestInterface methodsFor: 'api rest' stamp: 'DS 12/2/2020 21:00:39' prior: 50878390!
listPurchasesWithUser: userID withPassword: pass

	| purchases items history sum |
	
	self assertAuthenticate: userID withPassword: pass.
	
	"purchases := OrderedCollection new."
	items := Bag new.
	
	history := purchasesByUser at: userID ifAbsent: [OrderedCollection new].
	history do: [:aCart | items addAll: aCart items].
	
	sum := 0.
	history sum: [:aCart | sum := sum + aCart total ] ifEmpty: [0].
	
	purchases := items contents.
	
	"items asSet do: [:aBook | purchases add: (aBook -> (items occurrencesOf: aBook))].	:"	
	purchases add: ('total' -> sum).
	
	^purchases.! !

!testRun: #InternalRestInterfaceTest #test01CreateCartHaveEmptyList stamp: 'DS 12/2/2020 21:00:41'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 12/2/2020 21:00:41'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 12/2/2020 21:00:41'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 12/2/2020 21:00:41'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05AddedItemIsIncludedInCartList stamp: 'DS 12/2/2020 21:00:41'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 12/2/2020 21:00:41'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CannotAddToUnknownCartID stamp: 'DS 12/2/2020 21:00:41'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'DS 12/2/2020 21:00:41'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'DS 12/2/2020 21:00:41'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 12/2/2020 21:00:41'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11CannotListAnUnknownCartID stamp: 'DS 12/2/2020 21:00:41'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAddOnExpiredCart stamp: 'DS 12/2/2020 21:00:41'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAssignSameIDForDifferentCheckoutTransactions stamp: 'DS 12/2/2020 21:00:41'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13CannotListOnExpiredCart stamp: 'DS 12/2/2020 21:00:41'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14CannotCheckoutOnExpiredCart stamp: 'DS 12/2/2020 21:00:41'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15AddAnItemShouldRestartExpirationTime stamp: 'DS 12/2/2020 21:00:41'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16ListCartShouldRestartExpirationTime stamp: 'DS 12/2/2020 21:00:41'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17CheckoutShouldRestartExpirationTime stamp: 'DS 12/2/2020 21:00:41'!
PASSED!

!testRun: #InternalRestInterfaceTest #test18listPurchasesShouldReturnZeroWithNewUser stamp: 'DS 12/2/2020 21:00:41'!
PASSED!

!testRun: #InternalRestInterfaceTest #test19listPurchasesAfterAddToCartShouldIncludeBookAndTotal stamp: 'DS 12/2/2020 21:00:41'!
PASSED!

!testRun: #InternalRestInterfaceTest #test20listPurchasesAfterAddingMultipleBooksShouldIncludeBooksAndTotal stamp: 'DS 12/2/2020 21:00:41'!
PASSED!

!testRun: #InternalRestInterfaceTest #test21CannotListPurchasesWithUnknownUser stamp: 'DS 12/2/2020 21:00:41'!
PASSED!
!InternalRestInterface methodsFor: 'api rest' stamp: 'DS 12/2/2020 21:00:55' prior: 50879191!
listPurchasesWithUser: userID withPassword: pass

	| purchases items history sum |
	
	self assertAuthenticate: userID withPassword: pass.
	
	items := Bag new.
	
	history := purchasesByUser at: userID ifAbsent: [OrderedCollection new].
	history do: [:aCart | items addAll: aCart items].
	
	sum := 0.
	history sum: [:aCart | sum := sum + aCart total ] ifEmpty: [0].
	
	purchases := items contents.
	
	purchases add: ('total' -> sum).
	
	^purchases.! !
!InternalRestInterface methodsFor: 'api rest' stamp: 'DS 12/2/2020 21:01:08' prior: 50879296!
listPurchasesWithUser: userID withPassword: pass

	| purchases items history sum |
	
	self assertAuthenticate: userID withPassword: pass.
	
	items := Bag new.
	
	history := purchasesByUser at: userID ifAbsent: [OrderedCollection new].
	history do: [:aCart | items addAll: aCart items].
	
	sum := 0.
	history sum: [:aCart | sum := sum + aCart total ] ifEmpty: [0].
	
	purchases := items contents add: ('total' -> sum).
	
	^purchases.! !
!InternalRestInterface methodsFor: 'api rest' stamp: 'DS 12/2/2020 21:02:59' prior: 50879313!
listPurchasesWithUser: userID withPassword: pass

	| purchases items history |

	self assertAuthenticate: userID withPassword: pass.
	
	items := Bag new.
	
	history := purchasesByUser at: userID ifAbsent: [OrderedCollection new].
	history do: [:aCart | items addAll: aCart items].
	
	purchases := items contents.
	purchases add: 'total' -> (history sum: [ :aCart | aCart total ] ifEmpty: [0]).

	^purchases.! !

!testRun: #InternalRestInterfaceTest #test01CreateCartHaveEmptyList stamp: 'DS 12/2/2020 21:03:00'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 12/2/2020 21:03:00'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 12/2/2020 21:03:00'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 12/2/2020 21:03:00'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05AddedItemIsIncludedInCartList stamp: 'DS 12/2/2020 21:03:00'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 12/2/2020 21:03:00'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CannotAddToUnknownCartID stamp: 'DS 12/2/2020 21:03:00'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'DS 12/2/2020 21:03:00'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'DS 12/2/2020 21:03:00'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 12/2/2020 21:03:00'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11CannotListAnUnknownCartID stamp: 'DS 12/2/2020 21:03:00'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAddOnExpiredCart stamp: 'DS 12/2/2020 21:03:00'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAssignSameIDForDifferentCheckoutTransactions stamp: 'DS 12/2/2020 21:03:00'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13CannotListOnExpiredCart stamp: 'DS 12/2/2020 21:03:00'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14CannotCheckoutOnExpiredCart stamp: 'DS 12/2/2020 21:03:00'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15AddAnItemShouldRestartExpirationTime stamp: 'DS 12/2/2020 21:03:00'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16ListCartShouldRestartExpirationTime stamp: 'DS 12/2/2020 21:03:00'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17CheckoutShouldRestartExpirationTime stamp: 'DS 12/2/2020 21:03:00'!
PASSED!

!testRun: #InternalRestInterfaceTest #test18listPurchasesShouldReturnZeroWithNewUser stamp: 'DS 12/2/2020 21:03:00'!
PASSED!

!testRun: #InternalRestInterfaceTest #test19listPurchasesAfterAddToCartShouldIncludeBookAndTotal stamp: 'DS 12/2/2020 21:03:00'!
PASSED!

!testRun: #InternalRestInterfaceTest #test20listPurchasesAfterAddingMultipleBooksShouldIncludeBooksAndTotal stamp: 'DS 12/2/2020 21:03:00'!
PASSED!

!testRun: #InternalRestInterfaceTest #test21CannotListPurchasesWithUnknownUser stamp: 'DS 12/2/2020 21:03:00'!
PASSED!

----SNAPSHOT----(2 December 2020 21:03:04) CuisUniversity-4384.image priorSource: 17511824!
!InternalRestInterface methodsFor: 'api rest' stamp: 'DS 12/2/2020 21:10:02' prior: 50879330!
listPurchasesWithUser: userID withPassword: pass

	| purchases items history |

	self assertAuthenticate: userID withPassword: pass.
	
	
	history := purchasesByUser at: userID ifAbsent: [OrderedCollection new].
	"history do: [:aCart | items addAll: aCart items]."
	
	items := history 	inject: Bag new 		into: [ :currentBag :aCart | currentBag addAll: aCart items ].
	
	
	purchases := items contents.
	purchases add: 'total' -> (history sum: [ :aCart | aCart total ] ifEmpty: [0]).

	^purchases.! !

!testRun: #InternalRestInterfaceTest #test01CreateCartHaveEmptyList stamp: 'DS 12/2/2020 21:10:04'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 12/2/2020 21:10:04'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 12/2/2020 21:10:04'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 12/2/2020 21:10:04'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05AddedItemIsIncludedInCartList stamp: 'DS 12/2/2020 21:10:04'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 12/2/2020 21:10:04'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CannotAddToUnknownCartID stamp: 'DS 12/2/2020 21:10:04'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'DS 12/2/2020 21:10:04'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'DS 12/2/2020 21:10:04'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 12/2/2020 21:10:04'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11CannotListAnUnknownCartID stamp: 'DS 12/2/2020 21:10:04'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAddOnExpiredCart stamp: 'DS 12/2/2020 21:10:04'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAssignSameIDForDifferentCheckoutTransactions stamp: 'DS 12/2/2020 21:10:04'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13CannotListOnExpiredCart stamp: 'DS 12/2/2020 21:10:04'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14CannotCheckoutOnExpiredCart stamp: 'DS 12/2/2020 21:10:04'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15AddAnItemShouldRestartExpirationTime stamp: 'DS 12/2/2020 21:10:04'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16ListCartShouldRestartExpirationTime stamp: 'DS 12/2/2020 21:10:04'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17CheckoutShouldRestartExpirationTime stamp: 'DS 12/2/2020 21:10:04'!
PASSED!

!testRun: #InternalRestInterfaceTest #test18listPurchasesShouldReturnZeroWithNewUser stamp: 'DS 12/2/2020 21:10:04'!
PASSED!

!testRun: #InternalRestInterfaceTest #test19listPurchasesAfterAddToCartShouldIncludeBookAndTotal stamp: 'DS 12/2/2020 21:10:04'!
PASSED!

!testRun: #InternalRestInterfaceTest #test20listPurchasesAfterAddingMultipleBooksShouldIncludeBooksAndTotal stamp: 'DS 12/2/2020 21:10:04'!
PASSED!

!testRun: #InternalRestInterfaceTest #test21CannotListPurchasesWithUnknownUser stamp: 'DS 12/2/2020 21:10:04'!
PASSED!
!InternalRestInterface methodsFor: 'api rest' stamp: 'DS 12/2/2020 21:10:55' prior: 50879432!
listPurchasesWithUser: userID withPassword: pass

	| items history |

	self assertAuthenticate: userID withPassword: pass.

	history := purchasesByUser at: userID ifAbsent: [OrderedCollection new].
	items := (history 	inject: Bag new 		into: [ :currentBag :aCart | currentBag addAll: aCart items ]) contents.

	items add: 'total' -> (history sum: [ :aCart | aCart total ] ifEmpty: [0]).

	^items.! !
!InternalRestInterface methodsFor: 'api rest' stamp: 'DS 12/2/2020 21:11:17' prior: 50879534!
listPurchasesWithUser: userID withPassword: pass

	| items history |

	self assertAuthenticate: userID withPassword: pass.

	history := purchasesByUser at: userID ifAbsent: [OrderedCollection new].

	items := (history 	inject: Bag new 		into: [ :currentBag :aCart | currentBag addAll: aCart items ]) contents.
	items add: 'total' -> (history sum: [ :aCart | aCart total ] ifEmpty: [ 0 ]).

	^items.! !
!InternalRestInterface methodsFor: 'api rest' stamp: 'DS 12/2/2020 21:12:35' prior: 50879550!
listPurchasesWithUser: userID withPassword: pass

	| items history |

	self assertAuthenticate: userID withPassword: pass.

	history := purchasesByUser at: userID ifAbsent: [OrderedCollection new].

	items := (		history
				inject: Bag new
				into: [ :currentBag :aCart | currentBag addAll: aCart items ]
			) contents.
	items add: 'total' -> (history sum: [ :aCart | aCart total ] ifEmpty: [ 0 ]).

	^items.! !
!InternalRestInterface methodsFor: 'api rest' stamp: 'DS 12/2/2020 21:12:44' prior: 50879566!
listPurchasesWithUser: userID withPassword: pass

	| items purchases |

	self assertAuthenticate: userID withPassword: pass.

	purchases := purchasesByUser at: userID ifAbsent: [OrderedCollection new].

	items := (		purchases
				inject: Bag new
				into: [ :currentBag :aCart | currentBag addAll: aCart items ]
			) contents.
	items add: 'total' -> (purchases sum: [ :aCart | aCart total ] ifEmpty: [ 0 ]).

	^items.! !
!InternalRestInterface methodsFor: 'api rest' stamp: 'DS 12/2/2020 21:13:13' prior: 50879582!
listPurchasesWithUser: userID withPassword: aPassword

	| items purchases |

	self assertAuthenticate: userID withPassword: aPassword.

	purchases := purchasesByUser at: userID ifAbsent: [OrderedCollection new].

	items := (		purchases
				inject: Bag new
				into: [ :currentBag :aCart | currentBag addAll: aCart items ]
			) contents.
	items add: 'total' -> (purchases sum: [ :aCart | aCart total ] ifEmpty: [ 0 ]).

	^items.! !
!InternalRestInterface methodsFor: 'api rest' stamp: 'DS 12/2/2020 21:13:27' prior: 50879599!
listPurchasesWithUser: userID withPassword: aPassword

	| items purchases |

	self assertAuthenticate: userID withPassword: aPassword.

	purchases := purchasesByUser at: userID ifAbsent: [ OrderedCollection new ].

	items := (		purchases
				inject: Bag new
				into: [ :currentBag :aCart | currentBag addAll: aCart items ]
			) contents.
	items add: 'total' -> (purchases sum: [ :aCart | aCart total ] ifEmpty: [ 0 ]).

	^items.! !
!Cart methodsFor: 'total' stamp: 'DS 12/2/2020 21:16:40' prior: 50876749!
total
	
	^ items sum: [ :anItem | catalog at: anItem ].! !

!testRun: #InternalRestInterfaceTest #test01CreateCartHaveEmptyList stamp: 'DS 12/2/2020 21:16:43'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 12/2/2020 21:16:43'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 12/2/2020 21:16:43'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 12/2/2020 21:16:43'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05AddedItemIsIncludedInCartList stamp: 'DS 12/2/2020 21:16:43'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 12/2/2020 21:16:43'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CannotAddToUnknownCartID stamp: 'DS 12/2/2020 21:16:43'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'DS 12/2/2020 21:16:43'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'DS 12/2/2020 21:16:43'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 12/2/2020 21:16:43'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11CannotListAnUnknownCartID stamp: 'DS 12/2/2020 21:16:43'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAddOnExpiredCart stamp: 'DS 12/2/2020 21:16:43'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAssignSameIDForDifferentCheckoutTransactions stamp: 'DS 12/2/2020 21:16:43'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13CannotListOnExpiredCart stamp: 'DS 12/2/2020 21:16:43'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14CannotCheckoutOnExpiredCart stamp: 'DS 12/2/2020 21:16:43'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15AddAnItemShouldRestartExpirationTime stamp: 'DS 12/2/2020 21:16:43'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16ListCartShouldRestartExpirationTime stamp: 'DS 12/2/2020 21:16:43'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17CheckoutShouldRestartExpirationTime stamp: 'DS 12/2/2020 21:16:43'!
PASSED!

!testRun: #InternalRestInterfaceTest #test18listPurchasesShouldReturnZeroWithNewUser stamp: 'DS 12/2/2020 21:16:43'!
PASSED!

!testRun: #InternalRestInterfaceTest #test19listPurchasesAfterAddToCartShouldIncludeBookAndTotal stamp: 'DS 12/2/2020 21:16:43'!
PASSED!

!testRun: #InternalRestInterfaceTest #test20listPurchasesAfterAddingMultipleBooksShouldIncludeBooksAndTotal stamp: 'DS 12/2/2020 21:16:43'!
PASSED!

!testRun: #InternalRestInterfaceTest #test21CannotListPurchasesWithUnknownUser stamp: 'DS 12/2/2020 21:16:43'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'DS 12/2/2020 21:16:52'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'DS 12/2/2020 21:16:52'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'DS 12/2/2020 21:16:52'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'DS 12/2/2020 21:16:52'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'DS 12/2/2020 21:16:52'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'DS 12/2/2020 21:16:52'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'DS 12/2/2020 21:16:52'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'DS 12/2/2020 21:16:52'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'DS 12/2/2020 21:16:52'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'DS 12/2/2020 21:16:52'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'DS 12/2/2020 21:16:52'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'DS 12/2/2020 21:16:52'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'DS 12/2/2020 21:16:52'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'DS 12/2/2020 21:16:52'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberShouldHave16Characters stamp: 'DS 12/2/2020 21:16:52'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardOwnerCanNotBeEmpty stamp: 'DS 12/2/2020 21:16:52'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01CreateCartHaveEmptyList stamp: 'DS 12/2/2020 21:16:52'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 12/2/2020 21:16:52'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 12/2/2020 21:16:52'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 12/2/2020 21:16:52'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05AddedItemIsIncludedInCartList stamp: 'DS 12/2/2020 21:16:52'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 12/2/2020 21:16:52'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CannotAddToUnknownCartID stamp: 'DS 12/2/2020 21:16:52'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'DS 12/2/2020 21:16:52'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'DS 12/2/2020 21:16:52'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 12/2/2020 21:16:52'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11CannotListAnUnknownCartID stamp: 'DS 12/2/2020 21:16:52'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAddOnExpiredCart stamp: 'DS 12/2/2020 21:16:52'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAssignSameIDForDifferentCheckoutTransactions stamp: 'DS 12/2/2020 21:16:52'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13CannotListOnExpiredCart stamp: 'DS 12/2/2020 21:16:52'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14CannotCheckoutOnExpiredCart stamp: 'DS 12/2/2020 21:16:52'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15AddAnItemShouldRestartExpirationTime stamp: 'DS 12/2/2020 21:16:52'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16ListCartShouldRestartExpirationTime stamp: 'DS 12/2/2020 21:16:52'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17CheckoutShouldRestartExpirationTime stamp: 'DS 12/2/2020 21:16:52'!
PASSED!

!testRun: #InternalRestInterfaceTest #test18listPurchasesShouldReturnZeroWithNewUser stamp: 'DS 12/2/2020 21:16:52'!
PASSED!

!testRun: #InternalRestInterfaceTest #test19listPurchasesAfterAddToCartShouldIncludeBookAndTotal stamp: 'DS 12/2/2020 21:16:52'!
PASSED!

!testRun: #InternalRestInterfaceTest #test20listPurchasesAfterAddingMultipleBooksShouldIncludeBooksAndTotal stamp: 'DS 12/2/2020 21:16:52'!
PASSED!

!testRun: #InternalRestInterfaceTest #test21CannotListPurchasesWithUnknownUser stamp: 'DS 12/2/2020 21:16:52'!
PASSED!

----SNAPSHOT----(2 December 2020 21:16:56) CuisUniversity-4384.image priorSource: 17528895!
!SessionCart methodsFor: 'accesing' stamp: 'DS 12/2/2020 21:17:52'!
userID

	^userID ! !
!InternalRestInterface methodsFor: 'as yet unclassified' stamp: 'DS 12/2/2020 21:17:52' prior: 50878735!
checkOutCart: aSessionCartID withCCN: anCCN withCCED: anCCED andCCO: anCCO throught: aMerchantProccesor on: aDate

	| creditCard aSessionCart purchases cashier |

	aSessionCart := self sessionCartWith: aSessionCartID.

	creditCard := CreditCard withNumber: anCCN withOwner: anCCO expiringOn: anCCED.

	cashier := Cashier
				toCheckout: aSessionCart cart 
				charging: creditCard
				throught: aMerchantProccesor
				on: aDate
				registeringOn: salesBook.
	cashier checkOut.

	purchases := self purchsesOfUser: aSessionCart userID.
	purchases addLast: aSessionCart cart.
	
	^aSessionCartID.! !

!methodRemoval: SessionCart #user stamp: 'DS 12/2/2020 21:17:52'!
user

	^userID !

----SNAPSHOT----(2 December 2020 21:19:59) CuisUniversity-4384.image priorSource: 17542527!
!InternalRestInterfaceTest methodsFor: 'create' stamp: 'DS 12/2/2020 21:20:26' prior: 50876592!
test04CannotAssignSameIDForDifferentCarts

	| tusLibros cartID cartID2 |

	tusLibros := testObjectsFactory tusLibros.
	
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	cartID2 := tusLibros createCartForUser: 2 withPassword: 'pass'.

	self deny: cartID = cartID2.! !

!testRun: #InternalRestInterfaceTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 12/2/2020 21:20:27'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01CreateCartHaveEmptyList stamp: 'DS 12/2/2020 21:20:27'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 12/2/2020 21:20:27'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 12/2/2020 21:20:27'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 12/2/2020 21:20:27'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05AddedItemIsIncludedInCartList stamp: 'DS 12/2/2020 21:20:27'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 12/2/2020 21:20:27'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CannotAddToUnknownCartID stamp: 'DS 12/2/2020 21:20:27'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'DS 12/2/2020 21:20:27'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'DS 12/2/2020 21:20:27'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 12/2/2020 21:20:27'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11CannotListAnUnknownCartID stamp: 'DS 12/2/2020 21:20:27'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAddOnExpiredCart stamp: 'DS 12/2/2020 21:20:27'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAssignSameIDForDifferentCheckoutTransactions stamp: 'DS 12/2/2020 21:20:27'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13CannotListOnExpiredCart stamp: 'DS 12/2/2020 21:20:27'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14CannotCheckoutOnExpiredCart stamp: 'DS 12/2/2020 21:20:27'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15AddAnItemShouldRestartExpirationTime stamp: 'DS 12/2/2020 21:20:27'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16ListCartShouldRestartExpirationTime stamp: 'DS 12/2/2020 21:20:27'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17CheckoutShouldRestartExpirationTime stamp: 'DS 12/2/2020 21:20:27'!
PASSED!

!testRun: #InternalRestInterfaceTest #test18listPurchasesShouldReturnZeroWithNewUser stamp: 'DS 12/2/2020 21:20:27'!
PASSED!

!testRun: #InternalRestInterfaceTest #test19listPurchasesAfterAddToCartShouldIncludeBookAndTotal stamp: 'DS 12/2/2020 21:20:27'!
PASSED!

!testRun: #InternalRestInterfaceTest #test20listPurchasesAfterAddingMultipleBooksShouldIncludeBooksAndTotal stamp: 'DS 12/2/2020 21:20:27'!
PASSED!

!testRun: #InternalRestInterfaceTest #test21CannotListPurchasesWithUnknownUser stamp: 'DS 12/2/2020 21:20:27'!
PASSED!
!InternalRestInterfaceTest methodsFor: 'adding' stamp: 'DS 12/2/2020 21:21:52' prior: 50876328!
test05AddedItemIsIncludedInCartList

	| tusLibros cartID expectedCartList |

	expectedCartList := Bag new.
	expectedCartList add: testObjectsFactory itemSellByTheStore withOccurrences: 5.

	tusLibros := testObjectsFactory tusLibros.	
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.

	tusLibros addToCart: cartID aQuantity: 5 of: testObjectsFactory itemSellByTheStore.
	self assert: expectedCartList equals: (tusLibros listCartFor: cartID).! !

!testRun: #InternalRestInterfaceTest #test05AddedItemIsIncludedInCartList stamp: 'DS 12/2/2020 21:21:56'!
PASSED!
!InternalRestInterfaceTest methodsFor: 'list purchases' stamp: 'DS 12/2/2020 21:27:50'!
test19ListPurchasesShouldIncludeItemsAndTotalAfterCheckout

	| tusLibros expectedPurchases cartID |

	expectedPurchases := Dictionary 
		with: (testObjectsFactory itemSellByTheStore -> 1)
		with: 'total' -> testObjectsFactory itemSellByTheStorePrice.
		
	tusLibros := testObjectsFactory tusLibros.
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	self tusLibros: tusLibros checkoutCartID: cartID.
	
	self assert: expectedPurchases equals: (tusLibros listPurchasesWithUser: 1 withPassword: 'pass').! !

!methodRemoval: InternalRestInterfaceTest #test19listPurchasesAfterAddToCartShouldIncludeBookAndTotal stamp: 'DS 12/2/2020 21:27:50'!
test19listPurchasesAfterAddToCartShouldIncludeBookAndTotal

	| tusLibros expectedPurchases cartID |

	expectedPurchases := Dictionary 
		with: (testObjectsFactory itemSellByTheStore -> 1)
		with: 'total' -> testObjectsFactory itemSellByTheStorePrice.
		
	tusLibros := testObjectsFactory tusLibros.
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	self tusLibros: tusLibros checkoutCartID: cartID.
	
	self assert: expectedPurchases equals: (tusLibros listPurchasesWithUser: 1 withPassword: 'pass').!
!InternalRestInterfaceTest methodsFor: 'list purchases' stamp: 'DS 12/2/2020 21:28:41' prior: 50879081!
test20listPurchasesAfterAddingMultipleBooksShouldIncludeBooksAndTotal

	| tusLibros expectedPurchases firstCartID |

	expectedPurchases := Dictionary 
		with: (testObjectsFactory itemSellByTheStore -> 5)
		with: 'total' -> (testObjectsFactory itemSellByTheStorePrice * 5).
		
	tusLibros := testObjectsFactory tusLibros.
	firstCartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	tusLibros addToCart: firstCartID aQuantity: 5 of: testObjectsFactory itemSellByTheStore.
	self tusLibros: tusLibros checkoutCartID: firstCartID.
	
	self assert: expectedPurchases equals: (tusLibros listPurchasesWithUser: 1 withPassword: 'pass').! !
!InternalRestInterfaceTest methodsFor: 'list purchases' stamp: 'DS 12/2/2020 21:29:30' prior: 50880056!
test20listPurchasesAfterAddingMultipleBooksShouldIncludeBooksAndTotal

	| tusLibros expectedPurchases firstCartID secondCartID |

	expectedPurchases := Dictionary 
		with: (testObjectsFactory itemSellByTheStore -> 8)
		with: 'total' -> (testObjectsFactory itemSellByTheStorePrice * 8).
	
	tusLibros := testObjectsFactory tusLibros.
	firstCartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	secondCartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	tusLibros addToCart: firstCartID aQuantity: 5 of: testObjectsFactory itemSellByTheStore.
	tusLibros addToCart: secondCartID aQuantity: 3 of: testObjectsFactory itemSellByTheStore.
	self tusLibros: tusLibros checkoutCartID: firstCartID.
	self tusLibros: tusLibros checkoutCartID: secondCartID.

	self assert: expectedPurchases equals: (tusLibros listPurchasesWithUser: 1 withPassword: 'pass').! !

!testRun: #InternalRestInterfaceTest #test20listPurchasesAfterAddingMultipleBooksShouldIncludeBooksAndTotal stamp: 'DS 12/2/2020 21:29:31'!
FAILURE!

!testRun: #InternalRestInterfaceTest #test20listPurchasesAfterAddingMultipleBooksShouldIncludeBooksAndTotal stamp: 'DS 12/2/2020 21:29:40'!
FAILURE!

!testRun: #InternalRestInterfaceTest #test20listPurchasesAfterAddingMultipleBooksShouldIncludeBooksAndTotal stamp: 'DS 12/2/2020 21:29:44'!
FAILURE!

aCart!

	purchases
				inject: Bag new
				into: [ :currentBag :aCart | currentBag addAll: aCart items ]!

purchases!

self first!

self first items!

self second items!
!InternalRestInterface methodsFor: 'api rest' stamp: 'DS 12/2/2020 21:36:05' prior: 50879616!
listPurchasesWithUser: userID withPassword: aPassword

	| items purchases |

	self assertAuthenticate: userID withPassword: aPassword.

	purchases := purchasesByUser at: userID ifAbsent: [ OrderedCollection new ].

	items := (		purchases
				inject: Bag new
				into: [ :currentBag :aCart | currentBag addAll: aCart items ]
			).
	items := items contents.
	items add: 'total' -> (purchases sum: [ :aCart | aCart total ] ifEmpty: [ 0 ]).

	^items.! !
!InternalRestInterface methodsFor: 'api rest' stamp: 'DS 12/2/2020 21:36:58' prior: 50880130!
listPurchasesWithUser: userID withPassword: aPassword

	| items purchases bag |

	self assertAuthenticate: userID withPassword: aPassword.

	purchases := purchasesByUser at: userID ifAbsent: [ OrderedCollection new ].

	bag := Bag new.
	items := (		purchases
				inject: bag
				into: [ :currentBag :aCart | currentBag addAll: aCart items ]
			).
	items := items contents.
	items add: 'total' -> (purchases sum: [ :aCart | aCart total ] ifEmpty: [ 0 ]).

	^items.! !
!InternalRestInterface methodsFor: 'api rest' stamp: 'DS 12/2/2020 21:39:52' prior: 50880147!
listPurchasesWithUser: userID withPassword: aPassword

	| items purchases |

	self assertAuthenticate: userID withPassword: aPassword.

	purchases := purchasesByUser at: userID ifAbsent: [ OrderedCollection new ].

	items := (	purchases
			inject: Bag new
			into: [ :currentBag :aCart | 
				currentBag addAll: aCart items.
				currentBag.
			]) contents.
	items add: 'total' -> (purchases sum: [ :aCart | aCart total ] ifEmpty: [ 0 ]).

	^items.! !

!testRun: #InternalRestInterfaceTest #test20listPurchasesAfterAddingMultipleBooksShouldIncludeBooksAndTotal stamp: 'DS 12/2/2020 21:39:53'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01CreateCartHaveEmptyList stamp: 'DS 12/2/2020 21:39:53'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 12/2/2020 21:39:53'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 12/2/2020 21:39:53'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 12/2/2020 21:39:53'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05AddedItemIsIncludedInCartList stamp: 'DS 12/2/2020 21:39:53'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 12/2/2020 21:39:53'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CannotAddToUnknownCartID stamp: 'DS 12/2/2020 21:39:53'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'DS 12/2/2020 21:39:53'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'DS 12/2/2020 21:39:53'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 12/2/2020 21:39:53'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11CannotListAnUnknownCartID stamp: 'DS 12/2/2020 21:39:53'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAddOnExpiredCart stamp: 'DS 12/2/2020 21:39:53'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAssignSameIDForDifferentCheckoutTransactions stamp: 'DS 12/2/2020 21:39:53'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13CannotListOnExpiredCart stamp: 'DS 12/2/2020 21:39:53'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14CannotCheckoutOnExpiredCart stamp: 'DS 12/2/2020 21:39:53'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15AddAnItemShouldRestartExpirationTime stamp: 'DS 12/2/2020 21:39:53'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16ListCartShouldRestartExpirationTime stamp: 'DS 12/2/2020 21:39:53'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17CheckoutShouldRestartExpirationTime stamp: 'DS 12/2/2020 21:39:53'!
PASSED!

!testRun: #InternalRestInterfaceTest #test18listPurchasesShouldReturnZeroWithNewUser stamp: 'DS 12/2/2020 21:39:53'!
PASSED!

!testRun: #InternalRestInterfaceTest #test19ListPurchasesShouldIncludeItemsAndTotalAfterCheckout stamp: 'DS 12/2/2020 21:39:53'!
PASSED!

!testRun: #InternalRestInterfaceTest #test20listPurchasesAfterAddingMultipleBooksShouldIncludeBooksAndTotal stamp: 'DS 12/2/2020 21:39:53'!
PASSED!

!testRun: #InternalRestInterfaceTest #test21CannotListPurchasesWithUnknownUser stamp: 'DS 12/2/2020 21:39:53'!
PASSED!
!InternalRestInterface methodsFor: 'api rest' stamp: 'DS 12/2/2020 21:41:42' prior: 50880165!
listPurchasesWithUser: userID withPassword: aPassword

	| items purchases |

	self assertAuthenticate: userID withPassword: aPassword.

	purchases := purchasesByUser at: userID ifAbsent: [ OrderedCollection new ].

	items := (	purchases
			inject: Bag new
			into: [ :currentBag :aCart | 
				currentBag addAll: aCart items.
				currentBag.
			]) contents.
	items add: 'total' -> (purchases sum: [ :aCart | aCart total ] ifEmpty: [ 0 ]).

	^items.! !
!InternalRestInterface methodsFor: 'api rest' stamp: 'DS 12/2/2020 21:43:40'!
groupPurchasesByItem: aPurchasesCollection

	^(aPurchasesCollection
		inject: Bag new
		into: [ :currentBag :aCart | 
				currentBag addAll: aCart items.
				currentBag.
		]
	 ) contents.! !
!InternalRestInterface methodsFor: 'api rest' stamp: 'DS 12/2/2020 21:44:32' prior: 50880270!
listPurchasesWithUser: userID withPassword: aPassword

	| items purchases |

	self assertAuthenticate: userID withPassword: aPassword.

	purchases := purchasesByUser at: userID ifAbsent: [ OrderedCollection new ].

	items := self groupPurchasesByItem: purchases.
	items add: 'total' -> (purchases sum: [ :aCart | aCart total ] ifEmpty: [ 0 ]).

	^items.! !
!InternalRestInterfaceTest methodsFor: 'list purchases' stamp: 'DS 12/2/2020 21:45:28'!
test20ListPurchasesShouldIncludeItemsAndTotalAfterMultipleCheckout

	| tusLibros expectedPurchases firstCartID secondCartID |

	expectedPurchases := Dictionary 
		with: (testObjectsFactory itemSellByTheStore -> 8)
		with: 'total' -> (testObjectsFactory itemSellByTheStorePrice * 8).
	
	tusLibros := testObjectsFactory tusLibros.
	firstCartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	secondCartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	tusLibros addToCart: firstCartID aQuantity: 5 of: testObjectsFactory itemSellByTheStore.
	tusLibros addToCart: secondCartID aQuantity: 3 of: testObjectsFactory itemSellByTheStore.
	self tusLibros: tusLibros checkoutCartID: firstCartID.
	self tusLibros: tusLibros checkoutCartID: secondCartID.

	self assert: expectedPurchases equals: (tusLibros listPurchasesWithUser: 1 withPassword: 'pass').! !

!methodRemoval: InternalRestInterfaceTest #test20listPurchasesAfterAddingMultipleBooksShouldIncludeBooksAndTotal stamp: 'DS 12/2/2020 21:45:28'!
test20listPurchasesAfterAddingMultipleBooksShouldIncludeBooksAndTotal

	| tusLibros expectedPurchases firstCartID secondCartID |

	expectedPurchases := Dictionary 
		with: (testObjectsFactory itemSellByTheStore -> 8)
		with: 'total' -> (testObjectsFactory itemSellByTheStorePrice * 8).
	
	tusLibros := testObjectsFactory tusLibros.
	firstCartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	secondCartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	tusLibros addToCart: firstCartID aQuantity: 5 of: testObjectsFactory itemSellByTheStore.
	tusLibros addToCart: secondCartID aQuantity: 3 of: testObjectsFactory itemSellByTheStore.
	self tusLibros: tusLibros checkoutCartID: firstCartID.
	self tusLibros: tusLibros checkoutCartID: secondCartID.

	self assert: expectedPurchases equals: (tusLibros listPurchasesWithUser: 1 withPassword: 'pass').!

----SNAPSHOT----(2 December 2020 21:45:32) CuisUniversity-4384.image priorSource: 17543527!
!InternalRestInterfaceTest methodsFor: 'list purchases' stamp: 'DS 12/2/2020 21:45:38'!
test18ListPurchasesShouldReturnZeroWithNewUser

	| tusLibros expectedPurchases  |

	expectedPurchases := Dictionary with: ('total' -> 0).
	tusLibros := testObjectsFactory tusLibros.
	
	self assert: expectedPurchases equals: (tusLibros listPurchasesWithUser: 1 withPassword: 'pass').! !

!methodRemoval: InternalRestInterfaceTest #test18listPurchasesShouldReturnZeroWithNewUser stamp: 'DS 12/2/2020 21:45:38'!
test18listPurchasesShouldReturnZeroWithNewUser

	| tusLibros expectedPurchases  |

	expectedPurchases := Dictionary with: ('total' -> 0).
	tusLibros := testObjectsFactory tusLibros.
	
	self assert: expectedPurchases equals: (tusLibros listPurchasesWithUser: 1 withPassword: 'pass').!

----SNAPSHOT----(2 December 2020 21:46:05) CuisUniversity-4384.image priorSource: 17559064!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'DS 12/2/2020 21:46:36'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'DS 12/2/2020 21:46:36'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'DS 12/2/2020 21:46:36'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'DS 12/2/2020 21:46:36'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'DS 12/2/2020 21:46:36'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'DS 12/2/2020 21:46:36'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'DS 12/2/2020 21:46:36'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'DS 12/2/2020 21:46:36'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'DS 12/2/2020 21:46:36'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'DS 12/2/2020 21:46:36'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'DS 12/2/2020 21:46:36'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'DS 12/2/2020 21:46:36'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'DS 12/2/2020 21:46:36'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'DS 12/2/2020 21:46:36'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberShouldHave16Characters stamp: 'DS 12/2/2020 21:46:36'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardOwnerCanNotBeEmpty stamp: 'DS 12/2/2020 21:46:36'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01CreateCartHaveEmptyList stamp: 'DS 12/2/2020 21:46:36'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 12/2/2020 21:46:36'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 12/2/2020 21:46:36'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 12/2/2020 21:46:36'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05AddedItemIsIncludedInCartList stamp: 'DS 12/2/2020 21:46:36'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 12/2/2020 21:46:36'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CannotAddToUnknownCartID stamp: 'DS 12/2/2020 21:46:36'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'DS 12/2/2020 21:46:36'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'DS 12/2/2020 21:46:36'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 12/2/2020 21:46:36'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11CannotListAnUnknownCartID stamp: 'DS 12/2/2020 21:46:36'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAddOnExpiredCart stamp: 'DS 12/2/2020 21:46:36'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAssignSameIDForDifferentCheckoutTransactions stamp: 'DS 12/2/2020 21:46:36'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13CannotListOnExpiredCart stamp: 'DS 12/2/2020 21:46:36'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14CannotCheckoutOnExpiredCart stamp: 'DS 12/2/2020 21:46:36'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15AddAnItemShouldRestartExpirationTime stamp: 'DS 12/2/2020 21:46:36'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16ListCartShouldRestartExpirationTime stamp: 'DS 12/2/2020 21:46:36'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17CheckoutShouldRestartExpirationTime stamp: 'DS 12/2/2020 21:46:36'!
PASSED!

!testRun: #InternalRestInterfaceTest #test18ListPurchasesShouldReturnZeroWithNewUser stamp: 'DS 12/2/2020 21:46:36'!
PASSED!

!testRun: #InternalRestInterfaceTest #test19ListPurchasesShouldIncludeItemsAndTotalAfterCheckout stamp: 'DS 12/2/2020 21:46:36'!
PASSED!

!testRun: #InternalRestInterfaceTest #test20ListPurchasesShouldIncludeItemsAndTotalAfterMultipleCheckout stamp: 'DS 12/2/2020 21:46:36'!
PASSED!

!testRun: #InternalRestInterfaceTest #test21CannotListPurchasesWithUnknownUser stamp: 'DS 12/2/2020 21:46:36'!
PASSED!
!InternalRestInterface methodsFor: 'api rest' stamp: 'DS 12/2/2020 21:53:29' prior: 50878688!
addToCart: aSessionCartID aQuantity: aQuantity of: anItem
	
	| aSessionCart |

	aSessionCart := self sessionCartWith: aSessionCartID.
	aSessionCart add: aQuantity of: anItem.
	
	! !
!InternalRestInterface methodsFor: 'api rest' stamp: 'DS 12/2/2020 21:53:39' prior: 50878706!
listCartFor: aSessionCartID

	| aSessionCart |

	aSessionCart := self sessionCartWith: aSessionCartID.

	^aSessionCart items.! !
!InternalRestInterface methodsFor: 'api rest' stamp: 'DS 12/2/2020 21:54:10' prior: 50880538!
addToCart: aSessionCartID aQuantity: aQuantity of: anItem
	
	| aSessionCart |

	aSessionCart := self sessionCartWith: aSessionCartID.
	aSessionCart add: aQuantity of: anItem.! !
!SessionCart methodsFor: 'cart actions' stamp: 'DS 12/2/2020 21:55:09'!
add: aQuantity of: anItem

	cart add: aQuantity of: anItem.! !
!SessionCart methodsFor: 'cart actions' stamp: 'DS 12/2/2020 21:55:16'!
items

	^cart items.! !

!testRun: #InternalRestInterfaceTest #test01CreateCartHaveEmptyList stamp: 'DS 12/2/2020 21:56:12'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 12/2/2020 21:56:12'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 12/2/2020 21:56:12'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 12/2/2020 21:56:12'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05AddedItemIsIncludedInCartList stamp: 'DS 12/2/2020 21:56:12'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 12/2/2020 21:56:12'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CannotAddToUnknownCartID stamp: 'DS 12/2/2020 21:56:12'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'DS 12/2/2020 21:56:12'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'DS 12/2/2020 21:56:12'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 12/2/2020 21:56:12'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11CannotListAnUnknownCartID stamp: 'DS 12/2/2020 21:56:12'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAddOnExpiredCart stamp: 'DS 12/2/2020 21:56:12'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAssignSameIDForDifferentCheckoutTransactions stamp: 'DS 12/2/2020 21:56:12'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13CannotListOnExpiredCart stamp: 'DS 12/2/2020 21:56:12'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14CannotCheckoutOnExpiredCart stamp: 'DS 12/2/2020 21:56:12'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15AddAnItemShouldRestartExpirationTime stamp: 'DS 12/2/2020 21:56:12'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16ListCartShouldRestartExpirationTime stamp: 'DS 12/2/2020 21:56:12'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17CheckoutShouldRestartExpirationTime stamp: 'DS 12/2/2020 21:56:12'!
PASSED!

!testRun: #InternalRestInterfaceTest #test18ListPurchasesShouldReturnZeroWithNewUser stamp: 'DS 12/2/2020 21:56:12'!
PASSED!

!testRun: #InternalRestInterfaceTest #test19ListPurchasesShouldIncludeItemsAndTotalAfterCheckout stamp: 'DS 12/2/2020 21:56:12'!
PASSED!

!testRun: #InternalRestInterfaceTest #test20ListPurchasesShouldIncludeItemsAndTotalAfterMultipleCheckout stamp: 'DS 12/2/2020 21:56:12'!
PASSED!

!testRun: #InternalRestInterfaceTest #test21CannotListPurchasesWithUnknownUser stamp: 'DS 12/2/2020 21:56:12'!
PASSED!
!InternalRestInterface methodsFor: 'api rest' stamp: 'DS 12/2/2020 21:58:55' prior: 50879862!
checkOutCart: aSessionCartID withCCN: anCCN withCCED: anCCED andCCO: anCCO throught: aMerchantProccesor on: aDate

	| creditCard aSessionCart purchases cashier |

	aSessionCart := self sessionCartWith: aSessionCartID.

	creditCard := CreditCard withNumber: anCCN withOwner: anCCO expiringOn: anCCED.

	cashier := Cashier
				toCheckout: aSessionCart cart 
				charging: creditCard
				throught: aMerchantProccesor
				on: aDate
				registeringOn: salesBook.
	cashier checkOut.

	purchases := self purchsesOfUser: aSessionCart userID.
	aSessionCart registeringOn: purchases.
	
	^aSessionCartID.! !
!SessionCart methodsFor: 'cart actions' stamp: 'DS 12/2/2020 21:59:31'!
registeringOn: aPurchaseCollection

	aPurchaseCollection addLast: cart.! !

!testRun: #InternalRestInterfaceTest #test01CreateCartHaveEmptyList stamp: 'DS 12/2/2020 21:59:56'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 12/2/2020 21:59:56'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 12/2/2020 21:59:56'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 12/2/2020 21:59:56'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05AddedItemIsIncludedInCartList stamp: 'DS 12/2/2020 21:59:56'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 12/2/2020 21:59:56'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CannotAddToUnknownCartID stamp: 'DS 12/2/2020 21:59:56'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'DS 12/2/2020 21:59:56'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'DS 12/2/2020 21:59:56'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 12/2/2020 21:59:56'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11CannotListAnUnknownCartID stamp: 'DS 12/2/2020 21:59:56'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAddOnExpiredCart stamp: 'DS 12/2/2020 21:59:56'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAssignSameIDForDifferentCheckoutTransactions stamp: 'DS 12/2/2020 21:59:56'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13CannotListOnExpiredCart stamp: 'DS 12/2/2020 21:59:56'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14CannotCheckoutOnExpiredCart stamp: 'DS 12/2/2020 21:59:56'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15AddAnItemShouldRestartExpirationTime stamp: 'DS 12/2/2020 21:59:56'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16ListCartShouldRestartExpirationTime stamp: 'DS 12/2/2020 21:59:56'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17CheckoutShouldRestartExpirationTime stamp: 'DS 12/2/2020 21:59:56'!
PASSED!

!testRun: #InternalRestInterfaceTest #test18ListPurchasesShouldReturnZeroWithNewUser stamp: 'DS 12/2/2020 21:59:56'!
PASSED!

!testRun: #InternalRestInterfaceTest #test19ListPurchasesShouldIncludeItemsAndTotalAfterCheckout stamp: 'DS 12/2/2020 21:59:56'!
PASSED!

!testRun: #InternalRestInterfaceTest #test20ListPurchasesShouldIncludeItemsAndTotalAfterMultipleCheckout stamp: 'DS 12/2/2020 21:59:56'!
PASSED!

!testRun: #InternalRestInterfaceTest #test21CannotListPurchasesWithUnknownUser stamp: 'DS 12/2/2020 21:59:56'!
PASSED!
!StoreTestObjectsFactory methodsFor: 'tusLibros' stamp: 'DS 12/2/2020 22:03:48'!
authenticator

	^Dictionary with: 1 -> 'pass' with: 2 -> 'pass'.! !
!StoreTestObjectsFactory methodsFor: 'tusLibros' stamp: 'DS 12/2/2020 22:03:59' prior: 50877325!
tusLibros: aClock

	^InternalRestInterface 
		withAuthenticator: self authenticator 
		withCatalog: self defaultCatalog
		usingClock: aClock.! !
!StoreTestObjectsFactory methodsFor: 'tusLibros' stamp: 'DS 12/2/2020 22:04:06' prior: 50877315!
tusLibros

	^InternalRestInterface 
		withAuthenticator: self authenticator
		withCatalog: self defaultCatalog
		usingClock: self.! !
!InternalRestInterfaceTest methodsFor: 'merchant processor protocol' stamp: 'DS 12/2/2020 22:06:14'!
login: aUserID using: aPassword

	| realPassword |

	realPassword := testObjectsFactory authenticator at: aUserID ifAbsent: [ ^false ].

	^realPassword = aPassword.! !
!StoreTestObjectsFactory methodsFor: 'tusLibros' stamp: 'DS 12/2/2020 22:07:08'!
login: aUserID using: aPassword

	| realPassword |

	realPassword := self authenticator at: aUserID ifAbsent: [ ^false ].

	^realPassword = aPassword.! !
!StoreTestObjectsFactory methodsFor: 'tusLibros' stamp: 'DS 12/2/2020 22:07:19' prior: 50880777!
tusLibros

	^InternalRestInterface 
		withAuthenticator: self
		withCatalog: self defaultCatalog
		usingClock: self.! !
!StoreTestObjectsFactory methodsFor: 'tusLibros' stamp: 'DS 12/2/2020 22:07:23' prior: 50880769!
tusLibros: aClock

	^InternalRestInterface 
		withAuthenticator: self
		withCatalog: self defaultCatalog
		usingClock: aClock.! !
!StoreTestObjectsFactory methodsFor: 'tusLibros' stamp: 'DS 12/2/2020 22:07:46'!
users

	^Dictionary with: 1 -> 'pass' with: 2 -> 'pass'.! !

!methodRemoval: StoreTestObjectsFactory #authenticator stamp: 'DS 12/2/2020 22:07:48'!
authenticator

	^Dictionary with: 1 -> 'pass' with: 2 -> 'pass'.!
!StoreTestObjectsFactory methodsFor: 'tusLibros' stamp: 'DS 12/2/2020 22:07:53' prior: 50880793!
login: aUserID using: aPassword

	| realPassword |

	realPassword := self users at: aUserID ifAbsent: [ ^false ].

	^realPassword = aPassword.! !
!InternalRestInterface methodsFor: 'assertions' stamp: 'DS 12/2/2020 22:08:41' prior: 50877095!
assertAuthenticate: aUserID withPassword: aPassword

	(authenticator login: aUserID using: aPassword) ifFalse: [self error: self class badAuthenticationErrorDescription].! !

!testRun: #InternalRestInterfaceTest #test01CreateCartHaveEmptyList stamp: 'DS 12/2/2020 22:08:42'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 12/2/2020 22:08:42'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 12/2/2020 22:08:42'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 12/2/2020 22:08:42'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05AddedItemIsIncludedInCartList stamp: 'DS 12/2/2020 22:08:42'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 12/2/2020 22:08:42'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CannotAddToUnknownCartID stamp: 'DS 12/2/2020 22:08:42'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'DS 12/2/2020 22:08:42'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'DS 12/2/2020 22:08:42'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 12/2/2020 22:08:42'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11CannotListAnUnknownCartID stamp: 'DS 12/2/2020 22:08:42'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAddOnExpiredCart stamp: 'DS 12/2/2020 22:08:42'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAssignSameIDForDifferentCheckoutTransactions stamp: 'DS 12/2/2020 22:08:42'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13CannotListOnExpiredCart stamp: 'DS 12/2/2020 22:08:42'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14CannotCheckoutOnExpiredCart stamp: 'DS 12/2/2020 22:08:42'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15AddAnItemShouldRestartExpirationTime stamp: 'DS 12/2/2020 22:08:42'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16ListCartShouldRestartExpirationTime stamp: 'DS 12/2/2020 22:08:42'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17CheckoutShouldRestartExpirationTime stamp: 'DS 12/2/2020 22:08:42'!
PASSED!

!testRun: #InternalRestInterfaceTest #test18ListPurchasesShouldReturnZeroWithNewUser stamp: 'DS 12/2/2020 22:08:42'!
PASSED!

!testRun: #InternalRestInterfaceTest #test19ListPurchasesShouldIncludeItemsAndTotalAfterCheckout stamp: 'DS 12/2/2020 22:08:42'!
PASSED!

!testRun: #InternalRestInterfaceTest #test20ListPurchasesShouldIncludeItemsAndTotalAfterMultipleCheckout stamp: 'DS 12/2/2020 22:08:42'!
PASSED!

!testRun: #InternalRestInterfaceTest #test21CannotListPurchasesWithUnknownUser stamp: 'DS 12/2/2020 22:08:42'!
PASSED!
!InternalRestInterface methodsFor: 'assertions' stamp: 'DS 12/2/2020 22:09:08' prior: 50880833!
assertAuthenticate: aUserID withPassword: aPassword

	(authenticator login: aUserID using: aPassword) ifFalse: [ self signalBadAuthentication ].! !

!testRun: #InternalRestInterfaceTest #test01CreateCartHaveEmptyList stamp: 'DS 12/2/2020 22:09:10'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 12/2/2020 22:09:10'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 12/2/2020 22:09:10'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 12/2/2020 22:09:10'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05AddedItemIsIncludedInCartList stamp: 'DS 12/2/2020 22:09:10'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 12/2/2020 22:09:10'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CannotAddToUnknownCartID stamp: 'DS 12/2/2020 22:09:10'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'DS 12/2/2020 22:09:10'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'DS 12/2/2020 22:09:10'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 12/2/2020 22:09:10'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11CannotListAnUnknownCartID stamp: 'DS 12/2/2020 22:09:10'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAddOnExpiredCart stamp: 'DS 12/2/2020 22:09:10'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAssignSameIDForDifferentCheckoutTransactions stamp: 'DS 12/2/2020 22:09:10'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13CannotListOnExpiredCart stamp: 'DS 12/2/2020 22:09:10'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14CannotCheckoutOnExpiredCart stamp: 'DS 12/2/2020 22:09:10'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15AddAnItemShouldRestartExpirationTime stamp: 'DS 12/2/2020 22:09:10'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16ListCartShouldRestartExpirationTime stamp: 'DS 12/2/2020 22:09:10'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17CheckoutShouldRestartExpirationTime stamp: 'DS 12/2/2020 22:09:10'!
PASSED!

!testRun: #InternalRestInterfaceTest #test18ListPurchasesShouldReturnZeroWithNewUser stamp: 'DS 12/2/2020 22:09:10'!
PASSED!

!testRun: #InternalRestInterfaceTest #test19ListPurchasesShouldIncludeItemsAndTotalAfterCheckout stamp: 'DS 12/2/2020 22:09:10'!
PASSED!

!testRun: #InternalRestInterfaceTest #test20ListPurchasesShouldIncludeItemsAndTotalAfterMultipleCheckout stamp: 'DS 12/2/2020 22:09:10'!
PASSED!

!testRun: #InternalRestInterfaceTest #test21CannotListPurchasesWithUnknownUser stamp: 'DS 12/2/2020 22:09:10'!
PASSED!

!methodRemoval: InternalRestInterfaceTest #login:using: stamp: 'DS 12/2/2020 22:09:17'!
login: aUserID using: aPassword

	| realPassword |

	realPassword := testObjectsFactory authenticator at: aUserID ifAbsent: [ ^false ].

	^realPassword = aPassword.!

----SNAPSHOT----(2 December 2020 22:09:33) CuisUniversity-4384.image priorSource: 17559956!
!StoreTestObjectsFactory methodsFor: 'session carts' stamp: 'DS 12/2/2020 22:11:48'!
createCartForAnyUser: tusLibros

	^tusLibros createCartForUser: 1 withPassword: 'pass'.! !
!StoreTestObjectsFactory methodsFor: 'session carts' stamp: 'DS 12/2/2020 22:11:56'!
createCartForAnotherUser: tusLibros

	^tusLibros createCartForUser: 2 withPassword: 'pass'.! !
!InternalRestInterfaceTest methodsFor: 'create' stamp: 'DS 12/2/2020 22:12:24' prior: 50876558!
test01CreateCartHaveEmptyList

	| tusLibros sessionCartID |

	tusLibros := testObjectsFactory tusLibros.
	sessionCartID := tusLibros createCartForUser: 1 withPassword: 'pass'.

	self assert: (Bag new) equals: (tusLibros listCartFor: sessionCartID).! !
!InternalRestInterfaceTest methodsFor: 'create' stamp: 'DS 12/2/2020 22:12:42' prior: 50881039!
test01CreateCartHaveEmptyList

	| tusLibros sessionCartID |

	tusLibros := testObjectsFactory tusLibros.
	sessionCartID := testObjectsFactory createCartForAnyUser: tusLibros.

	self assert: (Bag new) equals: (tusLibros listCartFor: sessionCartID).! !

!testRun: #InternalRestInterfaceTest #test01CreateCartHaveEmptyList stamp: 'DS 12/2/2020 22:12:42'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01CreateCartHaveEmptyList stamp: 'DS 12/2/2020 22:12:42'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 12/2/2020 22:12:42'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 12/2/2020 22:12:42'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 12/2/2020 22:12:42'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05AddedItemIsIncludedInCartList stamp: 'DS 12/2/2020 22:12:42'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 12/2/2020 22:12:42'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CannotAddToUnknownCartID stamp: 'DS 12/2/2020 22:12:42'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'DS 12/2/2020 22:12:42'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'DS 12/2/2020 22:12:42'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 12/2/2020 22:12:42'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11CannotListAnUnknownCartID stamp: 'DS 12/2/2020 22:12:42'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAddOnExpiredCart stamp: 'DS 12/2/2020 22:12:42'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAssignSameIDForDifferentCheckoutTransactions stamp: 'DS 12/2/2020 22:12:42'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13CannotListOnExpiredCart stamp: 'DS 12/2/2020 22:12:42'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14CannotCheckoutOnExpiredCart stamp: 'DS 12/2/2020 22:12:42'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15AddAnItemShouldRestartExpirationTime stamp: 'DS 12/2/2020 22:12:42'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16ListCartShouldRestartExpirationTime stamp: 'DS 12/2/2020 22:12:42'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17CheckoutShouldRestartExpirationTime stamp: 'DS 12/2/2020 22:12:42'!
PASSED!

!testRun: #InternalRestInterfaceTest #test18ListPurchasesShouldReturnZeroWithNewUser stamp: 'DS 12/2/2020 22:12:42'!
PASSED!

!testRun: #InternalRestInterfaceTest #test19ListPurchasesShouldIncludeItemsAndTotalAfterCheckout stamp: 'DS 12/2/2020 22:12:42'!
PASSED!

!testRun: #InternalRestInterfaceTest #test20ListPurchasesShouldIncludeItemsAndTotalAfterMultipleCheckout stamp: 'DS 12/2/2020 22:12:42'!
PASSED!

!testRun: #InternalRestInterfaceTest #test21CannotListPurchasesWithUnknownUser stamp: 'DS 12/2/2020 22:12:42'!
PASSED!
!InternalRestInterfaceTest methodsFor: 'create' stamp: 'DS 12/2/2020 22:13:42' prior: 50879890!
test04CannotAssignSameIDForDifferentCarts

	| tusLibros firstSessionCartID secondSessionCartID |

	tusLibros := testObjectsFactory tusLibros.

	firstSessionCartID := testObjectsFactory createCartForAnyUser: tusLibros.
	secondSessionCartID := testObjectsFactory createCartForAnotherUser: tusLibros.

	self deny: firstSessionCartID = secondSessionCartID.! !

!testRun: #InternalRestInterfaceTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 12/2/2020 22:13:43'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01CreateCartHaveEmptyList stamp: 'DS 12/2/2020 22:13:43'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 12/2/2020 22:13:43'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 12/2/2020 22:13:43'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 12/2/2020 22:13:43'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05AddedItemIsIncludedInCartList stamp: 'DS 12/2/2020 22:13:43'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 12/2/2020 22:13:43'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CannotAddToUnknownCartID stamp: 'DS 12/2/2020 22:13:43'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'DS 12/2/2020 22:13:43'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'DS 12/2/2020 22:13:43'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 12/2/2020 22:13:43'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11CannotListAnUnknownCartID stamp: 'DS 12/2/2020 22:13:43'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAddOnExpiredCart stamp: 'DS 12/2/2020 22:13:43'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAssignSameIDForDifferentCheckoutTransactions stamp: 'DS 12/2/2020 22:13:43'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13CannotListOnExpiredCart stamp: 'DS 12/2/2020 22:13:43'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14CannotCheckoutOnExpiredCart stamp: 'DS 12/2/2020 22:13:43'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15AddAnItemShouldRestartExpirationTime stamp: 'DS 12/2/2020 22:13:43'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16ListCartShouldRestartExpirationTime stamp: 'DS 12/2/2020 22:13:43'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17CheckoutShouldRestartExpirationTime stamp: 'DS 12/2/2020 22:13:43'!
PASSED!

!testRun: #InternalRestInterfaceTest #test18ListPurchasesShouldReturnZeroWithNewUser stamp: 'DS 12/2/2020 22:13:43'!
PASSED!

!testRun: #InternalRestInterfaceTest #test19ListPurchasesShouldIncludeItemsAndTotalAfterCheckout stamp: 'DS 12/2/2020 22:13:43'!
PASSED!

!testRun: #InternalRestInterfaceTest #test20ListPurchasesShouldIncludeItemsAndTotalAfterMultipleCheckout stamp: 'DS 12/2/2020 22:13:43'!
PASSED!

!testRun: #InternalRestInterfaceTest #test21CannotListPurchasesWithUnknownUser stamp: 'DS 12/2/2020 22:13:43'!
PASSED!
!InternalRestInterfaceTest methodsFor: 'adding' stamp: 'DS 12/2/2020 22:13:57' prior: 50876346!
test06AddedItemsInDifferentsCartsAreInRespectiveLists

	| tusLibros firstCartID secondCartID expectedFirstCart expectedSecondCart |

	expectedFirstCart := Bag new.
	expectedFirstCart add: testObjectsFactory itemSellByTheStore withOccurrences: 5.
	expectedSecondCart := Bag new. 
	expectedSecondCart add: testObjectsFactory itemSellByTheStore withOccurrences: 10.

	tusLibros := testObjectsFactory tusLibros.	
	firstCartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	secondCartID := tusLibros createCartForUser: 2 withPassword: 'pass'.

	tusLibros addToCart: firstCartID aQuantity: 5 of: testObjectsFactory itemSellByTheStore.
	tusLibros addToCart: secondCartID aQuantity: 10 of: testObjectsFactory itemSellByTheStore.
	
	self assert: expectedFirstCart equals: (tusLibros listCartFor: firstCartID).
	self assert: expectedSecondCart equals: (tusLibros listCartFor: secondCartID).! !
!InternalRestInterfaceTest methodsFor: 'adding' stamp: 'DS 12/2/2020 22:14:02' prior: 50881249!
test06AddedItemsInDifferentsCartsAreInRespectiveLists

	| tusLibros firstSessionCartID secondCartID expectedFirstCart expectedSecondCart |

	expectedFirstCart := Bag new.
	expectedFirstCart add: testObjectsFactory itemSellByTheStore withOccurrences: 5.
	expectedSecondCart := Bag new. 
	expectedSecondCart add: testObjectsFactory itemSellByTheStore withOccurrences: 10.

	tusLibros := testObjectsFactory tusLibros.	
	firstSessionCartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	secondCartID := tusLibros createCartForUser: 2 withPassword: 'pass'.

	tusLibros addToCart: firstSessionCartID aQuantity: 5 of: testObjectsFactory itemSellByTheStore.
	tusLibros addToCart: secondCartID aQuantity: 10 of: testObjectsFactory itemSellByTheStore.
	
	self assert: expectedFirstCart equals: (tusLibros listCartFor: firstSessionCartID).
	self assert: expectedSecondCart equals: (tusLibros listCartFor: secondCartID).! !
!InternalRestInterfaceTest methodsFor: 'adding' stamp: 'DS 12/2/2020 22:14:08' prior: 50881280!
test06AddedItemsInDifferentsCartsAreInRespectiveLists

	| tusLibros firstSessionCartID secondSessionCartID expectedFirstCart expectedSecondCart |

	expectedFirstCart := Bag new.
	expectedFirstCart add: testObjectsFactory itemSellByTheStore withOccurrences: 5.
	expectedSecondCart := Bag new. 
	expectedSecondCart add: testObjectsFactory itemSellByTheStore withOccurrences: 10.

	tusLibros := testObjectsFactory tusLibros.	
	firstSessionCartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	secondSessionCartID := tusLibros createCartForUser: 2 withPassword: 'pass'.

	tusLibros addToCart: firstSessionCartID aQuantity: 5 of: testObjectsFactory itemSellByTheStore.
	tusLibros addToCart: secondSessionCartID aQuantity: 10 of: testObjectsFactory itemSellByTheStore.
	
	self assert: expectedFirstCart equals: (tusLibros listCartFor: firstSessionCartID).
	self assert: expectedSecondCart equals: (tusLibros listCartFor: secondSessionCartID).! !
!InternalRestInterfaceTest methodsFor: 'adding' stamp: 'DS 12/2/2020 22:14:12' prior: 50881312!
test06AddedItemsInDifferentsCartsAreInRespectiveLists

	| tusLibros firstSessionCartID secondSessionCartID expectedFirstCart expectedSecondCart |

	expectedFirstCart := Bag new.
	expectedFirstCart add: testObjectsFactory itemSellByTheStore withOccurrences: 5.
	expectedSecondCart := Bag new. 
	expectedSecondCart add: testObjectsFactory itemSellByTheStore withOccurrences: 10.

	tusLibros := testObjectsFactory tusLibros.	
	firstSessionCartID := testObjectsFactory createCartForAnyUser: tusLibros.
	secondSessionCartID := testObjectsFactory createCartForAnotherUser: tusLibros.

	tusLibros addToCart: firstSessionCartID aQuantity: 5 of: testObjectsFactory itemSellByTheStore.
	tusLibros addToCart: secondSessionCartID aQuantity: 10 of: testObjectsFactory itemSellByTheStore.
	
	self assert: expectedFirstCart equals: (tusLibros listCartFor: firstSessionCartID).
	self assert: expectedSecondCart equals: (tusLibros listCartFor: secondSessionCartID).! !
!InternalRestInterfaceTest methodsFor: 'adding' stamp: 'DS 12/2/2020 22:14:21' prior: 50879989!
test05AddedItemIsIncludedInCartList

	| tusLibros sessionCartID expectedCartList |

	expectedCartList := Bag new.
	expectedCartList add: testObjectsFactory itemSellByTheStore withOccurrences: 5.

	tusLibros := testObjectsFactory tusLibros.	
	sessionCartID := tusLibros createCartForUser: 1 withPassword: 'pass'.

	tusLibros addToCart: sessionCartID aQuantity: 5 of: testObjectsFactory itemSellByTheStore.
	self assert: expectedCartList equals: (tusLibros listCartFor: sessionCartID).! !
!InternalRestInterfaceTest methodsFor: 'adding' stamp: 'DS 12/2/2020 22:14:58' prior: 50881378!
test05AddedItemIsIncludedInCartList

	| tusLibros sessionCartID expectedCartList |

	expectedCartList := Bag new.
	expectedCartList add: testObjectsFactory itemSellByTheStore withOccurrences: 5.

	tusLibros := testObjectsFactory tusLibros.	
	sessionCartID := testObjectsFactory createCartForAnyUser: tusLibros.

	tusLibros addToCart: sessionCartID aQuantity: 5 of: testObjectsFactory itemSellByTheStore.
	self assert: expectedCartList equals: (tusLibros listCartFor: sessionCartID).! !

!testRun: #InternalRestInterfaceTest #test05AddedItemIsIncludedInCartList stamp: 'DS 12/2/2020 22:14:59'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01CreateCartHaveEmptyList stamp: 'DS 12/2/2020 22:14:59'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 12/2/2020 22:14:59'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 12/2/2020 22:14:59'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 12/2/2020 22:14:59'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05AddedItemIsIncludedInCartList stamp: 'DS 12/2/2020 22:14:59'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 12/2/2020 22:14:59'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CannotAddToUnknownCartID stamp: 'DS 12/2/2020 22:14:59'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'DS 12/2/2020 22:14:59'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'DS 12/2/2020 22:14:59'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 12/2/2020 22:14:59'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11CannotListAnUnknownCartID stamp: 'DS 12/2/2020 22:14:59'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAddOnExpiredCart stamp: 'DS 12/2/2020 22:14:59'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAssignSameIDForDifferentCheckoutTransactions stamp: 'DS 12/2/2020 22:14:59'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13CannotListOnExpiredCart stamp: 'DS 12/2/2020 22:14:59'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14CannotCheckoutOnExpiredCart stamp: 'DS 12/2/2020 22:14:59'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15AddAnItemShouldRestartExpirationTime stamp: 'DS 12/2/2020 22:14:59'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16ListCartShouldRestartExpirationTime stamp: 'DS 12/2/2020 22:14:59'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17CheckoutShouldRestartExpirationTime stamp: 'DS 12/2/2020 22:14:59'!
PASSED!

!testRun: #InternalRestInterfaceTest #test18ListPurchasesShouldReturnZeroWithNewUser stamp: 'DS 12/2/2020 22:14:59'!
PASSED!

!testRun: #InternalRestInterfaceTest #test19ListPurchasesShouldIncludeItemsAndTotalAfterCheckout stamp: 'DS 12/2/2020 22:14:59'!
PASSED!

!testRun: #InternalRestInterfaceTest #test20ListPurchasesShouldIncludeItemsAndTotalAfterMultipleCheckout stamp: 'DS 12/2/2020 22:14:59'!
PASSED!

!testRun: #InternalRestInterfaceTest #test21CannotListPurchasesWithUnknownUser stamp: 'DS 12/2/2020 22:14:59'!
PASSED!
!InternalRestInterfaceTest methodsFor: 'checkout' stamp: 'DS 12/2/2020 22:15:18' prior: 50877413!
test08CheckoutShouldBeRegisterInSalesBook

	| tusLibros cartID |

	tusLibros := testObjectsFactory tusLibros.
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	tusLibros addToCart: cartID aQuantity: 10 of: testObjectsFactory itemSellByTheStore.
	self tusLibros: tusLibros checkoutCartID: cartID.

	self assert: 100 equals: (tusLibros salesBook first total).
	self assert: 1 equals: (tusLibros salesBook size).! !
!InternalRestInterfaceTest methodsFor: 'checkout' stamp: 'DS 12/2/2020 22:15:22' prior: 50881502!
test08CheckoutShouldBeRegisterInSalesBook

	| tusLibros sessionCartID |

	tusLibros := testObjectsFactory tusLibros.
	sessionCartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	tusLibros addToCart: sessionCartID aQuantity: 10 of: testObjectsFactory itemSellByTheStore.
	self tusLibros: tusLibros checkoutCartID: sessionCartID.

	self assert: 100 equals: (tusLibros salesBook first total).
	self assert: 1 equals: (tusLibros salesBook size).! !
!InternalRestInterfaceTest methodsFor: 'checkout' stamp: 'DS 12/2/2020 22:15:29' prior: 50881519!
test08CheckoutShouldBeRegisterInSalesBook

	| tusLibros sessionCartID |

	tusLibros := testObjectsFactory tusLibros.
	sessionCartID := testObjectsFactory createCartForAnyUser: tusLibros.
	
	tusLibros addToCart: sessionCartID aQuantity: 10 of: testObjectsFactory itemSellByTheStore.
	self tusLibros: tusLibros checkoutCartID: sessionCartID.

	self assert: 100 equals: (tusLibros salesBook first total).
	self assert: 1 equals: (tusLibros salesBook size).! !

!testRun: #InternalRestInterfaceTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'DS 12/2/2020 22:15:30'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01CreateCartHaveEmptyList stamp: 'DS 12/2/2020 22:15:30'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 12/2/2020 22:15:30'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 12/2/2020 22:15:30'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 12/2/2020 22:15:30'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05AddedItemIsIncludedInCartList stamp: 'DS 12/2/2020 22:15:30'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 12/2/2020 22:15:30'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CannotAddToUnknownCartID stamp: 'DS 12/2/2020 22:15:30'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'DS 12/2/2020 22:15:30'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'DS 12/2/2020 22:15:30'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 12/2/2020 22:15:30'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11CannotListAnUnknownCartID stamp: 'DS 12/2/2020 22:15:30'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAddOnExpiredCart stamp: 'DS 12/2/2020 22:15:30'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAssignSameIDForDifferentCheckoutTransactions stamp: 'DS 12/2/2020 22:15:30'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13CannotListOnExpiredCart stamp: 'DS 12/2/2020 22:15:30'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14CannotCheckoutOnExpiredCart stamp: 'DS 12/2/2020 22:15:30'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15AddAnItemShouldRestartExpirationTime stamp: 'DS 12/2/2020 22:15:30'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16ListCartShouldRestartExpirationTime stamp: 'DS 12/2/2020 22:15:30'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17CheckoutShouldRestartExpirationTime stamp: 'DS 12/2/2020 22:15:30'!
PASSED!

!testRun: #InternalRestInterfaceTest #test18ListPurchasesShouldReturnZeroWithNewUser stamp: 'DS 12/2/2020 22:15:30'!
PASSED!

!testRun: #InternalRestInterfaceTest #test19ListPurchasesShouldIncludeItemsAndTotalAfterCheckout stamp: 'DS 12/2/2020 22:15:30'!
PASSED!

!testRun: #InternalRestInterfaceTest #test20ListPurchasesShouldIncludeItemsAndTotalAfterMultipleCheckout stamp: 'DS 12/2/2020 22:15:30'!
PASSED!

!testRun: #InternalRestInterfaceTest #test21CannotListPurchasesWithUnknownUser stamp: 'DS 12/2/2020 22:15:30'!
PASSED!
!InternalRestInterfaceTest methodsFor: 'checkout' stamp: 'DS 12/2/2020 22:15:43' prior: 50876502!
test09CannotCheckoutWhnCreditCardHasNotCredit

	| tusLibros sessionCartID |

	tusLibros := testObjectsFactory tusLibros.
	sessionCartID := tusLibros createCartForUser: 1 withPassword: 'pass'.

	tusLibros addToCart: sessionCartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.

	debitBehavior := [ :anAmount :aCreditCard | self error: Cashier creditCardHasNoCreditErrorMessage].
	
	self should: [ self tusLibros: tusLibros checkoutCartID: sessionCartID ]
		raise: Error
		withMessageText: Cashier creditCardHasNoCreditErrorMessage.
		
	self assert: tusLibros salesBook isEmpty.! !
!InternalRestInterfaceTest methodsFor: 'checkout' stamp: 'DS 12/2/2020 22:15:54' prior: 50881642!
test09CannotCheckoutWhnCreditCardHasNotCredit

	| tusLibros sessionCartID |

	tusLibros := testObjectsFactory tusLibros.
	sessionCartID := testObjectsFactory createCartForAnyUser: tusLibros.

	tusLibros addToCart: sessionCartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.

	debitBehavior := [ :anAmount :aCreditCard | self error: Cashier creditCardHasNoCreditErrorMessage].
	
	self should: [ self tusLibros: tusLibros checkoutCartID: sessionCartID ]
		raise: Error
		withMessageText: Cashier creditCardHasNoCreditErrorMessage.
		
	self assert: tusLibros salesBook isEmpty.! !
!InternalRestInterfaceTest methodsFor: 'checkout' stamp: 'DS 12/2/2020 22:16:07' prior: 50877754!
test12CannotAssignSameIDForDifferentCheckoutTransactions

	| tusLibros firstSessionCartID secondCartID firstTransactionID secondTransactionID |

	tusLibros := testObjectsFactory tusLibros.
	firstSessionCartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	secondCartID := tusLibros createCartForUser: 2 withPassword: 'pass'.
	
	tusLibros addToCart: firstSessionCartID aQuantity: 10 of: testObjectsFactory itemSellByTheStore.
	tusLibros addToCart: secondCartID aQuantity: 10 of: testObjectsFactory itemSellByTheStore.
	
	firstTransactionID := self tusLibros: tusLibros checkoutCartID: firstSessionCartID.
	secondTransactionID := self tusLibros: tusLibros checkoutCartID: secondCartID.

	self deny: firstTransactionID = secondTransactionID.! !
!InternalRestInterfaceTest methodsFor: 'checkout' stamp: 'DS 12/2/2020 22:16:16' prior: 50881686!
test12CannotAssignSameIDForDifferentCheckoutTransactions

	| tusLibros firstSessionCartID secondSessionCartID firstTransactionID secondTransactionID |

	tusLibros := testObjectsFactory tusLibros.
	firstSessionCartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	secondSessionCartID := tusLibros createCartForUser: 2 withPassword: 'pass'.
	
	tusLibros addToCart: firstSessionCartID aQuantity: 10 of: testObjectsFactory itemSellByTheStore.
	tusLibros addToCart: secondSessionCartID aQuantity: 10 of: testObjectsFactory itemSellByTheStore.
	
	firstTransactionID := self tusLibros: tusLibros checkoutCartID: firstSessionCartID.
	secondTransactionID := self tusLibros: tusLibros checkoutCartID: secondSessionCartID.

	self deny: firstTransactionID = secondTransactionID.! !
!InternalRestInterfaceTest methodsFor: 'checkout' stamp: 'DS 12/2/2020 22:16:19' prior: 50881713!
test12CannotAssignSameIDForDifferentCheckoutTransactions

	| tusLibros firstSessionCartID secondSessionCartID firstTransactionID secondTransactionID |

	tusLibros := testObjectsFactory tusLibros.
	firstSessionCartID := testObjectsFactory createCartForAnyUser: tusLibros.
	secondSessionCartID := testObjectsFactory createCartForAnotherUser: tusLibros.
	
	tusLibros addToCart: firstSessionCartID aQuantity: 10 of: testObjectsFactory itemSellByTheStore.
	tusLibros addToCart: secondSessionCartID aQuantity: 10 of: testObjectsFactory itemSellByTheStore.
	
	firstTransactionID := self tusLibros: tusLibros checkoutCartID: firstSessionCartID.
	secondTransactionID := self tusLibros: tusLibros checkoutCartID: secondSessionCartID.

	self deny: firstTransactionID = secondTransactionID.! !

!testRun: #InternalRestInterfaceTest #test12CannotAssignSameIDForDifferentCheckoutTransactions stamp: 'DS 12/2/2020 22:16:20'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01CreateCartHaveEmptyList stamp: 'DS 12/2/2020 22:16:20'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 12/2/2020 22:16:20'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 12/2/2020 22:16:20'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 12/2/2020 22:16:20'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05AddedItemIsIncludedInCartList stamp: 'DS 12/2/2020 22:16:20'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 12/2/2020 22:16:20'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CannotAddToUnknownCartID stamp: 'DS 12/2/2020 22:16:20'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'DS 12/2/2020 22:16:20'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'DS 12/2/2020 22:16:20'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 12/2/2020 22:16:20'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11CannotListAnUnknownCartID stamp: 'DS 12/2/2020 22:16:20'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAddOnExpiredCart stamp: 'DS 12/2/2020 22:16:20'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAssignSameIDForDifferentCheckoutTransactions stamp: 'DS 12/2/2020 22:16:20'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13CannotListOnExpiredCart stamp: 'DS 12/2/2020 22:16:20'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14CannotCheckoutOnExpiredCart stamp: 'DS 12/2/2020 22:16:20'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15AddAnItemShouldRestartExpirationTime stamp: 'DS 12/2/2020 22:16:20'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16ListCartShouldRestartExpirationTime stamp: 'DS 12/2/2020 22:16:20'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17CheckoutShouldRestartExpirationTime stamp: 'DS 12/2/2020 22:16:20'!
PASSED!

!testRun: #InternalRestInterfaceTest #test18ListPurchasesShouldReturnZeroWithNewUser stamp: 'DS 12/2/2020 22:16:20'!
PASSED!

!testRun: #InternalRestInterfaceTest #test19ListPurchasesShouldIncludeItemsAndTotalAfterCheckout stamp: 'DS 12/2/2020 22:16:20'!
PASSED!

!testRun: #InternalRestInterfaceTest #test20ListPurchasesShouldIncludeItemsAndTotalAfterMultipleCheckout stamp: 'DS 12/2/2020 22:16:20'!
PASSED!

!testRun: #InternalRestInterfaceTest #test21CannotListPurchasesWithUnknownUser stamp: 'DS 12/2/2020 22:16:20'!
PASSED!
!InternalRestInterfaceTest methodsFor: 'checkout' stamp: 'DS 12/2/2020 22:16:26' prior: 50876545!
tusLibros: aFacadeTusLibros checkoutCartID: aSessionCartID

	^aFacadeTusLibros
		checkOutCart: aSessionCartID
		withCCN: testObjectsFactory creditCardNumber 
		withCCED: testObjectsFactory notExpiredCreditCardDate 
		andCCO: testObjectsFactory creditCardOwner
		throught: self
		on: testObjectsFactory today.! !
!InternalRestInterfaceTest methodsFor: 'checkout' stamp: 'DS 12/2/2020 22:16:40'!
test10CannotCheckoutToUnknownSessionCartID

	| tusLibros |

	tusLibros := testObjectsFactory tusLibros.

	self should: [ self tusLibros: tusLibros checkoutCartID: 1 ]
		raise: Error
		withMessageText: InternalRestInterface unknownCartIDErrorDescription.
		
	self assert: tusLibros salesBook isEmpty.! !

!methodRemoval: InternalRestInterfaceTest #test10CannotCheckoutToUnknownCartID stamp: 'DS 12/2/2020 22:16:40'!
test10CannotCheckoutToUnknownCartID

	| tusLibros |

	tusLibros := testObjectsFactory tusLibros.

	self should: [ self tusLibros: tusLibros checkoutCartID: 1 ]
		raise: Error
		withMessageText: InternalRestInterface unknownCartIDErrorDescription.
		
	self assert: tusLibros salesBook isEmpty.!
!InternalRestInterfaceTest methodsFor: 'checkout' stamp: 'DS 12/2/2020 22:16:48'!
test11CannotListAnUnknownSessionCartID

	| tusLibros |

	tusLibros := testObjectsFactory tusLibros.
	self should: [ tusLibros listCartFor: 1 ]
		raise: Error
		withMessageText: InternalRestInterface unknownCartIDErrorDescription .! !

!methodRemoval: InternalRestInterfaceTest #test11CannotListAnUnknownCartID stamp: 'DS 12/2/2020 22:16:48'!
test11CannotListAnUnknownCartID

	| tusLibros |

	tusLibros := testObjectsFactory tusLibros.
	self should: [ tusLibros listCartFor: 1 ]
		raise: Error
		withMessageText: InternalRestInterface unknownCartIDErrorDescription .!
!InternalRestInterfaceTest methodsFor: 'checkout' stamp: 'DS 12/2/2020 22:17:02'!
tusLibros: aFacadeTusLibros checkoutSessionCartID: aSessionCartID

	^aFacadeTusLibros
		checkOutCart: aSessionCartID
		withCCN: testObjectsFactory creditCardNumber 
		withCCED: testObjectsFactory notExpiredCreditCardDate 
		andCCO: testObjectsFactory creditCardOwner
		throught: self
		on: testObjectsFactory today.! !
!InternalRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'DS 12/2/2020 22:17:02' prior: 50881741!
test12CannotAssignSameIDForDifferentCheckoutTransactions

	| tusLibros firstSessionCartID secondSessionCartID firstTransactionID secondTransactionID |

	tusLibros := testObjectsFactory tusLibros.
	firstSessionCartID := testObjectsFactory createCartForAnyUser: tusLibros.
	secondSessionCartID := testObjectsFactory createCartForAnotherUser: tusLibros.
	
	tusLibros addToCart: firstSessionCartID aQuantity: 10 of: testObjectsFactory itemSellByTheStore.
	tusLibros addToCart: secondSessionCartID aQuantity: 10 of: testObjectsFactory itemSellByTheStore.
	
	firstTransactionID := self tusLibros: tusLibros checkoutSessionCartID: firstSessionCartID.
	secondTransactionID := self tusLibros: tusLibros checkoutSessionCartID: secondSessionCartID.

	self deny: firstTransactionID = secondTransactionID.! !
!InternalRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'DS 12/2/2020 22:17:02' prior: 50880010!
test19ListPurchasesShouldIncludeItemsAndTotalAfterCheckout

	| tusLibros expectedPurchases cartID |

	expectedPurchases := Dictionary 
		with: (testObjectsFactory itemSellByTheStore -> 1)
		with: 'total' -> testObjectsFactory itemSellByTheStorePrice.
		
	tusLibros := testObjectsFactory tusLibros.
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	self tusLibros: tusLibros checkoutSessionCartID: cartID.
	
	self assert: expectedPurchases equals: (tusLibros listPurchasesWithUser: 1 withPassword: 'pass').! !
!InternalRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'DS 12/2/2020 22:17:02' prior: 50876476!
test17CheckoutShouldRestartExpirationTime

	self assertUpdatedTimeToCartAfter: [ :anInternalRestInterface :aCartID | self tusLibros: anInternalRestInterface checkoutSessionCartID: aCartID].! !
!InternalRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'DS 12/2/2020 22:17:02' prior: 50881664!
test09CannotCheckoutWhnCreditCardHasNotCredit

	| tusLibros sessionCartID |

	tusLibros := testObjectsFactory tusLibros.
	sessionCartID := testObjectsFactory createCartForAnyUser: tusLibros.

	tusLibros addToCart: sessionCartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.

	debitBehavior := [ :anAmount :aCreditCard | self error: Cashier creditCardHasNoCreditErrorMessage].
	
	self should: [ self tusLibros: tusLibros checkoutSessionCartID: sessionCartID ]
		raise: Error
		withMessageText: Cashier creditCardHasNoCreditErrorMessage.
		
	self assert: tusLibros salesBook isEmpty.! !
!InternalRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'DS 12/2/2020 22:17:02' prior: 50881869!
test10CannotCheckoutToUnknownSessionCartID

	| tusLibros |

	tusLibros := testObjectsFactory tusLibros.

	self should: [ self tusLibros: tusLibros checkoutSessionCartID: 1 ]
		raise: Error
		withMessageText: InternalRestInterface unknownCartIDErrorDescription.
		
	self assert: tusLibros salesBook isEmpty.! !
!InternalRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'DS 12/2/2020 22:17:02' prior: 50880310!
test20ListPurchasesShouldIncludeItemsAndTotalAfterMultipleCheckout

	| tusLibros expectedPurchases firstCartID secondCartID |

	expectedPurchases := Dictionary 
		with: (testObjectsFactory itemSellByTheStore -> 8)
		with: 'total' -> (testObjectsFactory itemSellByTheStorePrice * 8).
	
	tusLibros := testObjectsFactory tusLibros.
	firstCartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	secondCartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	tusLibros addToCart: firstCartID aQuantity: 5 of: testObjectsFactory itemSellByTheStore.
	tusLibros addToCart: secondCartID aQuantity: 3 of: testObjectsFactory itemSellByTheStore.
	self tusLibros: tusLibros checkoutSessionCartID: firstCartID.
	self tusLibros: tusLibros checkoutSessionCartID: secondCartID.

	self assert: expectedPurchases equals: (tusLibros listPurchasesWithUser: 1 withPassword: 'pass').! !
!InternalRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'DS 12/2/2020 22:17:02' prior: 50876448!
test14CannotCheckoutOnExpiredCart

	self shouldRaiseCartTimeExpiredErrorWhen: [ :anInternalRestInterface :aCartID |
		self tusLibros: anInternalRestInterface checkoutSessionCartID: aCartID
	].! !
!InternalRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'DS 12/2/2020 22:17:02' prior: 50881537!
test08CheckoutShouldBeRegisterInSalesBook

	| tusLibros sessionCartID |

	tusLibros := testObjectsFactory tusLibros.
	sessionCartID := testObjectsFactory createCartForAnyUser: tusLibros.
	
	tusLibros addToCart: sessionCartID aQuantity: 10 of: testObjectsFactory itemSellByTheStore.
	self tusLibros: tusLibros checkoutSessionCartID: sessionCartID.

	self assert: 100 equals: (tusLibros salesBook first total).
	self assert: 1 equals: (tusLibros salesBook size).! !

!methodRemoval: InternalRestInterfaceTest #tusLibros:checkoutCartID: stamp: 'DS 12/2/2020 22:17:02'!
tusLibros: aFacadeTusLibros checkoutCartID: aSessionCartID

	^aFacadeTusLibros
		checkOutCart: aSessionCartID
		withCCN: testObjectsFactory creditCardNumber 
		withCCED: testObjectsFactory notExpiredCreditCardDate 
		andCCO: testObjectsFactory creditCardOwner
		throught: self
		on: testObjectsFactory today.!

!testRun: #InternalRestInterfaceTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'DS 12/2/2020 22:17:09'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'DS 12/2/2020 22:17:09'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10CannotCheckoutToUnknownSessionCartID stamp: 'DS 12/2/2020 22:17:09'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11CannotListAnUnknownSessionCartID stamp: 'DS 12/2/2020 22:17:09'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAssignSameIDForDifferentCheckoutTransactions stamp: 'DS 12/2/2020 22:17:09'!
PASSED!
!InternalRestInterfaceTest methodsFor: 'expiration tests' stamp: 'DS 12/2/2020 22:17:28' prior: 50876389!
assertUpdatedTimeToCartAfter: aTusLibrosBlock

	| tusLibros sessionCartID checkIfExpired updatedTime |

	tusLibros := testObjectsFactory tusLibros: self.
	sessionCartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	tusLibros addToCart: sessionCartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.

	checkIfExpired := false.
	clockBehavior := [
		checkIfExpired
			ifFalse: [
				checkIfExpired := true.
				testObjectsFactory now next: 10*minute.
			] ifTrue: [
				updatedTime :=  testObjectsFactory now next: 5*minute.
				updatedTime.
			].		
	].
	aTusLibrosBlock value: tusLibros value: sessionCartID.

	self assert: (testObjectsFactory now next: 5*minute) equals: updatedTime.! !
!InternalRestInterfaceTest methodsFor: 'expiration tests' stamp: 'DS 12/2/2020 22:17:36' prior: 50882119!
assertUpdatedTimeToCartAfter: aTusLibrosBlock

	| tusLibros sessionCartID checkIfExpired updatedTime |

	tusLibros := testObjectsFactory tusLibros: self.
	sessionCartID := testObjectsFactory createCartForAnyUser: tusLibros.
	tusLibros addToCart: sessionCartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.

	checkIfExpired := false.
	clockBehavior := [
		checkIfExpired
			ifFalse: [
				checkIfExpired := true.
				testObjectsFactory now next: 10*minute.
			] ifTrue: [
				updatedTime :=  testObjectsFactory now next: 5*minute.
				updatedTime.
			].		
	].
	aTusLibrosBlock value: tusLibros value: sessionCartID.

	self assert: (testObjectsFactory now next: 5*minute) equals: updatedTime.! !

!testRun: #InternalRestInterfaceTest #test01CreateCartHaveEmptyList stamp: 'DS 12/2/2020 22:17:37'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 12/2/2020 22:17:37'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 12/2/2020 22:17:37'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 12/2/2020 22:17:37'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05AddedItemIsIncludedInCartList stamp: 'DS 12/2/2020 22:17:37'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 12/2/2020 22:17:37'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CannotAddToUnknownCartID stamp: 'DS 12/2/2020 22:17:37'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'DS 12/2/2020 22:17:37'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'DS 12/2/2020 22:17:37'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10CannotCheckoutToUnknownSessionCartID stamp: 'DS 12/2/2020 22:17:37'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11CannotListAnUnknownSessionCartID stamp: 'DS 12/2/2020 22:17:37'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAddOnExpiredCart stamp: 'DS 12/2/2020 22:17:37'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAssignSameIDForDifferentCheckoutTransactions stamp: 'DS 12/2/2020 22:17:37'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13CannotListOnExpiredCart stamp: 'DS 12/2/2020 22:17:37'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14CannotCheckoutOnExpiredCart stamp: 'DS 12/2/2020 22:17:37'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15AddAnItemShouldRestartExpirationTime stamp: 'DS 12/2/2020 22:17:37'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16ListCartShouldRestartExpirationTime stamp: 'DS 12/2/2020 22:17:37'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17CheckoutShouldRestartExpirationTime stamp: 'DS 12/2/2020 22:17:37'!
PASSED!

!testRun: #InternalRestInterfaceTest #test18ListPurchasesShouldReturnZeroWithNewUser stamp: 'DS 12/2/2020 22:17:37'!
PASSED!

!testRun: #InternalRestInterfaceTest #test19ListPurchasesShouldIncludeItemsAndTotalAfterCheckout stamp: 'DS 12/2/2020 22:17:37'!
PASSED!

!testRun: #InternalRestInterfaceTest #test20ListPurchasesShouldIncludeItemsAndTotalAfterMultipleCheckout stamp: 'DS 12/2/2020 22:17:37'!
PASSED!

!testRun: #InternalRestInterfaceTest #test21CannotListPurchasesWithUnknownUser stamp: 'DS 12/2/2020 22:17:37'!
PASSED!
!InternalRestInterfaceTest methodsFor: 'expiration tests' stamp: 'DS 12/2/2020 22:17:48' prior: 50876413!
shouldRaiseCartTimeExpiredErrorWhen: aTusLibrosBlock

	| tusLibros cartID |
	
	tusLibros := testObjectsFactory tusLibros: self.		
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	clockBehavior := [ testObjectsFactory now next: 31*minute ].

	self should: [ aTusLibrosBlock value: tusLibros value: cartID ]
		raise: Error
		withMessageText: InternalRestInterface cartTimeExpiredErrorDescription.! !
!InternalRestInterfaceTest methodsFor: 'expiration tests' stamp: 'DS 12/2/2020 22:17:53' prior: 50882254!
shouldRaiseCartTimeExpiredErrorWhen: aTusLibrosBlock

	| tusLibros sessionCartID |
	
	tusLibros := testObjectsFactory tusLibros: self.		
	sessionCartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	clockBehavior := [ testObjectsFactory now next: 31*minute ].

	self should: [ aTusLibrosBlock value: tusLibros value: sessionCartID ]
		raise: Error
		withMessageText: InternalRestInterface cartTimeExpiredErrorDescription.! !
!InternalRestInterfaceTest methodsFor: 'expiration tests' stamp: 'DS 12/2/2020 22:18:01' prior: 50882271!
shouldRaiseCartTimeExpiredErrorWhen: aTusLibrosBlock

	| tusLibros sessionCartID |
	
	tusLibros := testObjectsFactory tusLibros: self.		
	sessionCartID := testObjectsFactory createCartForAnyUser: tusLibros.
	
	clockBehavior := [ testObjectsFactory now next: 31*minute ].

	self should: [ aTusLibrosBlock value: tusLibros value: sessionCartID ]
		raise: Error
		withMessageText: InternalRestInterface cartTimeExpiredErrorDescription.! !

!testRun: #InternalRestInterfaceTest #test01CreateCartHaveEmptyList stamp: 'DS 12/2/2020 22:18:01'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 12/2/2020 22:18:01'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 12/2/2020 22:18:01'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 12/2/2020 22:18:01'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05AddedItemIsIncludedInCartList stamp: 'DS 12/2/2020 22:18:01'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 12/2/2020 22:18:01'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CannotAddToUnknownCartID stamp: 'DS 12/2/2020 22:18:01'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'DS 12/2/2020 22:18:01'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'DS 12/2/2020 22:18:01'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10CannotCheckoutToUnknownSessionCartID stamp: 'DS 12/2/2020 22:18:01'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11CannotListAnUnknownSessionCartID stamp: 'DS 12/2/2020 22:18:01'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAddOnExpiredCart stamp: 'DS 12/2/2020 22:18:01'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAssignSameIDForDifferentCheckoutTransactions stamp: 'DS 12/2/2020 22:18:01'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13CannotListOnExpiredCart stamp: 'DS 12/2/2020 22:18:01'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14CannotCheckoutOnExpiredCart stamp: 'DS 12/2/2020 22:18:01'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15AddAnItemShouldRestartExpirationTime stamp: 'DS 12/2/2020 22:18:01'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16ListCartShouldRestartExpirationTime stamp: 'DS 12/2/2020 22:18:01'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17CheckoutShouldRestartExpirationTime stamp: 'DS 12/2/2020 22:18:01'!
PASSED!

!testRun: #InternalRestInterfaceTest #test18ListPurchasesShouldReturnZeroWithNewUser stamp: 'DS 12/2/2020 22:18:01'!
PASSED!

!testRun: #InternalRestInterfaceTest #test19ListPurchasesShouldIncludeItemsAndTotalAfterCheckout stamp: 'DS 12/2/2020 22:18:01'!
PASSED!

!testRun: #InternalRestInterfaceTest #test20ListPurchasesShouldIncludeItemsAndTotalAfterMultipleCheckout stamp: 'DS 12/2/2020 22:18:01'!
PASSED!

!testRun: #InternalRestInterfaceTest #test21CannotListPurchasesWithUnknownUser stamp: 'DS 12/2/2020 22:18:01'!
PASSED!
!InternalRestInterfaceTest methodsFor: 'expiration tests' stamp: 'DS 12/2/2020 22:18:35' prior: 50876429!
test12CannotAddOnExpiredCart

	self shouldRaiseCartTimeExpiredErrorWhen: [ :anInternalRestInterface :aSessionCartID | 
		anInternalRestInterface addToCart: aSessionCartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore
	].! !
!InternalRestInterfaceTest methodsFor: 'expiration tests' stamp: 'DS 12/2/2020 22:18:41' prior: 50876439!
test13CannotListOnExpiredCart

	self shouldRaiseCartTimeExpiredErrorWhen: [ :anInternalRestInterface :aSessionCartID |
		anInternalRestInterface listCartFor: aSessionCartID
	].! !
!InternalRestInterfaceTest methodsFor: 'expiration tests' stamp: 'DS 12/2/2020 22:18:46' prior: 50882058!
test14CannotCheckoutOnExpiredCart

	self shouldRaiseCartTimeExpiredErrorWhen: [ :anInternalRestInterface :aSessionCartID |
		self tusLibros: anInternalRestInterface checkoutSessionCartID: aSessionCartID
	].! !
!InternalRestInterfaceTest methodsFor: 'expiration tests' stamp: 'DS 12/2/2020 22:18:53' prior: 50876457!
test15AddAnItemShouldRestartExpirationTime

	self assertUpdatedTimeToCartAfter: [ :anInternalRestInterface :aSessionCartID | 
		anInternalRestInterface addToCart: aSessionCartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	].! !
!InternalRestInterfaceTest methodsFor: 'expiration tests' stamp: 'DS 12/2/2020 22:19:01' prior: 50876467!
test16ListCartShouldRestartExpirationTime

	self assertUpdatedTimeToCartAfter: [ :anInternalRestInterface :aSessionCartID | anInternalRestInterface listCartFor: aSessionCartID ].! !
!InternalRestInterfaceTest methodsFor: 'expiration tests' stamp: 'DS 12/2/2020 22:19:07' prior: 50881981!
test17CheckoutShouldRestartExpirationTime

	self assertUpdatedTimeToCartAfter: [ :anInternalRestInterface :aSessionCartID | self tusLibros: anInternalRestInterface checkoutSessionCartID: aSessionCartID].! !
!InternalRestInterfaceTest methodsFor: 'list purchases' stamp: 'DS 12/2/2020 22:19:19' prior: 50881958!
test19ListPurchasesShouldIncludeItemsAndTotalAfterCheckout

	| tusLibros expectedPurchases cartID |

	expectedPurchases := Dictionary 
		with: (testObjectsFactory itemSellByTheStore -> 1)
		with: 'total' -> testObjectsFactory itemSellByTheStorePrice.
		
	tusLibros := testObjectsFactory tusLibros.
	cartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	tusLibros addToCart: cartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	self tusLibros: tusLibros checkoutSessionCartID: cartID.
	
	self assert: expectedPurchases equals: (tusLibros listPurchasesWithUser: 1 withPassword: 'pass').! !
!InternalRestInterfaceTest methodsFor: 'list purchases' stamp: 'DS 12/2/2020 22:19:28' prior: 50882449!
test19ListPurchasesShouldIncludeItemsAndTotalAfterCheckout

	| tusLibros expectedPurchases sessionCartID |

	expectedPurchases := Dictionary 
		with: (testObjectsFactory itemSellByTheStore -> 1)
		with: 'total' -> testObjectsFactory itemSellByTheStorePrice.
		
	tusLibros := testObjectsFactory tusLibros.
	sessionCartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	tusLibros addToCart: sessionCartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	self tusLibros: tusLibros checkoutSessionCartID: sessionCartID.
	
	self assert: expectedPurchases equals: (tusLibros listPurchasesWithUser: 1 withPassword: 'pass').! !
!InternalRestInterfaceTest methodsFor: 'list purchases' stamp: 'DS 12/2/2020 22:19:35' prior: 50882472!
test19ListPurchasesShouldIncludeItemsAndTotalAfterCheckout

	| tusLibros expectedPurchases sessionCartID |

	expectedPurchases := Dictionary 
		with: (testObjectsFactory itemSellByTheStore -> 1)
		with: 'total' -> testObjectsFactory itemSellByTheStorePrice.
		
	tusLibros := testObjectsFactory tusLibros.
	sessionCartID := testObjectsFactory createCartForAnyUser: tusLibros.
	
	tusLibros addToCart: sessionCartID aQuantity: 1 of: testObjectsFactory itemSellByTheStore.
	self tusLibros: tusLibros checkoutSessionCartID: sessionCartID.
	
	self assert: expectedPurchases equals: (tusLibros listPurchasesWithUser: 1 withPassword: 'pass').! !

!testRun: #InternalRestInterfaceTest #test19ListPurchasesShouldIncludeItemsAndTotalAfterCheckout stamp: 'DS 12/2/2020 22:19:36'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01CreateCartHaveEmptyList stamp: 'DS 12/2/2020 22:19:36'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 12/2/2020 22:19:36'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 12/2/2020 22:19:36'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 12/2/2020 22:19:36'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05AddedItemIsIncludedInCartList stamp: 'DS 12/2/2020 22:19:36'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 12/2/2020 22:19:36'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CannotAddToUnknownCartID stamp: 'DS 12/2/2020 22:19:36'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'DS 12/2/2020 22:19:36'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'DS 12/2/2020 22:19:36'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10CannotCheckoutToUnknownSessionCartID stamp: 'DS 12/2/2020 22:19:36'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11CannotListAnUnknownSessionCartID stamp: 'DS 12/2/2020 22:19:36'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAddOnExpiredCart stamp: 'DS 12/2/2020 22:19:36'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAssignSameIDForDifferentCheckoutTransactions stamp: 'DS 12/2/2020 22:19:36'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13CannotListOnExpiredCart stamp: 'DS 12/2/2020 22:19:36'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14CannotCheckoutOnExpiredCart stamp: 'DS 12/2/2020 22:19:36'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15AddAnItemShouldRestartExpirationTime stamp: 'DS 12/2/2020 22:19:36'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16ListCartShouldRestartExpirationTime stamp: 'DS 12/2/2020 22:19:36'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17CheckoutShouldRestartExpirationTime stamp: 'DS 12/2/2020 22:19:36'!
PASSED!

!testRun: #InternalRestInterfaceTest #test18ListPurchasesShouldReturnZeroWithNewUser stamp: 'DS 12/2/2020 22:19:36'!
PASSED!

!testRun: #InternalRestInterfaceTest #test19ListPurchasesShouldIncludeItemsAndTotalAfterCheckout stamp: 'DS 12/2/2020 22:19:36'!
PASSED!

!testRun: #InternalRestInterfaceTest #test20ListPurchasesShouldIncludeItemsAndTotalAfterMultipleCheckout stamp: 'DS 12/2/2020 22:19:36'!
PASSED!

!testRun: #InternalRestInterfaceTest #test21CannotListPurchasesWithUnknownUser stamp: 'DS 12/2/2020 22:19:36'!
PASSED!
!InternalRestInterfaceTest methodsFor: 'list purchases' stamp: 'DS 12/2/2020 22:19:43' prior: 50882027!
test20ListPurchasesShouldIncludeItemsAndTotalAfterMultipleCheckout

	| tusLibros expectedPurchases firstSessionCartID secondCartID |

	expectedPurchases := Dictionary 
		with: (testObjectsFactory itemSellByTheStore -> 8)
		with: 'total' -> (testObjectsFactory itemSellByTheStorePrice * 8).
	
	tusLibros := testObjectsFactory tusLibros.
	firstSessionCartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	secondCartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	tusLibros addToCart: firstSessionCartID aQuantity: 5 of: testObjectsFactory itemSellByTheStore.
	tusLibros addToCart: secondCartID aQuantity: 3 of: testObjectsFactory itemSellByTheStore.
	self tusLibros: tusLibros checkoutSessionCartID: firstSessionCartID.
	self tusLibros: tusLibros checkoutSessionCartID: secondCartID.

	self assert: expectedPurchases equals: (tusLibros listPurchasesWithUser: 1 withPassword: 'pass').! !
!InternalRestInterfaceTest methodsFor: 'list purchases' stamp: 'DS 12/2/2020 22:19:51' prior: 50882607!
test20ListPurchasesShouldIncludeItemsAndTotalAfterMultipleCheckout

	| tusLibros expectedPurchases firstSessionCartID secondSessionCartID |

	expectedPurchases := Dictionary 
		with: (testObjectsFactory itemSellByTheStore -> 8)
		with: 'total' -> (testObjectsFactory itemSellByTheStorePrice * 8).
	
	tusLibros := testObjectsFactory tusLibros.
	firstSessionCartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	secondSessionCartID := tusLibros createCartForUser: 1 withPassword: 'pass'.
	
	tusLibros addToCart: firstSessionCartID aQuantity: 5 of: testObjectsFactory itemSellByTheStore.
	tusLibros addToCart: secondSessionCartID aQuantity: 3 of: testObjectsFactory itemSellByTheStore.
	self tusLibros: tusLibros checkoutSessionCartID: firstSessionCartID.
	self tusLibros: tusLibros checkoutSessionCartID: secondSessionCartID.

	self assert: expectedPurchases equals: (tusLibros listPurchasesWithUser: 1 withPassword: 'pass').! !
!InternalRestInterfaceTest methodsFor: 'list purchases' stamp: 'DS 12/2/2020 22:19:54' prior: 50882639!
test20ListPurchasesShouldIncludeItemsAndTotalAfterMultipleCheckout

	| tusLibros expectedPurchases firstSessionCartID secondSessionCartID |

	expectedPurchases := Dictionary 
		with: (testObjectsFactory itemSellByTheStore -> 8)
		with: 'total' -> (testObjectsFactory itemSellByTheStorePrice * 8).
	
	tusLibros := testObjectsFactory tusLibros.
	firstSessionCartID := testObjectsFactory createCartForAnyUser: tusLibros.
	secondSessionCartID := testObjectsFactory createCartForAnotherUser: tusLibros.
	
	tusLibros addToCart: firstSessionCartID aQuantity: 5 of: testObjectsFactory itemSellByTheStore.
	tusLibros addToCart: secondSessionCartID aQuantity: 3 of: testObjectsFactory itemSellByTheStore.
	self tusLibros: tusLibros checkoutSessionCartID: firstSessionCartID.
	self tusLibros: tusLibros checkoutSessionCartID: secondSessionCartID.

	self assert: expectedPurchases equals: (tusLibros listPurchasesWithUser: 1 withPassword: 'pass').! !

!testRun: #InternalRestInterfaceTest #test20ListPurchasesShouldIncludeItemsAndTotalAfterMultipleCheckout stamp: 'DS 12/2/2020 22:19:55'!
FAILURE!
!InternalRestInterfaceTest methodsFor: 'list purchases' stamp: 'DS 12/2/2020 22:19:59' prior: 50882672!
test20ListPurchasesShouldIncludeItemsAndTotalAfterMultipleCheckout

	| tusLibros expectedPurchases firstSessionCartID secondSessionCartID |

	expectedPurchases := Dictionary 
		with: (testObjectsFactory itemSellByTheStore -> 8)
		with: 'total' -> (testObjectsFactory itemSellByTheStorePrice * 8).
	
	tusLibros := testObjectsFactory tusLibros.
	firstSessionCartID := testObjectsFactory createCartForAnyUser: tusLibros.
	secondSessionCartID := testObjectsFactory createCartForAnotherUser: tusLibros.
	
	
	tusLibros addToCart: firstSessionCartID aQuantity: 5 of: testObjectsFactory itemSellByTheStore.
	tusLibros addToCart: secondSessionCartID aQuantity: 3 of: testObjectsFactory itemSellByTheStore.
	self tusLibros: tusLibros checkoutSessionCartID: firstSessionCartID.
	self tusLibros: tusLibros checkoutSessionCartID: secondSessionCartID.

	self assert: expectedPurchases equals: (tusLibros listPurchasesWithUser: 1 withPassword: 'pass').! !

!testRun: #InternalRestInterfaceTest #test20ListPurchasesShouldIncludeItemsAndTotalAfterMultipleCheckout stamp: 'DS 12/2/2020 22:20:04'!
FAILURE!
!InternalRestInterfaceTest methodsFor: 'list purchases' stamp: 'DS 12/2/2020 22:20:18' prior: 50882710!
test20ListPurchasesShouldIncludeItemsAndTotalAfterMultipleCheckout

	| tusLibros expectedPurchases firstSessionCartID secondSessionCartID |

	expectedPurchases := Dictionary 
		with: (testObjectsFactory itemSellByTheStore -> 8)
		with: 'total' -> (testObjectsFactory itemSellByTheStorePrice * 8).
	
	tusLibros := testObjectsFactory tusLibros.
	firstSessionCartID := testObjectsFactory createCartForAnyUser: tusLibros.
	secondSessionCartID := testObjectsFactory createCartForAnyUser: tusLibros.
	
	tusLibros addToCart: firstSessionCartID aQuantity: 5 of: testObjectsFactory itemSellByTheStore.
	tusLibros addToCart: secondSessionCartID aQuantity: 3 of: testObjectsFactory itemSellByTheStore.
	self tusLibros: tusLibros checkoutSessionCartID: firstSessionCartID.
	self tusLibros: tusLibros checkoutSessionCartID: secondSessionCartID.

	self assert: expectedPurchases equals: (tusLibros listPurchasesWithUser: 1 withPassword: 'pass').! !

!testRun: #InternalRestInterfaceTest #test20ListPurchasesShouldIncludeItemsAndTotalAfterMultipleCheckout stamp: 'DS 12/2/2020 22:20:19'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01CreateCartHaveEmptyList stamp: 'DS 12/2/2020 22:20:19'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CannotCreateCartWithInvalidPassword stamp: 'DS 12/2/2020 22:20:19'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotCreateCartWithUnknownUser stamp: 'DS 12/2/2020 22:20:19'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04CannotAssignSameIDForDifferentCarts stamp: 'DS 12/2/2020 22:20:19'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05AddedItemIsIncludedInCartList stamp: 'DS 12/2/2020 22:20:19'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06AddedItemsInDifferentsCartsAreInRespectiveLists stamp: 'DS 12/2/2020 22:20:19'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CannotAddToUnknownCartID stamp: 'DS 12/2/2020 22:20:19'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutShouldBeRegisterInSalesBook stamp: 'DS 12/2/2020 22:20:19'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CannotCheckoutWhnCreditCardHasNotCredit stamp: 'DS 12/2/2020 22:20:19'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10CannotCheckoutToUnknownSessionCartID stamp: 'DS 12/2/2020 22:20:19'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11CannotListAnUnknownSessionCartID stamp: 'DS 12/2/2020 22:20:19'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAddOnExpiredCart stamp: 'DS 12/2/2020 22:20:19'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12CannotAssignSameIDForDifferentCheckoutTransactions stamp: 'DS 12/2/2020 22:20:19'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13CannotListOnExpiredCart stamp: 'DS 12/2/2020 22:20:19'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14CannotCheckoutOnExpiredCart stamp: 'DS 12/2/2020 22:20:19'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15AddAnItemShouldRestartExpirationTime stamp: 'DS 12/2/2020 22:20:19'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16ListCartShouldRestartExpirationTime stamp: 'DS 12/2/2020 22:20:19'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17CheckoutShouldRestartExpirationTime stamp: 'DS 12/2/2020 22:20:19'!
PASSED!

!testRun: #InternalRestInterfaceTest #test18ListPurchasesShouldReturnZeroWithNewUser stamp: 'DS 12/2/2020 22:20:19'!
PASSED!

!testRun: #InternalRestInterfaceTest #test19ListPurchasesShouldIncludeItemsAndTotalAfterCheckout stamp: 'DS 12/2/2020 22:20:19'!
PASSED!

!testRun: #InternalRestInterfaceTest #test20ListPurchasesShouldIncludeItemsAndTotalAfterMultipleCheckout stamp: 'DS 12/2/2020 22:20:19'!
PASSED!

!testRun: #InternalRestInterfaceTest #test21CannotListPurchasesWithUnknownUser stamp: 'DS 12/2/2020 22:20:19'!
PASSED!

----SNAPSHOT----(2 December 2020 22:20:27) CuisUniversity-4384.image priorSource: 17579924!
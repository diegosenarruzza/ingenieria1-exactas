

----STARTUP---- (2 November 2020 19:13:15) as D:\facultad\Smalltalk\windows64\CuisUniversity-4365.image!


!classRemoval: #TerniLapilli stamp: 'Federico 11/2/2020 19:13:18'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'currentPlayer tokensXRemained positionsOccupied'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapippiSolution'!

!classRemoval: #TerniLapilliTest stamp: 'Federico 11/2/2020 19:13:18'!
TestCase subclass: #TerniLapilliTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapippiSolution'!

!classDefinition: #TerniLapilliTest category: #TerniLapippiSolution stamp: 'Federico 11/2/2020 19:13:19'!
TestCase subclass: #TerniLapilliTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapippiSolution'!

!classDefinition: #TerniLapilliTest category: #TerniLapippiSolution stamp: 'Federico 11/2/2020 19:13:19'!
TestCase subclass: #TerniLapilliTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapippiSolution'!
!TerniLapilliTest methodsFor: 'ilegal movement' stamp: 'DS 11/1/2020 13:57:55'!
test06PlayerCanNotPutOnOccupiedPosition
	
	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putAt: 0@0.

	self
		should: [ aTerniLapilli putAt: 0@0. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.! !
!TerniLapilliTest methodsFor: 'ilegal movement' stamp: 'DS 11/1/2020 13:25:19'!
test13PlayerCanNotMoveFromNotOwnPosition

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putAt: 0@-1.
	aTerniLapilli putAt: 0@0.
	
	aTerniLapilli putAt: 0@1.
	aTerniLapilli putAt: 1@1.
	
	aTerniLapilli putAt: -1@1.
	aTerniLapilli putAt: 1@-1.

	self
		should: [ aTerniLapilli moveLeftDownFrom: 0@0. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.! !
!TerniLapilliTest methodsFor: 'ilegal movement' stamp: 'DS 11/1/2020 13:25:22'!
test14PlayerCanNotMoveWhenHasTokenRemained

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putAt: 0@-1.
	aTerniLapilli putAt: 0@0.

	self
		should: [ aTerniLapilli moveLeftDownFrom: 0@-1. ]
		raise: Error
		withMessageText: TerniLapilli remainedTokensErrorDescription.! !
!TerniLapilliTest methodsFor: 'kinds of win' stamp: 'DS 11/1/2020 13:22:35'!
test08PlayerWonWithHorizontalPlay
	
	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putAt: 0@0.
	aTerniLapilli putAt: 0@1.
	
	aTerniLapilli putAt: -1@0.
	aTerniLapilli putAt: 1@1.
	
	aTerniLapilli putAt: 1@0.

	self assert: aTerniLapilli hasPlayerXWon.! !
!TerniLapilliTest methodsFor: 'kinds of win' stamp: 'DS 11/1/2020 13:22:45'!
test09PlayerWonWithVerticalPlay
	
	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putAt: 0@0.
	aTerniLapilli putAt: -1@1.
	
	aTerniLapilli putAt: 0@1.
	aTerniLapilli putAt: 1@1.
	
	aTerniLapilli putAt: 0@-1.

	self assert: aTerniLapilli hasPlayerXWon.! !
!TerniLapilliTest methodsFor: 'kinds of win' stamp: 'DS 11/1/2020 13:25:38'!
test10PlayerWonWithInvertedDiagonalPlay
	
	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putAt: 0@0.
	aTerniLapilli putAt: 0@1.
	
	aTerniLapilli putAt: -1@1.
	aTerniLapilli putAt: 1@1.
	
	aTerniLapilli putAt: 1@-1.

	self assert: aTerniLapilli hasPlayerXWon.! !
!TerniLapilliTest methodsFor: 'kinds of win' stamp: 'DS 11/1/2020 13:25:47'!
test11PlayerWonWithDiagonalPlay

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putAt: 0@0.
	aTerniLapilli putAt: 0@1.
	
	aTerniLapilli putAt: 1@1.
	aTerniLapilli putAt: -1@1.
	
	aTerniLapilli putAt: -1@-1.

	self assert: aTerniLapilli hasPlayerXWon.! !
!TerniLapilliTest methodsFor: 'kinds of win' stamp: 'DS 11/1/2020 13:26:34'!
test12GameIsOverWhenAPlayerWins

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putAt: 0@-1.
	aTerniLapilli putAt: 0@0.
	
	aTerniLapilli putAt: 0@1.
	aTerniLapilli putAt: 1@1.
	
	aTerniLapilli putAt: -1@1.
	aTerniLapilli putAt: -1@-1.

	self
		should: [ aTerniLapilli moveDownFrom: -1@1 ]
		raise: Error
		withMessageText: TerniLapilli gameOverErrorDescription.
	! !
!TerniLapilliTest methodsFor: 'kinds of win' stamp: 'DS 11/1/2020 13:26:43'!
test15DoAWinnerMovementOverTheGame

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putAt: 0@-1.
	aTerniLapilli putAt: 0@0.
	
	aTerniLapilli putAt: 0@1.
	aTerniLapilli putAt: 1@1.
	
	aTerniLapilli putAt: -1@1.
	aTerniLapilli putAt: 1@-1.
	
	aTerniLapilli moveDownFrom: -1@1.
	aTerniLapilli moveRightFrom: 0@0.
	
	self assert: aTerniLapilli isOver.! !
!TerniLapilliTest methodsFor: 'ilegal diagonal movements' stamp: 'DS 11/1/2020 13:27:04'!
test27PlayerCanNotMoveLeftDownFromCenterUpPosition

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putAt: 0@-1.
	aTerniLapilli putAt: 0@0.
	
	aTerniLapilli putAt: 0@1.
	aTerniLapilli putAt: 1@1.
	
	aTerniLapilli putAt: -1@1.
	aTerniLapilli putAt: 1@-1.

	self
		should: [ aTerniLapilli moveLeftDownFrom: 0@1. ]
		raise: Error
		withMessageText: TerniLapilli ilegalDiagonalMovementErrorDescription.	! !
!TerniLapilliTest methodsFor: 'ilegal diagonal movements' stamp: 'DS 11/1/2020 13:27:23'!
test28PlayerCanNotMoveLeftDownFromRightCenterPosition

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putAt: 0@-1.
	aTerniLapilli putAt: 0@0.
	
	aTerniLapilli putAt: 0@1.
	aTerniLapilli putAt: 1@1.
	
	aTerniLapilli putAt: 1@0.
	aTerniLapilli putAt: 1@-1.

	self
		should: [ aTerniLapilli moveLeftDownFrom: 1@0. ]
		raise: Error
		withMessageText: TerniLapilli ilegalDiagonalMovementErrorDescription.	! !
!TerniLapilliTest methodsFor: 'ilegal diagonal movements' stamp: 'DS 11/1/2020 13:27:32'!
test29PlayerCanNotMoveRIghtDownFromCenterUpPosition

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putAt: 0@-1.
	aTerniLapilli putAt: 0@0.
	
	aTerniLapilli putAt: 0@1.
	aTerniLapilli putAt: 1@1.
	
	aTerniLapilli putAt: -1@1.
	aTerniLapilli putAt: 1@-1.

	self
		should: [ aTerniLapilli moveRightDownFrom: 0@1. ]
		raise: Error
		withMessageText: TerniLapilli ilegalDiagonalMovementErrorDescription.	! !
!TerniLapilliTest methodsFor: 'ilegal diagonal movements' stamp: 'DS 11/1/2020 13:27:42'!
test30PlayerCanNotMoveRightDownFromLeftCenterPosition

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putAt: 0@-1.
	aTerniLapilli putAt: 0@0.
	
	aTerniLapilli putAt: 0@1.
	aTerniLapilli putAt: 1@1.
	
	aTerniLapilli putAt: -1@0.
	aTerniLapilli putAt: 1@-1.

	self
		should: [ aTerniLapilli moveRightDownFrom: -1@0. ]
		raise: Error
		withMessageText: TerniLapilli ilegalDiagonalMovementErrorDescription.	! !
!TerniLapilliTest methodsFor: 'ilegal diagonal movements' stamp: 'DS 11/1/2020 13:27:54'!
test31PlayerCanNotMoveLeftUpFromCenterDownPosition

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putAt: 0@-1.
	aTerniLapilli putAt: 0@0.
	
	aTerniLapilli putAt: 0@1.
	aTerniLapilli putAt: 1@1.
	
	aTerniLapilli putAt: -1@1.
	aTerniLapilli putAt: 1@-1.

	self
		should: [ aTerniLapilli moveLeftUpFrom: 0@-1. ]
		raise: Error
		withMessageText: TerniLapilli ilegalDiagonalMovementErrorDescription.	! !
!TerniLapilliTest methodsFor: 'ilegal diagonal movements' stamp: 'DS 11/1/2020 13:28:08'!
test32PlayerCanNotMoveLeftUpFromRightCenterPosition

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putAt: 0@-1.
	aTerniLapilli putAt: 0@0.
	
	aTerniLapilli putAt: 0@1.
	aTerniLapilli putAt: 1@1.

	aTerniLapilli putAt: -1@1.
	aTerniLapilli putAt: 1@-1.

	self
		should: [ aTerniLapilli moveLeftUpFrom: 1@0. ]
		raise: Error
		withMessageText: TerniLapilli ilegalDiagonalMovementErrorDescription.	! !
!TerniLapilliTest methodsFor: 'ilegal diagonal movements' stamp: 'DS 11/1/2020 13:28:23'!
test33PlayerCanNotMoveRightUpFromLeftCenterPosition

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putAt: 0@-1.
	aTerniLapilli putAt: 0@0.
	
	aTerniLapilli putAt: 0@1.
	aTerniLapilli putAt: 1@1.

	aTerniLapilli putAt: -1@0.
	aTerniLapilli putAt: 1@-1.

	self
		should: [ aTerniLapilli moveRightUpFrom: -1@0. ]
		raise: Error
		withMessageText: TerniLapilli ilegalDiagonalMovementErrorDescription.	! !
!TerniLapilliTest methodsFor: 'ilegal diagonal movements' stamp: 'DS 11/1/2020 13:28:32'!
test34PlayerCanNotMoveLeftDownFromDownCenterPosition

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putAt: 0@-1.
	aTerniLapilli putAt: 0@0.
	
	aTerniLapilli putAt: 0@1.
	aTerniLapilli putAt: 1@1.
	
	aTerniLapilli putAt: -1@0.
	aTerniLapilli putAt: 1@-1.

	self
		should: [ aTerniLapilli moveRightUpFrom: 0@-1. ]
		raise: Error
		withMessageText: TerniLapilli ilegalDiagonalMovementErrorDescription.	! !
!TerniLapilliTest methodsFor: 'movements' stamp: 'DS 11/1/2020 13:28:52'!
test19PlayerCanNotMoveUpToNotEmptyPosition

	| aTerniLapilli |

	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putAt: 0@-1.
	aTerniLapilli putAt: 0@0.

	aTerniLapilli putAt: 0@1.
	aTerniLapilli putAt: 1@1.

	aTerniLapilli putAt: -1@1.
	aTerniLapilli putAt: 1@-1.

	self
		should: [ aTerniLapilli moveUpFrom: 0@-1. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.	! !
!TerniLapilliTest methodsFor: 'movements' stamp: 'DS 11/1/2020 13:29:12'!
test20PlayerCanNotMoveRightToNotEmptyPosition

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putAt: 0@-1.
	aTerniLapilli putAt: 0@0.

	aTerniLapilli putAt: 0@1.
	aTerniLapilli putAt: 1@1.

	aTerniLapilli putAt: -1@1.
	aTerniLapilli putAt: 1@-1.

	self
		should: [ aTerniLapilli moveRightFrom: 0@1. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.	! !
!TerniLapilliTest methodsFor: 'movements' stamp: 'DS 11/1/2020 13:29:24'!
test21PlayerCanNotMoveDownToNotEmptyPosition

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putAt: 0@-1.
	aTerniLapilli putAt: 0@0.

	aTerniLapilli putAt: 0@1.
	aTerniLapilli putAt: 1@1.

	aTerniLapilli putAt: -1@1.
	aTerniLapilli putAt: 1@-1.
	self
		should: [ aTerniLapilli moveDownFrom: 0@1. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.	! !
!TerniLapilliTest methodsFor: 'movements' stamp: 'DS 11/1/2020 13:29:37'!
test22PlayerCanNotMoveLeftToNotEmptyPosition

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putAt: 0@-1.
	aTerniLapilli putAt: 0@0.

	aTerniLapilli putAt: 0@1.
	aTerniLapilli putAt: 1@1.

	aTerniLapilli putAt: -1@1.
	aTerniLapilli putAt: 1@-1.

	self
		should: [ aTerniLapilli moveLeftFrom: 0@1. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.	! !
!TerniLapilliTest methodsFor: 'movements' stamp: 'DS 11/1/2020 13:29:59'!
test23PlayerCanNotMoveLeftDownToNotEmptyPosition

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putAt: 0@-1.
	aTerniLapilli putAt: 0@0.
	
	aTerniLapilli putAt: 0@1.
	aTerniLapilli putAt: -1@-1.
	
	aTerniLapilli putAt: 1@1.
	aTerniLapilli putAt: 1@-1.

	self
		should: [ aTerniLapilli moveLeftDownFrom: 1@1. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.	! !
!TerniLapilliTest methodsFor: 'movements' stamp: 'DS 11/1/2020 13:30:27'!
test24PlayerCanNotMoveRightDownToNotEmptyPosition

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putAt: 0@-1.
	aTerniLapilli putAt: 0@0.

	aTerniLapilli putAt: 0@1.
	aTerniLapilli putAt: 1@1.

	aTerniLapilli putAt: -1@1.
	aTerniLapilli putAt: 1@-1.

	self
		should: [ aTerniLapilli moveRightDownFrom: -1@1. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.	! !
!TerniLapilliTest methodsFor: 'movements' stamp: 'DS 11/1/2020 13:30:47'!
test25PlayerCanNotMoveLeftUpToNotEmptyPosition

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putAt: 0@-1.
	aTerniLapilli putAt: 0@0.
	
	aTerniLapilli putAt: 0@1.
	aTerniLapilli putAt: 1@1.
	
	aTerniLapilli putAt: 1@-1.
	aTerniLapilli putAt: -1@0.

	self
		should: [ aTerniLapilli moveLeftUpFrom: 1@-1. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.	! !
!TerniLapilliTest methodsFor: 'movements' stamp: 'DS 11/1/2020 13:30:58'!
test26PlayerCanNotMoveRightUpToNotEmptyPosition

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putAt: 0@-1.
	aTerniLapilli putAt: 0@0.
	
	aTerniLapilli putAt: 0@1.
	aTerniLapilli putAt: 1@1.
	
	aTerniLapilli putAt: -1@-1.
	aTerniLapilli putAt: 1@0.

	self
		should: [ aTerniLapilli moveRightUpFrom: -1@-1. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DS 11/1/2020 13:58:43'!
test16PlayerCanNotPutWhenHasNotTokenRemained

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putAt: 0@-1.
	aTerniLapilli putAt: 0@0.
	
	aTerniLapilli putAt: 0@1.
	aTerniLapilli putAt: 1@1.
	
	aTerniLapilli putAt: -1@1.
	aTerniLapilli putAt: 1@-1.

	self
		should: [ aTerniLapilli putAt: -1@0. ]
		raise: Error
		withMessageText: TerniLapilli noRemainedTokensErrorDescription.
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DS 11/1/2020 13:31:28'!
test18PlayerCanNotPutOutOfBoard

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.

	self
		should: [ aTerniLapilli putAt: 0@2. ]
		raise: Error
		withMessageText: TerniLapilli positionOutOfBoardErrorDescription.
	! !
!TerniLapilliTest methodsFor: 'turns' stamp: 'DS 10/29/2020 18:14:20'!
test01GameStartWithXPlayerTurn
	
	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	
	self assert: aTerniLapilli isPlayingX.! !
!TerniLapilliTest methodsFor: 'turns' stamp: 'DS 11/1/2020 13:24:08'!
test02AfterFirstTurnIsOPlayerTurn
	
	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putAt: 0@0.
	
	self deny: aTerniLapilli isPlayingX.
	self assert: aTerniLapilli isPlayingO.! !
!TerniLapilliTest methodsFor: 'turns' stamp: 'DS 11/1/2020 13:22:06'!
test03AfterOPlayerTurnIsXPlayerTurn
	
	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putAt: 0@0.
	aTerniLapilli putAt: 0@1.
	
	self assert: aTerniLapilli isPlayingX.
	self deny: aTerniLapilli isPlayingO.! !

!classDefinition: #TerniLapilli category: #TerniLapippiSolution stamp: 'Federico 11/2/2020 19:13:22'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'currentPlayer board putTokensRules moveOnRules'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapippiSolution'!

!classDefinition: #TerniLapilli category: #TerniLapippiSolution stamp: 'Federico 11/2/2020 19:13:22'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'currentPlayer board putTokensRules moveOnRules'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapippiSolution'!
!TerniLapilli methodsFor: 'initialization' stamp: 'DS 11/1/2020 16:06:54' overrides: 16896425!
initialize

	putTokensRules := self class putTokenRulesFor: self.
	moveOnRules := self class moveOnRulesFor: self.
	currentPlayer := #X.
	board := OrderedCollection new.! !
!TerniLapilli methodsFor: 'board testing' stamp: 'DS 11/1/2020 15:37:13'!
boardIncludesCurrentPlayerWith: aPosition

	^ board includes: {currentPlayer. aPosition }! !
!TerniLapilli methodsFor: 'board testing' stamp: 'DS 11/1/2020 16:25:08'!
currentPlayerHasTokensRemaind

	^ ( board select: [ :aOccupiedPosition | aOccupiedPosition first = currentPlayer ] ) size = 3.! !
!TerniLapilli methodsFor: 'board testing' stamp: 'DS 11/1/2020 16:27:45'!
hasOccupiedPosition: aPosition

	^ ( board collect: [ :aOccupiedPosition | aOccupiedPosition second ] ) includes: aPosition.! !
!TerniLapilli methodsFor: 'private accesing' stamp: 'DS 11/1/2020 16:44:18'!
occupiedPositionsBy: aPlayer

	^board select: [ :aOccupiedPosition | aOccupiedPosition first = aPlayer ].! !
!TerniLapilli methodsFor: 'winner testing' stamp: 'DS 11/1/2020 16:53:11'!
hasDiagonalWonOn: anOccupiedPositionsByPlayer

	^anOccupiedPositionsByPlayer includesAllOf: {-1@1. 0@0. 1@-1}.! !
!TerniLapilli methodsFor: 'winner testing' stamp: 'DS 11/1/2020 16:51:41'!
hasHorizontalWonOn: anOccupiedPositionsByPlayer

	| i isWinner |
	
	i := 1.
	isWinner := true.
	[i < (anOccupiedPositionsByPlayer size) ]	 whileTrue: [
		isWinner := isWinner and: [ ((anOccupiedPositionsByPlayer at: i)	 + (1@	0)) = (anOccupiedPositionsByPlayer at: i+1)	 ].
		i := i+1.
	].

	^ isWinner.! !
!TerniLapilli methodsFor: 'winner testing' stamp: 'DS 11/1/2020 16:53:40'!
hasInvertedDiagonalWonOn: anOccupiedPositionsByPlayer

	^anOccupiedPositionsByPlayer includesAllOf: {-1@-1. 0@0. 1@1}.! !
!TerniLapilli methodsFor: 'winner testing' stamp: 'DS 11/1/2020 16:52:17'!
hasVerticalWonOn: anOccupiedPositionsByPlayer

	| i isWinner |
	
	i := 1.
	isWinner := true.
	[i < (anOccupiedPositionsByPlayer size) ]	 whileTrue: [
		isWinner := isWinner and: [ ((anOccupiedPositionsByPlayer  at: i)	 + (0@	1)) = (anOccupiedPositionsByPlayer at: i+1)	 ].
		i := i+1.
	].

	^ isWinner.! !
!TerniLapilli methodsFor: 'winner testing' stamp: 'DS 11/1/2020 16:55:37'!
hasWonPlayer: aPlayer

	| occupiedPositionsBypPlayer |

	occupiedPositionsBypPlayer := ( ( board select: [ :aOccupiedPosition | aOccupiedPosition first = aPlayer ] ) 
							  	collect: [ :aOccupiedPositionByPlayer | aOccupiedPositionByPlayer second] ) sort.

	^(occupiedPositionsBypPlayer size = 3) and: [
		(self hasHorizontalWonOn: occupiedPositionsBypPlayer) or:
		(self hasVerticalWonOn: occupiedPositionsBypPlayer) or:
		(self hasDiagonalWonOn: occupiedPositionsBypPlayer) or:
		(self hasInvertedDiagonalWonOn: occupiedPositionsBypPlayer)
	].! !
!TerniLapilli methodsFor: 'testing' stamp: 'DS 11/1/2020 00:06:42'!
hasPlayerOWon

	^self hasWonPlayer: #O.! !
!TerniLapilli methodsFor: 'testing' stamp: 'DS 11/1/2020 00:06:54'!
hasPlayerXWon

	^self hasWonPlayer: #X.! !
!TerniLapilli methodsFor: 'testing' stamp: 'DS 10/29/2020 21:16:07'!
isOver

	^(self hasPlayerXWon) or: (self hasPlayerOWon).! !
!TerniLapilli methodsFor: 'testing' stamp: 'DS 10/29/2020 17:43:02'!
isPlayingO

	^currentPlayer = #O.! !
!TerniLapilli methodsFor: 'testing' stamp: 'DS 11/1/2020 16:40:45'!
isPlayingX

	^currentPlayer = #X.! !
!TerniLapilli methodsFor: 'board adding' stamp: 'DS 11/1/2020 16:40:16'!
add: aPosition

	board add: {currentPlayer. aPosition}.
	currentPlayer := self isPlayingX ifTrue: [#O] ifFalse: [#X].! !
!TerniLapilli methodsFor: 'board adding' stamp: 'DS 11/1/2020 14:09:05'!
addMoveOn: aDirection from: aPosition

	| occupiedPosition |

	occupiedPosition := {currentPlayer. aPosition}.
	self add: aPosition + aDirection.
	board remove: occupiedPosition.

	! !
!TerniLapilli methodsFor: 'player actions' stamp: 'DS 11/1/2020 13:45:14'!
putAt: aPosition

	putTokensRules putAt: aPosition.! !
!TerniLapilli methodsFor: 'movements' stamp: 'DS 11/1/2020 01:03:31'!
moveDownFrom: aPosition

	self moveOn: (0@-1) from: aPosition.! !
!TerniLapilli methodsFor: 'movements' stamp: 'DS 11/1/2020 16:57:21'!
moveLeftDownFrom: aPosition

	({0@1. 1@0} includes: aPosition) ifTrue: [ self signalIlegalDiagonalMovement ].

	self moveOn: (-1@-1) from: aPosition.! !
!TerniLapilli methodsFor: 'movements' stamp: 'DS 11/1/2020 01:04:33'!
moveLeftFrom: aPosition

	self moveOn: (-1@0) from: aPosition.! !
!TerniLapilli methodsFor: 'movements' stamp: 'DS 11/1/2020 16:57:12'!
moveLeftUpFrom: aPosition

	({0@-1. 1@0} includes: aPosition) ifTrue: [ self signalIlegalDiagonalMovement ].

	self moveOn: (-1@1) from: aPosition.! !
!TerniLapilli methodsFor: 'movements' stamp: 'DS 11/1/2020 16:10:06'!
moveOn: aDirection from: aPosition

	 moveOnRules moveOn: aDirection from: aPosition.! !
!TerniLapilli methodsFor: 'movements' stamp: 'DS 11/1/2020 16:58:26'!
moveRightDownFrom: aPosition

	({0@1. -1@0} includes: aPosition) ifTrue: [ self signalIlegalDiagonalMovement ].

	self moveOn: (1@-1) from: aPosition.! !
!TerniLapilli methodsFor: 'movements' stamp: 'DS 11/1/2020 01:05:51'!
moveRightFrom: aPosition

	self moveOn: (1@0) from: aPosition.! !
!TerniLapilli methodsFor: 'movements' stamp: 'DS 11/1/2020 16:58:36'!
moveRightUpFrom: aPosition

	({-1@0. 0@-1} includes: aPosition) ifTrue: [ self signalIlegalDiagonalMovement ].

	self moveOn: (1@1) from: aPosition.! !
!TerniLapilli methodsFor: 'movements' stamp: 'DS 11/1/2020 01:06:47'!
moveUpFrom: aPosition

	self moveOn: (0@1) from: aPosition.! !
!TerniLapilli methodsFor: 'exceptions' stamp: 'DS 11/1/2020 12:27:11'!
signalGameOver

	^ self error: self class gameOverErrorDescription! !
!TerniLapilli methodsFor: 'exceptions' stamp: 'DS 11/1/2020 16:57:12'!
signalIlegalDiagonalMovement

	^ self error: self class ilegalDiagonalMovementErrorDescription! !
!TerniLapilli methodsFor: 'exceptions' stamp: 'DS 11/1/2020 12:27:22'!
signalIlegalMovement

	^ self error: self class ilegalMovementErrorDescription! !
!TerniLapilli methodsFor: 'exceptions' stamp: 'DS 11/1/2020 12:25:05'!
signalNoRemainedTokens

	^ self error: self class noRemainedTokensErrorDescription! !
!TerniLapilli methodsFor: 'exceptions' stamp: 'DS 11/1/2020 12:25:37'!
signalPositionOutOfBoard

	^ self error: self class positionOutOfBoardErrorDescription! !
!TerniLapilli methodsFor: 'exceptions' stamp: 'DS 11/1/2020 15:39:09'!
signalRemainedTokens

	^ self error: self class remainedTokensErrorDescription! !

!classDefinition: 'TerniLapilli class' category: #TerniLapippiSolution stamp: 'Federico 11/2/2020 19:13:24'!
TerniLapilli class
	instanceVariableNames: ''!

!classDefinition: 'TerniLapilli class' category: #TerniLapippiSolution stamp: 'Federico 11/2/2020 19:13:24'!
TerniLapilli class
	instanceVariableNames: ''!
!TerniLapilli class methodsFor: 'error descriptions' stamp: 'DS 10/29/2020 18:26:56'!
attemptToPlayTwiceInARowErrorDescription

	^'Can not play twice in a row'.! !
!TerniLapilli class methodsFor: 'error descriptions' stamp: 'DS 10/29/2020 21:11:33'!
gameOverErrorDescription

	^'Game Over'.! !
!TerniLapilli class methodsFor: 'error descriptions' stamp: 'DS 11/1/2020 01:19:03'!
ilegalDiagonalMovementErrorDescription

	^'Can not move on this diagonal'.! !
!TerniLapilli class methodsFor: 'error descriptions' stamp: 'DS 11/1/2020 01:19:34'!
ilegalMovementErrorDescription

	^'Can not do this movement'.! !
!TerniLapilli class methodsFor: 'error descriptions' stamp: 'DS 10/29/2020 18:54:32'!
noRemainedTokensErrorDescription

	^'No Remained Tokens'.! !
!TerniLapilli class methodsFor: 'error descriptions' stamp: 'DS 10/31/2020 18:13:13'!
positionOutOfBoardErrorDescription

	^'Position out of board'.! !
!TerniLapilli class methodsFor: 'error descriptions' stamp: 'DS 11/1/2020 02:04:54'!
remainedTokensErrorDescription

	^'Can not move when has Remained Tokens'.! !
!TerniLapilli class methodsFor: 'rules' stamp: 'DS 11/1/2020 16:59:38'!
buildRules: aKindOfRule for: aTerniLapilliGame

	^RemainedTokensRuleDecorator for: aTerniLapilliGame decorating: (
		GameOverRuleDecorator for: aTerniLapilliGame decorating: (
			PlayingInBoardRuleDecorator for: aTerniLapilliGame decorating: (
				OccupiedPositionRuleDecorator for: aTerniLapilliGame decorating: (			aKindOfRule for: aTerniLapilliGame 	)
			)
		)
	).! !
!TerniLapilli class methodsFor: 'rules' stamp: 'DS 11/1/2020 17:00:07'!
moveOnRulesFor: aTerniLapilliGame

	^self buildRules: MoveOnRule for: aTerniLapilliGame.! !
!TerniLapilli class methodsFor: 'rules' stamp: 'DS 11/1/2020 16:59:57'!
putTokenRulesFor: aTerniLapilliGame

	^self buildRules: PutTokensRule for: aTerniLapilliGame.! !

!classDefinition: #TerniLapilliRules category: #TerniLapippiSolution stamp: 'Federico 11/2/2020 19:13:25'!
Object subclass: #TerniLapilliRules
	instanceVariableNames: 'game'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapippiSolution'!

!classDefinition: #TerniLapilliRules category: #TerniLapippiSolution stamp: 'Federico 11/2/2020 19:13:25'!
Object subclass: #TerniLapilliRules
	instanceVariableNames: 'game'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapippiSolution'!
!TerniLapilliRules methodsFor: 'initialization' stamp: 'DS 11/1/2020 12:21:43'!
initializateFor: aGame

	game := aGame.! !

!classDefinition: 'TerniLapilliRules class' category: #TerniLapippiSolution stamp: 'Federico 11/2/2020 19:13:25'!
TerniLapilliRules class
	instanceVariableNames: ''!

!classDefinition: 'TerniLapilliRules class' category: #TerniLapippiSolution stamp: 'Federico 11/2/2020 19:13:25'!
TerniLapilliRules class
	instanceVariableNames: ''!
!TerniLapilliRules class methodsFor: 'class initialization' stamp: 'DS 11/1/2020 12:21:59'!
for: aGame

	^self new initializateFor: aGame.! !

!classDefinition: #MoveOnRule category: #TerniLapippiSolution stamp: 'Federico 11/2/2020 19:13:25'!
TerniLapilliRules subclass: #MoveOnRule
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapippiSolution'!

!classDefinition: #MoveOnRule category: #TerniLapippiSolution stamp: 'Federico 11/2/2020 19:13:25'!
TerniLapilliRules subclass: #MoveOnRule
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapippiSolution'!
!MoveOnRule methodsFor: 'game plays' stamp: 'DS 11/1/2020 16:07:48'!
moveOn: aDirection from: aPosition

	game addMoveOn: aDirection from: aPosition.! !

!classDefinition: #PutTokensRule category: #TerniLapippiSolution stamp: 'Federico 11/2/2020 19:13:25'!
TerniLapilliRules subclass: #PutTokensRule
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapippiSolution'!

!classDefinition: #PutTokensRule category: #TerniLapippiSolution stamp: 'Federico 11/2/2020 19:13:25'!
TerniLapilliRules subclass: #PutTokensRule
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapippiSolution'!
!PutTokensRule methodsFor: 'game plays' stamp: 'DS 11/1/2020 12:23:12'!
putAt: aPosition

	game add: aPosition.! !

!classDefinition: #TerniLapilliRulesDecorator category: #TerniLapippiSolution stamp: 'Federico 11/2/2020 19:13:25'!
TerniLapilliRules subclass: #TerniLapilliRulesDecorator
	instanceVariableNames: 'decoratee'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapippiSolution'!

!classDefinition: #TerniLapilliRulesDecorator category: #TerniLapippiSolution stamp: 'Federico 11/2/2020 19:13:25'!
TerniLapilliRules subclass: #TerniLapilliRulesDecorator
	instanceVariableNames: 'decoratee'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapippiSolution'!
!TerniLapilliRulesDecorator methodsFor: 'initialization' stamp: 'DS 11/1/2020 12:31:42'!
initializateFor: aGame decorating: aTerniLapilliRule

	game := aGame.
	decoratee := aTerniLapilliRule.! !
!TerniLapilliRulesDecorator methodsFor: 'game plays' stamp: 'DS 11/1/2020 16:16:53'!
moveOn: aDirection from: aPosition

	self subclassResponsibility.! !
!TerniLapilliRulesDecorator methodsFor: 'game plays' stamp: 'DS 11/1/2020 12:29:07'!
putAt: aPosition

	self subclassResponsibility.! !

!classDefinition: 'TerniLapilliRulesDecorator class' category: #TerniLapippiSolution stamp: 'Federico 11/2/2020 19:13:26'!
TerniLapilliRulesDecorator class
	instanceVariableNames: ''!

!classDefinition: 'TerniLapilliRulesDecorator class' category: #TerniLapippiSolution stamp: 'Federico 11/2/2020 19:13:26'!
TerniLapilliRulesDecorator class
	instanceVariableNames: ''!
!TerniLapilliRulesDecorator class methodsFor: 'instance creation' stamp: 'DS 11/1/2020 12:30:18'!
for: aGame decorating: aTerniLapilliRule

	^self new initializateFor: aGame decorating: aTerniLapilliRule.! !

!classDefinition: #GameOverRuleDecorator category: #TerniLapippiSolution stamp: 'Federico 11/2/2020 19:13:26'!
TerniLapilliRulesDecorator subclass: #GameOverRuleDecorator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapippiSolution'!

!classDefinition: #GameOverRuleDecorator category: #TerniLapippiSolution stamp: 'Federico 11/2/2020 19:13:26'!
TerniLapilliRulesDecorator subclass: #GameOverRuleDecorator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapippiSolution'!
!GameOverRuleDecorator methodsFor: 'game plays' stamp: 'DS 11/1/2020 15:45:30' overrides: 50930086!
moveOn: aDirection from: aPosition

	(game isOver) ifTrue: [ game signalGameOver ].

	decoratee moveOn: aDirection from: aPosition.! !
!GameOverRuleDecorator methodsFor: 'game plays' stamp: 'DS 11/1/2020 12:47:50' overrides: 50930091!
putAt: aPosition

	(game isOver) ifTrue: [ game signalGameOver ].

	decoratee putAt: aPosition.! !

!classDefinition: #OccupiedPositionRuleDecorator category: #TerniLapippiSolution stamp: 'Federico 11/2/2020 19:13:26'!
TerniLapilliRulesDecorator subclass: #OccupiedPositionRuleDecorator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapippiSolution'!

!classDefinition: #OccupiedPositionRuleDecorator category: #TerniLapippiSolution stamp: 'Federico 11/2/2020 19:13:26'!
TerniLapilliRulesDecorator subclass: #OccupiedPositionRuleDecorator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapippiSolution'!
!OccupiedPositionRuleDecorator methodsFor: 'game plays' stamp: 'DS 11/1/2020 16:28:04' overrides: 50930086!
moveOn: aDirection from: aPosition

	(game hasOccupiedPosition: aPosition + aDirection) 				ifTrue: [ game signalIlegalMovement ].
	(game boardIncludesCurrentPlayerWith: aPosition ) ifFalse: [ game signalIlegalMovement ].	

	decoratee moveOn: aDirection from: aPosition.! !
!OccupiedPositionRuleDecorator methodsFor: 'game plays' stamp: 'DS 11/1/2020 16:28:16' overrides: 50930091!
putAt: aPosition

	(game hasOccupiedPosition: aPosition) 		ifTrue: [ game signalIlegalMovement ].

	decoratee putAt: aPosition.! !

!classDefinition: #PlayingInBoardRuleDecorator category: #TerniLapippiSolution stamp: 'Federico 11/2/2020 19:13:26'!
TerniLapilliRulesDecorator subclass: #PlayingInBoardRuleDecorator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapippiSolution'!

!classDefinition: #PlayingInBoardRuleDecorator category: #TerniLapippiSolution stamp: 'Federico 11/2/2020 19:13:26'!
TerniLapilliRulesDecorator subclass: #PlayingInBoardRuleDecorator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapippiSolution'!
!PlayingInBoardRuleDecorator methodsFor: 'game plays' stamp: 'DS 11/1/2020 15:48:04' overrides: 50930086!
moveOn: aDirection from: aPosition

	(aPosition between: (-1@-1) and: (1@1)) ifFalse: [ game signalPositionOutOfBoard ].

	decoratee moveOn: aDirection from: aPosition.! !
!PlayingInBoardRuleDecorator methodsFor: 'game plays' stamp: 'DS 11/1/2020 12:46:35' overrides: 50930091!
putAt: aPosition

	(aPosition between: (-1@-1) and: (1@1)) ifFalse: [ game signalPositionOutOfBoard ].

	decoratee putAt: aPosition.! !

!classDefinition: #RemainedTokensRuleDecorator category: #TerniLapippiSolution stamp: 'Federico 11/2/2020 19:13:26'!
TerniLapilliRulesDecorator subclass: #RemainedTokensRuleDecorator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapippiSolution'!

!classDefinition: #RemainedTokensRuleDecorator category: #TerniLapippiSolution stamp: 'Federico 11/2/2020 19:13:26'!
TerniLapilliRulesDecorator subclass: #RemainedTokensRuleDecorator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapippiSolution'!
!RemainedTokensRuleDecorator methodsFor: 'game plays' stamp: 'DS 11/1/2020 16:23:18' overrides: 50930086!
moveOn: aDirection from: aPosition

	( game currentPlayerHasTokensRemaind ) 	ifFalse: [ game signalRemainedTokens ].

	^decoratee moveOn: aDirection from: aPosition.! !
!RemainedTokensRuleDecorator methodsFor: 'game plays' stamp: 'DS 11/1/2020 16:23:12' overrides: 50930091!
putAt: aPosition

	( game currentPlayerHasTokensRemaind ) 	ifTrue: [ game signalNoRemainedTokens ].

	^decoratee putAt: aPosition.! !

!classRemoval: #TerniLapilli stamp: 'Federico 11/2/2020 19:13:27'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'currentPlayer board putTokensRules moveOnRules'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapippiSolution'!

!classRemoval: #TerniLapilliTest stamp: 'Federico 11/2/2020 19:13:28'!
TestCase subclass: #TerniLapilliTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapippiSolution'!

!classDefinition: #TerniLapilliTest category: #TerniLapippiSolution stamp: 'Federico 11/2/2020 19:13:28'!
TestCase subclass: #TerniLapilliTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapippiSolution'!

!classDefinition: #TerniLapilliTest category: #TerniLapippiSolution stamp: 'Federico 11/2/2020 19:13:28'!
TestCase subclass: #TerniLapilliTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapippiSolution'!
!TerniLapilliTest methodsFor: 'ilegal movement' stamp: 'DS 11/1/2020 13:57:55'!
test06PlayerCanNotPutOnOccupiedPosition
	
	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putAt: 0@0.

	self
		should: [ aTerniLapilli putAt: 0@0. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.! !
!TerniLapilliTest methodsFor: 'ilegal movement' stamp: 'DS 11/1/2020 13:25:19'!
test13PlayerCanNotMoveFromNotOwnPosition

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putAt: 0@-1.
	aTerniLapilli putAt: 0@0.
	
	aTerniLapilli putAt: 0@1.
	aTerniLapilli putAt: 1@1.
	
	aTerniLapilli putAt: -1@1.
	aTerniLapilli putAt: 1@-1.

	self
		should: [ aTerniLapilli moveLeftDownFrom: 0@0. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.! !
!TerniLapilliTest methodsFor: 'ilegal movement' stamp: 'DS 11/1/2020 13:25:22'!
test14PlayerCanNotMoveWhenHasTokenRemained

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putAt: 0@-1.
	aTerniLapilli putAt: 0@0.

	self
		should: [ aTerniLapilli moveLeftDownFrom: 0@-1. ]
		raise: Error
		withMessageText: TerniLapilli remainedTokensErrorDescription.! !
!TerniLapilliTest methodsFor: 'kinds of win' stamp: 'DS 11/1/2020 13:22:35'!
test08PlayerWonWithHorizontalPlay
	
	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putAt: 0@0.
	aTerniLapilli putAt: 0@1.
	
	aTerniLapilli putAt: -1@0.
	aTerniLapilli putAt: 1@1.
	
	aTerniLapilli putAt: 1@0.

	self assert: aTerniLapilli hasPlayerXWon.! !
!TerniLapilliTest methodsFor: 'kinds of win' stamp: 'DS 11/1/2020 13:22:45'!
test09PlayerWonWithVerticalPlay
	
	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putAt: 0@0.
	aTerniLapilli putAt: -1@1.
	
	aTerniLapilli putAt: 0@1.
	aTerniLapilli putAt: 1@1.
	
	aTerniLapilli putAt: 0@-1.

	self assert: aTerniLapilli hasPlayerXWon.! !
!TerniLapilliTest methodsFor: 'kinds of win' stamp: 'DS 11/1/2020 13:25:38'!
test10PlayerWonWithInvertedDiagonalPlay
	
	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putAt: 0@0.
	aTerniLapilli putAt: 0@1.
	
	aTerniLapilli putAt: -1@1.
	aTerniLapilli putAt: 1@1.
	
	aTerniLapilli putAt: 1@-1.

	self assert: aTerniLapilli hasPlayerXWon.! !
!TerniLapilliTest methodsFor: 'kinds of win' stamp: 'DS 11/1/2020 13:25:47'!
test11PlayerWonWithDiagonalPlay

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putAt: 0@0.
	aTerniLapilli putAt: 0@1.
	
	aTerniLapilli putAt: 1@1.
	aTerniLapilli putAt: -1@1.
	
	aTerniLapilli putAt: -1@-1.

	self assert: aTerniLapilli hasPlayerXWon.! !
!TerniLapilliTest methodsFor: 'kinds of win' stamp: 'DS 11/1/2020 13:26:34'!
test12GameIsOverWhenAPlayerWins

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putAt: 0@-1.
	aTerniLapilli putAt: 0@0.
	
	aTerniLapilli putAt: 0@1.
	aTerniLapilli putAt: 1@1.
	
	aTerniLapilli putAt: -1@1.
	aTerniLapilli putAt: -1@-1.

	self
		should: [ aTerniLapilli moveDownFrom: -1@1 ]
		raise: Error
		withMessageText: TerniLapilli gameOverErrorDescription.
	! !
!TerniLapilliTest methodsFor: 'kinds of win' stamp: 'DS 11/1/2020 13:26:43'!
test15DoAWinnerMovementOverTheGame

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putAt: 0@-1.
	aTerniLapilli putAt: 0@0.
	
	aTerniLapilli putAt: 0@1.
	aTerniLapilli putAt: 1@1.
	
	aTerniLapilli putAt: -1@1.
	aTerniLapilli putAt: 1@-1.
	
	aTerniLapilli moveDownFrom: -1@1.
	aTerniLapilli moveRightFrom: 0@0.
	
	self assert: aTerniLapilli isOver.! !
!TerniLapilliTest methodsFor: 'ilegal diagonal movements' stamp: 'DS 11/1/2020 13:27:04'!
test27PlayerCanNotMoveLeftDownFromCenterUpPosition

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putAt: 0@-1.
	aTerniLapilli putAt: 0@0.
	
	aTerniLapilli putAt: 0@1.
	aTerniLapilli putAt: 1@1.
	
	aTerniLapilli putAt: -1@1.
	aTerniLapilli putAt: 1@-1.

	self
		should: [ aTerniLapilli moveLeftDownFrom: 0@1. ]
		raise: Error
		withMessageText: TerniLapilli ilegalDiagonalMovementErrorDescription.	! !
!TerniLapilliTest methodsFor: 'ilegal diagonal movements' stamp: 'DS 11/1/2020 13:27:23'!
test28PlayerCanNotMoveLeftDownFromRightCenterPosition

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putAt: 0@-1.
	aTerniLapilli putAt: 0@0.
	
	aTerniLapilli putAt: 0@1.
	aTerniLapilli putAt: 1@1.
	
	aTerniLapilli putAt: 1@0.
	aTerniLapilli putAt: 1@-1.

	self
		should: [ aTerniLapilli moveLeftDownFrom: 1@0. ]
		raise: Error
		withMessageText: TerniLapilli ilegalDiagonalMovementErrorDescription.	! !
!TerniLapilliTest methodsFor: 'ilegal diagonal movements' stamp: 'DS 11/1/2020 13:27:32'!
test29PlayerCanNotMoveRIghtDownFromCenterUpPosition

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putAt: 0@-1.
	aTerniLapilli putAt: 0@0.
	
	aTerniLapilli putAt: 0@1.
	aTerniLapilli putAt: 1@1.
	
	aTerniLapilli putAt: -1@1.
	aTerniLapilli putAt: 1@-1.

	self
		should: [ aTerniLapilli moveRightDownFrom: 0@1. ]
		raise: Error
		withMessageText: TerniLapilli ilegalDiagonalMovementErrorDescription.	! !
!TerniLapilliTest methodsFor: 'ilegal diagonal movements' stamp: 'DS 11/1/2020 13:27:42'!
test30PlayerCanNotMoveRightDownFromLeftCenterPosition

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putAt: 0@-1.
	aTerniLapilli putAt: 0@0.
	
	aTerniLapilli putAt: 0@1.
	aTerniLapilli putAt: 1@1.
	
	aTerniLapilli putAt: -1@0.
	aTerniLapilli putAt: 1@-1.

	self
		should: [ aTerniLapilli moveRightDownFrom: -1@0. ]
		raise: Error
		withMessageText: TerniLapilli ilegalDiagonalMovementErrorDescription.	! !
!TerniLapilliTest methodsFor: 'ilegal diagonal movements' stamp: 'DS 11/1/2020 13:27:54'!
test31PlayerCanNotMoveLeftUpFromCenterDownPosition

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putAt: 0@-1.
	aTerniLapilli putAt: 0@0.
	
	aTerniLapilli putAt: 0@1.
	aTerniLapilli putAt: 1@1.
	
	aTerniLapilli putAt: -1@1.
	aTerniLapilli putAt: 1@-1.

	self
		should: [ aTerniLapilli moveLeftUpFrom: 0@-1. ]
		raise: Error
		withMessageText: TerniLapilli ilegalDiagonalMovementErrorDescription.	! !
!TerniLapilliTest methodsFor: 'ilegal diagonal movements' stamp: 'DS 11/1/2020 13:28:08'!
test32PlayerCanNotMoveLeftUpFromRightCenterPosition

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putAt: 0@-1.
	aTerniLapilli putAt: 0@0.
	
	aTerniLapilli putAt: 0@1.
	aTerniLapilli putAt: 1@1.

	aTerniLapilli putAt: -1@1.
	aTerniLapilli putAt: 1@-1.

	self
		should: [ aTerniLapilli moveLeftUpFrom: 1@0. ]
		raise: Error
		withMessageText: TerniLapilli ilegalDiagonalMovementErrorDescription.	! !
!TerniLapilliTest methodsFor: 'ilegal diagonal movements' stamp: 'DS 11/1/2020 13:28:23'!
test33PlayerCanNotMoveRightUpFromLeftCenterPosition

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putAt: 0@-1.
	aTerniLapilli putAt: 0@0.
	
	aTerniLapilli putAt: 0@1.
	aTerniLapilli putAt: 1@1.

	aTerniLapilli putAt: -1@0.
	aTerniLapilli putAt: 1@-1.

	self
		should: [ aTerniLapilli moveRightUpFrom: -1@0. ]
		raise: Error
		withMessageText: TerniLapilli ilegalDiagonalMovementErrorDescription.	! !
!TerniLapilliTest methodsFor: 'ilegal diagonal movements' stamp: 'DS 11/1/2020 13:28:32'!
test34PlayerCanNotMoveLeftDownFromDownCenterPosition

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putAt: 0@-1.
	aTerniLapilli putAt: 0@0.
	
	aTerniLapilli putAt: 0@1.
	aTerniLapilli putAt: 1@1.
	
	aTerniLapilli putAt: -1@0.
	aTerniLapilli putAt: 1@-1.

	self
		should: [ aTerniLapilli moveRightUpFrom: 0@-1. ]
		raise: Error
		withMessageText: TerniLapilli ilegalDiagonalMovementErrorDescription.	! !
!TerniLapilliTest methodsFor: 'movements' stamp: 'DS 11/1/2020 13:28:52'!
test19PlayerCanNotMoveUpToNotEmptyPosition

	| aTerniLapilli |

	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putAt: 0@-1.
	aTerniLapilli putAt: 0@0.

	aTerniLapilli putAt: 0@1.
	aTerniLapilli putAt: 1@1.

	aTerniLapilli putAt: -1@1.
	aTerniLapilli putAt: 1@-1.

	self
		should: [ aTerniLapilli moveUpFrom: 0@-1. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.	! !
!TerniLapilliTest methodsFor: 'movements' stamp: 'DS 11/1/2020 13:29:12'!
test20PlayerCanNotMoveRightToNotEmptyPosition

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putAt: 0@-1.
	aTerniLapilli putAt: 0@0.

	aTerniLapilli putAt: 0@1.
	aTerniLapilli putAt: 1@1.

	aTerniLapilli putAt: -1@1.
	aTerniLapilli putAt: 1@-1.

	self
		should: [ aTerniLapilli moveRightFrom: 0@1. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.	! !
!TerniLapilliTest methodsFor: 'movements' stamp: 'DS 11/1/2020 13:29:24'!
test21PlayerCanNotMoveDownToNotEmptyPosition

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putAt: 0@-1.
	aTerniLapilli putAt: 0@0.

	aTerniLapilli putAt: 0@1.
	aTerniLapilli putAt: 1@1.

	aTerniLapilli putAt: -1@1.
	aTerniLapilli putAt: 1@-1.
	self
		should: [ aTerniLapilli moveDownFrom: 0@1. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.	! !
!TerniLapilliTest methodsFor: 'movements' stamp: 'DS 11/1/2020 13:29:37'!
test22PlayerCanNotMoveLeftToNotEmptyPosition

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putAt: 0@-1.
	aTerniLapilli putAt: 0@0.

	aTerniLapilli putAt: 0@1.
	aTerniLapilli putAt: 1@1.

	aTerniLapilli putAt: -1@1.
	aTerniLapilli putAt: 1@-1.

	self
		should: [ aTerniLapilli moveLeftFrom: 0@1. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.	! !
!TerniLapilliTest methodsFor: 'movements' stamp: 'DS 11/1/2020 13:29:59'!
test23PlayerCanNotMoveLeftDownToNotEmptyPosition

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putAt: 0@-1.
	aTerniLapilli putAt: 0@0.
	
	aTerniLapilli putAt: 0@1.
	aTerniLapilli putAt: -1@-1.
	
	aTerniLapilli putAt: 1@1.
	aTerniLapilli putAt: 1@-1.

	self
		should: [ aTerniLapilli moveLeftDownFrom: 1@1. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.	! !
!TerniLapilliTest methodsFor: 'movements' stamp: 'DS 11/1/2020 13:30:27'!
test24PlayerCanNotMoveRightDownToNotEmptyPosition

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putAt: 0@-1.
	aTerniLapilli putAt: 0@0.

	aTerniLapilli putAt: 0@1.
	aTerniLapilli putAt: 1@1.

	aTerniLapilli putAt: -1@1.
	aTerniLapilli putAt: 1@-1.

	self
		should: [ aTerniLapilli moveRightDownFrom: -1@1. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.	! !
!TerniLapilliTest methodsFor: 'movements' stamp: 'DS 11/1/2020 13:30:47'!
test25PlayerCanNotMoveLeftUpToNotEmptyPosition

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putAt: 0@-1.
	aTerniLapilli putAt: 0@0.
	
	aTerniLapilli putAt: 0@1.
	aTerniLapilli putAt: 1@1.
	
	aTerniLapilli putAt: 1@-1.
	aTerniLapilli putAt: -1@0.

	self
		should: [ aTerniLapilli moveLeftUpFrom: 1@-1. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.	! !
!TerniLapilliTest methodsFor: 'movements' stamp: 'DS 11/1/2020 13:30:58'!
test26PlayerCanNotMoveRightUpToNotEmptyPosition

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putAt: 0@-1.
	aTerniLapilli putAt: 0@0.
	
	aTerniLapilli putAt: 0@1.
	aTerniLapilli putAt: 1@1.
	
	aTerniLapilli putAt: -1@-1.
	aTerniLapilli putAt: 1@0.

	self
		should: [ aTerniLapilli moveRightUpFrom: -1@-1. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DS 11/1/2020 13:58:43'!
test16PlayerCanNotPutWhenHasNotTokenRemained

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putAt: 0@-1.
	aTerniLapilli putAt: 0@0.
	
	aTerniLapilli putAt: 0@1.
	aTerniLapilli putAt: 1@1.
	
	aTerniLapilli putAt: -1@1.
	aTerniLapilli putAt: 1@-1.

	self
		should: [ aTerniLapilli putAt: -1@0. ]
		raise: Error
		withMessageText: TerniLapilli noRemainedTokensErrorDescription.
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DS 11/1/2020 13:31:28'!
test18PlayerCanNotPutOutOfBoard

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.

	self
		should: [ aTerniLapilli putAt: 0@2. ]
		raise: Error
		withMessageText: TerniLapilli positionOutOfBoardErrorDescription.
	! !
!TerniLapilliTest methodsFor: 'turns' stamp: 'DS 10/29/2020 18:14:20'!
test01GameStartWithXPlayerTurn
	
	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	
	self assert: aTerniLapilli isPlayingX.! !
!TerniLapilliTest methodsFor: 'turns' stamp: 'DS 11/1/2020 13:24:08'!
test02AfterFirstTurnIsOPlayerTurn
	
	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putAt: 0@0.
	
	self deny: aTerniLapilli isPlayingX.
	self assert: aTerniLapilli isPlayingO.! !
!TerniLapilliTest methodsFor: 'turns' stamp: 'DS 11/1/2020 13:22:06'!
test03AfterOPlayerTurnIsXPlayerTurn
	
	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putAt: 0@0.
	aTerniLapilli putAt: 0@1.
	
	self assert: aTerniLapilli isPlayingX.
	self deny: aTerniLapilli isPlayingO.! !

!classDefinition: #TerniLapilli category: #TerniLapippiSolution stamp: 'Federico 11/2/2020 19:13:30'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'currentPlayer board putTokensRules moveOnRules'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapippiSolution'!

!classDefinition: #TerniLapilli category: #TerniLapippiSolution stamp: 'Federico 11/2/2020 19:13:30'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'currentPlayer board putTokensRules moveOnRules'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapippiSolution'!
!TerniLapilli methodsFor: 'initialization' stamp: 'DS 11/1/2020 16:06:54' overrides: 16896425!
initialize

	putTokensRules := self class putTokenRulesFor: self.
	moveOnRules := self class moveOnRulesFor: self.
	currentPlayer := #X.
	board := OrderedCollection new.! !
!TerniLapilli methodsFor: 'board testing' stamp: 'DS 11/1/2020 15:37:13'!
boardIncludesCurrentPlayerWith: aPosition

	^ board includes: {currentPlayer. aPosition }! !
!TerniLapilli methodsFor: 'board testing' stamp: 'DS 11/1/2020 16:25:08'!
currentPlayerHasTokensRemaind

	^ ( board select: [ :aOccupiedPosition | aOccupiedPosition first = currentPlayer ] ) size = 3.! !
!TerniLapilli methodsFor: 'board testing' stamp: 'DS 11/1/2020 16:27:45'!
hasOccupiedPosition: aPosition

	^ ( board collect: [ :aOccupiedPosition | aOccupiedPosition second ] ) includes: aPosition.! !
!TerniLapilli methodsFor: 'private accesing' stamp: 'DS 11/1/2020 16:44:18'!
occupiedPositionsBy: aPlayer

	^board select: [ :aOccupiedPosition | aOccupiedPosition first = aPlayer ].! !
!TerniLapilli methodsFor: 'winner testing' stamp: 'DS 11/1/2020 16:53:11'!
hasDiagonalWonOn: anOccupiedPositionsByPlayer

	^anOccupiedPositionsByPlayer includesAllOf: {-1@1. 0@0. 1@-1}.! !
!TerniLapilli methodsFor: 'winner testing' stamp: 'DS 11/1/2020 16:51:41'!
hasHorizontalWonOn: anOccupiedPositionsByPlayer

	| i isWinner |
	
	i := 1.
	isWinner := true.
	[i < (anOccupiedPositionsByPlayer size) ]	 whileTrue: [
		isWinner := isWinner and: [ ((anOccupiedPositionsByPlayer at: i)	 + (1@	0)) = (anOccupiedPositionsByPlayer at: i+1)	 ].
		i := i+1.
	].

	^ isWinner.! !
!TerniLapilli methodsFor: 'winner testing' stamp: 'DS 11/1/2020 16:53:40'!
hasInvertedDiagonalWonOn: anOccupiedPositionsByPlayer

	^anOccupiedPositionsByPlayer includesAllOf: {-1@-1. 0@0. 1@1}.! !
!TerniLapilli methodsFor: 'winner testing' stamp: 'DS 11/1/2020 16:52:17'!
hasVerticalWonOn: anOccupiedPositionsByPlayer

	| i isWinner |
	
	i := 1.
	isWinner := true.
	[i < (anOccupiedPositionsByPlayer size) ]	 whileTrue: [
		isWinner := isWinner and: [ ((anOccupiedPositionsByPlayer  at: i)	 + (0@	1)) = (anOccupiedPositionsByPlayer at: i+1)	 ].
		i := i+1.
	].

	^ isWinner.! !
!TerniLapilli methodsFor: 'winner testing' stamp: 'DS 11/1/2020 16:55:37'!
hasWonPlayer: aPlayer

	| occupiedPositionsBypPlayer |

	occupiedPositionsBypPlayer := ( ( board select: [ :aOccupiedPosition | aOccupiedPosition first = aPlayer ] ) 
							  	collect: [ :aOccupiedPositionByPlayer | aOccupiedPositionByPlayer second] ) sort.

	^(occupiedPositionsBypPlayer size = 3) and: [
		(self hasHorizontalWonOn: occupiedPositionsBypPlayer) or:
		(self hasVerticalWonOn: occupiedPositionsBypPlayer) or:
		(self hasDiagonalWonOn: occupiedPositionsBypPlayer) or:
		(self hasInvertedDiagonalWonOn: occupiedPositionsBypPlayer)
	].! !
!TerniLapilli methodsFor: 'testing' stamp: 'DS 11/1/2020 00:06:42'!
hasPlayerOWon

	^self hasWonPlayer: #O.! !
!TerniLapilli methodsFor: 'testing' stamp: 'DS 11/1/2020 00:06:54'!
hasPlayerXWon

	^self hasWonPlayer: #X.! !
!TerniLapilli methodsFor: 'testing' stamp: 'DS 10/29/2020 21:16:07'!
isOver

	^(self hasPlayerXWon) or: (self hasPlayerOWon).! !
!TerniLapilli methodsFor: 'testing' stamp: 'DS 10/29/2020 17:43:02'!
isPlayingO

	^currentPlayer = #O.! !
!TerniLapilli methodsFor: 'testing' stamp: 'DS 11/1/2020 16:40:45'!
isPlayingX

	^currentPlayer = #X.! !
!TerniLapilli methodsFor: 'board adding' stamp: 'DS 11/1/2020 16:40:16'!
add: aPosition

	board add: {currentPlayer. aPosition}.
	currentPlayer := self isPlayingX ifTrue: [#O] ifFalse: [#X].! !
!TerniLapilli methodsFor: 'board adding' stamp: 'DS 11/1/2020 14:09:05'!
addMoveOn: aDirection from: aPosition

	| occupiedPosition |

	occupiedPosition := {currentPlayer. aPosition}.
	self add: aPosition + aDirection.
	board remove: occupiedPosition.

	! !
!TerniLapilli methodsFor: 'player actions' stamp: 'DS 11/1/2020 13:45:14'!
putAt: aPosition

	putTokensRules putAt: aPosition.! !
!TerniLapilli methodsFor: 'movements' stamp: 'DS 11/1/2020 01:03:31'!
moveDownFrom: aPosition

	self moveOn: (0@-1) from: aPosition.! !
!TerniLapilli methodsFor: 'movements' stamp: 'DS 11/1/2020 16:57:21'!
moveLeftDownFrom: aPosition

	({0@1. 1@0} includes: aPosition) ifTrue: [ self signalIlegalDiagonalMovement ].

	self moveOn: (-1@-1) from: aPosition.! !
!TerniLapilli methodsFor: 'movements' stamp: 'DS 11/1/2020 01:04:33'!
moveLeftFrom: aPosition

	self moveOn: (-1@0) from: aPosition.! !
!TerniLapilli methodsFor: 'movements' stamp: 'DS 11/1/2020 16:57:12'!
moveLeftUpFrom: aPosition

	({0@-1. 1@0} includes: aPosition) ifTrue: [ self signalIlegalDiagonalMovement ].

	self moveOn: (-1@1) from: aPosition.! !
!TerniLapilli methodsFor: 'movements' stamp: 'DS 11/1/2020 16:10:06'!
moveOn: aDirection from: aPosition

	 moveOnRules moveOn: aDirection from: aPosition.! !
!TerniLapilli methodsFor: 'movements' stamp: 'DS 11/1/2020 16:58:26'!
moveRightDownFrom: aPosition

	({0@1. -1@0} includes: aPosition) ifTrue: [ self signalIlegalDiagonalMovement ].

	self moveOn: (1@-1) from: aPosition.! !
!TerniLapilli methodsFor: 'movements' stamp: 'DS 11/1/2020 01:05:51'!
moveRightFrom: aPosition

	self moveOn: (1@0) from: aPosition.! !
!TerniLapilli methodsFor: 'movements' stamp: 'DS 11/1/2020 16:58:36'!
moveRightUpFrom: aPosition

	({-1@0. 0@-1} includes: aPosition) ifTrue: [ self signalIlegalDiagonalMovement ].

	self moveOn: (1@1) from: aPosition.! !
!TerniLapilli methodsFor: 'movements' stamp: 'DS 11/1/2020 01:06:47'!
moveUpFrom: aPosition

	self moveOn: (0@1) from: aPosition.! !
!TerniLapilli methodsFor: 'exceptions' stamp: 'DS 11/1/2020 12:27:11'!
signalGameOver

	^ self error: self class gameOverErrorDescription! !
!TerniLapilli methodsFor: 'exceptions' stamp: 'DS 11/1/2020 16:57:12'!
signalIlegalDiagonalMovement

	^ self error: self class ilegalDiagonalMovementErrorDescription! !
!TerniLapilli methodsFor: 'exceptions' stamp: 'DS 11/1/2020 12:27:22'!
signalIlegalMovement

	^ self error: self class ilegalMovementErrorDescription! !
!TerniLapilli methodsFor: 'exceptions' stamp: 'DS 11/1/2020 12:25:05'!
signalNoRemainedTokens

	^ self error: self class noRemainedTokensErrorDescription! !
!TerniLapilli methodsFor: 'exceptions' stamp: 'DS 11/1/2020 12:25:37'!
signalPositionOutOfBoard

	^ self error: self class positionOutOfBoardErrorDescription! !
!TerniLapilli methodsFor: 'exceptions' stamp: 'DS 11/1/2020 15:39:09'!
signalRemainedTokens

	^ self error: self class remainedTokensErrorDescription! !

!classDefinition: 'TerniLapilli class' category: #TerniLapippiSolution stamp: 'Federico 11/2/2020 19:13:33'!
TerniLapilli class
	instanceVariableNames: ''!

!classDefinition: 'TerniLapilli class' category: #TerniLapippiSolution stamp: 'Federico 11/2/2020 19:13:33'!
TerniLapilli class
	instanceVariableNames: ''!
!TerniLapilli class methodsFor: 'error descriptions' stamp: 'DS 10/29/2020 18:26:56'!
attemptToPlayTwiceInARowErrorDescription

	^'Can not play twice in a row'.! !
!TerniLapilli class methodsFor: 'error descriptions' stamp: 'DS 10/29/2020 21:11:33'!
gameOverErrorDescription

	^'Game Over'.! !
!TerniLapilli class methodsFor: 'error descriptions' stamp: 'DS 11/1/2020 01:19:03'!
ilegalDiagonalMovementErrorDescription

	^'Can not move on this diagonal'.! !
!TerniLapilli class methodsFor: 'error descriptions' stamp: 'DS 11/1/2020 01:19:34'!
ilegalMovementErrorDescription

	^'Can not do this movement'.! !
!TerniLapilli class methodsFor: 'error descriptions' stamp: 'DS 10/29/2020 18:54:32'!
noRemainedTokensErrorDescription

	^'No Remained Tokens'.! !
!TerniLapilli class methodsFor: 'error descriptions' stamp: 'DS 10/31/2020 18:13:13'!
positionOutOfBoardErrorDescription

	^'Position out of board'.! !
!TerniLapilli class methodsFor: 'error descriptions' stamp: 'DS 11/1/2020 02:04:54'!
remainedTokensErrorDescription

	^'Can not move when has Remained Tokens'.! !
!TerniLapilli class methodsFor: 'rules' stamp: 'DS 11/1/2020 16:59:38'!
buildRules: aKindOfRule for: aTerniLapilliGame

	^RemainedTokensRuleDecorator for: aTerniLapilliGame decorating: (
		GameOverRuleDecorator for: aTerniLapilliGame decorating: (
			PlayingInBoardRuleDecorator for: aTerniLapilliGame decorating: (
				OccupiedPositionRuleDecorator for: aTerniLapilliGame decorating: (			aKindOfRule for: aTerniLapilliGame 	)
			)
		)
	).! !
!TerniLapilli class methodsFor: 'rules' stamp: 'DS 11/1/2020 17:00:07'!
moveOnRulesFor: aTerniLapilliGame

	^self buildRules: MoveOnRule for: aTerniLapilliGame.! !
!TerniLapilli class methodsFor: 'rules' stamp: 'DS 11/1/2020 16:59:57'!
putTokenRulesFor: aTerniLapilliGame

	^self buildRules: PutTokensRule for: aTerniLapilliGame.! !

!classDefinition: #TerniLapilliRules category: #TerniLapippiSolution stamp: 'Federico 11/2/2020 19:13:33'!
Object subclass: #TerniLapilliRules
	instanceVariableNames: 'game'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapippiSolution'!

!classDefinition: #TerniLapilliRules category: #TerniLapippiSolution stamp: 'Federico 11/2/2020 19:13:33'!
Object subclass: #TerniLapilliRules
	instanceVariableNames: 'game'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapippiSolution'!
!TerniLapilliRules methodsFor: 'initialization' stamp: 'DS 11/1/2020 12:21:43' prior: 50930001!
initializateFor: aGame

	game := aGame.! !

!classDefinition: 'TerniLapilliRules class' category: #TerniLapippiSolution stamp: 'Federico 11/2/2020 19:13:33'!
TerniLapilliRules class
	instanceVariableNames: ''!

!classDefinition: 'TerniLapilliRules class' category: #TerniLapippiSolution stamp: 'Federico 11/2/2020 19:13:34'!
TerniLapilliRules class
	instanceVariableNames: ''!
!TerniLapilliRules class methodsFor: 'class initialization' stamp: 'DS 11/1/2020 12:21:59' prior: 50930016!
for: aGame

	^self new initializateFor: aGame.! !

!classDefinition: #MoveOnRule category: #TerniLapippiSolution stamp: 'Federico 11/2/2020 19:13:34'!
TerniLapilliRules subclass: #MoveOnRule
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapippiSolution'!

!classDefinition: #MoveOnRule category: #TerniLapippiSolution stamp: 'Federico 11/2/2020 19:13:34'!
TerniLapilliRules subclass: #MoveOnRule
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapippiSolution'!
!MoveOnRule methodsFor: 'game plays' stamp: 'DS 11/1/2020 16:07:48' prior: 50930036!
moveOn: aDirection from: aPosition

	game addMoveOn: aDirection from: aPosition.! !

!classDefinition: #PutTokensRule category: #TerniLapippiSolution stamp: 'Federico 11/2/2020 19:13:34'!
TerniLapilliRules subclass: #PutTokensRule
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapippiSolution'!

!classDefinition: #PutTokensRule category: #TerniLapippiSolution stamp: 'Federico 11/2/2020 19:13:34'!
TerniLapilliRules subclass: #PutTokensRule
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapippiSolution'!
!PutTokensRule methodsFor: 'game plays' stamp: 'DS 11/1/2020 12:23:12' prior: 50930057!
putAt: aPosition

	game add: aPosition.! !

!classDefinition: #TerniLapilliRulesDecorator category: #TerniLapippiSolution stamp: 'Federico 11/2/2020 19:13:34'!
TerniLapilliRules subclass: #TerniLapilliRulesDecorator
	instanceVariableNames: 'decoratee'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapippiSolution'!

!classDefinition: #TerniLapilliRulesDecorator category: #TerniLapippiSolution stamp: 'Federico 11/2/2020 19:13:34'!
TerniLapilliRules subclass: #TerniLapilliRulesDecorator
	instanceVariableNames: 'decoratee'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapippiSolution'!
!TerniLapilliRulesDecorator methodsFor: 'initialization' stamp: 'DS 11/1/2020 12:31:42' prior: 50930080!
initializateFor: aGame decorating: aTerniLapilliRule

	game := aGame.
	decoratee := aTerniLapilliRule.! !
!TerniLapilliRulesDecorator methodsFor: 'game plays' stamp: 'DS 11/1/2020 16:16:53' prior: 50930086!
moveOn: aDirection from: aPosition

	self subclassResponsibility.! !
!TerniLapilliRulesDecorator methodsFor: 'game plays' stamp: 'DS 11/1/2020 12:29:07' prior: 50930091!
putAt: aPosition

	self subclassResponsibility.! !

!classDefinition: 'TerniLapilliRulesDecorator class' category: #TerniLapippiSolution stamp: 'Federico 11/2/2020 19:13:34'!
TerniLapilliRulesDecorator class
	instanceVariableNames: ''!

!classDefinition: 'TerniLapilliRulesDecorator class' category: #TerniLapippiSolution stamp: 'Federico 11/2/2020 19:13:34'!
TerniLapilliRulesDecorator class
	instanceVariableNames: ''!
!TerniLapilliRulesDecorator class methodsFor: 'instance creation' stamp: 'DS 11/1/2020 12:30:18' prior: 50930108!
for: aGame decorating: aTerniLapilliRule

	^self new initializateFor: aGame decorating: aTerniLapilliRule.! !

!classDefinition: #GameOverRuleDecorator category: #TerniLapippiSolution stamp: 'Federico 11/2/2020 19:13:34'!
TerniLapilliRulesDecorator subclass: #GameOverRuleDecorator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapippiSolution'!

!classDefinition: #GameOverRuleDecorator category: #TerniLapippiSolution stamp: 'Federico 11/2/2020 19:13:34'!
TerniLapilliRulesDecorator subclass: #GameOverRuleDecorator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapippiSolution'!
!GameOverRuleDecorator methodsFor: 'game plays' stamp: 'DS 11/1/2020 15:45:30' prior: 50930133 overrides: 50931131!
moveOn: aDirection from: aPosition

	(game isOver) ifTrue: [ game signalGameOver ].

	decoratee moveOn: aDirection from: aPosition.! !
!GameOverRuleDecorator methodsFor: 'game plays' stamp: 'DS 11/1/2020 12:47:50' prior: 50930141 overrides: 50931137!
putAt: aPosition

	(game isOver) ifTrue: [ game signalGameOver ].

	decoratee putAt: aPosition.! !

!classDefinition: #OccupiedPositionRuleDecorator category: #TerniLapippiSolution stamp: 'Federico 11/2/2020 19:13:34'!
TerniLapilliRulesDecorator subclass: #OccupiedPositionRuleDecorator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapippiSolution'!

!classDefinition: #OccupiedPositionRuleDecorator category: #TerniLapippiSolution stamp: 'Federico 11/2/2020 19:13:34'!
TerniLapilliRulesDecorator subclass: #OccupiedPositionRuleDecorator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapippiSolution'!
!OccupiedPositionRuleDecorator methodsFor: 'game plays' stamp: 'DS 11/1/2020 16:28:04' prior: 50930166 overrides: 50931131!
moveOn: aDirection from: aPosition

	(game hasOccupiedPosition: aPosition + aDirection) 				ifTrue: [ game signalIlegalMovement ].
	(game boardIncludesCurrentPlayerWith: aPosition ) ifFalse: [ game signalIlegalMovement ].	

	decoratee moveOn: aDirection from: aPosition.! !
!OccupiedPositionRuleDecorator methodsFor: 'game plays' stamp: 'DS 11/1/2020 16:28:16' prior: 50930178 overrides: 50931137!
putAt: aPosition

	(game hasOccupiedPosition: aPosition) 		ifTrue: [ game signalIlegalMovement ].

	decoratee putAt: aPosition.! !

!classDefinition: #PlayingInBoardRuleDecorator category: #TerniLapippiSolution stamp: 'Federico 11/2/2020 19:13:35'!
TerniLapilliRulesDecorator subclass: #PlayingInBoardRuleDecorator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapippiSolution'!

!classDefinition: #PlayingInBoardRuleDecorator category: #TerniLapippiSolution stamp: 'Federico 11/2/2020 19:13:35'!
TerniLapilliRulesDecorator subclass: #PlayingInBoardRuleDecorator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapippiSolution'!
!PlayingInBoardRuleDecorator methodsFor: 'game plays' stamp: 'DS 11/1/2020 15:48:04' prior: 50930204 overrides: 50931131!
moveOn: aDirection from: aPosition

	(aPosition between: (-1@-1) and: (1@1)) ifFalse: [ game signalPositionOutOfBoard ].

	decoratee moveOn: aDirection from: aPosition.! !
!PlayingInBoardRuleDecorator methodsFor: 'game plays' stamp: 'DS 11/1/2020 12:46:35' prior: 50930213 overrides: 50931137!
putAt: aPosition

	(aPosition between: (-1@-1) and: (1@1)) ifFalse: [ game signalPositionOutOfBoard ].

	decoratee putAt: aPosition.! !

!classDefinition: #RemainedTokensRuleDecorator category: #TerniLapippiSolution stamp: 'Federico 11/2/2020 19:13:35'!
TerniLapilliRulesDecorator subclass: #RemainedTokensRuleDecorator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapippiSolution'!

!classDefinition: #RemainedTokensRuleDecorator category: #TerniLapippiSolution stamp: 'Federico 11/2/2020 19:13:35'!
TerniLapilliRulesDecorator subclass: #RemainedTokensRuleDecorator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapippiSolution'!
!RemainedTokensRuleDecorator methodsFor: 'game plays' stamp: 'DS 11/1/2020 16:23:18' prior: 50930239 overrides: 50931131!
moveOn: aDirection from: aPosition

	( game currentPlayerHasTokensRemaind ) 	ifFalse: [ game signalRemainedTokens ].

	^decoratee moveOn: aDirection from: aPosition.! !
!RemainedTokensRuleDecorator methodsFor: 'game plays' stamp: 'DS 11/1/2020 16:23:12' prior: 50930248 overrides: 50931137!
putAt: aPosition

	( game currentPlayerHasTokensRemaind ) 	ifTrue: [ game signalNoRemainedTokens ].

	^decoratee putAt: aPosition.! !

----End fileIn of D:\facultad\Ing1 Ejercicios\2020-2c-master\18-Portfolio1\Portfolio-Ejercicio.st----!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Federico 11/2/2020 19:16:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Federico 11/2/2020 19:16:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Federico 11/2/2020 19:16:06'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Federico 11/2/2020 19:16:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Federico 11/2/2020 19:16:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Federico 11/2/2020 19:16:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Federico 11/2/2020 19:16:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Federico 11/2/2020 19:16:07'!
FAILURE!

account balance.!
!ReceptiveAccount methodsFor: 'balance' stamp: 'Federico 11/2/2020 19:19:39' prior: 50931521!
balance

	^transactions sum: [ :aTransaction | (aTransaction isKindOf: Deposit) ifTrue: [aTransaction value] ifFalse: [0 - aTransaction value]] ifEmpty: [ 0 ]! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Federico 11/2/2020 19:19:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Federico 11/2/2020 19:19:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Federico 11/2/2020 19:19:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Federico 11/2/2020 19:19:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Federico 11/2/2020 19:19:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Federico 11/2/2020 19:19:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Federico 11/2/2020 19:19:44'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'Federico 11/2/2020 19:20:06' prior: 50931567!
balance

	^transactions sum: [ :aTransaction | (aTransaction isKindOf: Deposit) 
		ifTrue: [aTransaction value] 
		ifFalse: [0 - aTransaction value]]
		ifEmpty: [ 0 ]! !
!Withdraw methodsFor: 'value' stamp: 'Federico 11/2/2020 19:20:48' prior: 50931477 overrides: 50931405!
value

	^ value! !

TestCase subclass: #PortafolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortafolioTest category: #'Portfolio-Ejercicio' stamp: 'Federico 11/2/2020 19:33:03'!
TestCase subclass: #PortafolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Object subclass: #Portafolio
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portafolio category: #'Portfolio-Ejercicio' stamp: 'Federico 11/2/2020 19:33:45'!
Object subclass: #Portafolio
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortafolioTest methodsFor: 'no messages' stamp: 'Federico 11/2/2020 19:35:45'!
test01
	| aPortafolio |
	aPortafolio := Portafolio new.
	
	self assert: 0 equals: aPortafolio balance.! !

!testRun: #PortafolioTest #test01 stamp: 'Federico 11/2/2020 19:36:04'!
ERROR!
!Portafolio methodsFor: 'as yet unclassified' stamp: 'Federico 11/2/2020 19:36:17'!
balance
	self shouldBeImplemented.! !
!Portafolio methodsFor: 'as yet unclassified' stamp: 'Federico 11/2/2020 19:36:36' prior: 50931649!
balance
	^0.! !

!testRun: #PortafolioTest #test01 stamp: 'Federico 11/2/2020 19:36:42'!
PASSED!

!testRun: #PortafolioTest #test01 stamp: 'Federico 11/2/2020 19:36:42'!
PASSED!
!PortafolioTest methodsFor: 'as yet unclassified' stamp: 'Federico 11/2/2020 19:37:54'!
test02
	| aPortafolio anAccount |
	aPortafolio := Portafolio new.
	
	anAccount := ReceptiveAccount new.
	
	
	self assert: 0 equals: aPortafolio balance.! !
!PortafolioTest methodsFor: 'as yet unclassified' stamp: 'Federico 11/2/2020 19:39:07' prior: 50931663!
test02
	| aPortafolio anAccount |
	
	aPortafolio := Portafolio new.
	anAccount := ReceptiveAccount new.
	
	aPortafolio add: anAccount.
	
	self assert: 0 equals: aPortafolio balance.! !

!testRun: #PortafolioTest #test02 stamp: 'Federico 11/2/2020 19:39:08'!
ERROR!
!Portafolio methodsFor: 'as yet unclassified' stamp: 'Federico 11/2/2020 19:39:18'!
add: aReceptiveAccount 
	self shouldBeImplemented.! !
!PortafolioTest methodsFor: 'as yet unclassified' stamp: 'Federico 11/2/2020 19:41:29' prior: 50931672!
test02
	| aPortafolio anAccount |
	
	aPortafolio := Portafolio new.
	anAccount := ReceptiveAccount new.
	
	aPortafolio addAccount: anAccount.
	
	self assert: 0 equals: aPortafolio balance.! !

!testRun: #PortafolioTest #test02 stamp: 'Federico 11/2/2020 19:41:30'!
ERROR!
!Portafolio methodsFor: 'as yet unclassified' stamp: 'Federico 11/2/2020 19:41:40'!
addAccount: aReceptiveAccount 
	self shouldBeImplemented.! !
!Portafolio methodsFor: 'as yet unclassified' stamp: 'Federico 11/2/2020 19:41:52' prior: 50931700!
addAccount: anAccount 
	! !

!testRun: #PortafolioTest #test02 stamp: 'Federico 11/2/2020 19:41:55'!
PASSED!

!testRun: #PortafolioTest #test01 stamp: 'Federico 11/2/2020 19:41:55'!
PASSED!

!testRun: #PortafolioTest #test02 stamp: 'Federico 11/2/2020 19:41:55'!
PASSED!
!PortafolioTest methodsFor: 'as yet unclassified' stamp: 'Federico 11/2/2020 19:42:39'!
test03
	| aPortafolio anAccount |
	
	aPortafolio := Portafolio new.
	anAccount := ReceptiveAccount new.
	
	Deposit register: 100 on: anAccount.
	
	aPortafolio addAccount: anAccount.
	
	self assert: 0 equals: aPortafolio balance.! !
!PortafolioTest methodsFor: 'as yet unclassified' stamp: 'Federico 11/2/2020 19:42:55' prior: 50931718!
test03
	| aPortafolio anAccount |
	
	aPortafolio := Portafolio new.
	anAccount := ReceptiveAccount new.
	
	Deposit register: 100 on: anAccount.
	
	aPortafolio addAccount: anAccount.
	
	self assert: 0 equals: aPortafolio balance.! !
!PortafolioTest methodsFor: 'as yet unclassified' stamp: 'Federico 11/2/2020 19:43:00' prior: 50931729!
test03
	| aPortafolio anAccount |
	
	aPortafolio := Portafolio new.
	anAccount := ReceptiveAccount new.
	
	Deposit register: 100 on: anAccount.
	
	aPortafolio addAccount: anAccount.
	
	self assert: 100 equals: aPortafolio balance.! !
!PortafolioTest methodsFor: 'as yet unclassified' stamp: 'Federico 11/2/2020 19:43:26' prior: 50931740!
test03
	| aPortafolio anAccount |
	
	aPortafolio := Portafolio new.
	anAccount := ReceptiveAccount new.
	
	aPortafolio addAccount: anAccount.
	Deposit register: 100 on: anAccount.
		
	self assert: 100 equals: aPortafolio balance.! !

!testRun: #PortafolioTest #test03 stamp: 'Federico 11/2/2020 19:43:29'!
FAILURE!

!classDefinition: #Portafolio category: #'Portfolio-Ejercicio' stamp: 'Federico 11/2/2020 19:44:16'!
Object subclass: #Portafolio
	instanceVariableNames: 'transactions accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portafolio methodsFor: 'as yet unclassified' stamp: 'Federico 11/2/2020 19:44:11' prior: 50931706!
addAccount: anAccount 
	accounts add anAccount.
	! !
!Portafolio methodsFor: 'as yet unclassified' stamp: 'Federico 11/2/2020 19:44:23' prior: 50931773!
addAccount: anAccount 
	accounts add anAccount.
	! !

!testRun: #PortafolioTest #test03 stamp: 'Federico 11/2/2020 19:44:27'!
ERROR!

!testRun: #PortafolioTest #test03 stamp: 'Federico 11/2/2020 19:44:49'!
ERROR!

!methodRemoval: Portafolio #add: stamp: 'Federico 11/2/2020 19:45:14'!
add: aReceptiveAccount 
	self shouldBeImplemented.!

Object subclass: #Portafolio
	instanceVariableNames: 'accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portafolio category: #'Portfolio-Ejercicio' stamp: 'Federico 11/2/2020 19:45:52'!
Object subclass: #Portafolio
	instanceVariableNames: 'accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portafolio methodsFor: 'as yet unclassified' stamp: 'Federico 11/2/2020 19:46:42' overrides: 16896425!
initialize
	accounts := OrderedCollection new.! !

!testRun: #PortafolioTest #test03 stamp: 'Federico 11/2/2020 19:46:52'!
ERROR!

!testRun: #PortafolioTest #test03 stamp: 'Federico 11/2/2020 19:47:02'!
ERROR!

!testRun: #PortafolioTest #test03 stamp: 'Federico 11/2/2020 19:47:08'!
ERROR!
!Portafolio methodsFor: 'as yet unclassified' stamp: 'Federico 11/2/2020 19:47:19' prior: 50931778!
addAccount: anAccount 
	accounts add: anAccount.
	! !

!testRun: #PortafolioTest #test03 stamp: 'Federico 11/2/2020 19:47:22'!
FAILURE!

!testRun: #PortafolioTest #test03 stamp: 'Federico 11/2/2020 19:48:15'!
FAILURE!

!testRun: #PortafolioTest #test03 stamp: 'Federico 11/2/2020 19:48:27'!
FAILURE!
!Portafolio methodsFor: 'as yet unclassified' stamp: 'Federico 11/2/2020 19:49:25' prior: 50931654!
balance
	^accounts first balance.! !

!testRun: #PortafolioTest #test03 stamp: 'Federico 11/2/2020 19:49:28'!
PASSED!

!testRun: #PortafolioTest #test01 stamp: 'Federico 11/2/2020 19:49:28'!
ERROR!

!testRun: #PortafolioTest #test02 stamp: 'Federico 11/2/2020 19:49:28'!
PASSED!

!testRun: #PortafolioTest #test03 stamp: 'Federico 11/2/2020 19:49:29'!
PASSED!

!testRun: #PortafolioTest #test01 stamp: 'Federico 11/2/2020 19:49:29'!
ERROR!
!Portafolio methodsFor: 'as yet unclassified' stamp: 'Federico 11/2/2020 19:50:54' prior: 50931830!
balance
	^accounts sum: [ :anAccount | anAccount balance ] ifEmpty: [ 0 ]! !

!testRun: #PortafolioTest #test03 stamp: 'Federico 11/2/2020 19:51:06'!
PASSED!

!testRun: #PortafolioTest #test01 stamp: 'Federico 11/2/2020 19:51:06'!
PASSED!

!testRun: #PortafolioTest #test02 stamp: 'Federico 11/2/2020 19:51:06'!
PASSED!

!testRun: #PortafolioTest #test03 stamp: 'Federico 11/2/2020 19:51:06'!
PASSED!
!PortafolioTest methodsFor: 'as yet unclassified' stamp: 'Federico 11/2/2020 19:55:37'!
test04
	| aPortafolio anAccount aDepositTransaction aWithdrawTransaction |
	
	aPortafolio := Portafolio new.
	anAccount := ReceptiveAccount new.
	
	aPortafolio addAccount: anAccount.
	aDepositTransaction := Deposit register: 100 on: anAccount.
	aWithdrawTransaction := Withdraw register: 100 on: anAccount.
	
		
	self assert: (aPortafolio hasRegistered: aDepositTransaction) a.! !
!PortafolioTest methodsFor: 'as yet unclassified' stamp: 'Federico 11/2/2020 19:55:56' prior: 50931863!
test04
	| aPortafolio anAccount aDepositTransaction aWithdrawTransaction |
	
	aPortafolio := Portafolio new.
	anAccount := ReceptiveAccount new.
	
	aPortafolio addAccount: anAccount.
	aDepositTransaction := Deposit register: 100 on: anAccount.
	aWithdrawTransaction := Withdraw register: 100 on: anAccount.
	
	self assert: (aPortafolio hasRegistered: aDepositTransaction).
	self assert: (aPortafolio hasRegistered: aWithdrawTransaction).! !

!testRun: #PortafolioTest #test04 stamp: 'Federico 11/2/2020 19:56:17'!
ERROR!

!testRun: #PortafolioTest #test04 stamp: 'Federico 11/2/2020 19:56:22'!
ERROR!

!testRun: #PortafolioTest #test04 stamp: 'Federico 11/2/2020 19:56:27'!
ERROR!
!Portafolio methodsFor: 'as yet unclassified' stamp: 'Federico 11/2/2020 19:56:48'!
hasRegistered: aDeposit 
	self shouldBeImplemented.! !
!Portafolio methodsFor: 'as yet unclassified' stamp: 'Federico 11/2/2020 19:56:58' prior: 50931903!
hasRegistered: aDeposit 
	true.! !

!testRun: #PortafolioTest #test04 stamp: 'Federico 11/2/2020 19:57:01'!
ERROR!

!testRun: #PortafolioTest #test04 stamp: 'Federico 11/2/2020 19:57:10'!
ERROR!
!Portafolio methodsFor: 'as yet unclassified' stamp: 'Federico 11/2/2020 19:57:21' prior: 50931908!
hasRegistered: aDeposit 
	^true.! !

!testRun: #PortafolioTest #test04 stamp: 'Federico 11/2/2020 19:57:26'!
PASSED!

!testRun: #PortafolioTest #test01 stamp: 'Federico 11/2/2020 19:57:26'!
PASSED!

!testRun: #PortafolioTest #test02 stamp: 'Federico 11/2/2020 19:57:26'!
PASSED!

!testRun: #PortafolioTest #test03 stamp: 'Federico 11/2/2020 19:57:26'!
PASSED!

!testRun: #PortafolioTest #test04 stamp: 'Federico 11/2/2020 19:57:27'!
PASSED!

----SNAPSHOT----(2 November 2020 19:57:39) CuisUniversity-4365.image priorSource: 19056203!
!PortafolioTest methodsFor: 'as yet unclassified' stamp: 'Federico 11/2/2020 19:59:13'!
test05
	| aPortafolio anAccount aTransaction |
	
	aPortafolio := Portafolio new.
	anAccount := ReceptiveAccount new.
	
	aTransaction := Deposit register: 100 on: anAccount.
	
	self deny: (aPortafolio hasRegistered: aTransaction).! !

!testRun: #PortafolioTest #test05 stamp: 'Federico 11/2/2020 19:59:19'!
FAILURE!
!Portafolio methodsFor: 'as yet unclassified' stamp: 'Federico 11/2/2020 20:00:43' prior: 50931918!
hasRegistered: aDeposit 
	^accounts collect: [ :anAccount | anAccount hasRegistered: aDeposit ].! !

!testRun: #PortafolioTest #test05 stamp: 'Federico 11/2/2020 20:00:47'!
ERROR!

!testRun: #PortafolioTest #test05 stamp: 'Federico 11/2/2020 20:00:58'!
ERROR!

!testRun: #PortafolioTest #test05 stamp: 'Federico 11/2/2020 20:01:03'!
ERROR!

accounts collect: [ :anAccount | anAccount hasRegistered: aDeposit ].!
!Portafolio methodsFor: 'as yet unclassified' stamp: 'Federico 11/2/2020 20:02:13' prior: 50931951!
hasRegistered: aDeposit 
	^accounts collect: [ :anAccount | anAccount hasRegistered: aDeposit ] isEmpty.! !

!testRun: #PortafolioTest #test05 stamp: 'Federico 11/2/2020 20:03:46'!
ERROR!
!Portafolio methodsFor: 'as yet unclassified' stamp: 'Federico 11/2/2020 20:04:07' prior: 50931967!
hasRegistered: aDeposit 
	^(accounts collect: [ :anAccount | anAccount hasRegistered: aDeposit ] isEmpty) not.! !

!testRun: #PortafolioTest #test05 stamp: 'Federico 11/2/2020 20:04:12'!
ERROR!

!testRun: #PortafolioTest #test05 stamp: 'Federico 11/2/2020 20:04:17'!
ERROR!

!testRun: #PortafolioTest #test05 stamp: 'Federico 11/2/2020 20:04:22'!
ERROR!

accounts collect: [ :anAccount | anAccount hasRegistered: aDeposit ] isEmpty!

accounts collect: [ :anAccount | anAccount hasRegistered: aDeposit ]!
!Portafolio methodsFor: 'as yet unclassified' stamp: 'Federico 11/2/2020 20:05:05' prior: 50931976!
hasRegistered: aDeposit 
	^((accounts collect: [ :anAccount | anAccount hasRegistered: aDeposit ]) isEmpty) not.! !

!testRun: #PortafolioTest #test05 stamp: 'Federico 11/2/2020 20:05:07'!
PASSED!

!testRun: #PortafolioTest #test01 stamp: 'Federico 11/2/2020 20:05:07'!
PASSED!

!testRun: #PortafolioTest #test02 stamp: 'Federico 11/2/2020 20:05:07'!
PASSED!

!testRun: #PortafolioTest #test03 stamp: 'Federico 11/2/2020 20:05:07'!
PASSED!

!testRun: #PortafolioTest #test04 stamp: 'Federico 11/2/2020 20:05:07'!
PASSED!

!testRun: #PortafolioTest #test05 stamp: 'Federico 11/2/2020 20:05:07'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'Federico 11/2/2020 20:40:46' prior: 50931603!
balance

    | balance |
    balance := 0.

    transactions do: [ :aTransaction | balance := aTransaction yyy: balance ].

    ^balance.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Federico 11/2/2020 20:40:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Federico 11/2/2020 20:40:50'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Federico 11/2/2020 20:40:50'!
ERROR!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Federico 11/2/2020 20:40:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Federico 11/2/2020 20:40:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Federico 11/2/2020 20:40:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Federico 11/2/2020 20:40:50'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'Federico 11/2/2020 20:46:39' prior: 50932017!
balance

    | balance |
    balance := 0.

    transactions do: [ :aTransaction | balance := aTransaction countFor: balance ].

    ^balance.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Federico 11/2/2020 20:46:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Federico 11/2/2020 20:46:41'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Federico 11/2/2020 20:46:41'!
ERROR!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Federico 11/2/2020 20:46:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Federico 11/2/2020 20:46:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Federico 11/2/2020 20:46:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Federico 11/2/2020 20:46:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Federico 11/2/2020 20:46:41'!
ERROR!
!AccountTransaction methodsFor: 'as yet unclassified' stamp: 'Federico 11/2/2020 20:47:02'!
countFor: aSmallInteger 
	self shouldBeImplemented.! !
!AccountTransaction methodsFor: 'as yet unclassified' stamp: 'Federico 11/2/2020 20:47:30' prior: 50932091!
countFor: aSmallInteger 
	self subclassResponsibility.! !

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Federico 11/2/2020 20:47:35'!
ERROR!
!Deposit methodsFor: 'as yet unclassified' stamp: 'Federico 11/2/2020 20:47:47' overrides: 50932097!
countFor: aSmallInteger 
	self shouldBeImplemented.! !
!Deposit methodsFor: 'as yet unclassified' stamp: 'Federico 11/2/2020 20:48:17' prior: 50932106 overrides: 50932097!
countFor: aBalance
	^aBalance + value ! !

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Federico 11/2/2020 20:48:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Federico 11/2/2020 20:48:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Federico 11/2/2020 20:48:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Federico 11/2/2020 20:48:19'!
ERROR!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Federico 11/2/2020 20:48:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Federico 11/2/2020 20:48:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Federico 11/2/2020 20:48:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Federico 11/2/2020 20:48:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Federico 11/2/2020 20:48:19'!
ERROR!
!Withdraw methodsFor: 'as yet unclassified' stamp: 'Federico 11/2/2020 20:48:25' overrides: 50932097!
countFor: aSmallInteger 
	self shouldBeImplemented.! !
!Withdraw methodsFor: 'as yet unclassified' stamp: 'Federico 11/2/2020 20:48:37' prior: 50932153 overrides: 50932097!
countFor: aBalance
	^aBalance - value.! !

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Federico 11/2/2020 20:48:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Federico 11/2/2020 20:48:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Federico 11/2/2020 20:48:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Federico 11/2/2020 20:48:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Federico 11/2/2020 20:48:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Federico 11/2/2020 20:48:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Federico 11/2/2020 20:48:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Federico 11/2/2020 20:48:45'!
PASSED!
!AccountTransaction methodsFor: 'as yet unclassified' stamp: 'Federico 11/2/2020 20:48:56' prior: 50932097!
countFor: aBalance
	self subclassResponsibility.! !

!methodRemoval: PortafolioTest #test05 stamp: 'Federico 11/2/2020 20:49:29'!
test05
	| aPortafolio anAccount aTransaction |
	
	aPortafolio := Portafolio new.
	anAccount := ReceptiveAccount new.
	
	aTransaction := Deposit register: 100 on: anAccount.
	
	self deny: (aPortafolio hasRegistered: aTransaction).!

!methodRemoval: Portafolio #hasRegistered: stamp: 'Federico 11/2/2020 20:49:41'!
hasRegistered: aDeposit 
	^((accounts collect: [ :anAccount | anAccount hasRegistered: aDeposit ]) isEmpty) not.!

!methodRemoval: PortafolioTest #test02 stamp: 'Federico 11/2/2020 20:50:03'!
test02
	| aPortafolio anAccount |
	
	aPortafolio := Portafolio new.
	anAccount := ReceptiveAccount new.
	
	aPortafolio addAccount: anAccount.
	
	self assert: 0 equals: aPortafolio balance.!
!PortafolioTest methodsFor: 'as yet unclassified' stamp: 'Federico 11/2/2020 20:50:09'!
test02
	| aPortafolio anAccount |
	
	aPortafolio := Portafolio new.
	anAccount := ReceptiveAccount new.
	
	aPortafolio addAccount: anAccount.
	Deposit register: 100 on: anAccount.
		
	self assert: 100 equals: aPortafolio balance.! !

!methodRemoval: PortafolioTest #test03 stamp: 'Federico 11/2/2020 20:50:13'!
test03
	| aPortafolio anAccount |
	
	aPortafolio := Portafolio new.
	anAccount := ReceptiveAccount new.
	
	aPortafolio addAccount: anAccount.
	Deposit register: 100 on: anAccount.
		
	self assert: 100 equals: aPortafolio balance.!
!PortafolioTest methodsFor: 'as yet unclassified' stamp: 'Federico 11/2/2020 20:50:16'!
test03
	| aPortafolio anAccount aDepositTransaction aWithdrawTransaction |
	
	aPortafolio := Portafolio new.
	anAccount := ReceptiveAccount new.
	
	aPortafolio addAccount: anAccount.
	aDepositTransaction := Deposit register: 100 on: anAccount.
	aWithdrawTransaction := Withdraw register: 100 on: anAccount.
	
	self assert: (aPortafolio hasRegistered: aDepositTransaction).
	self assert: (aPortafolio hasRegistered: aWithdrawTransaction).! !

!methodRemoval: PortafolioTest #test04 stamp: 'Federico 11/2/2020 20:50:32'!
test04
	| aPortafolio anAccount aDepositTransaction aWithdrawTransaction |
	
	aPortafolio := Portafolio new.
	anAccount := ReceptiveAccount new.
	
	aPortafolio addAccount: anAccount.
	aDepositTransaction := Deposit register: 100 on: anAccount.
	aWithdrawTransaction := Withdraw register: 100 on: anAccount.
	
	self assert: (aPortafolio hasRegistered: aDepositTransaction).
	self assert: (aPortafolio hasRegistered: aWithdrawTransaction).!

!methodRemoval: PortafolioTest #test03 stamp: 'Federico 11/2/2020 20:51:03'!
test03
	| aPortafolio anAccount aDepositTransaction aWithdrawTransaction |
	
	aPortafolio := Portafolio new.
	anAccount := ReceptiveAccount new.
	
	aPortafolio addAccount: anAccount.
	aDepositTransaction := Deposit register: 100 on: anAccount.
	aWithdrawTransaction := Withdraw register: 100 on: anAccount.
	
	self assert: (aPortafolio hasRegistered: aDepositTransaction).
	self assert: (aPortafolio hasRegistered: aWithdrawTransaction).!
!PortafolioTest methodsFor: 'as yet unclassified' stamp: 'Federico 11/2/2020 20:53:32' prior: 50932225!
test02
	| aPortafolio anAccount |
	
	aPortafolio := Portafolio new.
	anAccount := ReceptiveAccount new.
	
	aPortafolio add: anAccount.
	Deposit register: 100 on: anAccount.
		
	self assert: 100 equals: aPortafolio balance.

! !

!testRun: #PortafolioTest #test02 stamp: 'Federico 11/2/2020 20:53:34'!
ERROR!

!methodRemoval: Portafolio #addAccount: stamp: 'Federico 11/2/2020 20:53:55'!
addAccount: anAccount 
	accounts add: anAccount.
	!

!methodRemoval: Portafolio #balance stamp: 'Federico 11/2/2020 20:54:03'!
balance
	^accounts sum: [ :anAccount | anAccount balance ] ifEmpty: [ 0 ]!
!Portafolio methodsFor: 'as yet unclassified' stamp: 'Federico 11/2/2020 20:56:08' prior: 50931804 overrides: 16896425!
initialize
	accounts := OrderedCollection new.! !

!classRenamed: #Portafolio as: #Portfolio stamp: 'Federico 11/2/2020 20:56:17'!
Smalltalk renameClassNamed: #Portafolio as: #Portfolio!
!PortafolioTest methodsFor: 'as yet unclassified' stamp: 'Federico 11/2/2020 20:56:18' prior: 50931640!
test01
	| aPortafolio |
	aPortafolio := Portfolio new.
	
	self assert: 0 equals: aPortafolio balance.! !
!PortafolioTest methodsFor: 'as yet unclassified' stamp: 'Federico 11/2/2020 20:56:18' prior: 50932295!
test02
	| aPortafolio anAccount |
	
	aPortafolio := Portfolio new.
	anAccount := ReceptiveAccount new.
	
	aPortafolio add: anAccount.
	Deposit register: 100 on: anAccount.
		
	self assert: 100 equals: aPortafolio balance.

! !

!classRenamed: #PortafolioTest as: #PortfolioTest stamp: 'Federico 11/2/2020 20:56:32'!
Smalltalk renameClassNamed: #PortafolioTest as: #PortfolioTest!

Object subclass: #Portfolio
	instanceVariableNames: 'xxx'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: #'Portfolio-Ejercicio' stamp: 'Federico 11/2/2020 20:59:11'!
Object subclass: #Portfolio
	instanceVariableNames: 'xxx'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Object subclass: #Portfolio
	instanceVariableNames: 'nodes'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: #'Portfolio-Ejercicio' stamp: 'Federico 11/2/2020 20:59:22'!
Object subclass: #Portfolio
	instanceVariableNames: 'nodes'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Federico 11/2/2020 20:59:25' prior: 50932318 overrides: 16896425!
initialize
	nodes := OrderedCollection new.! !

!testRun: #PortfolioTest #test02 stamp: 'Federico 11/2/2020 20:59:31'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Federico 11/2/2020 20:59:39'!
add: aReceptiveAccount 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Federico 11/2/2020 21:01:25' prior: 50932382!
add: aPortfolio
	nodes add: aPortfolio.! !

!testRun: #PortfolioTest #test02 stamp: 'Federico 11/2/2020 21:01:30'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Federico 11/2/2020 21:01:38'!
balance
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Federico 11/2/2020 21:02:00' prior: 50932394!
balance
	^100! !

!testRun: #PortfolioTest #test02 stamp: 'Federico 11/2/2020 21:02:02'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'Federico 11/2/2020 21:02:02'!
FAILURE!

!testRun: #PortfolioTest #test02 stamp: 'Federico 11/2/2020 21:02:02'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'Federico 11/2/2020 21:02:02'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Federico 11/2/2020 21:03:39' prior: 50932399!
balance
	^nodes sum: [ :aNode | aNode balance.].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Federico 11/2/2020 21:03:57' prior: 50932413!
balance
	^nodes sum: [ :aNode | aNode balance.] ifEmpty: [0].! !

!testRun: #PortfolioTest #test02 stamp: 'Federico 11/2/2020 21:04:10'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'Federico 11/2/2020 21:04:10'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'Federico 11/2/2020 21:04:10'!
PASSED!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Federico 11/2/2020 21:06:44' prior: 50932418!
balance
	
	^(nodes size = 0) ifTrue: [0] ifFalse: [nodes first balance.].
	
	! !

!testRun: #PortfolioTest #test02 stamp: 'Federico 11/2/2020 21:06:50'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'Federico 11/2/2020 21:06:50'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'Federico 11/2/2020 21:06:50'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Federico 11/2/2020 21:09:27'!
test03
	| aMainPortafolio anotherPortafolio aPortafolioAccount aMainAccount |
	
	aMainPortafolio := Portfolio new.
	anotherPortafolio := Portfolio new.
	
	aMainAccount := ReceptiveAccount new.
	aPortafolioAccount  := ReceptiveAccount new.
	
	anotherPortafolio add: aPortafolioAccount.
	aMainPortafolio add: aMainAccount.
	aMainPortafolio add: anotherPortafolio.

	Deposit register: 100 on: aMainAccount.
	Deposit register: 100 on: aPortafolioAccount.
		
	self assert: 200 equals: aMainPortafolio balance.

! !

!testRun: #PortfolioTest #test03 stamp: 'Federico 11/2/2020 21:09:36'!
FAILURE!

!testRun: #PortfolioTest #test03 stamp: 'Federico 11/2/2020 21:09:54'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Federico 11/2/2020 21:10:16' prior: 50932431!
balance
	
	^nodes sum: [ :aNode | aNode balance.] ifEmpty: [0].
	
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Federico 11/2/2020 21:10:18' prior: 50932469!
balance
	^nodes sum: [ :aNode | aNode balance.] ifEmpty: [0].
	
	! !

!testRun: #PortfolioTest #test03 stamp: 'Federico 11/2/2020 21:10:20'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'Federico 11/2/2020 21:10:20'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'Federico 11/2/2020 21:10:20'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'Federico 11/2/2020 21:10:20'!
PASSED!

----QUIT----(3 November 2020 22:31:54) CuisUniversity-4365.image priorSource: 19209080!

----STARTUP---- (5 November 2020 17:13:47) as D:\facultad\Smalltalk\windows64\CuisUniversity-4365.image!


!testRun: #PortfolioTest #test03 stamp: 'Federico 11/5/2020 17:14:14'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'Federico 11/5/2020 17:14:14'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'Federico 11/5/2020 17:14:14'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'Federico 11/5/2020 17:14:14'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Federico 11/5/2020 17:48:38'!
test04
	| aPortafolio anAccount aTransaction |
	
	aPortafolio := Portfolio new.
	
	aPortafolio add: anAccount.
	aTransaction := Deposit register: 100 on: anAccount.
		
	self deny: (aPortafolio hasRegistered: aTransaction).

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Federico 11/5/2020 17:49:00' prior: 50932506!
test04
	| aPortafolio anAccount aTransaction |
	
	aPortafolio := Portfolio new.
	anAccount := ReceptiveAccount new.
	
	aTransaction := Deposit register: 100 on: anAccount.
		
	self deny: (aPortafolio hasRegistered: aTransaction).

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Federico 11/5/2020 17:49:36' prior: 50932517!
test04
	| aPortafolio aTransaction |
	
	aPortafolio := Portfolio new.
	
	aTransaction :=  Deposit for: 100.
		
	self deny: (aPortafolio hasRegistered: aTransaction).

! !

!testRun: #PortfolioTest #test04 stamp: 'Federico 11/5/2020 17:49:38'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Federico 11/5/2020 17:49:50'!
hasRegistered: aDeposit 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Federico 11/5/2020 17:50:21' prior: 50932539!
hasRegistered: aTransaction
	^false.! !

!testRun: #PortfolioTest #test04 stamp: 'Federico 11/5/2020 17:50:23'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'Federico 11/5/2020 17:50:23'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'Federico 11/5/2020 17:50:23'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'Federico 11/5/2020 17:50:23'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'Federico 11/5/2020 17:50:23'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Federico 11/5/2020 17:51:20'!
test05
	| aPortafolio anAccount aTransaction |
	
	aPortafolio := Portfolio new.
	anAccount := ReceptiveAccount new.
	
	aPortafolio add: anAccount.
	Deposit register: 100 on: anAccount.
	aTransaction :=  Deposit for: 100.
		
	self deny: (aPortafolio hasRegistered: aTransaction).

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Federico 11/5/2020 17:52:25' prior: 50932561!
test05
	| aPortafolio anAccount aTransaction |
	
	aPortafolio := Portfolio new.
	anAccount := ReceptiveAccount new.
	
	aTransaction := Deposit register: 100 on: anAccount.
	aPortafolio add: anAccount.
		
	self assert: (aPortafolio hasRegistered: aTransaction).

! !

!testRun: #PortfolioTest #test05 stamp: 'Federico 11/5/2020 17:52:26'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Federico 11/5/2020 17:53:13' prior: 50932544!
hasRegistered: aTransaction
	^nodes includes: aTransaction .! !

!testRun: #PortfolioTest #test05 stamp: 'Federico 11/5/2020 17:53:16'!
FAILURE!

nodes!

!testRun: #PortfolioTest #test05 stamp: 'Federico 11/5/2020 17:54:36'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Federico 11/5/2020 17:54:53' prior: 50932588!
hasRegistered: aTransaction
	^nodes first hasRegistered: aTransaction .! !

!testRun: #PortfolioTest #test05 stamp: 'Federico 11/5/2020 17:54:55'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'Federico 11/5/2020 17:54:55'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'Federico 11/5/2020 17:54:55'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'Federico 11/5/2020 17:54:55'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'Federico 11/5/2020 17:54:55'!
ERROR!

!testRun: #PortfolioTest #test05 stamp: 'Federico 11/5/2020 17:54:55'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'Federico 11/5/2020 17:54:55'!
ERROR!

!testRun: #PortfolioTest #test04 stamp: 'Federico 11/5/2020 17:55:04'!
ERROR!

!testRun: #PortfolioTest #test05 stamp: 'Federico 11/5/2020 17:55:10'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'Federico 11/5/2020 17:55:10'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'Federico 11/5/2020 17:55:10'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'Federico 11/5/2020 17:55:10'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'Federico 11/5/2020 17:55:10'!
ERROR!

!testRun: #PortfolioTest #test05 stamp: 'Federico 11/5/2020 17:55:10'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'Federico 11/5/2020 17:55:10'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Federico 11/5/2020 17:57:09' prior: 50932599!
hasRegistered: aTransaction
	nodes isEmpty ifTrue: [^false] ifFalse: [nodes first hasRegistered: aTransaction.]! !

!testRun: #PortfolioTest #test04 stamp: 'Federico 11/5/2020 17:57:11'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'Federico 11/5/2020 17:57:16'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Federico 11/5/2020 17:57:28' prior: 50932642!
hasRegistered: aTransaction
	nodes isEmpty ifTrue: [^false] ifFalse: [^nodes first hasRegistered: aTransaction.]! !

!testRun: #PortfolioTest #test05 stamp: 'Federico 11/5/2020 17:57:30'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'Federico 11/5/2020 17:57:30'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'Federico 11/5/2020 17:57:30'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'Federico 11/5/2020 17:57:30'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'Federico 11/5/2020 17:57:30'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'Federico 11/5/2020 17:57:30'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Federico 11/5/2020 18:01:06'!
test06

	| aMainPortafolio anotherPortafolio aPortafolioAccount aMainAccount aTransaction secondTransaction |
	
	aMainPortafolio := Portfolio new.
	anotherPortafolio := Portfolio new.
	
	aMainAccount := ReceptiveAccount new.
	aPortafolioAccount  := ReceptiveAccount new.
	
	anotherPortafolio add: aPortafolioAccount.
	aMainPortafolio add: aMainAccount.
	aMainPortafolio add: anotherPortafolio.

	aTransaction := Deposit register: 100 on: aPortafolioAccount.	
	secondTransaction := Deposit register: 100 on: aMainAccount.

		
	self assert: (aPortafolioAccount hasRegistered: aTransaction).
	self assert: (aMainAccount hasRegistered: aTransaction).
	self assert: (aMainAccount hasRegistered: secondTransaction).

! !

!testRun: #PortfolioTest #test06 stamp: 'Federico 11/5/2020 18:01:10'!
FAILURE!

!testRun: #PortfolioTest #test06 stamp: 'Federico 11/5/2020 18:01:43'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Federico 11/5/2020 18:03:04' prior: 50932654!
hasRegistered: aTransaction
	"nodes findFirst: [ :aNode | aNode hasRegistered: aTransaction.] ifAbsent"
	nodes isEmpty ifTrue: [^false] ifFalse: [^nodes first hasRegistered: aTransaction.]! !

nodes := OrderedCollection new.!

nodes first!

nodes isEmpty !

nodes add: 'sarasa'!

nodes find: 'sarasa'!

nodes find: 'sarasa'!

nodes findFirst: 'sarasa'!

nodes select: 'sarasa'!

nodes findFirst: 'sarasa'!

nodes find: 'sarasa'!

nodes find: 'sarasaa'!

nodes find: 'sarasaa' ifAbsent: ['hola']!

nodes select: [ :aNode | aNode = 'sarasa' ]!

nodes select: [ :aNode | aNode = 'sarasaa' ]!

nodes select: [ :aNode | aNode = 'sarasa' ] first.!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Federico 11/5/2020 18:08:42' prior: 50932707!
hasRegistered: aTransaction
	^nodes select: [ :aNode | aNode  hasRegistered: aTransaction. ] first.
	"nodes isEmpty ifTrue: [^false] ifFalse: [^nodes first hasRegistered: aTransaction.]"! !

!testRun: #PortfolioTest #test06 stamp: 'Federico 11/5/2020 18:08:46'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Federico 11/5/2020 18:09:36' prior: 50932676!
test06

	| aMainPortafolio anotherPortafolio aPortafolioAccount aMainAccount aTransaction secondTransaction |
	
	aMainPortafolio := Portfolio new.
	anotherPortafolio := Portfolio new.
	
	aMainAccount := ReceptiveAccount new.
	aPortafolioAccount  := ReceptiveAccount new.
	
	anotherPortafolio add: aPortafolioAccount.
	aMainPortafolio add: aMainAccount.
	aMainPortafolio add: anotherPortafolio.

	aTransaction := Deposit register: 100 on: aPortafolioAccount.	
	secondTransaction := Deposit register: 100 on: aMainAccount.

	self assert: (aPortafolioAccount hasRegistered: aTransaction).
	self assert: (aMainAccount hasRegistered: aTransaction).
	self assert: (aMainAccount hasRegistered: secondTransaction).

! !

!testRun: #PortfolioTest #test06 stamp: 'Federico 11/5/2020 18:09:38'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Federico 11/5/2020 18:09:59' prior: 50932743!
test06

	| aMainPortafolio anotherPortafolio aPortafolioAccount aMainAccount aTransaction secondTransaction |
	
	aMainPortafolio := Portfolio new.
	anotherPortafolio := Portfolio new.
	
	aMainAccount := ReceptiveAccount new.
	aPortafolioAccount  := ReceptiveAccount new.
	
	anotherPortafolio add: aPortafolioAccount.
	aMainPortafolio add: aMainAccount.
	aMainPortafolio add: anotherPortafolio.

	aTransaction := Deposit register: 100 on: aPortafolioAccount.	
	secondTransaction := Deposit register: 100 on: aMainAccount.

	self assert: (aPortafolioAccount hasRegistered: aTransaction).
	self assert: (aMainPortafolio hasRegistered: aTransaction).
	self assert: (aMainPortafolio hasRegistered: secondTransaction).

! !

!testRun: #PortfolioTest #test06 stamp: 'Federico 11/5/2020 18:10:00'!
ERROR!

!testRun: #PortfolioTest #test06 stamp: 'Federico 11/5/2020 18:10:07'!
ERROR!

nodes!

	^nodes select: [ :aNode | aNode  hasRegistered: aTransaction. ] first.!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Federico 11/5/2020 18:11:34' prior: 50932731!
hasRegistered: aTransaction
	^(nodes select: [ :aNode | aNode  hasRegistered: aTransaction. ]) first.
	"nodes isEmpty ifTrue: [^false] ifFalse: [^nodes first hasRegistered: aTransaction.]"! !

!testRun: #PortfolioTest #test06 stamp: 'Federico 11/5/2020 18:11:35'!
ERROR!

!testRun: #PortfolioTest #test06 stamp: 'Federico 11/5/2020 18:12:28'!
ERROR!

nodes first.!

	nodes first hasRegistered: aTransaction.!

	(nodes select: [ :aNode | aNode  hasRegistered: aTransaction. ]) first.!

	nodes select: [ :aNode | aNode  hasRegistered: aTransaction. ]!

	nodes first.!

	nodes first hasRegistered: aTransaction. !

	(nodes indexOf: 1) hasRegistered: aTransaction. !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Federico 11/5/2020 18:16:01' prior: 50932771!
test06

	| aMainPortafolio anotherPortafolio aPortafolioAccount aMainAccount aTransaction secondTransaction |
	
	aMainPortafolio := Portfolio new.
	anotherPortafolio := Portfolio new.
	
	aMainAccount := ReceptiveAccount new.
	aPortafolioAccount  := ReceptiveAccount new.
	
	anotherPortafolio add: aPortafolioAccount.
	aMainPortafolio add: aMainAccount.
	aMainPortafolio add: anotherPortafolio.

	aTransaction := Deposit register: 100 on: aPortafolioAccount.	
	secondTransaction := Deposit register: 100 on: aMainAccount.

	self assert: (aPortafolioAccount hasRegistered: aTransaction).
	self assert: (aMainPortafolio hasRegistered: secondTransaction).
	self assert: (aMainPortafolio hasRegistered: aTransaction).


! !

!testRun: #PortfolioTest #test06 stamp: 'Federico 11/5/2020 18:16:03'!
ERROR!

	^(nodes select: [ :aNode | aNode  hasRegistered: aTransaction. ]) first.!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Federico 11/5/2020 18:17:11' prior: 50932805!
hasRegistered: aTransaction
	^(nodes select: [ :aNode | aNode  hasRegistered: aTransaction. ]) first.
	
	
	"nodes isEmpty ifTrue: [^false] ifFalse: [^nodes first hasRegistered: aTransaction.]"! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Federico 11/5/2020 18:17:58' prior: 50932829!
test06

	| aMainPortafolio anotherPortafolio aPortafolioAccount aMainAccount aTransaction secondTransaction |
	
	aMainPortafolio := Portfolio new.
	anotherPortafolio := Portfolio new.
	
	aMainAccount := ReceptiveAccount new.
	aPortafolioAccount  := ReceptiveAccount new.
	
	anotherPortafolio add: aPortafolioAccount.
	aMainPortafolio add: aMainAccount.
	aMainPortafolio add: anotherPortafolio.

	aTransaction := Deposit register: 100 on: aPortafolioAccount.	
	secondTransaction := Deposit register: 100 on: aMainAccount.

	self assert: (anotherPortafolio hasRegistered: aTransaction).
	self assert: (aMainPortafolio hasRegistered: secondTransaction).
	self assert: (aMainPortafolio hasRegistered: aTransaction).


! !

!testRun: #PortfolioTest #test06 stamp: 'Federico 11/5/2020 18:18:03'!
ERROR!

anotherPortafolio!

nodes!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Federico 11/5/2020 18:19:05' prior: 50932860!
hasRegistered: aTransaction
	^((nodes select: [ :aNode | aNode  hasRegistered: aTransaction. ]) first).
	
	
	"nodes isEmpty ifTrue: [^false] ifFalse: [^nodes first hasRegistered: aTransaction.]"! !

!testRun: #PortfolioTest #test06 stamp: 'Federico 11/5/2020 18:19:07'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Federico 11/5/2020 18:19:59' prior: 50932899!
hasRegistered: aTransaction
	^(nodes select: [ :aNode | aNode  hasRegistered: aTransaction. ]) first = aTransaction.
	
	
	"nodes isEmpty ifTrue: [^false] ifFalse: [^nodes first hasRegistered: aTransaction.]"! !

!testRun: #PortfolioTest #test06 stamp: 'Federico 11/5/2020 18:20:06'!
FAILURE!

	(nodes select: [ :aNode | aNode  hasRegistered: aTransaction. ]) first!

	nodes select: [ :aNode | aNode  hasRegistered: aTransaction. ]!

	nodes collect: [ :aNode | aNode  hasRegistered: aTransaction. ]!

nodes!

nodes collect: [ :aNode | aNode ]!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Federico 11/5/2020 18:22:00' prior: 50932911!
hasRegistered: aTransaction
	^((nodes select: [ :aNode | aNode  hasRegistered: aTransaction. ]) first) hasRegistered: aTransaction.
	
	"nodes isEmpty ifTrue: [^false] ifFalse: [^nodes first hasRegistered: aTransaction.]"! !

!testRun: #PortfolioTest #test06 stamp: 'Federico 11/5/2020 18:22:01'!
ERROR!

!testRun: #PortfolioTest #test06 stamp: 'Federico 11/5/2020 18:22:07'!
ERROR!

!testRun: #PortfolioTest #test06 stamp: 'Federico 11/5/2020 18:22:18'!
ERROR!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Federico 11/5/2020 18:44:25' prior: 50932870!
test06

	| aMainPortafolio anotherPortafolio aPortafolioAccount aMainAccount aTransaction secondTransaction |
	
	aMainPortafolio := Portfolio new.
	anotherPortafolio := Portfolio new.
	
	aMainAccount := ReceptiveAccount new.
	aPortafolioAccount  := ReceptiveAccount new.
	
	anotherPortafolio add: aPortafolioAccount.
	
	aMainPortafolio add: aMainAccount.
	aMainPortafolio add: anotherPortafolio.

	aTransaction := Deposit register: 100 on: aPortafolioAccount.	
	secondTransaction := Deposit register: 100 on: aMainAccount.

	self assert: (anotherPortafolio hasRegistered: aTransaction).
	self assert: (aMainPortafolio hasRegistered: secondTransaction).
	self assert: (aMainPortafolio hasRegistered: aTransaction).


! !

nodes select: [ :aNode | aNode = 'sarasa' ] first.!

nodes := OrderedCollection new.!

nodes isEmpty!

nodes add: 'sarasa'!

nodes select: [ :aNode | aNode = 'sarasa' ] first.!

(nodes select: [ :aNode | aNode = 'sarasa' ]) first.!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Federico 11/5/2020 18:45:55' prior: 50932932!
hasRegistered: aTransaction
	^(nodes select: [ :aNode | aNode  hasRegistered: aTransaction. ]) first
	
	"nodes isEmpty ifTrue: [^false] ifFalse: [^nodes first hasRegistered: aTransaction.]"! !

!testRun: #PortfolioTest #test06 stamp: 'Federico 11/5/2020 18:45:59'!
ERROR!

self!

self at: 1!

self at: 1 first.!

anotherPortafolio hasRegistered: aTransaction!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Federico 11/5/2020 18:48:07' prior: 50932983!
hasRegistered: aTransaction
	^((nodes select: [ :aNode | aNode  hasRegistered: aTransaction. ]) first) hasRegistered: aTransaction.	
	"nodes isEmpty ifTrue: [^false] ifFalse: [^nodes first hasRegistered: aTransaction.]"! !

!testRun: #PortfolioTest #test05 stamp: 'Federico 11/5/2020 18:48:11'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'Federico 11/5/2020 18:48:11'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'Federico 11/5/2020 18:48:11'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'Federico 11/5/2020 18:48:11'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'Federico 11/5/2020 18:48:12'!
ERROR!

!testRun: #PortfolioTest #test05 stamp: 'Federico 11/5/2020 18:48:12'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'Federico 11/5/2020 18:48:12'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Federico 11/5/2020 18:49:22' prior: 50932998!
hasRegistered: aTransaction
	nodes ifEmpty: [^false].
	^((nodes select: [ :aNode | aNode  hasRegistered: aTransaction. ]) first) hasRegistered: aTransaction.	
	"nodes isEmpty ifTrue: [^false] ifFalse: [^nodes first hasRegistered: aTransaction.]"! !

!testRun: #PortfolioTest #test05 stamp: 'Federico 11/5/2020 18:49:30'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'Federico 11/5/2020 18:49:30'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'Federico 11/5/2020 18:49:30'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'Federico 11/5/2020 18:49:30'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'Federico 11/5/2020 18:49:30'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'Federico 11/5/2020 18:49:30'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'Federico 11/5/2020 18:49:31'!
ERROR!

!testRun: #PortfolioTest #test06 stamp: 'Federico 11/5/2020 18:49:31'!
ERROR!

!testRun: #PortfolioTest #test06 stamp: 'Federico 11/5/2020 18:49:38'!
ERROR!

!testRun: #PortfolioTest #test06 stamp: 'Federico 11/5/2020 18:49:45'!
ERROR!

!testRun: #PortfolioTest #test06 stamp: 'Federico 11/5/2020 18:50:08'!
ERROR!

!testRun: #PortfolioTest #test06 stamp: 'Federico 11/5/2020 18:50:18'!
ERROR!

nodes!

!testRun: #PortfolioTest #test06 stamp: 'Federico 11/5/2020 18:51:06'!
ERROR!

sarasa := OrderedCollection new.!

sarasa add: 'hola'.!

sarasa add: 'hola2'.!

sarasa add: 'amo'.!

sarasa add: 'amo'. !

sarasa!

sarasa findFirst: 'amo'!

sarasa findFirst: 'amo'!

OrderedCollection!

OrderedCollection!

----SNAPSHOT----(5 November 2020 18:56:48) CuisUniversity-4365.image priorSource: 19226852!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Federico 11/5/2020 19:00:04' prior: 50933026!
hasRegistered: aTransaction
	nodes ifEmpty: [^false].
	^((nodes findFirst: [ :aNode | aNode  hasRegistered: aTransaction. ]) first) > 0.
	"nodes isEmpty ifTrue: [^false] ifFalse: [^nodes first hasRegistered: aTransaction.]"
! !

!testRun: #PortfolioTest #test06 stamp: 'Federico 11/5/2020 19:00:08'!
ERROR!

!testRun: #PortfolioTest #test06 stamp: 'Federico 11/5/2020 19:00:27'!
ERROR!

!testRun: #PortfolioTest #test06 stamp: 'Federico 11/5/2020 19:00:32'!
ERROR!

!testRun: #PortfolioTest #test06 stamp: 'Federico 11/5/2020 19:00:38'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Federico 11/5/2020 19:01:29' prior: 50933080!
hasRegistered: aTransaction
	nodes ifEmpty: [^false].
	^(nodes findFirst: [ :aNode | aNode  hasRegistered: aTransaction. ]) > 0.
	"nodes isEmpty ifTrue: [^false] ifFalse: [^nodes first hasRegistered: aTransaction.]"
! !

!testRun: #PortfolioTest #test05 stamp: 'Federico 11/5/2020 19:01:31'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'Federico 11/5/2020 19:01:31'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'Federico 11/5/2020 19:01:31'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'Federico 11/5/2020 19:01:31'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'Federico 11/5/2020 19:01:31'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'Federico 11/5/2020 19:01:31'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'Federico 11/5/2020 19:01:31'!
PASSED!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Federico 11/5/2020 19:01:39' prior: 50933101!
hasRegistered: aTransaction
	nodes ifEmpty: [^false].
	^(nodes findFirst: [ :aNode | aNode  hasRegistered: aTransaction. ]) > 0.
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Federico 11/5/2020 19:13:43'!
test07
	| aPortafolio aTransaction |
	
	aPortafolio := Portfolio new.
	
	aTransaction :=  Deposit for: 100.
		
	self assert: (aPortafolio transactions isEmpty).

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Federico 11/5/2020 19:13:57' prior: 50933136!
test07
	| aPortafolio |
	
	aPortafolio := Portfolio new.
		
	self assert: (aPortafolio transactions isEmpty).

! !

!testRun: #PortfolioTest #test07 stamp: 'Federico 11/5/2020 19:14:12'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Federico 11/5/2020 19:14:23'!
transactions
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Federico 11/5/2020 19:14:50' prior: 50933154!
transactions
	^true.! !

!testRun: #PortfolioTest #test07 stamp: 'Federico 11/5/2020 19:14:53'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Federico 11/5/2020 19:15:05' prior: 50933159!
transactions
	! !

!testRun: #PortfolioTest #test07 stamp: 'Federico 11/5/2020 19:15:09'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Federico 11/5/2020 19:16:07' prior: 50933166!
transactions
	| transactions |
	transactions = OrderedCollection new.
	^transactions.! !

!testRun: #PortfolioTest #test07 stamp: 'Federico 11/5/2020 19:16:15'!
ERROR!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Federico 11/5/2020 19:16:23' prior: 50933145!
test07
	| aPortafolio |
	
	aPortafolio := Portfolio new.
		
	self assert: ((aPortafolio transactions) isEmpty).

! !

!testRun: #PortfolioTest #test07 stamp: 'Federico 11/5/2020 19:16:24'!
ERROR!

aPortafolio transactions!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Federico 11/5/2020 19:18:28' prior: 50933173!
transactions

	^OrderedCollection new.! !

!testRun: #PortfolioTest #test07 stamp: 'Federico 11/5/2020 19:18:31'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'Federico 11/5/2020 19:18:31'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'Federico 11/5/2020 19:18:31'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'Federico 11/5/2020 19:18:31'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'Federico 11/5/2020 19:18:31'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'Federico 11/5/2020 19:18:31'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'Federico 11/5/2020 19:18:31'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'Federico 11/5/2020 19:18:31'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Federico 11/5/2020 19:18:48' prior: 50933182!
test07
	| aPortafolio |
	
	aPortafolio := Portfolio new.
		
		
	self assert: ((aPortafolio transactions) isEmpty).

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Federico 11/5/2020 19:25:05'!
test08
	| aPortafolio |
	
	aPortafolio := Portfolio new.
		
		
	self assert: ((aPortafolio transactions) isEmpty).

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Federico 11/5/2020 19:27:47' prior: 50933225!
test08
	| aPortafolio anAccount aTransaction |
	
	aPortafolio := Portfolio new.
	anAccount := ReceptiveAccount new.
	
	aPortafolio add: anAccount.
	aTransaction := Deposit register: 50 on: anAccount.
		
	self assert: 1 equals: anAccount transactions size.
	self assert: (aPortafolio transactions includes: aTransaction).
		

! !

!testRun: #PortfolioTest #test08 stamp: 'Federico 11/5/2020 19:30:54'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Federico 11/5/2020 19:31:22' prior: 50933232!
test08
	| aPortafolio anAccount aTransaction |
	
	aPortafolio := Portfolio new.
	anAccount := ReceptiveAccount new.
	
	aPortafolio add: anAccount.
	aTransaction := Deposit register: 50 on: anAccount.
		
	self assert: 1 equals: aPortafolio transactions size.
	self assert: (aPortafolio transactions includes: aTransaction).
		

! !

!testRun: #PortfolioTest #test08 stamp: 'Federico 11/5/2020 19:31:26'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Federico 11/5/2020 19:35:21' prior: 50933193!
transactions
	| transactions |
	
	transactions := OrderedCollection new.
	nodes do: [ :node | transactions addAll: node transactions].
	
	^transactions.! !

!testRun: #PortfolioTest #test08 stamp: 'Federico 11/5/2020 19:35:22'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'Federico 11/5/2020 19:35:22'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'Federico 11/5/2020 19:35:22'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'Federico 11/5/2020 19:35:22'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'Federico 11/5/2020 19:35:22'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'Federico 11/5/2020 19:35:22'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'Federico 11/5/2020 19:35:22'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'Federico 11/5/2020 19:35:22'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'Federico 11/5/2020 19:35:22'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Federico 11/5/2020 19:36:38' prior: 50933249!
test08
	| aMainPortafolio anotherPortafolio aPortafolioAccount aMainAccount aTransaction secondTransaction |
	
	aMainPortafolio := Portfolio new.
	anotherPortafolio := Portfolio new.
	
	aMainAccount := ReceptiveAccount new.
	aPortafolioAccount  := ReceptiveAccount new.
	
	anotherPortafolio add: aPortafolioAccount.
	
	aMainPortafolio add: aMainAccount.
	aMainPortafolio add: anotherPortafolio.

	aTransaction := Deposit register: 100 on: aPortafolioAccount.	
	secondTransaction := Deposit register: 100 on: aMainAccount.
		
	self assert: 2 equals: aMainPortafolio transactions size.
	self assert: (aMainPortafolio transactions includes: aTransaction).
	self assert: (aMainPortafolio transactions includes: secondTransaction).
		

! !

!testRun: #PortfolioTest #test08 stamp: 'Federico 11/5/2020 19:36:58'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'Federico 11/5/2020 19:36:58'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'Federico 11/5/2020 19:36:58'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'Federico 11/5/2020 19:36:58'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'Federico 11/5/2020 19:36:58'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'Federico 11/5/2020 19:36:58'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'Federico 11/5/2020 19:36:58'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'Federico 11/5/2020 19:36:58'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'Federico 11/5/2020 19:36:58'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Federico 11/5/2020 19:37:49' prior: 50933296!
test08
	| aMainPortafolio anotherPortafolio aPortafolioAccount aTransaction secondTransaction |
	
	aMainPortafolio := Portfolio new.
	anotherPortafolio := Portfolio new.
	
	aPortafolioAccount  := ReceptiveAccount new.
	
	anotherPortafolio add: aPortafolioAccount.
	aMainPortafolio add: anotherPortafolio.

	aTransaction := Deposit register: 100 on: aPortafolioAccount.	
	secondTransaction := Deposit register: 300 on: aPortafolioAccount.	
		
	self assert: 2 equals: aMainPortafolio transactions size.
	self assert: (aMainPortafolio transactions includes: aTransaction).
	self assert: (aMainPortafolio transactions includes: secondTransaction).
		

! !

!testRun: #PortfolioTest #test08 stamp: 'Federico 11/5/2020 19:37:53'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'Federico 11/5/2020 19:37:53'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'Federico 11/5/2020 19:37:53'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'Federico 11/5/2020 19:37:53'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'Federico 11/5/2020 19:37:53'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'Federico 11/5/2020 19:37:53'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'Federico 11/5/2020 19:37:53'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'Federico 11/5/2020 19:37:53'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'Federico 11/5/2020 19:37:53'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Federico 11/5/2020 19:38:07'!
test09
	| aMainPortafolio anotherPortafolio aPortafolioAccount aTransaction secondTransaction |
	
	aMainPortafolio := Portfolio new.
	anotherPortafolio := Portfolio new.
	
	aPortafolioAccount  := ReceptiveAccount new.
	
	anotherPortafolio add: aPortafolioAccount.
	aMainPortafolio add: anotherPortafolio.

	aTransaction := Deposit register: 100 on: aPortafolioAccount.	
	secondTransaction := Deposit register: 300 on: aPortafolioAccount.	
		
	self assert: 2 equals: aMainPortafolio transactions size.
	self assert: (aMainPortafolio transactions includes: aTransaction).
	self assert: (aMainPortafolio transactions includes: secondTransaction).
		

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Federico 11/5/2020 19:27:47' prior: 50933345!
test08
	| aPortafolio anAccount aTransaction |
	
	aPortafolio := Portfolio new.
	anAccount := ReceptiveAccount new.
	
	aPortafolio add: anAccount.
	aTransaction := Deposit register: 50 on: anAccount.
		
	self assert: 1 equals: anAccount transactions size.
	self assert: (aPortafolio transactions includes: aTransaction).
		

! !

!testRun: #PortfolioTest #test08 stamp: 'Federico 11/5/2020 19:38:36'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'Federico 11/5/2020 19:38:36'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'Federico 11/5/2020 19:38:36'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'Federico 11/5/2020 19:38:36'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'Federico 11/5/2020 19:38:36'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'Federico 11/5/2020 19:38:36'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'Federico 11/5/2020 19:38:36'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'Federico 11/5/2020 19:38:36'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'Federico 11/5/2020 19:38:36'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'Federico 11/5/2020 19:38:36'!
PASSED!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Federico 11/5/2020 19:41:25' prior: 50933265!
transactions
	| transactions |
	
	transactions := OrderedCollection new.
	transactions addAll: nodes first transactions.
	
	^transactions.
	! !

!testRun: #PortfolioTest #test06 stamp: 'Federico 11/5/2020 19:41:29'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'Federico 11/5/2020 19:41:29'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'Federico 11/5/2020 19:41:29'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'Federico 11/5/2020 19:41:29'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'Federico 11/5/2020 19:41:29'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'Federico 11/5/2020 19:41:29'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'Federico 11/5/2020 19:41:29'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'Federico 11/5/2020 19:41:29'!
ERROR!

!testRun: #PortfolioTest #test08 stamp: 'Federico 11/5/2020 19:41:29'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'Federico 11/5/2020 19:41:29'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'Federico 11/5/2020 19:41:29'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Federico 11/5/2020 19:42:10' prior: 50933454!
transactions
	| transactions |
	nodes ifEmpty: [^false].
	
	transactions := OrderedCollection new.
	transactions addAll: nodes first transactions.
	
	^transactions.
	! !

!testRun: #PortfolioTest #test07 stamp: 'Federico 11/5/2020 19:42:14'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Federico 11/5/2020 19:42:38' prior: 50933490!
transactions
	| transactions |
	
	transactions := OrderedCollection new.
	
	nodes ifEmpty: [^transactions].
	transactions addAll: nodes first transactions.
	
	^transactions.
	! !

!testRun: #PortfolioTest #test08 stamp: 'Federico 11/5/2020 19:42:42'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'Federico 11/5/2020 19:42:42'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'Federico 11/5/2020 19:42:42'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'Federico 11/5/2020 19:42:42'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'Federico 11/5/2020 19:42:42'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'Federico 11/5/2020 19:42:42'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'Federico 11/5/2020 19:42:42'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'Federico 11/5/2020 19:42:42'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'Federico 11/5/2020 19:42:42'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'Federico 11/5/2020 19:42:42'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Federico 11/5/2020 19:43:28' prior: 50933391!
test09
	| aMainPortafolio anotherPortafolio aMainAccount aPortafolioAccount aTransaction secondTransaction thirdTransaction |
	
	aMainPortafolio := Portfolio new.
	anotherPortafolio := Portfolio new.
	
	aPortafolioAccount  := ReceptiveAccount new.
	aMainAccount  := ReceptiveAccount new.
	
	anotherPortafolio add: aPortafolioAccount.
	aMainPortafolio add: anotherPortafolio.

	aTransaction := Deposit register: 100 on: aPortafolioAccount.	
	secondTransaction := Deposit register: 200 on: aPortafolioAccount.	
	thirdTransaction := Deposit register: 300 on: aPortafolioAccount.	
		
	self assert: 2 equals: aMainPortafolio transactions size.
	self assert: (aMainPortafolio transactions includes: aTransaction).
	self assert: (aMainPortafolio transactions includes: secondTransaction).
		

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Federico 11/5/2020 19:44:13' prior: 50933535!
test09
	| aMainPortafolio anotherPortafolio aMainAccount aPortafolioAccount aTransaction secondTransaction thirdTransaction |
	
	aMainPortafolio := Portfolio new.
	anotherPortafolio := Portfolio new.
	
	aPortafolioAccount  := ReceptiveAccount new.
	aMainAccount  := ReceptiveAccount new.
	
	anotherPortafolio add: aPortafolioAccount.
	
	aMainPortafolio add: anotherPortafolio.
	aMainPortafolio add: aMainAccount.

	aTransaction := Deposit register: 100 on: aPortafolioAccount.	
	secondTransaction := Deposit register: 200 on: aPortafolioAccount.	
	thirdTransaction := Deposit register: 300 on: aMainAccount.	
		
	self assert: 2 equals: aMainPortafolio transactions size.
	self assert: (aMainPortafolio transactions includes: aTransaction).
	self assert: (aMainPortafolio transactions includes: secondTransaction).
		

! !

!testRun: #PortfolioTest #test09 stamp: 'Federico 11/5/2020 19:44:21'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'Federico 11/5/2020 19:44:21'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'Federico 11/5/2020 19:44:21'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'Federico 11/5/2020 19:44:21'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'Federico 11/5/2020 19:44:21'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'Federico 11/5/2020 19:44:21'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'Federico 11/5/2020 19:44:21'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'Federico 11/5/2020 19:44:21'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'Federico 11/5/2020 19:44:22'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'Federico 11/5/2020 19:44:22'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Federico 11/5/2020 19:44:51' prior: 50933563!
test09
	| aMainPortafolio anotherPortafolio aMainAccount aPortafolioAccount aTransaction secondTransaction thirdTransaction |
	
	aMainPortafolio := Portfolio new.
	anotherPortafolio := Portfolio new.
	
	aPortafolioAccount  := ReceptiveAccount new.
	aMainAccount  := ReceptiveAccount new.
	
	anotherPortafolio add: aPortafolioAccount.
	
	aMainPortafolio add: anotherPortafolio.
	aMainPortafolio add: aMainAccount.

	aTransaction := Deposit register: 100 on: aPortafolioAccount.	
	secondTransaction := Deposit register: 200 on: aPortafolioAccount.	
	thirdTransaction := Deposit register: 300 on: aMainAccount.	
		
	self assert: 3 equals: aMainPortafolio transactions size.
	self assert: (aMainPortafolio transactions includes: aTransaction).
	self assert: (aMainPortafolio transactions includes: secondTransaction).
		

! !

!testRun: #PortfolioTest #test09 stamp: 'Federico 11/5/2020 19:45:07'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Federico 11/5/2020 19:45:29' prior: 50933501!
transactions
	| transactions |
	
	transactions := OrderedCollection new.
	nodes do: [ :node | transactions addAll: node transactions].
	
	^transactions.
	! !

!testRun: #PortfolioTest #test09 stamp: 'Federico 11/5/2020 19:45:34'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'Federico 11/5/2020 19:45:34'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'Federico 11/5/2020 19:45:34'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'Federico 11/5/2020 19:45:34'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'Federico 11/5/2020 19:45:34'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'Federico 11/5/2020 19:45:34'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'Federico 11/5/2020 19:45:34'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'Federico 11/5/2020 19:45:34'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'Federico 11/5/2020 19:45:34'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'Federico 11/5/2020 19:45:34'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Federico 11/5/2020 19:45:50' prior: 50933617!
test09
	| aMainPortafolio anotherPortafolio aMainAccount aPortafolioAccount aTransaction secondTransaction |
	
	aMainPortafolio := Portfolio new.
	anotherPortafolio := Portfolio new.
	
	aPortafolioAccount  := ReceptiveAccount new.
	aMainAccount  := ReceptiveAccount new.
	
	anotherPortafolio add: aPortafolioAccount.
	
	aMainPortafolio add: anotherPortafolio.
	aMainPortafolio add: aMainAccount.

	aTransaction := Deposit register: 100 on: aPortafolioAccount.	
	secondTransaction := Deposit register: 200 on: aMainAccount.	
		
	self assert: 2 equals: aMainPortafolio transactions size.
	self assert: (aMainPortafolio transactions includes: aTransaction).
	self assert: (aMainPortafolio transactions includes: secondTransaction).
		

! !

!testRun: #PortfolioTest #test09 stamp: 'Federico 11/5/2020 19:45:51'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'Federico 11/5/2020 19:45:52'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'Federico 11/5/2020 19:45:52'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'Federico 11/5/2020 19:45:52'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'Federico 11/5/2020 19:45:52'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'Federico 11/5/2020 19:45:52'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'Federico 11/5/2020 19:45:52'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'Federico 11/5/2020 19:45:52'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'Federico 11/5/2020 19:45:52'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'Federico 11/5/2020 19:45:52'!
PASSED!

----SNAPSHOT----(5 November 2020 20:17:11) CuisUniversity-4365.image priorSource: 19245609!

----QUIT----(5 November 2020 21:49:51) CuisUniversity-4365.image priorSource: 19266656!

----STARTUP---- (6 November 2020 11:44:29) as D:\facultad\Smalltalk\windows64\CuisUniversity-4365.image!

!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Federico 11/6/2020 11:46:47'!
test01PortfolioStartsWithNoIncome
	| aPortafolio |
	aPortafolio := Portfolio new.
	
	self assert: 0 equals: aPortafolio balance.! !

!methodRemoval: PortfolioTest #test01 stamp: 'Federico 11/6/2020 11:46:52'!
test01
	| aPortafolio |
	aPortafolio := Portfolio new.
	
	self assert: 0 equals: aPortafolio balance.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Federico 11/6/2020 11:48:18'!
test02PortfolioBalanceCountAccountTransactions
	| aPortafolio anAccount |
	
	aPortafolio := Portfolio new.
	anAccount := ReceptiveAccount new.
	
	aPortafolio add: anAccount.
	Deposit register: 100 on: anAccount.
		
	self assert: 100 equals: aPortafolio balance.

! !

!methodRemoval: PortfolioTest #test02 stamp: 'Federico 11/6/2020 11:48:26'!
test02
	| aPortafolio anAccount |
	
	aPortafolio := Portfolio new.
	anAccount := ReceptiveAccount new.
	
	aPortafolio add: anAccount.
	Deposit register: 100 on: anAccount.
		
	self assert: 100 equals: aPortafolio balance.

!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Federico 11/6/2020 11:49:07' prior: 50932444!
test03
	| aMainPortfolio anotherPortfolio aPortfolioAccount aMainAccount |
	
	aMainPortfolio := Portfolio new.
	anotherPortfolio := Portfolio new.
	
	aMainAccount := ReceptiveAccount new.
	aPortfolioAccount  := ReceptiveAccount new.
	
	anotherPortfolio add: aPortfolioAccount.
	aMainPortfolio add: aMainAccount.
	aMainPortfolio add: anotherPortfolio.

	Deposit register: 100 on: aMainAccount.
	Deposit register: 100 on: aPortfolioAccount.
		
	self assert: 200 equals: aMainPortfolio balance.

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Federico 11/6/2020 11:49:15' prior: 50933756!
test02PortfolioBalanceCountAccountTransactions
	| aPortfolio anAccount |
	
	aPortfolio := Portfolio new.
	anAccount := ReceptiveAccount new.
	
	aPortfolio add: anAccount.
	Deposit register: 100 on: anAccount.
		
	self assert: 100 equals: aPortfolio balance.

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Federico 11/6/2020 11:49:24' prior: 50933743!
test01PortfolioStartsWithNoIncome
	| aPortfolio |
	aPortfolio := Portfolio new.
	
	self assert: 0 equals: aPortfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Federico 11/6/2020 11:49:31' prior: 50932528!
test04
	| aPortfolio aTransaction |
	
	aPortfolio := Portfolio new.
	
	aTransaction :=  Deposit for: 100.
		
	self deny: (aPortfolio hasRegistered: aTransaction).

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Federico 11/6/2020 11:49:39' prior: 50932574!
test05
	| aPortfolio anAccount aTransaction |
	
	aPortfolio := Portfolio new.
	anAccount := ReceptiveAccount new.
	
	aTransaction := Deposit register: 100 on: anAccount.
	aPortfolio add: anAccount.
		
	self assert: (aPortfolio hasRegistered: aTransaction).

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Federico 11/6/2020 11:50:01' prior: 50932950!
test06

	| aMainPortfolio anotherPortfolio aPortfolioAccount aMainAccount aTransaction secondTransaction |
	
	aMainPortfolio := Portfolio new.
	anotherPortfolio := Portfolio new.
	
	aMainAccount := ReceptiveAccount new.
	aPortfolioAccount  := ReceptiveAccount new.
	
	anotherPortfolio add: aPortfolioAccount.
	
	aMainPortfolio add: aMainAccount.
	aMainPortfolio add: anotherPortfolio.

	aTransaction := Deposit register: 100 on: aPortfolioAccount.	
	secondTransaction := Deposit register: 100 on: aMainAccount.

	self assert: (anotherPortfolio hasRegistered: aTransaction).
	self assert: (aMainPortfolio hasRegistered: secondTransaction).
	self assert: (aMainPortfolio hasRegistered: aTransaction).


! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Federico 11/6/2020 11:50:08' prior: 50933218!
test07
	| aPortfolio |
	
	aPortfolio := Portfolio new.
		
		
	self assert: ((aPortfolio transactions) isEmpty).

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Federico 11/6/2020 11:50:14' prior: 50933415!
test08
	| aPortfolio anAccount aTransaction |
	
	aPortfolio := Portfolio new.
	anAccount := ReceptiveAccount new.
	
	aPortfolio add: anAccount.
	aTransaction := Deposit register: 50 on: anAccount.
		
	self assert: 1 equals: anAccount transactions size.
	self assert: (aPortfolio transactions includes: aTransaction).
		

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Federico 11/6/2020 11:50:37' prior: 50933683!
test09
	| aMainPortfolio anotherPortfolio aMainAccount aPortfolioAccount aTransaction secondTransaction |
	
	aMainPortfolio := Portfolio new.
	anotherPortfolio := Portfolio new.
	
	aPortfolioAccount  := ReceptiveAccount new.
	aMainAccount  := ReceptiveAccount new.
	
	anotherPortfolio add: aPortfolioAccount.
	
	aMainPortfolio add: anotherPortfolio.
	aMainPortfolio add: aMainAccount.

	aTransaction := Deposit register: 100 on: aPortfolioAccount.	
	secondTransaction := Deposit register: 200 on: aMainAccount.	
		
	self assert: 2 equals: aMainPortfolio transactions size.
	self assert: (aMainPortfolio transactions includes: aTransaction).
	self assert: (aMainPortfolio transactions includes: secondTransaction).
		

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Federico 11/6/2020 11:51:08'!
test02BalanceCountAccountTransactions
	| aPortfolio anAccount |
	
	aPortfolio := Portfolio new.
	anAccount := ReceptiveAccount new.
	
	aPortfolio add: anAccount.
	Deposit register: 100 on: anAccount.
		
	self assert: 100 equals: aPortfolio balance.

! !

!methodRemoval: PortfolioTest #test02PortfolioBalanceCountAccountTransactions stamp: 'Federico 11/6/2020 11:51:12'!
test02PortfolioBalanceCountAccountTransactions
	| aPortfolio anAccount |
	
	aPortfolio := Portfolio new.
	anAccount := ReceptiveAccount new.
	
	aPortfolio add: anAccount.
	Deposit register: 100 on: anAccount.
		
	self assert: 100 equals: aPortfolio balance.

!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Federico 11/6/2020 11:51:48'!
test03BalanceCountPortafolioAndAccountTransactions
	| aMainPortfolio anotherPortfolio aPortfolioAccount aMainAccount |
	
	aMainPortfolio := Portfolio new.
	anotherPortfolio := Portfolio new.
	
	aMainAccount := ReceptiveAccount new.
	aPortfolioAccount  := ReceptiveAccount new.
	
	anotherPortfolio add: aPortfolioAccount.
	aMainPortfolio add: aMainAccount.
	aMainPortfolio add: anotherPortfolio.

	Deposit register: 100 on: aMainAccount.
	Deposit register: 100 on: aPortfolioAccount.
		
	self assert: 200 equals: aMainPortfolio balance.

! !

!methodRemoval: PortfolioTest #test03 stamp: 'Federico 11/6/2020 11:51:59'!
test03
	| aMainPortfolio anotherPortfolio aPortfolioAccount aMainAccount |
	
	aMainPortfolio := Portfolio new.
	anotherPortfolio := Portfolio new.
	
	aMainAccount := ReceptiveAccount new.
	aPortfolioAccount  := ReceptiveAccount new.
	
	anotherPortfolio add: aPortfolioAccount.
	aMainPortfolio add: aMainAccount.
	aMainPortfolio add: anotherPortfolio.

	Deposit register: 100 on: aMainAccount.
	Deposit register: 100 on: aPortfolioAccount.
		
	self assert: 200 equals: aMainPortfolio balance.

!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'Federico 11/6/2020 11:52:02'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'Federico 11/6/2020 11:52:02'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'Federico 11/6/2020 11:52:02'!
PASSED!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'Federico 11/6/2020 11:52:02'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'Federico 11/6/2020 11:52:02'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'Federico 11/6/2020 11:52:02'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'Federico 11/6/2020 11:52:02'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'Federico 11/6/2020 11:52:02'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'Federico 11/6/2020 11:52:02'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'Federico 11/6/2020 11:52:02'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Federico 11/6/2020 11:55:34'!
test04PortfolioDoesNotRegisterUnknownTransaction

	| aPortfolio aTransaction |
	
	aPortfolio := Portfolio new.
	
	aTransaction :=  Deposit for: 100.
		
	self deny: (aPortfolio hasRegistered: aTransaction).

! !

!methodRemoval: PortfolioTest #test04 stamp: 'Federico 11/6/2020 11:55:38'!
test04
	| aPortfolio aTransaction |
	
	aPortfolio := Portfolio new.
	
	aTransaction :=  Deposit for: 100.
		
	self deny: (aPortfolio hasRegistered: aTransaction).

!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Federico 11/6/2020 11:56:07'!
test05PortfolioHasRegisteredAccountTransactions
	| aPortfolio anAccount aTransaction |
	
	aPortfolio := Portfolio new.
	anAccount := ReceptiveAccount new.
	
	aTransaction := Deposit register: 100 on: anAccount.
	aPortfolio add: anAccount.
		
	self assert: (aPortfolio hasRegistered: aTransaction).

! !

!methodRemoval: PortfolioTest #test05 stamp: 'Federico 11/6/2020 11:56:14'!
test05
	| aPortfolio anAccount aTransaction |
	
	aPortfolio := Portfolio new.
	anAccount := ReceptiveAccount new.
	
	aTransaction := Deposit register: 100 on: anAccount.
	aPortfolio add: anAccount.
		
	self assert: (aPortfolio hasRegistered: aTransaction).

!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Federico 11/6/2020 11:56:43'!
test06PortfolioHasRegisteredAnotherPortfolioTransactions

	| aMainPortfolio anotherPortfolio aPortfolioAccount aMainAccount aTransaction secondTransaction |
	
	aMainPortfolio := Portfolio new.
	anotherPortfolio := Portfolio new.
	
	aMainAccount := ReceptiveAccount new.
	aPortfolioAccount  := ReceptiveAccount new.
	
	anotherPortfolio add: aPortfolioAccount.
	
	aMainPortfolio add: aMainAccount.
	aMainPortfolio add: anotherPortfolio.

	aTransaction := Deposit register: 100 on: aPortfolioAccount.	
	secondTransaction := Deposit register: 100 on: aMainAccount.

	self assert: (anotherPortfolio hasRegistered: aTransaction).
	self assert: (aMainPortfolio hasRegistered: secondTransaction).
	self assert: (aMainPortfolio hasRegistered: aTransaction).


! !

!methodRemoval: PortfolioTest #test06 stamp: 'Federico 11/6/2020 11:56:47'!
test06

	| aMainPortfolio anotherPortfolio aPortfolioAccount aMainAccount aTransaction secondTransaction |
	
	aMainPortfolio := Portfolio new.
	anotherPortfolio := Portfolio new.
	
	aMainAccount := ReceptiveAccount new.
	aPortfolioAccount  := ReceptiveAccount new.
	
	anotherPortfolio add: aPortfolioAccount.
	
	aMainPortfolio add: aMainAccount.
	aMainPortfolio add: anotherPortfolio.

	aTransaction := Deposit register: 100 on: aPortfolioAccount.	
	secondTransaction := Deposit register: 100 on: aMainAccount.

	self assert: (anotherPortfolio hasRegistered: aTransaction).
	self assert: (aMainPortfolio hasRegistered: secondTransaction).
	self assert: (aMainPortfolio hasRegistered: aTransaction).


!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Federico 11/6/2020 11:57:48'!
test07PortfolioStartsWithNoTransactions
	| aPortfolio |
	
	aPortfolio := Portfolio new.
		
		
	self assert: ((aPortfolio transactions) isEmpty).

! !

!methodRemoval: PortfolioTest #test07 stamp: 'Federico 11/6/2020 11:57:54'!
test07
	| aPortfolio |
	
	aPortfolio := Portfolio new.
		
		
	self assert: ((aPortfolio transactions) isEmpty).

!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Federico 11/6/2020 11:58:13'!
test08PortfolioIncludesAccountTransactions
	| aPortfolio anAccount aTransaction |
	
	aPortfolio := Portfolio new.
	anAccount := ReceptiveAccount new.
	
	aPortfolio add: anAccount.
	aTransaction := Deposit register: 50 on: anAccount.
		
	self assert: 1 equals: anAccount transactions size.
	self assert: (aPortfolio transactions includes: aTransaction).
		

! !

!methodRemoval: PortfolioTest #test08 stamp: 'Federico 11/6/2020 11:58:17'!
test08
	| aPortfolio anAccount aTransaction |
	
	aPortfolio := Portfolio new.
	anAccount := ReceptiveAccount new.
	
	aPortfolio add: anAccount.
	aTransaction := Deposit register: 50 on: anAccount.
		
	self assert: 1 equals: anAccount transactions size.
	self assert: (aPortfolio transactions includes: aTransaction).
		

!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'Federico 11/6/2020 11:58:28'!
test09PortfolioIncludesAnotherPortfolioTransactions
	| aMainPortfolio anotherPortfolio aMainAccount aPortfolioAccount aTransaction secondTransaction |
	
	aMainPortfolio := Portfolio new.
	anotherPortfolio := Portfolio new.
	
	aPortfolioAccount  := ReceptiveAccount new.
	aMainAccount  := ReceptiveAccount new.
	
	anotherPortfolio add: aPortfolioAccount.
	
	aMainPortfolio add: anotherPortfolio.
	aMainPortfolio add: aMainAccount.

	aTransaction := Deposit register: 100 on: aPortfolioAccount.	
	secondTransaction := Deposit register: 200 on: aMainAccount.	
		
	self assert: 2 equals: aMainPortfolio transactions size.
	self assert: (aMainPortfolio transactions includes: aTransaction).
	self assert: (aMainPortfolio transactions includes: secondTransaction).
		

! !

!methodRemoval: PortfolioTest #test09 stamp: 'Federico 11/6/2020 11:58:31'!
test09
	| aMainPortfolio anotherPortfolio aMainAccount aPortfolioAccount aTransaction secondTransaction |
	
	aMainPortfolio := Portfolio new.
	anotherPortfolio := Portfolio new.
	
	aPortfolioAccount  := ReceptiveAccount new.
	aMainAccount  := ReceptiveAccount new.
	
	anotherPortfolio add: aPortfolioAccount.
	
	aMainPortfolio add: anotherPortfolio.
	aMainPortfolio add: aMainAccount.

	aTransaction := Deposit register: 100 on: aPortfolioAccount.	
	secondTransaction := Deposit register: 200 on: aMainAccount.	
		
	self assert: 2 equals: aMainPortfolio transactions size.
	self assert: (aMainPortfolio transactions includes: aTransaction).
	self assert: (aMainPortfolio transactions includes: secondTransaction).
		

!

----SNAPSHOT----(6 November 2020 12:02:18) CuisUniversity-4365.image priorSource: 19266749!

----QUIT----(6 November 2020 12:03:18) CuisUniversity-4365.image priorSource: 19281083!

----STARTUP---- (6 November 2020 20:23:14) as D:\facultad\Smalltalk\windows64\CuisUniversity-4365.image!

!Portfolio methodsFor: 'transactions' stamp: 'Federico 11/6/2020 20:31:39' prior: 50933649!
transactions
	^(nodes collect: [ :node | node transactions ]) flatten.
	! !

sarasa := OrderedCollection new.

sarasa add: 'hola'.
sarasa add: 'hola2'.
sarasa add: 'amo'. 
sarasa add: 'amo'. 
sarasa "an OrderedCollection('hola' 'hola2' 'amo' 'amo') "

sarasa findFirst: 'amo'
!

sarasa := OrderedCollection new.!

sarasa!

sarasa addAll: #(7 8 9)!

sarasa!

sarasa addAll: #(#(#(7 8 9)7 8 9)#(7 8 9)7 8 9)!

sarasa!

sarasa flatten!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'Federico 11/6/2020 20:37:25'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'Federico 11/6/2020 20:37:30'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'Federico 11/6/2020 20:37:30'!
PASSED!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'Federico 11/6/2020 20:37:30'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'Federico 11/6/2020 20:37:30'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'Federico 11/6/2020 20:37:30'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'Federico 11/6/2020 20:37:30'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'Federico 11/6/2020 20:37:30'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'Federico 11/6/2020 20:37:30'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'Federico 11/6/2020 20:37:30'!
PASSED!

sarasa := OrderedCollection new.!

sarasa addAll: #(1,2,3)!

sarasa!

sarasa!

sarasa add: 5!

sarasa !

sarasa detect: [:a | a > 3] ifNone: [false]!

sarasa add: 5!

sarasa := OrderedCollection new. !

sarasa add: 5!

sarasa add: 4!

sarasa add: 3!

sarasa add: 2!

sarasa add: 1!

sarasa detect: [:a | a > 3] ifNone: [false]!

sarasa detect: [:a | a > 7] ifNone: [false]!

sarasa detect: [:a | a > 7] ifNone: [false]!

sarasa!

sarasa detect: [:a | a > 7] ifNone: [false]!

sarasa detect: [:a | a > 4] ifNone: [false]!
!Portfolio methodsFor: 'testing' stamp: 'Federico 11/6/2020 20:41:39' prior: 50933129!
hasRegistered: aTransaction
	^(nodes select: [ :aNode | aNode  hasRegistered: aTransaction. ]) isEmpty.
! !

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'Federico 11/6/2020 20:41:42'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'Federico 11/6/2020 20:41:45'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'Federico 11/6/2020 20:41:45'!
PASSED!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'Federico 11/6/2020 20:41:45'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'Federico 11/6/2020 20:41:45'!
FAILURE!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'Federico 11/6/2020 20:41:45'!
FAILURE!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'Federico 11/6/2020 20:41:45'!
FAILURE!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'Federico 11/6/2020 20:41:45'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'Federico 11/6/2020 20:41:45'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'Federico 11/6/2020 20:41:46'!
PASSED!
!Portfolio methodsFor: 'testing' stamp: 'Federico 11/6/2020 20:42:34' prior: 50934264!
hasRegistered: aTransaction
	^(nodes select: [ :aNode | aNode  hasRegistered: aTransaction. ]) isEmpty not.
! !

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'Federico 11/6/2020 20:42:40'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'Federico 11/6/2020 20:42:40'!
PASSED!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'Federico 11/6/2020 20:42:40'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'Federico 11/6/2020 20:42:40'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'Federico 11/6/2020 20:42:40'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'Federico 11/6/2020 20:42:40'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'Federico 11/6/2020 20:42:40'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'Federico 11/6/2020 20:42:40'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'Federico 11/6/2020 20:42:40'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'Federico 11/6/2020 20:43:29'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'Federico 11/6/2020 20:43:29'!
PASSED!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'Federico 11/6/2020 20:43:29'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'Federico 11/6/2020 20:43:29'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'Federico 11/6/2020 20:43:29'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'Federico 11/6/2020 20:43:29'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'Federico 11/6/2020 20:43:29'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'Federico 11/6/2020 20:43:29'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'Federico 11/6/2020 20:43:29'!
PASSED!

----SNAPSHOT----(6 November 2020 20:44:07) CuisUniversity-4365.image priorSource: 19281176!
!Portfolio methodsFor: 'adding' stamp: 'Federico 11/6/2020 20:51:43' prior: 50932387!
add: aPortfolio
	nodes add: aPortfolio.! !
!Portfolio methodsFor: 'adding' stamp: 'Federico 11/6/2020 20:53:34' prior: 50934384!
add: aPortfolio
	nodes add: aPortfolio.! !

Object subclass: #PortfolioRegister
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioRegister category: #'Portfolio-Ejercicio' stamp: 'Federico 11/6/2020 20:56:50'!
Object subclass: #PortfolioRegister
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

PortfolioRegister subclass: #Portfolio
	instanceVariableNames: 'nodes'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: #'Portfolio-Ejercicio' stamp: 'Federico 11/6/2020 20:57:06'!
PortfolioRegister subclass: #Portfolio
	instanceVariableNames: 'nodes'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

PortfolioRegister subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ReceptiveAccount category: #'Portfolio-Ejercicio' stamp: 'Federico 11/6/2020 20:57:16'!
PortfolioRegister subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioRegister methodsFor: 'no messages' stamp: 'Federico 11/6/2020 20:58:26'!
transactions 
	self subclassResponsibility ! !
!PortfolioRegister methodsFor: 'transactions' stamp: 'Federico 11/6/2020 20:58:54'!
balance
	self subclassResponsibility ! !

	self subclassResponsibility !
!PortfolioRegister methodsFor: 'balance' stamp: 'Federico 11/6/2020 20:59:26'!
hasRegistered: aRegister
	self subclassResponsibility ! !
!PortfolioRegister methodsFor: 'testing' stamp: 'Federico 11/6/2020 21:00:28' prior: 50934442!
hasRegistered: aTransaction
	self subclassResponsibility ! !

!classDefinition: #Portfolio category: #'Portfolio-Ejercicio' stamp: 'Federico 11/6/2020 21:01:51'!
PortfolioRegister subclass: #Portfolio
	instanceVariableNames: 'portfolioRegisters'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Federico 11/6/2020 21:01:52' prior: 50934194 overrides: 50934432!
transactions
	^(portfolioRegisters collect: [ :node | node transactions ]) flatten.
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Federico 11/6/2020 21:01:52' prior: 50932375 overrides: 16896425!
initialize
	portfolioRegisters := OrderedCollection new.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Federico 11/6/2020 21:01:52' prior: 50934308 overrides: 50934447!
hasRegistered: aTransaction
	^(portfolioRegisters select: [ :aNode | aNode  hasRegistered: aTransaction. ]) isEmpty not.
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Federico 11/6/2020 21:01:52' prior: 50932475 overrides: 50934437!
balance
	^portfolioRegisters sum: [ :aNode | aNode balance.] ifEmpty: [0].
	
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Federico 11/6/2020 21:01:52' prior: 50934389!
add: aPortfolio
	portfolioRegisters add: aPortfolio.! !

----SNAPSHOT----(6 November 2020 21:02:10) CuisUniversity-4365.image priorSource: 19287369!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'Federico 11/6/2020 21:02:33'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'Federico 11/6/2020 21:02:33'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'Federico 11/6/2020 21:02:34'!
PASSED!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'Federico 11/6/2020 21:02:34'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'Federico 11/6/2020 21:02:34'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'Federico 11/6/2020 21:02:34'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'Federico 11/6/2020 21:02:34'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'Federico 11/6/2020 21:02:34'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'Federico 11/6/2020 21:02:34'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'Federico 11/6/2020 21:02:34'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'Federico 11/6/2020 21:02:44'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'Federico 11/6/2020 21:02:44'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'Federico 11/6/2020 21:02:44'!
PASSED!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'Federico 11/6/2020 21:02:44'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'Federico 11/6/2020 21:02:44'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'Federico 11/6/2020 21:02:45'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'Federico 11/6/2020 21:02:45'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'Federico 11/6/2020 21:02:45'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'Federico 11/6/2020 21:02:45'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'Federico 11/6/2020 21:02:45'!
PASSED!
!PortfolioTest methodsFor: 'transactions tests' stamp: 'Federico 11/6/2020 21:27:44'!
test10
	| aPortfolio |
	
	aPortfolio := Portfolio new.
	
	aPortfolio add: aPortfolio 

! !
!PortfolioTest methodsFor: 'transactions tests' stamp: 'Federico 11/6/2020 21:31:22' prior: 50934570!
test10
	| aPortfolio |
	
	aPortfolio := Portfolio new.
	
	self 
		should: [ aPortfolio add: aPortfolio. ]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedPortfolioRegistersErrorDescription
! !

!testRun: #PortfolioTest #test10 stamp: 'Federico 11/6/2020 21:31:28'!
ERROR!
!Portfolio class methodsFor: 'error descriptions' stamp: 'Federico 11/6/2020 21:32:02'!
shouldNotHaveRepeatedPortfolioRegistersErrorDescription
	self shouldBeImplemented.! !
!Portfolio class methodsFor: 'error descriptions' stamp: 'Federico 11/6/2020 21:33:19' prior: 50934589!
shouldNotHaveRepeatedPortfolioRegistersErrorDescription
	^'A portfolio should not have repeated portfolio registers'! !

!testRun: #PortfolioTest #test10 stamp: 'Federico 11/6/2020 21:33:21'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'Federico 11/6/2020 21:35:20' prior: 50934488!
add: aPortfolio
	self = aPortfolio ifTrue: [self error: self class shouldNotHaveRepeatedPortfolioRegistersErrorDescription ].
	portfolioRegisters add: aPortfolio.! !
!Portfolio methodsFor: 'adding' stamp: 'Federico 11/6/2020 21:35:24' prior: 50934604!
add: aPortfolio
	self = aPortfolio ifTrue: [self error: self class shouldNotHaveRepeatedPortfolioRegistersErrorDescription ].
	
	portfolioRegisters add: aPortfolio.! !

!testRun: #PortfolioTest #test10 stamp: 'Federico 11/6/2020 21:35:27'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'Federico 11/6/2020 21:35:27'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'Federico 11/6/2020 21:35:27'!
PASSED!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'Federico 11/6/2020 21:35:27'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'Federico 11/6/2020 21:35:27'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'Federico 11/6/2020 21:35:27'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'Federico 11/6/2020 21:35:27'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'Federico 11/6/2020 21:35:27'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'Federico 11/6/2020 21:35:27'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'Federico 11/6/2020 21:35:27'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'Federico 11/6/2020 21:35:27'!
PASSED!

----SNAPSHOT----(6 November 2020 21:35:39) CuisUniversity-4365.image priorSource: 19290935!
!PortfolioTest methodsFor: 'transactions tests' stamp: 'Federico 11/6/2020 21:37:22'!
test11
	| aPortfolio sec|
	
	aPortfolio := Portfolio new.
	
	self 
		should: [ aPortfolio add: aPortfolio. ]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedPortfolioRegistersErrorDescription
! !
!PortfolioTest methodsFor: 'transactions tests' stamp: 'Federico 11/6/2020 21:38:05' prior: 50934662!
test11
	| aPortfolio portfolioRepetido |
	
	aPortfolio := Portfolio new.
	portfolioRepetido  := Portfolio new.
	
	aPortfolio add: portfolioRepetido.
	
	self 
		should: [ aPortfolio add: portfolioRepetido. ]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedPortfolioRegistersErrorDescription
! !
!PortfolioTest methodsFor: 'transactions tests' stamp: 'Federico 11/6/2020 21:38:59' prior: 50934672!
test11
	| aPortfolio aRepeatedPortfolioRegister |
	
	aPortfolio := Portfolio new.
	aRepeatedPortfolioRegister  := Portfolio new.
	
	aPortfolio add: aRepeatedPortfolioRegister.
	
	self 
		should: [ aPortfolio add: aRepeatedPortfolioRegister. ]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedPortfolioRegistersErrorDescription
! !
!PortfolioTest methodsFor: 'transactions tests' stamp: 'Federico 11/6/2020 21:39:55' prior: 50934685!
test11
	| aPortfolio aRepeatedPortfolioRegister |
	
	aPortfolio := Portfolio new.
	aRepeatedPortfolioRegister  := Portfolio new.
	
	aPortfolio add: aRepeatedPortfolioRegister.
	
	self 
		should: [ aPortfolio add: aRepeatedPortfolioRegister. ]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedPortfolioRegistersErrorDescription
! !
!Portfolio methodsFor: 'adding' stamp: 'Federico 11/6/2020 21:40:06' prior: 50934612!
add: aPortfolioRegister
	self = aPortfolioRegister ifTrue: [self error: self class shouldNotHaveRepeatedPortfolioRegistersErrorDescription ].
	
	portfolioRegisters add: aPortfolioRegister.! !

!testRun: #PortfolioTest #test11 stamp: 'Federico 11/6/2020 21:40:23'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'Federico 11/6/2020 21:43:33' prior: 50934714!
add: aPortfolioRegister

	(self = aPortfolioRegister or: [portfolioRegisters includes: aPortfolioRegister])
	ifTrue: [self error: self class shouldNotHaveRepeatedPortfolioRegistersErrorDescription ].
	
	
	portfolioRegisters add: aPortfolioRegister.! !
!Portfolio methodsFor: 'adding' stamp: 'Federico 11/6/2020 21:43:39' prior: 50934726!
add: aPortfolioRegister

	(self = aPortfolioRegister or: [portfolioRegisters includes: aPortfolioRegister])
		ifTrue: [self error: self class shouldNotHaveRepeatedPortfolioRegistersErrorDescription ].
	
	
	portfolioRegisters add: aPortfolioRegister.! !

!testRun: #PortfolioTest #test11 stamp: 'Federico 11/6/2020 21:43:52'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'Federico 11/6/2020 21:43:53'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'Federico 11/6/2020 21:43:53'!
PASSED!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'Federico 11/6/2020 21:43:53'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'Federico 11/6/2020 21:43:53'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'Federico 11/6/2020 21:43:53'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'Federico 11/6/2020 21:43:53'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'Federico 11/6/2020 21:43:53'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'Federico 11/6/2020 21:43:53'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'Federico 11/6/2020 21:43:53'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'Federico 11/6/2020 21:43:53'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'Federico 11/6/2020 21:43:53'!
PASSED!
!PortfolioTest methodsFor: 'transactions tests' stamp: 'Federico 11/6/2020 21:49:10'!
test12

	| aPortfolio secondPortfolio aRepeatedPortfolioRegister |
	
	aPortfolio := Portfolio new.
	secondPortfolio  := Portfolio new.
	
	aRepeatedPortfolioRegister := ReceptiveAccount new.
	
	secondPortfolio add: aRepeatedPortfolioRegister.
	aPortfolio add: aRepeatedPortfolioRegister.
	
	
	self 
		should: [ aPortfolio add: aRepeatedPortfolioRegister. ]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedPortfolioRegistersErrorDescription
! !
!PortfolioTest methodsFor: 'transactions tests' stamp: 'Federico 11/6/2020 21:49:19' prior: 50934789!
test12

	| aPortfolio secondPortfolio aRepeatedPortfolioRegister |
	
	aPortfolio := Portfolio new.
	secondPortfolio  := Portfolio new.
	
	aRepeatedPortfolioRegister := ReceptiveAccount new.
	
	secondPortfolio add: aRepeatedPortfolioRegister.
	aPortfolio add: aRepeatedPortfolioRegister.
	
	self 
		should: [ aPortfolio add: secondPortfolio. ]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedPortfolioRegistersErrorDescription
! !

!testRun: #PortfolioTest #test12 stamp: 'Federico 11/6/2020 21:53:07'!
FAILURE!
!PortfolioTest methodsFor: 'transactions tests' stamp: 'Federico 11/6/2020 22:04:05'!
test13

	| aPortfolio secondPortfolio aRepeatedPortfolioRegister |
	
	aPortfolio := Portfolio new.
	secondPortfolio  := Portfolio new.
	
	aRepeatedPortfolioRegister := ReceptiveAccount new.
	
	secondPortfolio add: aRepeatedPortfolioRegister.
	aPortfolio add: aRepeatedPortfolioRegister.
	
	self 
		should: [ aPortfolio add: secondPortfolio. ]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedPortfolioRegistersErrorDescription
! !
!PortfolioTest methodsFor: 'transactions tests' stamp: 'Federico 11/6/2020 22:05:19' prior: 50934807!
test12

	| aPortfolio secondPortfolio |
	
	aPortfolio := Portfolio new.
	secondPortfolio  := Portfolio new.
	
	secondPortfolio add: aPortfolio.
	
	self 
		should: [aPortfolio add: secondPortfolio. 	]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedPortfolioRegistersErrorDescription
! !

!testRun: #PortfolioTest #test12 stamp: 'Federico 11/6/2020 22:05:29'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'Federico 11/6/2020 22:07:49' prior: 50934737!
add: aPortfolioRegister

	(self = aPortfolioRegister 
		or: [portfolioRegisters includes: aPortfolioRegister]
		or: [aPortfolioRegister includes: self]
	)
		ifTrue: [self error: self class shouldNotHaveRepeatedPortfolioRegistersErrorDescription ].
	
	
	portfolioRegisters add: aPortfolioRegister.! !

!testRun: #PortfolioTest #test12 stamp: 'Federico 11/6/2020 22:07:50'!
FAILURE!

!testRun: #PortfolioTest #test12 stamp: 'Federico 11/6/2020 22:08:05'!
FAILURE!

!testRun: #PortfolioTest #test12 stamp: 'Federico 11/6/2020 22:08:30'!
ERROR!

!testRun: #PortfolioTest #test12 stamp: 'Federico 11/6/2020 22:08:54'!
ERROR!
!Portfolio methodsFor: 'testing' stamp: 'Federico 11/6/2020 22:09:05'!
includes: aPortfolio 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'testing' stamp: 'Federico 11/6/2020 22:09:18' prior: 50934882!
includes: aPortfolio 
	^true.! !

!testRun: #PortfolioTest #test12 stamp: 'Federico 11/6/2020 22:09:20'!
ERROR!
!Portfolio methodsFor: 'testing' stamp: 'Federico 11/6/2020 22:10:42' prior: 50934887!
includes: aPortfolioRegister
	^portfolioRegisters includes: aPortfolioRegister.! !

!testRun: #PortfolioTest #test12 stamp: 'Federico 11/6/2020 22:10:44'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'Federico 11/6/2020 22:10:44'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'Federico 11/6/2020 22:10:44'!
ERROR!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'Federico 11/6/2020 22:10:44'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'Federico 11/6/2020 22:10:44'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'Federico 11/6/2020 22:10:44'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'Federico 11/6/2020 22:10:44'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'Federico 11/6/2020 22:10:44'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'Federico 11/6/2020 22:10:44'!
ERROR!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'Federico 11/6/2020 22:10:44'!
ERROR!

!testRun: #PortfolioTest #test10 stamp: 'Federico 11/6/2020 22:10:44'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'Federico 11/6/2020 22:10:44'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'Federico 11/6/2020 22:10:44'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'Federico 11/6/2020 22:10:45'!
ERROR!
!Portfolio methodsFor: 'testing' stamp: 'Federico 11/6/2020 22:13:12' prior: 50934894!
includes: aPortfolioRegister
	^portfolioRegisters includes: aPortfolioRegister.! !

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'Federico 11/6/2020 22:13:16'!
ERROR!
!ReceptiveAccount methodsFor: 'testing' stamp: 'Federico 11/6/2020 22:14:36'!
includes: aPortfolioRegister
	^self = aPortfolioRegister.
! !

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'Federico 11/6/2020 22:14:43'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'Federico 11/6/2020 22:14:54'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'Federico 11/6/2020 22:14:57'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'Federico 11/6/2020 22:15:00'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'Federico 11/6/2020 22:15:00'!
PASSED!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'Federico 11/6/2020 22:15:00'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'Federico 11/6/2020 22:15:00'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'Federico 11/6/2020 22:15:00'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'Federico 11/6/2020 22:15:00'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'Federico 11/6/2020 22:15:00'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'Federico 11/6/2020 22:15:00'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'Federico 11/6/2020 22:15:00'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'Federico 11/6/2020 22:15:00'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'Federico 11/6/2020 22:15:00'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'Federico 11/6/2020 22:15:00'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'Federico 11/6/2020 22:15:00'!
FAILURE!

!testRun: #PortfolioTest #test13 stamp: 'Federico 11/6/2020 22:15:00'!
FAILURE!

----SNAPSHOT----(6 November 2020 22:15:46) CuisUniversity-4365.image priorSource: 19296244!

----STARTUP---- (7 November 2020 15:55:35) as D:\facultad\Smalltalk\windows64\CuisUniversity-4365.image!


----SNAPSHOT----(7 November 2020 15:55:43) CuisUniversity-4365.image priorSource: 19307684!

!testRun: #PortfolioTest #test13 stamp: 'Federico 11/7/2020 16:03:47'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'Federico 11/7/2020 16:08:10' prior: 50934860!
add: aPortfolioRegister

	(self = aPortfolioRegister 
		or: [portfolioRegisters includes: aPortfolioRegister]
		or: [aPortfolioRegister includes: self]
		or: [portfolioRegisters select: [ :selfportfolioRegisters | selfportfolioRegisters includes: aPortfolioRegister ]]
	)
		ifTrue: [self error: self class shouldNotHaveRepeatedPortfolioRegistersErrorDescription ].
	
	
	portfolioRegisters add: aPortfolioRegister.! !

!testRun: #PortfolioTest #test13 stamp: 'Federico 11/7/2020 16:08:16'!
FAILURE!

!testRun: #PortfolioTest #test13 stamp: 'Federico 11/7/2020 16:08:36'!
ERROR!

!testRun: #PortfolioTest #test13 stamp: 'Federico 11/7/2020 16:08:42'!
ERROR!

!testRun: #PortfolioTest #test13 stamp: 'Federico 11/7/2020 16:08:46'!
ERROR!
!Portfolio methodsFor: 'adding' stamp: 'Federico 11/7/2020 16:09:20' prior: 50935028!
add: aPortfolioRegister

	(self = aPortfolioRegister 
		or: [portfolioRegisters includes: aPortfolioRegister]
		or: [aPortfolioRegister includes: self]
		or: [portfolioRegisters select: [ :selfportfolioRegisters | aPortfolioRegister includes: selfportfolioRegisters ]]
	)
		ifTrue: [self error: self class shouldNotHaveRepeatedPortfolioRegistersErrorDescription ].
	
	
	portfolioRegisters add: aPortfolioRegister.! !
!Portfolio methodsFor: 'adding' stamp: 'Federico 11/7/2020 16:09:34' prior: 50935054!
add: aPortfolioRegister

	(self = aPortfolioRegister 
		or: [portfolioRegisters includes: aPortfolioRegister]
		or: [aPortfolioRegister includes: self]
		or: [(portfolioRegisters select: [ :selfportfolioRegisters | aPortfolioRegister includes: selfportfolioRegisters ]) isEmpty not]
	)
		ifTrue: [self error: self class shouldNotHaveRepeatedPortfolioRegistersErrorDescription ].
	
	
	portfolioRegisters add: aPortfolioRegister.! !
!PortfolioTest methodsFor: 'transactions tests' stamp: 'Federico 11/7/2020 16:10:02' prior: 50934827!
test13

	| aPortfolio secondPortfolio aRepeatedPortfolioRegister |
	
	aPortfolio := Portfolio new.
	secondPortfolio  := Portfolio new.
	
	aRepeatedPortfolioRegister := ReceptiveAccount new.
	
	secondPortfolio add: aRepeatedPortfolioRegister.
	aPortfolio add: aRepeatedPortfolioRegister.
	
	self 
		should: [ aPortfolio add: secondPortfolio. ]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedPortfolioRegistersErrorDescription
! !

!testRun: #PortfolioTest #test13 stamp: 'Federico 11/7/2020 16:10:02'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'Federico 11/7/2020 16:10:02'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'Federico 11/7/2020 16:10:02'!
PASSED!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'Federico 11/7/2020 16:10:02'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'Federico 11/7/2020 16:10:02'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'Federico 11/7/2020 16:10:02'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'Federico 11/7/2020 16:10:03'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'Federico 11/7/2020 16:10:03'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'Federico 11/7/2020 16:10:03'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'Federico 11/7/2020 16:10:03'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'Federico 11/7/2020 16:10:03'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'Federico 11/7/2020 16:10:03'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'Federico 11/7/2020 16:10:03'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'Federico 11/7/2020 16:10:03'!
PASSED!
!Portfolio methodsFor: 'testing' stamp: 'Federico 11/7/2020 16:13:43'!
hasPortfolioRegister: aPortfolioRegister
	^portfolioRegisters includes: aPortfolioRegister.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Federico 11/7/2020 16:13:43' prior: 50934945!
includes: aPortfolioRegister
	^portfolioRegisters hasPortfolioRegister: aPortfolioRegister.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Federico 11/7/2020 16:13:43' prior: 50935070!
add: aPortfolioRegister

	(self = aPortfolioRegister 
		or: [portfolioRegisters hasPortfolioRegister: aPortfolioRegister]
		or: [aPortfolioRegister hasPortfolioRegister: self]
		or: [(portfolioRegisters select: [ :selfportfolioRegisters | aPortfolioRegister hasPortfolioRegister: selfportfolioRegisters ]) isEmpty not]
	)
		ifTrue: [self error: self class shouldNotHaveRepeatedPortfolioRegistersErrorDescription ].
	
	
	portfolioRegisters add: aPortfolioRegister.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Federico 11/7/2020 16:13:43' prior: 50935150!
hasPortfolioRegister: aPortfolioRegister
	^portfolioRegisters hasPortfolioRegister: aPortfolioRegister.! !

!methodRemoval: Portfolio #includes: stamp: 'Federico 11/7/2020 16:13:43'!
includes: aPortfolioRegister
	^portfolioRegisters hasPortfolioRegister: aPortfolioRegister.!
!Portfolio methodsFor: 'adding' stamp: 'Federico 11/7/2020 16:14:41' prior: 50935164!
add: aPortfolioRegister

	(self = aPortfolioRegister 
		or: [portfolioRegisters includes: aPortfolioRegister]
		or: [aPortfolioRegister hasPortfolioRegister: self]
		or: [(portfolioRegisters select: [ :selfportfolioRegisters | aPortfolioRegister hasPortfolioRegister: selfportfolioRegisters ]) isEmpty not]
	)
		ifTrue: [self error: self class shouldNotHaveRepeatedPortfolioRegistersErrorDescription ].
	
	
	portfolioRegisters add: aPortfolioRegister.! !
!Portfolio methodsFor: 'testing' stamp: 'Federico 11/7/2020 16:14:54' prior: 50935182!
hasPortfolioRegister: aPortfolioRegister
	^portfolioRegisters includes: aPortfolioRegister.! !

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'Federico 11/7/2020 16:15:06'!
ERROR!
!ReceptiveAccount methodsFor: 'testing' stamp: 'Federico 11/7/2020 16:15:32'!
hasPortfolioRegisters: aPortfolioRegister
	^self = aPortfolioRegister.
! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Federico 11/7/2020 16:15:33' prior: 50931526 overrides: 50934447!
hasRegistered: aTransaction

	^ transactions hasPortfolioRegisters: aTransaction 
! !

!methodRemoval: ReceptiveAccount #includes: stamp: 'Federico 11/7/2020 16:15:33'!
includes: aPortfolioRegister
	^self = aPortfolioRegister.
!
!ReceptiveAccount methodsFor: 'testing' stamp: 'Federico 11/7/2020 16:15:43' prior: 50935228 overrides: 50934447!
hasRegistered: aTransaction

	^ transactions includes: aTransaction 
! !

!testRun: #PortfolioTest #test11 stamp: 'Federico 11/7/2020 16:15:54'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'Federico 11/7/2020 16:15:54'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'Federico 11/7/2020 16:15:54'!
ERROR!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'Federico 11/7/2020 16:15:54'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'Federico 11/7/2020 16:15:54'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'Federico 11/7/2020 16:15:55'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'Federico 11/7/2020 16:15:55'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'Federico 11/7/2020 16:15:55'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'Federico 11/7/2020 16:15:55'!
ERROR!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'Federico 11/7/2020 16:15:55'!
ERROR!

!testRun: #PortfolioTest #test10 stamp: 'Federico 11/7/2020 16:15:55'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'Federico 11/7/2020 16:15:55'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'Federico 11/7/2020 16:15:55'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'Federico 11/7/2020 16:15:55'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'Federico 11/7/2020 16:16:09'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'Federico 11/7/2020 16:16:09'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'Federico 11/7/2020 16:16:35'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'Federico 11/7/2020 16:16:50'!
ERROR!
!ReceptiveAccount methodsFor: 'testing' stamp: 'Federico 11/7/2020 16:18:24'!
hasPortfolioRegister: aPortfolioRegister
	^self = aPortfolioRegister.
! !

!methodRemoval: ReceptiveAccount #hasPortfolioRegisters: stamp: 'Federico 11/7/2020 16:18:28'!
hasPortfolioRegisters: aPortfolioRegister
	^self = aPortfolioRegister.
!

!testRun: #PortfolioTest #test10 stamp: 'Federico 11/7/2020 16:18:36'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'Federico 11/7/2020 16:18:36'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'Federico 11/7/2020 16:18:36'!
PASSED!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'Federico 11/7/2020 16:18:36'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'Federico 11/7/2020 16:18:36'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'Federico 11/7/2020 16:18:36'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'Federico 11/7/2020 16:18:36'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'Federico 11/7/2020 16:18:36'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'Federico 11/7/2020 16:18:36'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'Federico 11/7/2020 16:18:36'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'Federico 11/7/2020 16:18:36'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'Federico 11/7/2020 16:18:36'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'Federico 11/7/2020 16:18:37'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'Federico 11/7/2020 16:18:37'!
PASSED!
!Portfolio methodsFor: 'adding' stamp: 'Federico 11/7/2020 16:27:24' prior: 50935194!
add: aPortfolioRegister

	(self = aPortfolioRegister 
		or: [portfolioRegisters includes: aPortfolioRegister] 
		
		or: [aPortfolioRegister hasPortfolioRegister: self] "Hijos de aPortfolioRegister"
		or: [(portfolioRegisters select: [ :selfportfolioRegisters | aPortfolioRegister hasPortfolioRegister: selfportfolioRegisters ]) isEmpty not] "Hijos de hijos de aPortfolioRegister"
	)
		ifTrue: [self error: self class shouldNotHaveRepeatedPortfolioRegistersErrorDescription ].
	
	
	portfolioRegisters add: aPortfolioRegister.! !
!Portfolio methodsFor: 'adding' stamp: 'Federico 11/7/2020 16:27:28' prior: 50935363!
add: aPortfolioRegister

	(self = aPortfolioRegister 
		or: [portfolioRegisters includes: aPortfolioRegister] 
		
		or: [aPortfolioRegister hasPortfolioRegister: self] "Hijos de aPortfolioRegister"
		or: [(portfolioRegisters select: [ :selfportfolioRegisters | aPortfolioRegister hasPortfolioRegister: selfportfolioRegisters ]) isEmpty not] "Hijos de hijos de aPortfolioRegister"
	)
		ifTrue: [self error: self class shouldNotHaveRepeatedPortfolioRegistersErrorDescription ].
	
	
	portfolioRegisters add: aPortfolioRegister.! !
!PortfolioTest methodsFor: 'transactions tests' stamp: 'Federico 11/7/2020 16:30:15' prior: 50935087!
test13

	| aPortfolio secondPortfolio thirdPortfolio aRepeatedPortfolioRegister |
	
	aPortfolio := Portfolio new.
	secondPortfolio  := Portfolio new.
	thirdPortfolio  := Portfolio new.
	
	aRepeatedPortfolioRegister := ReceptiveAccount new.
		
	aPortfolio add: aRepeatedPortfolioRegister.
	thirdPortfolio add: aRepeatedPortfolioRegister.
	
	secondPortfolio add: thirdPortfolio. 

	self 
		should: [aPortfolio add: secondPortfolio.]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedPortfolioRegistersErrorDescription
! !
!PortfolioTest methodsFor: 'transactions tests' stamp: 'Federico 11/7/2020 16:30:59' prior: 50935403!
test13

	| aPortfolio secondPortfolio thirdPortfolio aRepeatedPortfolioRegister |
	
	aPortfolio := Portfolio new.
	secondPortfolio  := Portfolio new.
	thirdPortfolio  := Portfolio new.
	
	aRepeatedPortfolioRegister := ReceptiveAccount new.
		
	aPortfolio add: aRepeatedPortfolioRegister.
	thirdPortfolio add: aRepeatedPortfolioRegister.
	
	secondPortfolio add: thirdPortfolio. 

	self 
		should: [aPortfolio add: secondPortfolio.]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedPortfolioRegistersErrorDescription
! !

!testRun: #PortfolioTest #test13 stamp: 'Federico 11/7/2020 16:31:04'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'Federico 11/7/2020 16:32:52' prior: 50935383!
add: aPortfolioRegister

	(self = aPortfolioRegister 
		or: [portfolioRegisters includes: aPortfolioRegister] 
		
		or: [aPortfolioRegister hasPortfolioRegister: self] "Hijos de aPortfolioRegister"
		or: [(portfolioRegisters select: [ :selfportfolioRegisters | aPortfolioRegister hasPortfolioRegister: selfportfolioRegisters ]) isEmpty not] "Hijos de hijos de aPortfolioRegister"
	)
		ifTrue: [self error: self class shouldNotHaveRepeatedPortfolioRegistersErrorDescription ].
	
	
	portfolioRegisters add: aPortfolioRegister.! !
!Portfolio methodsFor: 'testing' stamp: 'Federico 11/7/2020 16:35:32' prior: 50935211!
hasPortfolioRegister: aPortfolioRegister
	"portfolioRegisters includes: aPortfolioRegister."
	^(portfolioRegisters select: [ :selfportfolioRegisters | selfportfolioRegisters  hasPortfolioRegister: aPortfolioRegister ]) isEmpty not
	! !
!Portfolio methodsFor: 'testing' stamp: 'Federico 11/7/2020 16:36:34' prior: 50935465!
hasPortfolioRegister: aPortfolioRegister
	^(portfolioRegisters includes: aPortfolioRegister) or: 
	[(portfolioRegisters select: [ :selfportfolioRegisters | selfportfolioRegisters  hasPortfolioRegister: aPortfolioRegister ]) isEmpty not]
	! !

!testRun: #PortfolioTest #test13 stamp: 'Federico 11/7/2020 16:36:57'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'Federico 11/7/2020 16:36:57'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'Federico 11/7/2020 16:36:57'!
PASSED!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'Federico 11/7/2020 16:36:57'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'Federico 11/7/2020 16:36:57'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'Federico 11/7/2020 16:36:57'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'Federico 11/7/2020 16:36:57'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'Federico 11/7/2020 16:36:57'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'Federico 11/7/2020 16:36:57'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'Federico 11/7/2020 16:36:57'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'Federico 11/7/2020 16:36:57'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'Federico 11/7/2020 16:36:57'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'Federico 11/7/2020 16:36:57'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'Federico 11/7/2020 16:36:57'!
PASSED!

----SNAPSHOT----(7 November 2020 16:37:06) CuisUniversity-4365.image priorSource: 19307884!
!Portfolio methodsFor: 'adding' stamp: 'Federico 11/7/2020 16:37:32' prior: 50935445!
add: aPortfolioRegister

	(self = aPortfolioRegister 
		or: [portfolioRegisters includes: aPortfolioRegister] 
		or: [self hasPortfolioRegister: aPortfolioRegister]
		or: [aPortfolioRegister hasPortfolioRegister: self] "Hijos de aPortfolioRegister"
	)
		ifTrue: [self error: self class shouldNotHaveRepeatedPortfolioRegistersErrorDescription ].
	
	
	portfolioRegisters add: aPortfolioRegister.! !

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'Federico 11/7/2020 16:37:38'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'Federico 11/7/2020 16:37:38'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'Federico 11/7/2020 16:37:38'!
PASSED!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'Federico 11/7/2020 16:37:38'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'Federico 11/7/2020 16:37:38'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'Federico 11/7/2020 16:37:38'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'Federico 11/7/2020 16:37:38'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'Federico 11/7/2020 16:37:38'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'Federico 11/7/2020 16:37:38'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'Federico 11/7/2020 16:37:38'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'Federico 11/7/2020 16:37:38'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'Federico 11/7/2020 16:37:39'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'Federico 11/7/2020 16:37:39'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'Federico 11/7/2020 16:37:39'!
FAILURE!

!testRun: #PortfolioTest #test13 stamp: 'Federico 11/7/2020 16:37:39'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'Federico 11/7/2020 16:38:07' prior: 50935536!
add: aPortfolioRegister

	(self = aPortfolioRegister 
		or: [portfolioRegisters includes: aPortfolioRegister] 
		
		or: [self hasPortfolioRegister: aPortfolioRegister] "Hijos de self"
		or: [aPortfolioRegister hasPortfolioRegister: self] "Hijos de aPortfolioRegister"
	)
		ifTrue: [self error: self class shouldNotHaveRepeatedPortfolioRegistersErrorDescription ].
	
	
	portfolioRegisters add: aPortfolioRegister.! !
!Portfolio methodsFor: 'testing' stamp: 'Federico 11/7/2020 16:38:42' prior: 50935476!
hasPortfolioRegister: aPortfolioRegister
	^(portfolioRegisters includes: aPortfolioRegister)
	or: [(portfolioRegisters select: [ :selfportfolioRegisters | selfportfolioRegisters  hasPortfolioRegister: aPortfolioRegister ]) isEmpty not]
	! !
!Portfolio methodsFor: 'adding' stamp: 'Federico 11/7/2020 16:38:48' prior: 50935601!
add: aPortfolioRegister

	(self = aPortfolioRegister 
		or: [portfolioRegisters includes: aPortfolioRegister] 
		
		or: [aPortfolioRegister hasPortfolioRegister: self] "Hijos de aPortfolioRegister"
	)
		ifTrue: [self error: self class shouldNotHaveRepeatedPortfolioRegistersErrorDescription ].
	
	
	portfolioRegisters add: aPortfolioRegister.! !
!Portfolio methodsFor: 'testing' stamp: 'Federico 11/7/2020 16:39:00' prior: 50935617!
hasPortfolioRegister: aPortfolioRegister
	^(portfolioRegisters includes: aPortfolioRegister)
	or: [(portfolioRegisters select: [ :selfportfolioRegisters | selfportfolioRegisters  hasPortfolioRegister: aPortfolioRegister ]) isEmpty not]
	or: [(portfolioRegisters select: [ :selfportfolioRegisters | aPortfolioRegister  hasPortfolioRegister: selfportfolioRegisters ]) isEmpty not]
	! !
!Portfolio methodsFor: 'testing' stamp: 'Federico 11/7/2020 16:39:10' prior: 50935642!
hasPortfolioRegister: aPortfolioRegister
	^(portfolioRegisters includes: aPortfolioRegister)
	or: [(portfolioRegisters select: [ :selfportfolioRegisters | selfportfolioRegisters  hasPortfolioRegister: aPortfolioRegister ]) isEmpty not]
	! !
!Portfolio methodsFor: 'adding' stamp: 'Federico 11/7/2020 16:39:16' prior: 50935628!
add: aPortfolioRegister

	(self = aPortfolioRegister 
		or: [portfolioRegisters includes: aPortfolioRegister] 
		
		or: [aPortfolioRegister hasPortfolioRegister: self] "Hijos de aPortfolioRegister"
		or: [(portfolioRegisters select: [ :selfportfolioRegisters | aPortfolioRegister  hasPortfolioRegister: selfportfolioRegisters ]) isEmpty not]
	)
		ifTrue: [self error: self class shouldNotHaveRepeatedPortfolioRegistersErrorDescription ].
	
	
	portfolioRegisters add: aPortfolioRegister.! !

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'Federico 11/7/2020 16:39:22'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'Federico 11/7/2020 16:39:22'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'Federico 11/7/2020 16:39:22'!
PASSED!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'Federico 11/7/2020 16:39:22'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'Federico 11/7/2020 16:39:22'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'Federico 11/7/2020 16:39:22'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'Federico 11/7/2020 16:39:22'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'Federico 11/7/2020 16:39:22'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'Federico 11/7/2020 16:39:22'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'Federico 11/7/2020 16:39:22'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'Federico 11/7/2020 16:39:22'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'Federico 11/7/2020 16:39:22'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'Federico 11/7/2020 16:39:22'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'Federico 11/7/2020 16:39:22'!
PASSED!
!PortfolioTest methodsFor: 'transactions tests' stamp: 'Federico 11/7/2020 16:39:49'!
test14

	| aPortfolio secondPortfolio thirdPortfolio aRepeatedPortfolioRegister |
	
	aPortfolio := Portfolio new.
	secondPortfolio  := Portfolio new.
	thirdPortfolio  := Portfolio new.
	
	aRepeatedPortfolioRegister := ReceptiveAccount new.
		
	aPortfolio add: aRepeatedPortfolioRegister.
	thirdPortfolio add: aRepeatedPortfolioRegister.
	
	secondPortfolio add: thirdPortfolio. 

	self 
		should: [aPortfolio add: secondPortfolio.]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedPortfolioRegistersErrorDescription
! !
!PortfolioTest methodsFor: 'transactions tests' stamp: 'Federico 11/7/2020 16:10:02' prior: 50935423!
test13

	| aPortfolio secondPortfolio aRepeatedPortfolioRegister |
	
	aPortfolio := Portfolio new.
	secondPortfolio  := Portfolio new.
	
	aRepeatedPortfolioRegister := ReceptiveAccount new.
	
	secondPortfolio add: aRepeatedPortfolioRegister.
	aPortfolio add: aRepeatedPortfolioRegister.
	
	self 
		should: [ aPortfolio add: secondPortfolio. ]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedPortfolioRegistersErrorDescription
! !

!testRun: #PortfolioTest #test13 stamp: 'Federico 11/7/2020 16:40:22'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'Federico 11/7/2020 16:40:22'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'Federico 11/7/2020 16:40:22'!
PASSED!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'Federico 11/7/2020 16:40:22'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'Federico 11/7/2020 16:40:22'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'Federico 11/7/2020 16:40:22'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'Federico 11/7/2020 16:40:22'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'Federico 11/7/2020 16:40:22'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'Federico 11/7/2020 16:40:22'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'Federico 11/7/2020 16:40:23'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'Federico 11/7/2020 16:40:23'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'Federico 11/7/2020 16:40:23'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'Federico 11/7/2020 16:40:23'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'Federico 11/7/2020 16:40:23'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'Federico 11/7/2020 16:40:23'!
PASSED!
!PortfolioTest methodsFor: 'transactions tests' stamp: 'Federico 11/7/2020 16:42:01'!
test15

	| mainPortfolio secondPortfolio thirdPortfolio aRepeatedPortfolioRegister |
	
	mainPortfolio := Portfolio new.
	secondPortfolio  := Portfolio new.
	thirdPortfolio  := Portfolio new.
	
	aRepeatedPortfolioRegister := ReceptiveAccount new.
		
	secondPortfolio add: aRepeatedPortfolioRegister.
	thirdPortfolio add: aRepeatedPortfolioRegister.
	
	mainPortfolio add: secondPortfolio. 

	self 
		should: [mainPortfolio add: thirdPortfolio.]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedPortfolioRegistersErrorDescription
! !

!testRun: #PortfolioTest #test15 stamp: 'Federico 11/7/2020 16:42:05'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'Federico 11/7/2020 16:42:27' prior: 50935668!
add: aPortfolioRegister

	(self = aPortfolioRegister 
		or: [portfolioRegisters includes: aPortfolioRegister] 
		or: [self hasPortfolioRegister: aPortfolioRegister]
		or: [aPortfolioRegister hasPortfolioRegister: self] "Hijos de aPortfolioRegister"
		or: [(portfolioRegisters select: [ :selfportfolioRegisters | aPortfolioRegister  hasPortfolioRegister: selfportfolioRegisters ]) isEmpty not]
	)
		ifTrue: [self error: self class shouldNotHaveRepeatedPortfolioRegistersErrorDescription ].
	
	
	portfolioRegisters add: aPortfolioRegister.! !

!testRun: #PortfolioTest #test15 stamp: 'Federico 11/7/2020 16:42:29'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'Federico 11/7/2020 16:42:43' prior: 50935843!
add: aPortfolioRegister

	(self = aPortfolioRegister 
		or: [portfolioRegisters includes: aPortfolioRegister] 

		or: [aPortfolioRegister hasPortfolioRegister: self] "Hijos de aPortfolioRegister"
		or: [(portfolioRegisters select: [ :selfportfolioRegisters | aPortfolioRegister  hasPortfolioRegister: selfportfolioRegisters ]) isEmpty not]
	)
		ifTrue: [self error: self class shouldNotHaveRepeatedPortfolioRegistersErrorDescription ].
	
	
	portfolioRegisters add: aPortfolioRegister.! !
!Portfolio methodsFor: 'adding' stamp: 'Federico 11/7/2020 16:48:24' prior: 50935866!
add: aPortfolioRegister

	(self = aPortfolioRegister 

		or: [aPortfolioRegister hasPortfolioRegister: self] 
		
		"Compara Hijos de aPortfolioRegister CONTRA self"
		
		or: [(portfolioRegisters select: [ :selfportfolioRegisters | aPortfolioRegister  hasPortfolioRegister: selfportfolioRegisters ]) isEmpty not] 
		
		"Compara Hijos de aPortfolioRegister CONTRA hijos de self en portfolioRegisters"
	)
		ifTrue: [self error: self class shouldNotHaveRepeatedPortfolioRegistersErrorDescription ].
	
	
	portfolioRegisters add: aPortfolioRegister.! !

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'Federico 11/7/2020 16:48:28'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'Federico 11/7/2020 16:48:28'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'Federico 11/7/2020 16:48:28'!
PASSED!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'Federico 11/7/2020 16:48:28'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'Federico 11/7/2020 16:48:28'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'Federico 11/7/2020 16:48:28'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'Federico 11/7/2020 16:48:28'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'Federico 11/7/2020 16:48:28'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'Federico 11/7/2020 16:48:28'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'Federico 11/7/2020 16:48:28'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'Federico 11/7/2020 16:48:29'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'Federico 11/7/2020 16:48:29'!
FAILURE!

!testRun: #PortfolioTest #test12 stamp: 'Federico 11/7/2020 16:48:29'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'Federico 11/7/2020 16:48:29'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'Federico 11/7/2020 16:48:29'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'Federico 11/7/2020 16:48:29'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'Federico 11/7/2020 16:42:43' prior: 50935884!
add: aPortfolioRegister

	(self = aPortfolioRegister 
		or: [portfolioRegisters includes: aPortfolioRegister] 

		or: [aPortfolioRegister hasPortfolioRegister: self] "Hijos de aPortfolioRegister"
		or: [(portfolioRegisters select: [ :selfportfolioRegisters | aPortfolioRegister  hasPortfolioRegister: selfportfolioRegisters ]) isEmpty not]
	)
		ifTrue: [self error: self class shouldNotHaveRepeatedPortfolioRegistersErrorDescription ].
	
	
	portfolioRegisters add: aPortfolioRegister.! !
!Portfolio methodsFor: 'adding' stamp: 'Federico 11/7/2020 16:49:42' prior: 50935957!
add: aPortfolioRegister

	(self = aPortfolioRegister 
		or: [portfolioRegisters includes: aPortfolioRegister] 
		"Compara "

		or: [aPortfolioRegister hasPortfolioRegister: self] 
		"Compara hijos de aPortfolioRegister CONTRA self"
		
		or: [(portfolioRegisters select: [ :selfportfolioRegisters | aPortfolioRegister  hasPortfolioRegister: selfportfolioRegisters ]) isEmpty not]
		"Compara hijos de aPortfolioRegister CONTRA hijos de self"
	)
		ifTrue: [self error: self class shouldNotHaveRepeatedPortfolioRegistersErrorDescription ].
	
	
	portfolioRegisters add: aPortfolioRegister.! !
!Portfolio methodsFor: 'testing' stamp: 'Federico 11/7/2020 16:51:47' prior: 50935657!
hasPortfolioRegister: aPortfolioRegister
	^(portfolioRegisters includes: aPortfolioRegister)
	or: [(portfolioRegisters select: [ :selfportfolioRegisters | selfportfolioRegisters  hasPortfolioRegister: aPortfolioRegister ]) isEmpty not]
	or: [(portfolioRegisters select: [ :selfportfolioRegisters | aPortfolioRegister  hasPortfolioRegister: selfportfolioRegisters ]) isEmpty not]
	! !

!testRun: #PortfolioTest #test15 stamp: 'Federico 11/7/2020 16:52:18'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'Federico 11/7/2020 16:52:18'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'Federico 11/7/2020 16:52:18'!
PASSED!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'Federico 11/7/2020 16:52:18'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'Federico 11/7/2020 16:52:18'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'Federico 11/7/2020 16:52:18'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'Federico 11/7/2020 16:52:18'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'Federico 11/7/2020 16:52:18'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'Federico 11/7/2020 16:52:18'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'Federico 11/7/2020 16:52:18'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'Federico 11/7/2020 16:52:18'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'Federico 11/7/2020 16:52:18'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'Federico 11/7/2020 16:52:18'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'Federico 11/7/2020 16:52:18'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'Federico 11/7/2020 16:52:18'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'Federico 11/7/2020 16:52:18'!
PASSED!
!Portfolio methodsFor: 'adding' stamp: 'Federico 11/7/2020 16:52:57' prior: 50935975!
add: aPortfolioRegister

	(self = aPortfolioRegister 
		or: [portfolioRegisters includes: aPortfolioRegister] 
		"Compara "

		or: [aPortfolioRegister hasPortfolioRegister: self] 
		"Compara hijos de aPortfolioRegister CONTRA self"
		
		"or: [(portfolioRegisters select: [ :selfportfolioRegisters | aPortfolioRegister  hasPortfolioRegister: selfportfolioRegisters ]) isEmpty not]"
		"Compara hijos de aPortfolioRegister CONTRA hijos de self"
	)
		ifTrue: [self error: self class shouldNotHaveRepeatedPortfolioRegistersErrorDescription ].
	
	
	portfolioRegisters add: aPortfolioRegister.! !

!testRun: #PortfolioTest #test10 stamp: 'Federico 11/7/2020 16:53:00'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'Federico 11/7/2020 16:53:00'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'Federico 11/7/2020 16:53:01'!
PASSED!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'Federico 11/7/2020 16:53:01'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'Federico 11/7/2020 16:53:01'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'Federico 11/7/2020 16:53:01'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'Federico 11/7/2020 16:53:01'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'Federico 11/7/2020 16:53:01'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'Federico 11/7/2020 16:53:01'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'Federico 11/7/2020 16:53:01'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'Federico 11/7/2020 16:53:01'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'Federico 11/7/2020 16:53:01'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'Federico 11/7/2020 16:53:01'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'Federico 11/7/2020 16:53:01'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'Federico 11/7/2020 16:53:01'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'Federico 11/7/2020 16:53:01'!
PASSED!
!Portfolio methodsFor: 'adding' stamp: 'Federico 11/7/2020 16:54:03' prior: 50936063!
add: aPortfolioRegister

	(self = aPortfolioRegister 
	"Compara que no sean el mismo"

		or: [aPortfolioRegister hasPortfolioRegister: self] 
		"Compara aPortfolioRegister y sus hijos CONTRA self y sus hijos"
		
		"or: [(portfolioRegisters select: [ :selfportfolioRegisters | aPortfolioRegister  hasPortfolioRegister: selfportfolioRegisters ]) isEmpty not]"
		"Compara hijos de aPortfolioRegister CONTRA hijos de self"
	)
		ifTrue: [self error: self class shouldNotHaveRepeatedPortfolioRegistersErrorDescription ].
	
	
	portfolioRegisters add: aPortfolioRegister.! !

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'Federico 11/7/2020 16:54:08'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'Federico 11/7/2020 16:54:08'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'Federico 11/7/2020 16:54:08'!
PASSED!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'Federico 11/7/2020 16:54:09'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'Federico 11/7/2020 16:54:09'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'Federico 11/7/2020 16:54:09'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'Federico 11/7/2020 16:54:09'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'Federico 11/7/2020 16:54:09'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'Federico 11/7/2020 16:54:09'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'Federico 11/7/2020 16:54:09'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'Federico 11/7/2020 16:54:09'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'Federico 11/7/2020 16:54:09'!
FAILURE!

!testRun: #PortfolioTest #test12 stamp: 'Federico 11/7/2020 16:54:09'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'Federico 11/7/2020 16:54:09'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'Federico 11/7/2020 16:54:09'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'Federico 11/7/2020 16:54:09'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'Federico 11/7/2020 16:54:09'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'Federico 11/7/2020 16:54:03' prior: 50936136!
add: aPortfolioRegister

	(self = aPortfolioRegister 
	"Compara que no sean el mismo"

		or: [aPortfolioRegister hasPortfolioRegister: self] 
		"Compara aPortfolioRegister y sus hijos CONTRA self y sus hijos"
		
		"or: [(portfolioRegisters select: [ :selfportfolioRegisters | aPortfolioRegister  hasPortfolioRegister: selfportfolioRegisters ]) isEmpty not]"
		"Compara hijos de aPortfolioRegister CONTRA hijos de self"
	)
		ifTrue: [self error: self class shouldNotHaveRepeatedPortfolioRegistersErrorDescription ].
	
	
	portfolioRegisters add: aPortfolioRegister.! !
!Portfolio methodsFor: 'adding' stamp: 'Federico 11/7/2020 16:52:57' prior: 50936211!
add: aPortfolioRegister

	(self = aPortfolioRegister 
		or: [portfolioRegisters includes: aPortfolioRegister] 
		"Compara "

		or: [aPortfolioRegister hasPortfolioRegister: self] 
		"Compara hijos de aPortfolioRegister CONTRA self"
		
		"or: [(portfolioRegisters select: [ :selfportfolioRegisters | aPortfolioRegister  hasPortfolioRegister: selfportfolioRegisters ]) isEmpty not]"
		"Compara hijos de aPortfolioRegister CONTRA hijos de self"
	)
		ifTrue: [self error: self class shouldNotHaveRepeatedPortfolioRegistersErrorDescription ].
	
	
	portfolioRegisters add: aPortfolioRegister.! !
!Portfolio methodsFor: 'adding' stamp: 'Federico 11/7/2020 16:58:29' prior: 50936232!
add: aPortfolioRegister

	(self = aPortfolioRegister 
	"Compara SELF CONTRA aPortfolioRegister"
	
		or: [self includes: aPortfolioRegister] 
		"Compara hijos de self conta AportfolioRegister"

		or: [aPortfolioRegister hasPortfolioRegister: self] 
		"Compara hijos de aPortfolioRegister CONTRA hijos de self"
		
		"or: [(portfolioRegisters select: [ :selfportfolioRegisters | aPortfolioRegister  hasPortfolioRegister: selfportfolioRegisters ]) isEmpty not]"
		
	)
		ifTrue: [self error: self class shouldNotHaveRepeatedPortfolioRegistersErrorDescription ].
	
	
	portfolioRegisters add: aPortfolioRegister.! !
!Portfolio methodsFor: 'adding' stamp: 'Federico 11/7/2020 16:58:35' prior: 50936254!
add: aPortfolioRegister

	(self = aPortfolioRegister 
	"Compara SELF CONTRA aPortfolioRegister"
	
		or: [self hasPortfolioRegister: aPortfolioRegister] 
		"Compara hijos de self conta AportfolioRegister"

		or: [aPortfolioRegister hasPortfolioRegister: self] 
		"Compara hijos de aPortfolioRegister CONTRA hijos de self"
		
		"or: [(portfolioRegisters select: [ :selfportfolioRegisters | aPortfolioRegister  hasPortfolioRegister: selfportfolioRegisters ]) isEmpty not]"
		
	)
		ifTrue: [self error: self class shouldNotHaveRepeatedPortfolioRegistersErrorDescription ].
	
	
	portfolioRegisters add: aPortfolioRegister.! !

!testRun: #PortfolioTest #test10 stamp: 'Federico 11/7/2020 16:58:42'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'Federico 11/7/2020 16:58:44'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'Federico 11/7/2020 16:58:44'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'Federico 11/7/2020 16:58:44'!
PASSED!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'Federico 11/7/2020 16:58:44'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'Federico 11/7/2020 16:58:44'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'Federico 11/7/2020 16:58:44'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'Federico 11/7/2020 16:58:44'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'Federico 11/7/2020 16:58:44'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'Federico 11/7/2020 16:58:45'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'Federico 11/7/2020 16:58:45'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'Federico 11/7/2020 16:58:45'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'Federico 11/7/2020 16:58:45'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'Federico 11/7/2020 16:58:45'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'Federico 11/7/2020 16:58:45'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'Federico 11/7/2020 16:58:45'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'Federico 11/7/2020 16:58:45'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'Federico 11/7/2020 16:58:51'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'Federico 11/7/2020 16:58:51'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'Federico 11/7/2020 16:58:51'!
PASSED!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'Federico 11/7/2020 16:58:51'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'Federico 11/7/2020 16:58:51'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'Federico 11/7/2020 16:58:51'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'Federico 11/7/2020 16:58:51'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'Federico 11/7/2020 16:58:51'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'Federico 11/7/2020 16:58:51'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'Federico 11/7/2020 16:58:51'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'Federico 11/7/2020 16:58:51'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'Federico 11/7/2020 16:58:51'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'Federico 11/7/2020 16:58:51'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'Federico 11/7/2020 16:58:51'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'Federico 11/7/2020 16:58:51'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'Federico 11/7/2020 16:58:51'!
PASSED!
!Portfolio methodsFor: 'adding' stamp: 'Federico 11/7/2020 16:59:00' prior: 50936276!
add: aPortfolioRegister

	(self = aPortfolioRegister 
	"Compara SELF CONTRA aPortfolioRegister"
	
		or: [self hasPortfolioRegister: aPortfolioRegister] 
		"Compara hijos de self conta AportfolioRegister"

		"or: [aPortfolioRegister hasPortfolioRegister: self] "
		"Compara hijos de aPortfolioRegister CONTRA hijos de self"
		
		"or: [(portfolioRegisters select: [ :selfportfolioRegisters | aPortfolioRegister  hasPortfolioRegister: selfportfolioRegisters ]) isEmpty not]"
		
	)
		ifTrue: [self error: self class shouldNotHaveRepeatedPortfolioRegistersErrorDescription ].
	
	
	portfolioRegisters add: aPortfolioRegister.! !

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'Federico 11/7/2020 16:59:05'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'Federico 11/7/2020 16:59:05'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'Federico 11/7/2020 16:59:05'!
PASSED!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'Federico 11/7/2020 16:59:05'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'Federico 11/7/2020 16:59:05'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'Federico 11/7/2020 16:59:05'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'Federico 11/7/2020 16:59:05'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'Federico 11/7/2020 16:59:05'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'Federico 11/7/2020 16:59:05'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'Federico 11/7/2020 16:59:05'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'Federico 11/7/2020 16:59:05'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'Federico 11/7/2020 16:59:05'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'Federico 11/7/2020 16:59:05'!
FAILURE!

!testRun: #PortfolioTest #test13 stamp: 'Federico 11/7/2020 16:59:05'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'Federico 11/7/2020 16:59:05'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'Federico 11/7/2020 16:59:06'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'Federico 11/7/2020 16:59:06'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'Federico 11/7/2020 16:59:49' prior: 50936403!
add: aPortfolioRegister

	(self = aPortfolioRegister 
	"Compara SELF CONTRA aPortfolioRegister"
	
		or: [self hasPortfolioRegister: aPortfolioRegister] 
		"Compara hijos de self conta AportfolioRegister"

		or: [aPortfolioRegister hasPortfolioRegister: self]
		"Compara hijos de aPortfolioRegister CONTRA hijos de self"
		
		"or: [(portfolioRegisters select: [ :selfportfolioRegisters | aPortfolioRegister  hasPortfolioRegister: selfportfolioRegisters ]) isEmpty not]"
		
	)
		ifTrue: [self error: self class shouldNotHaveRepeatedPortfolioRegistersErrorDescription ].
	
	
	portfolioRegisters add: aPortfolioRegister.! !
!Portfolio methodsFor: 'adding' stamp: 'Federico 11/7/2020 17:00:41' prior: 50936480!
add: aPortfolioRegister

	(self = aPortfolioRegister 
	"Compara SELF CONTRA aPortfolioRegister"
	
		or: [self hasPortfolioRegister: aPortfolioRegister] 
		"Compara hijos de self conta AportfolioRegister"

		or: [aPortfolioRegister hasPortfolioRegister: self]
		"Compara hijos de aPortfolioRegister CONTRA hijos de self"
		
	)
		ifTrue: [self error: self class shouldNotHaveRepeatedPortfolioRegistersErrorDescription ].
	
	
	portfolioRegisters add: aPortfolioRegister.! !
!Portfolio methodsFor: 'adding' stamp: 'Federico 11/7/2020 17:01:21' prior: 50936503!
add: aPortfolioRegister

	(
	"Compara SELF CONTRA aPortfolioRegister"
	
		(self hasPortfolioRegister: aPortfolioRegister)
		"Compara hijos de self conta AportfolioRegister"

		"or: [aPortfolioRegister hasPortfolioRegister: self]"
		"Compara hijos de aPortfolioRegister CONTRA hijos de self"
		
	)
		ifTrue: [self error: self class shouldNotHaveRepeatedPortfolioRegistersErrorDescription ].
	
	
	portfolioRegisters add: aPortfolioRegister.! !
!Portfolio methodsFor: 'adding' stamp: 'Federico 11/7/2020 17:01:33' prior: 50936521!
add: aPortfolioRegister

	(
	"Compara SELF CONTRA aPortfolioRegister"
	
		(self hasPortfolioRegister: aPortfolioRegister)
		"Compara hijos de self conta AportfolioRegister"

		or: [aPortfolioRegister hasPortfolioRegister: self]
		"Compara hijos de aPortfolioRegister CONTRA hijos de self"
		
	)
		ifTrue: [self error: self class shouldNotHaveRepeatedPortfolioRegistersErrorDescription ].
	
	
	portfolioRegisters add: aPortfolioRegister.! !
!Portfolio methodsFor: 'adding' stamp: 'Federico 11/7/2020 17:01:49' prior: 50936538!
add: aPortfolioRegister

	(self = aPortfolioRegister 
	"Compara SELF CONTRA aPortfolioRegister"
	
		or: [self hasPortfolioRegister: aPortfolioRegister] 
		"Compara hijos de self conta AportfolioRegister"

		or: [aPortfolioRegister hasPortfolioRegister: self]
		"Compara hijos de aPortfolioRegister CONTRA hijos de self"
		
	)
		ifTrue: [self error: self class shouldNotHaveRepeatedPortfolioRegistersErrorDescription ].
	
	
	portfolioRegisters add: aPortfolioRegister.! !
!Portfolio methodsFor: 'testing' stamp: 'Federico 11/7/2020 17:02:28' prior: 50935997!
hasPortfolioRegister: aPortfolioRegister
	^(self = aPortfolioRegister)
	or: [portfolioRegisters includes: aPortfolioRegister]
	or: [(portfolioRegisters select: [ :selfportfolioRegisters | selfportfolioRegisters  hasPortfolioRegister: aPortfolioRegister ]) isEmpty not]
	or: [(portfolioRegisters select: [ :selfportfolioRegisters | aPortfolioRegister  hasPortfolioRegister: selfportfolioRegisters ]) isEmpty not]
	! !
!Portfolio methodsFor: 'adding' stamp: 'Federico 11/7/2020 17:02:56' prior: 50936555!
add: aPortfolioRegister


	(
		(self hasPortfolioRegister: aPortfolioRegister)
		"Compara hijos de self conta AportfolioRegister"

		or: [aPortfolioRegister hasPortfolioRegister: self]
		"Compara hijos de aPortfolioRegister CONTRA hijos de self"
		
	)
		ifTrue: [self error: self class shouldNotHaveRepeatedPortfolioRegistersErrorDescription ].
	
	
	portfolioRegisters add: aPortfolioRegister.! !

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'Federico 11/7/2020 17:02:59'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'Federico 11/7/2020 17:03:01'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'Federico 11/7/2020 17:03:01'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'Federico 11/7/2020 17:03:01'!
PASSED!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'Federico 11/7/2020 17:03:01'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'Federico 11/7/2020 17:03:01'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'Federico 11/7/2020 17:03:01'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'Federico 11/7/2020 17:03:01'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'Federico 11/7/2020 17:03:01'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'Federico 11/7/2020 17:03:01'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'Federico 11/7/2020 17:03:01'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'Federico 11/7/2020 17:03:01'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'Federico 11/7/2020 17:03:01'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'Federico 11/7/2020 17:03:02'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'Federico 11/7/2020 17:03:02'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'Federico 11/7/2020 17:03:02'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'Federico 11/7/2020 17:03:02'!
PASSED!
!Portfolio methodsFor: 'adding' stamp: 'Federico 11/7/2020 17:03:36' prior: 50936589!
add: aPortfolioRegister


	(
		(self hasPortfolioRegister: aPortfolioRegister)
		"Compara hijos de self conta AportfolioRegister"

		"or: [aPortfolioRegister hasPortfolioRegister: self]"
		"Compara hijos de aPortfolioRegister CONTRA hijos de self"
		
	)
		ifTrue: [self error: self class shouldNotHaveRepeatedPortfolioRegistersErrorDescription ].
	
	
	portfolioRegisters add: aPortfolioRegister.! !

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'Federico 11/7/2020 17:03:39'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'Federico 11/7/2020 17:03:41'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'Federico 11/7/2020 17:03:41'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'Federico 11/7/2020 17:03:42'!
PASSED!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'Federico 11/7/2020 17:03:42'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'Federico 11/7/2020 17:03:42'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'Federico 11/7/2020 17:03:42'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'Federico 11/7/2020 17:03:42'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'Federico 11/7/2020 17:03:42'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'Federico 11/7/2020 17:03:42'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'Federico 11/7/2020 17:03:42'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'Federico 11/7/2020 17:03:42'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'Federico 11/7/2020 17:03:42'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'Federico 11/7/2020 17:03:42'!
FAILURE!

!testRun: #PortfolioTest #test13 stamp: 'Federico 11/7/2020 17:03:42'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'Federico 11/7/2020 17:03:42'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'Federico 11/7/2020 17:03:42'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'Federico 11/7/2020 17:03:42'!
FAILURE!
!Portfolio methodsFor: 'testing' stamp: 'Federico 11/7/2020 17:07:58' prior: 50936573!
hasPortfolioRegister: aPortfolioRegister
	^(self = aPortfolioRegister)
	or: [portfolioRegisters includes: aPortfolioRegister]
	or: [(portfolioRegisters select: [ :selfportfolioRegisters | selfportfolioRegisters  hasPortfolioRegister: aPortfolioRegister ]) isEmpty not] "SELF"
	
	
	
	"or: [(portfolioRegisters select: [ :selfportfolioRegisters | aPortfolioRegister  hasPortfolioRegister: selfportfolioRegisters ]) isEmpty not]" "aPortfolioRegister"
	! !
!Portfolio methodsFor: 'adding' stamp: 'Federico 11/7/2020 17:08:24' prior: 50936660!
add: aPortfolioRegister


	(
		(self hasPortfolioRegister: aPortfolioRegister)
		"Compara hijos de self conta AportfolioRegister"

		or: [aPortfolioRegister hasPortfolioRegister: self]
		"Compara hijos de aPortfolioRegister CONTRA hijos de self"
		
	)
		ifTrue: [self error: self class shouldNotHaveRepeatedPortfolioRegistersErrorDescription ].
	
	
	portfolioRegisters add: aPortfolioRegister.! !

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'Federico 11/7/2020 17:09:16'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'Federico 11/7/2020 17:09:16'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'Federico 11/7/2020 17:09:16'!
PASSED!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'Federico 11/7/2020 17:09:16'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'Federico 11/7/2020 17:09:16'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'Federico 11/7/2020 17:09:16'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'Federico 11/7/2020 17:09:16'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'Federico 11/7/2020 17:09:16'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'Federico 11/7/2020 17:09:16'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'Federico 11/7/2020 17:09:16'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'Federico 11/7/2020 17:09:16'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'Federico 11/7/2020 17:09:17'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'Federico 11/7/2020 17:09:17'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'Federico 11/7/2020 17:09:17'!
FAILURE!

!testRun: #PortfolioTest #test14 stamp: 'Federico 11/7/2020 17:09:17'!
FAILURE!

!testRun: #PortfolioTest #test15 stamp: 'Federico 11/7/2020 17:09:17'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'Federico 11/7/2020 17:10:10' prior: 50936751!
add: aPortfolioRegister


	(
		(self hasPortfolioRegister: aPortfolioRegister)
		or: [aPortfolioRegister hasPortfolioRegister: self]
		
	)
		ifTrue: [self error: self class shouldNotHaveRepeatedPortfolioRegistersErrorDescription ].
	
	
	portfolioRegisters add: aPortfolioRegister.! !
!Portfolio methodsFor: 'testing' stamp: 'Federico 11/7/2020 17:10:30' prior: 50936734!
hasPortfolioRegister: aPortfolioRegister
	^(self = aPortfolioRegister)
	or: [portfolioRegisters includes: aPortfolioRegister]
	or: [(portfolioRegisters select: [ :selfportfolioRegisters | selfportfolioRegisters  hasPortfolioRegister: aPortfolioRegister ]) isEmpty not] "SELF"
	
	
	
	or: [(portfolioRegisters select: [ :selfportfolioRegisters | aPortfolioRegister  hasPortfolioRegister: selfportfolioRegisters ]) isEmpty not] "aPortfolioRegister"
	! !
!Portfolio methodsFor: 'testing' stamp: 'Federico 11/7/2020 17:11:09' prior: 50936831!
hasPortfolioRegister: aPortfolioRegister
	^(self = aPortfolioRegister)
	or: [portfolioRegisters includes: aPortfolioRegister]
	or: [(portfolioRegisters select: [ :selfportfolioRegisters | selfportfolioRegisters  hasPortfolioRegister: aPortfolioRegister ]) isEmpty not] "SELF"
	
	or: [aPortfolioRegister hasPortfolioRegister: self] "aPortfolioRegister"
	! !
!Portfolio methodsFor: 'adding' stamp: 'Federico 11/7/2020 17:11:15' prior: 50936819!
add: aPortfolioRegister


	(
		(self hasPortfolioRegister: aPortfolioRegister)
		"or: [aPortfolioRegister hasPortfolioRegister: self]"
		
	)
		ifTrue: [self error: self class shouldNotHaveRepeatedPortfolioRegistersErrorDescription ].
	
	
	portfolioRegisters add: aPortfolioRegister.! !

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'Federico 11/7/2020 17:11:18'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'Federico 11/7/2020 17:11:20'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'Federico 11/7/2020 17:11:20'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'Federico 11/7/2020 17:11:20'!
PASSED!
!Portfolio methodsFor: 'testing' stamp: 'Federico 11/7/2020 17:12:16' prior: 50936848!
hasPortfolioRegister: aPortfolioRegister
	^(self = aPortfolioRegister)
	or: [portfolioRegisters includes: aPortfolioRegister]
	or: [(portfolioRegisters select: [ :selfportfolioRegisters | selfportfolioRegisters  hasPortfolioRegister: aPortfolioRegister ]) isEmpty not] "SELF"
	
	or: [(portfolioRegisters select: [ :selfportfolioRegisters | aPortfolioRegister  hasPortfolioRegister: selfportfolioRegisters ]) isEmpty not] "SELF"
	! !
!Portfolio methodsFor: 'testing' stamp: 'Federico 11/7/2020 17:12:21' prior: 50936888!
hasPortfolioRegister: aPortfolioRegister
	^(self = aPortfolioRegister)
	or: [portfolioRegisters includes: aPortfolioRegister]
	or: [(portfolioRegisters select: [ :selfportfolioRegisters | selfportfolioRegisters  hasPortfolioRegister: aPortfolioRegister ]) isEmpty not] "SELF"
	
	or: [(portfolioRegisters select: [ :selfportfolioRegisters | aPortfolioRegister  hasPortfolioRegister: selfportfolioRegisters ]) isEmpty not] "aPortfolioRegister"
	! !

!testRun: #PortfolioTest #test10 stamp: 'Federico 11/7/2020 17:12:27'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'Federico 11/7/2020 17:12:27'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'Federico 11/7/2020 17:12:27'!
PASSED!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'Federico 11/7/2020 17:12:27'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'Federico 11/7/2020 17:12:27'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'Federico 11/7/2020 17:12:27'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'Federico 11/7/2020 17:12:27'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'Federico 11/7/2020 17:12:27'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'Federico 11/7/2020 17:12:27'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'Federico 11/7/2020 17:12:27'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'Federico 11/7/2020 17:12:27'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'Federico 11/7/2020 17:12:27'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'Federico 11/7/2020 17:12:27'!
FAILURE!

!testRun: #PortfolioTest #test13 stamp: 'Federico 11/7/2020 17:12:27'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'Federico 11/7/2020 17:12:28'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'Federico 11/7/2020 17:12:28'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'Federico 11/7/2020 17:12:28'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'Federico 11/7/2020 17:12:37' prior: 50936862!
add: aPortfolioRegister


	(
		(self hasPortfolioRegister: aPortfolioRegister)
		or: [aPortfolioRegister hasPortfolioRegister: self]
		
	)
		ifTrue: [self error: self class shouldNotHaveRepeatedPortfolioRegistersErrorDescription ].
	
	
	portfolioRegisters add: aPortfolioRegister.! !
!Portfolio methodsFor: 'adding' stamp: 'Federico 11/7/2020 17:13:51' prior: 50936976!
add: aPortfolioRegister


	(
		(self hasPortfolioRegister: aPortfolioRegister)
		or: [aPortfolioRegister hasPortfolioRegister: self] 
		
	)
		ifTrue: [self error: self class shouldNotHaveRepeatedPortfolioRegistersErrorDescription ].
	
	
	portfolioRegisters add: aPortfolioRegister.! !
!Portfolio methodsFor: 'adding' stamp: 'Federico 11/7/2020 17:13:57' prior: 50936988!
add: aPortfolioRegister


	(
		(self hasPortfolioRegister: aPortfolioRegister)
		or: [aPortfolioRegister hasPortfolioRegister: self] 
	)
		ifTrue: [self error: self class shouldNotHaveRepeatedPortfolioRegistersErrorDescription ].
	
	
	portfolioRegisters add: aPortfolioRegister.! !

----SNAPSHOT----(7 November 2020 17:14:28) CuisUniversity-4365.image priorSource: 19324206!

----SNAPSHOT----(7 November 2020 17:15:01) CuisUniversity-4365.image priorSource: 19371545!

----QUIT----(7 November 2020 20:33:45) CuisUniversity-4365.image priorSource: 19371638!

----STARTUP---- (7 November 2020 21:35:12) as D:\facultad\Smalltalk\windows64\CuisUniversity-4365.image!


!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'Federico 11/7/2020 21:39:58'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'Federico 11/7/2020 21:39:58'!
PASSED!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'Federico 11/7/2020 21:39:59'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'Federico 11/7/2020 21:39:59'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'Federico 11/7/2020 21:39:59'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'Federico 11/7/2020 21:39:59'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'Federico 11/7/2020 21:39:59'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'Federico 11/7/2020 21:39:59'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'Federico 11/7/2020 21:39:59'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'Federico 11/7/2020 21:40:00'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'Federico 11/7/2020 21:40:00'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'Federico 11/7/2020 21:40:00'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'Federico 11/7/2020 21:40:00'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'Federico 11/7/2020 21:40:00'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'Federico 11/7/2020 21:40:00'!
PASSED!
!PortfolioTest methodsFor: 'transactions tests' stamp: 'Federico 11/7/2020 21:40:24'!
test15dep

	| mainPortfolio secondPortfolio thirdPortfolio aRepeatedPortfolioRegister |
	
	mainPortfolio := Portfolio new.
	secondPortfolio  := Portfolio new.
	thirdPortfolio  := Portfolio new.
	
	aRepeatedPortfolioRegister := ReceptiveAccount new.
		
	secondPortfolio add: aRepeatedPortfolioRegister.
	thirdPortfolio add: aRepeatedPortfolioRegister.
	
	mainPortfolio add: secondPortfolio. 

	self 
		should: [mainPortfolio add: thirdPortfolio.]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedPortfolioRegistersErrorDescription
! !

!methodRemoval: PortfolioTest #test15 stamp: 'Federico 11/7/2020 21:40:24'!
test15

	| mainPortfolio secondPortfolio thirdPortfolio aRepeatedPortfolioRegister |
	
	mainPortfolio := Portfolio new.
	secondPortfolio  := Portfolio new.
	thirdPortfolio  := Portfolio new.
	
	aRepeatedPortfolioRegister := ReceptiveAccount new.
		
	secondPortfolio add: aRepeatedPortfolioRegister.
	thirdPortfolio add: aRepeatedPortfolioRegister.
	
	mainPortfolio add: secondPortfolio. 

	self 
		should: [mainPortfolio add: thirdPortfolio.]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedPortfolioRegistersErrorDescription
!
!PortfolioTest methodsFor: 'transactions tests' stamp: 'Federico 11/7/2020 21:40:31'!
test15deprecated

	| mainPortfolio secondPortfolio thirdPortfolio aRepeatedPortfolioRegister |
	
	mainPortfolio := Portfolio new.
	secondPortfolio  := Portfolio new.
	thirdPortfolio  := Portfolio new.
	
	aRepeatedPortfolioRegister := ReceptiveAccount new.
		
	secondPortfolio add: aRepeatedPortfolioRegister.
	thirdPortfolio add: aRepeatedPortfolioRegister.
	
	mainPortfolio add: secondPortfolio. 

	self 
		should: [mainPortfolio add: thirdPortfolio.]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedPortfolioRegistersErrorDescription
! !

!methodRemoval: PortfolioTest #test15dep stamp: 'Federico 11/7/2020 21:40:32'!
test15dep

	| mainPortfolio secondPortfolio thirdPortfolio aRepeatedPortfolioRegister |
	
	mainPortfolio := Portfolio new.
	secondPortfolio  := Portfolio new.
	thirdPortfolio  := Portfolio new.
	
	aRepeatedPortfolioRegister := ReceptiveAccount new.
		
	secondPortfolio add: aRepeatedPortfolioRegister.
	thirdPortfolio add: aRepeatedPortfolioRegister.
	
	mainPortfolio add: secondPortfolio. 

	self 
		should: [mainPortfolio add: thirdPortfolio.]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedPortfolioRegistersErrorDescription
!
!PortfolioTest methodsFor: 'transactions tests' stamp: 'Federico 11/7/2020 21:40:39' prior: 50937110!
test15deprecated
	"

	| mainPortfolio secondPortfolio thirdPortfolio aRepeatedPortfolioRegister |
	
	mainPortfolio := Portfolio new.
	secondPortfolio  := Portfolio new.
	thirdPortfolio  := Portfolio new.
	
	aRepeatedPortfolioRegister := ReceptiveAccount new.
		
	secondPortfolio add: aRepeatedPortfolioRegister.
	thirdPortfolio add: aRepeatedPortfolioRegister.
	
	mainPortfolio add: secondPortfolio. 

	self 
		should: [mainPortfolio add: thirdPortfolio.]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedPortfolioRegistersErrorDescription
	"! !
!PortfolioTest methodsFor: 'transactions tests' stamp: 'Federico 11/7/2020 21:40:47'!
test14deprecated

	| aPortfolio secondPortfolio thirdPortfolio aRepeatedPortfolioRegister |
	
	aPortfolio := Portfolio new.
	secondPortfolio  := Portfolio new.
	thirdPortfolio  := Portfolio new.
	
	aRepeatedPortfolioRegister := ReceptiveAccount new.
		
	aPortfolio add: aRepeatedPortfolioRegister.
	thirdPortfolio add: aRepeatedPortfolioRegister.
	
	secondPortfolio add: thirdPortfolio. 

	self 
		should: [aPortfolio add: secondPortfolio.]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedPortfolioRegistersErrorDescription
! !

!methodRemoval: PortfolioTest #test14 stamp: 'Federico 11/7/2020 21:40:47'!
test14

	| aPortfolio secondPortfolio thirdPortfolio aRepeatedPortfolioRegister |
	
	aPortfolio := Portfolio new.
	secondPortfolio  := Portfolio new.
	thirdPortfolio  := Portfolio new.
	
	aRepeatedPortfolioRegister := ReceptiveAccount new.
		
	aPortfolio add: aRepeatedPortfolioRegister.
	thirdPortfolio add: aRepeatedPortfolioRegister.
	
	secondPortfolio add: thirdPortfolio. 

	self 
		should: [aPortfolio add: secondPortfolio.]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedPortfolioRegistersErrorDescription
!
!PortfolioTest methodsFor: 'transactions tests' stamp: 'Federico 11/7/2020 21:40:53' prior: 50937172!
test14deprecated
	"
	| aPortfolio secondPortfolio thirdPortfolio aRepeatedPortfolioRegister |
	
	aPortfolio := Portfolio new.
	secondPortfolio  := Portfolio new.
	thirdPortfolio  := Portfolio new.
	
	aRepeatedPortfolioRegister := ReceptiveAccount new.
		
	aPortfolio add: aRepeatedPortfolioRegister.
	thirdPortfolio add: aRepeatedPortfolioRegister.
	
	secondPortfolio add: thirdPortfolio. 

	self 
		should: [aPortfolio add: secondPortfolio.]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedPortfolioRegistersErrorDescription
	"! !
!PortfolioTest methodsFor: 'transactions tests' stamp: 'Federico 11/7/2020 21:41:03'!
test13deprecated

	| aPortfolio secondPortfolio aRepeatedPortfolioRegister |
	
	aPortfolio := Portfolio new.
	secondPortfolio  := Portfolio new.
	
	aRepeatedPortfolioRegister := ReceptiveAccount new.
	
	secondPortfolio add: aRepeatedPortfolioRegister.
	aPortfolio add: aRepeatedPortfolioRegister.
	
	self 
		should: [ aPortfolio add: secondPortfolio. ]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedPortfolioRegistersErrorDescription
! !

!methodRemoval: PortfolioTest #test13 stamp: 'Federico 11/7/2020 21:41:03'!
test13

	| aPortfolio secondPortfolio aRepeatedPortfolioRegister |
	
	aPortfolio := Portfolio new.
	secondPortfolio  := Portfolio new.
	
	aRepeatedPortfolioRegister := ReceptiveAccount new.
	
	secondPortfolio add: aRepeatedPortfolioRegister.
	aPortfolio add: aRepeatedPortfolioRegister.
	
	self 
		should: [ aPortfolio add: secondPortfolio. ]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedPortfolioRegistersErrorDescription
!
!PortfolioTest methodsFor: 'transactions tests' stamp: 'Federico 11/7/2020 21:41:07' prior: 50937232!
test13deprecated
	"

	| aPortfolio secondPortfolio aRepeatedPortfolioRegister |
	
	aPortfolio := Portfolio new.
	secondPortfolio  := Portfolio new.
	
	aRepeatedPortfolioRegister := ReceptiveAccount new.
	
	secondPortfolio add: aRepeatedPortfolioRegister.
	aPortfolio add: aRepeatedPortfolioRegister.
	
	self 
		should: [ aPortfolio add: secondPortfolio. ]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedPortfolioRegistersErrorDescription
		"
! !
!PortfolioTest methodsFor: 'transactions tests' stamp: 'Federico 11/7/2020 21:41:26'!
test12deprecated

	| aPortfolio secondPortfolio |
	
	aPortfolio := Portfolio new.
	secondPortfolio  := Portfolio new.
	
	secondPortfolio add: aPortfolio.
	
	self 
		should: [aPortfolio add: secondPortfolio. 	]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedPortfolioRegistersErrorDescription
! !

!methodRemoval: PortfolioTest #test12 stamp: 'Federico 11/7/2020 21:41:26'!
test12

	| aPortfolio secondPortfolio |
	
	aPortfolio := Portfolio new.
	secondPortfolio  := Portfolio new.
	
	secondPortfolio add: aPortfolio.
	
	self 
		should: [aPortfolio add: secondPortfolio. 	]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedPortfolioRegistersErrorDescription
!
!PortfolioTest methodsFor: 'transactions tests' stamp: 'Federico 11/7/2020 21:41:37' prior: 50937284!
test12deprecated
	"
	| aPortfolio secondPortfolio |
	
	aPortfolio := Portfolio new.
	secondPortfolio  := Portfolio new.
	
	secondPortfolio add: aPortfolio.
	
	self 
		should: [aPortfolio add: secondPortfolio. 	]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedPortfolioRegistersErrorDescription
		"
! !
!PortfolioTest methodsFor: 'transactions tests' stamp: 'Federico 11/7/2020 21:41:44'!
test11deprecated
	| aPortfolio aRepeatedPortfolioRegister |
	
	aPortfolio := Portfolio new.
	aRepeatedPortfolioRegister  := Portfolio new.
	
	aPortfolio add: aRepeatedPortfolioRegister.
	
	self 
		should: [ aPortfolio add: aRepeatedPortfolioRegister. ]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedPortfolioRegistersErrorDescription
! !

!methodRemoval: PortfolioTest #test11 stamp: 'Federico 11/7/2020 21:41:44'!
test11
	| aPortfolio aRepeatedPortfolioRegister |
	
	aPortfolio := Portfolio new.
	aRepeatedPortfolioRegister  := Portfolio new.
	
	aPortfolio add: aRepeatedPortfolioRegister.
	
	self 
		should: [ aPortfolio add: aRepeatedPortfolioRegister. ]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedPortfolioRegistersErrorDescription
!
!PortfolioTest methodsFor: 'transactions tests' stamp: 'Federico 11/7/2020 21:41:49' prior: 50937322!
test11deprecated
"
	| aPortfolio aRepeatedPortfolioRegister |
	
	aPortfolio := Portfolio new.
	aRepeatedPortfolioRegister  := Portfolio new.
	
	aPortfolio add: aRepeatedPortfolioRegister.
	
	self 
		should: [ aPortfolio add: aRepeatedPortfolioRegister. ]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedPortfolioRegistersErrorDescription
		"
! !
!PortfolioTest methodsFor: 'transactions tests' stamp: 'Federico 11/7/2020 21:42:40'!
test10PortafolioShouldNotBeAddedToHimself
	| aPortfolio |
	
	aPortfolio := Portfolio new.
	
	self 
		should: [ aPortfolio add: aPortfolio. ]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedPortfolioRegistersErrorDescription
! !

!methodRemoval: PortfolioTest #test10 stamp: 'Federico 11/7/2020 21:42:40'!
test10
	| aPortfolio |
	
	aPortfolio := Portfolio new.
	
	self 
		should: [ aPortfolio add: aPortfolio. ]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedPortfolioRegistersErrorDescription
!
!PortfolioTest methodsFor: 'add tests' stamp: 'Federico 11/7/2020 21:44:34'!
test11PortafolioShouldNotBeAddedToHimself
	| mainPortfolio secondPortfolio |
	
	mainPortfolio := Portfolio new.
	secondPortfolio := Portfolio new.
	
	secondPortfolio add: mainPortfolio.
	self 
		should: [ mainPortfolio add: secondPortfolio. ]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedPortfolioRegistersErrorDescription
! !
!PortfolioTest methodsFor: 'add tests' stamp: 'Federico 11/7/2020 21:45:05'!
test11PortafolioShouldNotBeAddedInChilds
	| mainPortfolio secondPortfolio |
	
	mainPortfolio := Portfolio new.
	secondPortfolio := Portfolio new.
	
	secondPortfolio add: mainPortfolio.
	self 
		should: [ mainPortfolio add: secondPortfolio. ]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedPortfolioRegistersErrorDescription
! !

!methodRemoval: PortfolioTest #test11PortafolioShouldNotBeAddedToHimself stamp: 'Federico 11/7/2020 21:45:05'!
test11PortafolioShouldNotBeAddedToHimself
	| mainPortfolio secondPortfolio |
	
	mainPortfolio := Portfolio new.
	secondPortfolio := Portfolio new.
	
	secondPortfolio add: mainPortfolio.
	self 
		should: [ mainPortfolio add: secondPortfolio. ]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedPortfolioRegistersErrorDescription
!
!PortfolioTest methodsFor: 'add tests' stamp: 'Federico 11/7/2020 21:45:51' prior: 50937398!
test11PortafolioShouldNotBeAddedInChilds
	| mainPortfolio secondPortfolio thirdPortfolio |
	
	mainPortfolio := Portfolio new.
	secondPortfolio := Portfolio new.
	thirdPortfolio := Portfolio new.
	
	thirdPortfolio add: secondPortfolio.
	secondPortfolio add: mainPortfolio.
	self 
		should: [ mainPortfolio add: secondPortfolio. ]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedPortfolioRegistersErrorDescription
! !

!testRun: #PortfolioTest #test11PortafolioShouldNotBeAddedInChilds stamp: 'Federico 11/7/2020 21:45:54'!
PASSED!
!PortfolioTest methodsFor: 'add tests' stamp: 'Federico 11/7/2020 21:47:25'!
test11PortafolioShouldNotBeAddedInAnySuccesiveChild
	| mainPortfolio secondPortfolio thirdPortfolio |
	
	mainPortfolio := Portfolio new.
	secondPortfolio := Portfolio new.
	thirdPortfolio := Portfolio new.
	
	thirdPortfolio add: secondPortfolio.
	secondPortfolio add: mainPortfolio.
	self 
		should: [ mainPortfolio add: secondPortfolio. ]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedPortfolioRegistersErrorDescription
! !
!PortfolioTest methodsFor: 'add tests' stamp: 'Federico 11/7/2020 21:47:31'!
test12PortafolioShouldNotBeAddedInAnySuccesiveChild
	| mainPortfolio secondPortfolio thirdPortfolio |
	
	mainPortfolio := Portfolio new.
	secondPortfolio := Portfolio new.
	thirdPortfolio := Portfolio new.
	
	thirdPortfolio add: secondPortfolio.
	secondPortfolio add: mainPortfolio.
	self 
		should: [ mainPortfolio add: secondPortfolio. ]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedPortfolioRegistersErrorDescription
! !

!methodRemoval: PortfolioTest #test11PortafolioShouldNotBeAddedInAnySuccesiveChild stamp: 'Federico 11/7/2020 21:47:31'!
test11PortafolioShouldNotBeAddedInAnySuccesiveChild
	| mainPortfolio secondPortfolio thirdPortfolio |
	
	mainPortfolio := Portfolio new.
	secondPortfolio := Portfolio new.
	thirdPortfolio := Portfolio new.
	
	thirdPortfolio add: secondPortfolio.
	secondPortfolio add: mainPortfolio.
	self 
		should: [ mainPortfolio add: secondPortfolio. ]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedPortfolioRegistersErrorDescription
!

!testRun: #PortfolioTest #test12PortafolioShouldNotBeAddedInAnySuccesiveChild stamp: 'Federico 11/7/2020 21:47:55'!
PASSED!

!testRun: #PortfolioTest #test14deprecated stamp: 'Federico 11/7/2020 21:48:06'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'Federico 11/7/2020 21:48:06'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'Federico 11/7/2020 21:48:06'!
PASSED!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'Federico 11/7/2020 21:48:06'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'Federico 11/7/2020 21:48:06'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'Federico 11/7/2020 21:48:06'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'Federico 11/7/2020 21:48:07'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'Federico 11/7/2020 21:48:07'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'Federico 11/7/2020 21:48:07'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'Federico 11/7/2020 21:48:07'!
PASSED!

!testRun: #PortfolioTest #test10PortafolioShouldNotBeAddedToHimself stamp: 'Federico 11/7/2020 21:48:07'!
PASSED!

!testRun: #PortfolioTest #test11PortafolioShouldNotBeAddedInChilds stamp: 'Federico 11/7/2020 21:48:07'!
PASSED!

!testRun: #PortfolioTest #test11deprecated stamp: 'Federico 11/7/2020 21:48:07'!
PASSED!

!testRun: #PortfolioTest #test12PortafolioShouldNotBeAddedInAnySuccesiveChild stamp: 'Federico 11/7/2020 21:48:07'!
PASSED!

!testRun: #PortfolioTest #test12deprecated stamp: 'Federico 11/7/2020 21:48:07'!
PASSED!

!testRun: #PortfolioTest #test13deprecated stamp: 'Federico 11/7/2020 21:48:07'!
PASSED!

!testRun: #PortfolioTest #test14deprecated stamp: 'Federico 11/7/2020 21:48:07'!
PASSED!

!testRun: #PortfolioTest #test15deprecated stamp: 'Federico 11/7/2020 21:48:07'!
PASSED!

!methodRemoval: PortfolioTest #test12deprecated stamp: 'Federico 11/7/2020 21:48:24'!
test12deprecated
	"
	| aPortfolio secondPortfolio |
	
	aPortfolio := Portfolio new.
	secondPortfolio  := Portfolio new.
	
	secondPortfolio add: aPortfolio.
	
	self 
		should: [aPortfolio add: secondPortfolio. 	]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedPortfolioRegistersErrorDescription
		"
!
!Portfolio methodsFor: 'adding' stamp: 'Federico 11/7/2020 21:49:07' prior: 50937000!
add: aPortfolioRegister


	"
	(
		(self hasPortfolioRegister: aPortfolioRegister)
		or: [aPortfolioRegister hasPortfolioRegister: self] 
	)
		ifTrue: [self error: self class shouldNotHaveRepeatedPortfolioRegistersErrorDescription ].
	"
	
	
	portfolioRegisters add: aPortfolioRegister.! !

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'Federico 11/7/2020 21:49:12'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'Federico 11/7/2020 21:49:12'!
PASSED!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'Federico 11/7/2020 21:49:12'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'Federico 11/7/2020 21:49:12'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'Federico 11/7/2020 21:49:12'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'Federico 11/7/2020 21:49:12'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'Federico 11/7/2020 21:49:13'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'Federico 11/7/2020 21:49:13'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'Federico 11/7/2020 21:49:13'!
PASSED!

!testRun: #PortfolioTest #test10PortafolioShouldNotBeAddedToHimself stamp: 'Federico 11/7/2020 21:49:13'!
FAILURE!

!testRun: #PortfolioTest #test11PortafolioShouldNotBeAddedInChilds stamp: 'Federico 11/7/2020 21:49:13'!
FAILURE!

!testRun: #PortfolioTest #test11deprecated stamp: 'Federico 11/7/2020 21:49:13'!
PASSED!

!testRun: #PortfolioTest #test12PortafolioShouldNotBeAddedInAnySuccesiveChild stamp: 'Federico 11/7/2020 21:49:13'!
FAILURE!

!testRun: #PortfolioTest #test13deprecated stamp: 'Federico 11/7/2020 21:49:13'!
PASSED!

!testRun: #PortfolioTest #test14deprecated stamp: 'Federico 11/7/2020 21:49:13'!
PASSED!

!testRun: #PortfolioTest #test15deprecated stamp: 'Federico 11/7/2020 21:49:13'!
PASSED!
!Portfolio methodsFor: 'testing' stamp: 'Federico 11/7/2020 21:49:31' prior: 50936905!
hasPortfolioRegister: aPortfolioRegister


	"
	^(self = aPortfolioRegister)
	or: [portfolioRegisters includes: aPortfolioRegister]
	or: [(portfolioRegisters select: [ :selfportfolioRegisters | selfportfolioRegisters  hasPortfolioRegister: aPortfolioRegister ]) isEmpty not] 
	
	or: [(portfolioRegisters select: [ :selfportfolioRegisters | aPortfolioRegister  hasPortfolioRegister: selfportfolioRegisters ]) isEmpty not] 
	"
	! !
!Portfolio methodsFor: 'adding' stamp: 'Federico 11/7/2020 21:50:17' prior: 50937576!
add: aPortfolioRegister
	(self = aPortfolioRegister)
	ifTrue: [self error: self class shouldNotHaveRepeatedPortfolioRegistersErrorDescription ].
	"
	(
		(self hasPortfolioRegister: aPortfolioRegister)
		or: [aPortfolioRegister hasPortfolioRegister: self] 
	)
		ifTrue: [self error: self class shouldNotHaveRepeatedPortfolioRegistersErrorDescription ].
	"
	
	
	portfolioRegisters add: aPortfolioRegister.! !

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'Federico 11/7/2020 21:50:21'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'Federico 11/7/2020 21:50:21'!
PASSED!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'Federico 11/7/2020 21:50:21'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'Federico 11/7/2020 21:50:21'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'Federico 11/7/2020 21:50:21'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'Federico 11/7/2020 21:50:21'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'Federico 11/7/2020 21:50:21'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'Federico 11/7/2020 21:50:21'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'Federico 11/7/2020 21:50:22'!
PASSED!

!testRun: #PortfolioTest #test10PortafolioShouldNotBeAddedToHimself stamp: 'Federico 11/7/2020 21:50:22'!
PASSED!

!testRun: #PortfolioTest #test11PortafolioShouldNotBeAddedInChilds stamp: 'Federico 11/7/2020 21:50:22'!
FAILURE!

!testRun: #PortfolioTest #test11deprecated stamp: 'Federico 11/7/2020 21:50:22'!
PASSED!

!testRun: #PortfolioTest #test12PortafolioShouldNotBeAddedInAnySuccesiveChild stamp: 'Federico 11/7/2020 21:50:22'!
FAILURE!

!testRun: #PortfolioTest #test13deprecated stamp: 'Federico 11/7/2020 21:50:22'!
PASSED!

!testRun: #PortfolioTest #test14deprecated stamp: 'Federico 11/7/2020 21:50:22'!
PASSED!

!testRun: #PortfolioTest #test15deprecated stamp: 'Federico 11/7/2020 21:50:22'!
PASSED!
!Portfolio methodsFor: 'adding' stamp: 'Federico 11/7/2020 21:51:32' prior: 50937661!
add: aPortfolioRegister

	((self = aPortfolioRegister)
	or: [self hasPortfolioRegister: aPortfolioRegister])
	
	ifTrue: [self error: self class shouldNotHaveRepeatedPortfolioRegistersErrorDescription ].
	"
	(
		(self hasPortfolioRegister: aPortfolioRegister)
		or: [aPortfolioRegister hasPortfolioRegister: self] 
	)
		ifTrue: [self error: self class shouldNotHaveRepeatedPortfolioRegistersErrorDescription ].
	"
	
	
	portfolioRegisters add: aPortfolioRegister.! !
!Portfolio methodsFor: 'adding' stamp: 'Federico 11/7/2020 21:51:48' prior: 50937733!
add: aPortfolioRegister

	((self = aPortfolioRegister)
	or: [aPortfolioRegister hasPortfolioRegister: self])
	
	ifTrue: [self error: self class shouldNotHaveRepeatedPortfolioRegistersErrorDescription ].
	"
	(
		(self hasPortfolioRegister: aPortfolioRegister)
		or: [aPortfolioRegister hasPortfolioRegister: self] 
	)
		ifTrue: [self error: self class shouldNotHaveRepeatedPortfolioRegistersErrorDescription ].
	"
	
	
	portfolioRegisters add: aPortfolioRegister.! !
!Portfolio methodsFor: 'testing' stamp: 'Federico 11/7/2020 21:52:26' prior: 50937644!
hasPortfolioRegister: aPortfolioRegister

	^portfolioRegisters includes: aPortfolioRegister
	"
	^(self = aPortfolioRegister)
	or: [portfolioRegisters includes: aPortfolioRegister]
	or: [(portfolioRegisters select: [ :selfportfolioRegisters | selfportfolioRegisters  hasPortfolioRegister: aPortfolioRegister ]) isEmpty not] 
	
	or: [(portfolioRegisters select: [ :selfportfolioRegisters | aPortfolioRegister  hasPortfolioRegister: selfportfolioRegisters ]) isEmpty not] 
	"
	! !

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'Federico 11/7/2020 21:52:33'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'Federico 11/7/2020 21:52:33'!
PASSED!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'Federico 11/7/2020 21:52:33'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'Federico 11/7/2020 21:52:33'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'Federico 11/7/2020 21:52:33'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'Federico 11/7/2020 21:52:33'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'Federico 11/7/2020 21:52:33'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'Federico 11/7/2020 21:52:33'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'Federico 11/7/2020 21:52:33'!
PASSED!

!testRun: #PortfolioTest #test10PortafolioShouldNotBeAddedToHimself stamp: 'Federico 11/7/2020 21:52:33'!
PASSED!

!testRun: #PortfolioTest #test11PortafolioShouldNotBeAddedInChilds stamp: 'Federico 11/7/2020 21:52:33'!
PASSED!

!testRun: #PortfolioTest #test11deprecated stamp: 'Federico 11/7/2020 21:52:33'!
PASSED!

!testRun: #PortfolioTest #test12PortafolioShouldNotBeAddedInAnySuccesiveChild stamp: 'Federico 11/7/2020 21:52:33'!
PASSED!

!testRun: #PortfolioTest #test13deprecated stamp: 'Federico 11/7/2020 21:52:33'!
PASSED!

!testRun: #PortfolioTest #test14deprecated stamp: 'Federico 11/7/2020 21:52:33'!
PASSED!

!testRun: #PortfolioTest #test15deprecated stamp: 'Federico 11/7/2020 21:52:34'!
PASSED!
!PortfolioTest methodsFor: 'transactions tests' stamp: 'Federico 11/7/2020 21:56:34'!
test13
"
	| aPortfolio aRepeatedPortfolioRegister |
	
	aPortfolio := Portfolio new.
	aRepeatedPortfolioRegister  := Portfolio new.
	
	aPortfolio add: aRepeatedPortfolioRegister.
	
	self 
		should: [ aPortfolio add: aRepeatedPortfolioRegister. ]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedPortfolioRegistersErrorDescription
		"
! !

!methodRemoval: PortfolioTest #test11deprecated stamp: 'Federico 11/7/2020 21:56:34'!
test11deprecated
"
	| aPortfolio aRepeatedPortfolioRegister |
	
	aPortfolio := Portfolio new.
	aRepeatedPortfolioRegister  := Portfolio new.
	
	aPortfolio add: aRepeatedPortfolioRegister.
	
	self 
		should: [ aPortfolio add: aRepeatedPortfolioRegister. ]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedPortfolioRegistersErrorDescription
		"
!
!PortfolioTest methodsFor: 'add tests' stamp: 'Federico 11/7/2020 21:57:16'!
test11AddedPortafolioShouldNotBeInChilds
	| mainPortfolio secondPortfolio thirdPortfolio |
	
	mainPortfolio := Portfolio new.
	secondPortfolio := Portfolio new.
	thirdPortfolio := Portfolio new.
	
	thirdPortfolio add: secondPortfolio.
	secondPortfolio add: mainPortfolio.
	self 
		should: [ mainPortfolio add: secondPortfolio. ]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedPortfolioRegistersErrorDescription
! !

!methodRemoval: PortfolioTest #test11PortafolioShouldNotBeAddedInChilds stamp: 'Federico 11/7/2020 21:57:16'!
test11PortafolioShouldNotBeAddedInChilds
	| mainPortfolio secondPortfolio thirdPortfolio |
	
	mainPortfolio := Portfolio new.
	secondPortfolio := Portfolio new.
	thirdPortfolio := Portfolio new.
	
	thirdPortfolio add: secondPortfolio.
	secondPortfolio add: mainPortfolio.
	self 
		should: [ mainPortfolio add: secondPortfolio. ]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedPortfolioRegistersErrorDescription
!
!PortfolioTest methodsFor: 'add tests' stamp: 'Federico 11/7/2020 21:57:25'!
test12AddedPortafolioShouldNotBeInAnySuccesiveChild
	| mainPortfolio secondPortfolio thirdPortfolio |
	
	mainPortfolio := Portfolio new.
	secondPortfolio := Portfolio new.
	thirdPortfolio := Portfolio new.
	
	thirdPortfolio add: secondPortfolio.
	secondPortfolio add: mainPortfolio.
	self 
		should: [ mainPortfolio add: secondPortfolio. ]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedPortfolioRegistersErrorDescription
! !

!methodRemoval: PortfolioTest #test12PortafolioShouldNotBeAddedInAnySuccesiveChild stamp: 'Federico 11/7/2020 21:57:26'!
test12PortafolioShouldNotBeAddedInAnySuccesiveChild
	| mainPortfolio secondPortfolio thirdPortfolio |
	
	mainPortfolio := Portfolio new.
	secondPortfolio := Portfolio new.
	thirdPortfolio := Portfolio new.
	
	thirdPortfolio add: secondPortfolio.
	secondPortfolio add: mainPortfolio.
	self 
		should: [ mainPortfolio add: secondPortfolio. ]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedPortfolioRegistersErrorDescription
!
!PortfolioTest methodsFor: 'add tests' stamp: 'Federico 11/7/2020 21:58:37'!
test11AddedPortfolioShouldNotContainRepeatedChilds
	| mainPortfolio secondPortfolio thirdPortfolio |
	
	mainPortfolio := Portfolio new.
	secondPortfolio := Portfolio new.
	thirdPortfolio := Portfolio new.
	
	thirdPortfolio add: secondPortfolio.
	secondPortfolio add: mainPortfolio.
	self 
		should: [ mainPortfolio add: secondPortfolio. ]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedPortfolioRegistersErrorDescription
! !

!methodRemoval: PortfolioTest #test11AddedPortafolioShouldNotBeInChilds stamp: 'Federico 11/7/2020 21:58:38'!
test11AddedPortafolioShouldNotBeInChilds
	| mainPortfolio secondPortfolio thirdPortfolio |
	
	mainPortfolio := Portfolio new.
	secondPortfolio := Portfolio new.
	thirdPortfolio := Portfolio new.
	
	thirdPortfolio add: secondPortfolio.
	secondPortfolio add: mainPortfolio.
	self 
		should: [ mainPortfolio add: secondPortfolio. ]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedPortfolioRegistersErrorDescription
!
!PortfolioTest methodsFor: 'add tests' stamp: 'Federico 11/7/2020 21:58:54'!
test13AddedPortafolioShouldNotBeInChilds
"
	| aPortfolio aRepeatedPortfolioRegister |
	
	aPortfolio := Portfolio new.
	aRepeatedPortfolioRegister  := Portfolio new.
	
	aPortfolio add: aRepeatedPortfolioRegister.
	
	self 
		should: [ aPortfolio add: aRepeatedPortfolioRegister. ]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedPortfolioRegistersErrorDescription
		"
! !

!methodRemoval: PortfolioTest #test13 stamp: 'Federico 11/7/2020 21:58:54'!
test13
"
	| aPortfolio aRepeatedPortfolioRegister |
	
	aPortfolio := Portfolio new.
	aRepeatedPortfolioRegister  := Portfolio new.
	
	aPortfolio add: aRepeatedPortfolioRegister.
	
	self 
		should: [ aPortfolio add: aRepeatedPortfolioRegister. ]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedPortfolioRegistersErrorDescription
		"
!
!PortfolioTest methodsFor: 'add tests' stamp: 'Federico 11/7/2020 21:59:28'!
test12AddedPortafolioShouldNotContainSuccesiveRepeatedChilds
	| mainPortfolio secondPortfolio thirdPortfolio |
	
	mainPortfolio := Portfolio new.
	secondPortfolio := Portfolio new.
	thirdPortfolio := Portfolio new.
	
	thirdPortfolio add: secondPortfolio.
	secondPortfolio add: mainPortfolio.
	self 
		should: [ mainPortfolio add: secondPortfolio. ]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedPortfolioRegistersErrorDescription
! !

!methodRemoval: PortfolioTest #test12AddedPortafolioShouldNotBeInAnySuccesiveChild stamp: 'Federico 11/7/2020 21:59:29'!
test12AddedPortafolioShouldNotBeInAnySuccesiveChild
	| mainPortfolio secondPortfolio thirdPortfolio |
	
	mainPortfolio := Portfolio new.
	secondPortfolio := Portfolio new.
	thirdPortfolio := Portfolio new.
	
	thirdPortfolio add: secondPortfolio.
	secondPortfolio add: mainPortfolio.
	self 
		should: [ mainPortfolio add: secondPortfolio. ]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedPortfolioRegistersErrorDescription
!
!PortfolioTest methodsFor: 'add tests' stamp: 'Federico 11/7/2020 22:05:18'!
test13AddedPortafolioShouldNotBeInHisChilds
"
	| aPortfolio aRepeatedPortfolioRegister |
	
	aPortfolio := Portfolio new.
	aRepeatedPortfolioRegister  := Portfolio new.
	
	aPortfolio add: aRepeatedPortfolioRegister.
	
	self 
		should: [ aPortfolio add: aRepeatedPortfolioRegister. ]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedPortfolioRegistersErrorDescription
		"
! !

!methodRemoval: PortfolioTest #test13AddedPortafolioShouldNotBeInChilds stamp: 'Federico 11/7/2020 22:05:19'!
test13AddedPortafolioShouldNotBeInChilds
"
	| aPortfolio aRepeatedPortfolioRegister |
	
	aPortfolio := Portfolio new.
	aRepeatedPortfolioRegister  := Portfolio new.
	
	aPortfolio add: aRepeatedPortfolioRegister.
	
	self 
		should: [ aPortfolio add: aRepeatedPortfolioRegister. ]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedPortfolioRegistersErrorDescription
		"
!
!PortfolioTest methodsFor: 'add tests' stamp: 'Federico 11/7/2020 22:06:34'!
test13AddedPortafolioShouldNotBeInChilds

	| aPortfolio aRepeatedPortfolio |
	
	aPortfolio := Portfolio new.
	aRepeatedPortfolio  := Portfolio new.
	
	aPortfolio add: aRepeatedPortfolio.
	
	self 
		should: [ aPortfolio add: aRepeatedPortfolio. ]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedPortfolioRegistersErrorDescription
		
! !

!methodRemoval: PortfolioTest #test13AddedPortafolioShouldNotBeInChilds stamp: 'Federico 11/7/2020 22:06:39'!
test13AddedPortafolioShouldNotBeInChilds

	| aPortfolio aRepeatedPortfolio |
	
	aPortfolio := Portfolio new.
	aRepeatedPortfolio  := Portfolio new.
	
	aPortfolio add: aRepeatedPortfolio.
	
	self 
		should: [ aPortfolio add: aRepeatedPortfolio. ]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedPortfolioRegistersErrorDescription
		
!
!PortfolioTest methodsFor: 'add tests' stamp: 'Federico 11/7/2020 22:06:52' prior: 50938035!
test13AddedPortafolioShouldNotBeInHisChilds

	| aPortfolio aRepeatedPortfolio |
	
	aPortfolio := Portfolio new.
	aRepeatedPortfolio  := Portfolio new.
	
	aPortfolio add: aRepeatedPortfolio.
	
	self 
		should: [ aPortfolio add: aRepeatedPortfolio. ]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedPortfolioRegistersErrorDescription
		
! !

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'Federico 11/7/2020 22:06:59'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'Federico 11/7/2020 22:06:59'!
PASSED!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'Federico 11/7/2020 22:06:59'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'Federico 11/7/2020 22:06:59'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'Federico 11/7/2020 22:06:59'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'Federico 11/7/2020 22:06:59'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'Federico 11/7/2020 22:06:59'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'Federico 11/7/2020 22:06:59'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'Federico 11/7/2020 22:06:59'!
PASSED!

!testRun: #PortfolioTest #test10PortafolioShouldNotBeAddedToHimself stamp: 'Federico 11/7/2020 22:06:59'!
PASSED!

!testRun: #PortfolioTest #test11AddedPortfolioShouldNotContainRepeatedChilds stamp: 'Federico 11/7/2020 22:06:59'!
PASSED!

!testRun: #PortfolioTest #test12AddedPortafolioShouldNotContainSuccesiveRepeatedChilds stamp: 'Federico 11/7/2020 22:06:59'!
PASSED!

!testRun: #PortfolioTest #test13AddedPortafolioShouldNotBeInHisChilds stamp: 'Federico 11/7/2020 22:06:59'!
FAILURE!

!testRun: #PortfolioTest #test13deprecated stamp: 'Federico 11/7/2020 22:07:00'!
PASSED!

!testRun: #PortfolioTest #test14deprecated stamp: 'Federico 11/7/2020 22:07:00'!
PASSED!

!testRun: #PortfolioTest #test15deprecated stamp: 'Federico 11/7/2020 22:07:00'!
PASSED!

!testRun: #PortfolioTest #test13AddedPortafolioShouldNotBeInHisChilds stamp: 'Federico 11/7/2020 22:07:00'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'Federico 11/7/2020 22:08:21' prior: 50937751!
add: aPortfolioRegister

	((self = aPortfolioRegister)
	or: [aPortfolioRegister hasPortfolioRegister: self]
	
	or:[self hasPortfolioRegister: aPortfolioRegister])
	
	ifTrue: [self error: self class shouldNotHaveRepeatedPortfolioRegistersErrorDescription ].
	"
	(
		(self hasPortfolioRegister: aPortfolioRegister)
		or: [aPortfolioRegister hasPortfolioRegister: self] 
	)
		ifTrue: [self error: self class shouldNotHaveRepeatedPortfolioRegistersErrorDescription ].
	"
	
	
	portfolioRegisters add: aPortfolioRegister.! !

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'Federico 11/7/2020 22:08:25'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'Federico 11/7/2020 22:08:25'!
PASSED!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'Federico 11/7/2020 22:08:25'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'Federico 11/7/2020 22:08:25'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'Federico 11/7/2020 22:08:25'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'Federico 11/7/2020 22:08:25'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'Federico 11/7/2020 22:08:25'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'Federico 11/7/2020 22:08:25'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'Federico 11/7/2020 22:08:25'!
PASSED!

!testRun: #PortfolioTest #test10PortafolioShouldNotBeAddedToHimself stamp: 'Federico 11/7/2020 22:08:25'!
PASSED!

!testRun: #PortfolioTest #test11AddedPortfolioShouldNotContainRepeatedChilds stamp: 'Federico 11/7/2020 22:08:25'!
PASSED!

!testRun: #PortfolioTest #test12AddedPortafolioShouldNotContainSuccesiveRepeatedChilds stamp: 'Federico 11/7/2020 22:08:26'!
PASSED!

!testRun: #PortfolioTest #test13AddedPortafolioShouldNotBeInHisChilds stamp: 'Federico 11/7/2020 22:08:26'!
PASSED!

!testRun: #PortfolioTest #test13deprecated stamp: 'Federico 11/7/2020 22:08:26'!
PASSED!

!testRun: #PortfolioTest #test14deprecated stamp: 'Federico 11/7/2020 22:08:26'!
PASSED!

!testRun: #PortfolioTest #test15deprecated stamp: 'Federico 11/7/2020 22:08:26'!
PASSED!
!PortfolioTest methodsFor: 'add tests' stamp: 'Federico 11/7/2020 22:10:52'!
test14AddedPortafolioShouldNotBeInHisSuccesiveChilds

	| mainPortfolio secondPortfolio aRepeatedPortfolio |
	
	mainPortfolio := Portfolio new.
	secondPortfolio := Portfolio new.
	aRepeatedPortfolio  := Portfolio new.
	
	mainPortfolio add: aRepeatedPortfolio.
	secondPortfolio add: aRepeatedPortfolio.
	
	self 
		should: [ mainPortfolio add: secondPortfolio. ]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedPortfolioRegistersErrorDescription
		
! !

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'Federico 11/7/2020 22:10:55'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'Federico 11/7/2020 22:10:55'!
PASSED!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'Federico 11/7/2020 22:10:55'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'Federico 11/7/2020 22:10:55'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'Federico 11/7/2020 22:10:55'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'Federico 11/7/2020 22:10:55'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'Federico 11/7/2020 22:10:55'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'Federico 11/7/2020 22:10:55'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'Federico 11/7/2020 22:10:55'!
PASSED!

!testRun: #PortfolioTest #test10PortafolioShouldNotBeAddedToHimself stamp: 'Federico 11/7/2020 22:10:55'!
PASSED!

!testRun: #PortfolioTest #test11AddedPortfolioShouldNotContainRepeatedChilds stamp: 'Federico 11/7/2020 22:10:56'!
PASSED!

!testRun: #PortfolioTest #test12AddedPortafolioShouldNotContainSuccesiveRepeatedChilds stamp: 'Federico 11/7/2020 22:10:56'!
PASSED!

!testRun: #PortfolioTest #test13AddedPortafolioShouldNotBeInHisChilds stamp: 'Federico 11/7/2020 22:10:56'!
PASSED!

!testRun: #PortfolioTest #test13deprecated stamp: 'Federico 11/7/2020 22:10:56'!
PASSED!

!testRun: #PortfolioTest #test14AddedPortafolioShouldNotBeInHisSuccesiveChilds stamp: 'Federico 11/7/2020 22:10:56'!
FAILURE!

!testRun: #PortfolioTest #test14deprecated stamp: 'Federico 11/7/2020 22:10:56'!
PASSED!

!testRun: #PortfolioTest #test15deprecated stamp: 'Federico 11/7/2020 22:10:56'!
PASSED!

!testRun: #PortfolioTest #test14AddedPortafolioShouldNotBeInHisSuccesiveChilds stamp: 'Federico 11/7/2020 22:10:56'!
FAILURE!

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'Federico 11/7/2020 22:11:09'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'Federico 11/7/2020 22:11:09'!
PASSED!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'Federico 11/7/2020 22:11:09'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'Federico 11/7/2020 22:11:10'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'Federico 11/7/2020 22:11:10'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'Federico 11/7/2020 22:11:10'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'Federico 11/7/2020 22:11:10'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'Federico 11/7/2020 22:11:10'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'Federico 11/7/2020 22:11:10'!
PASSED!

!testRun: #PortfolioTest #test10PortafolioShouldNotBeAddedToHimself stamp: 'Federico 11/7/2020 22:11:10'!
PASSED!

!testRun: #PortfolioTest #test11AddedPortfolioShouldNotContainRepeatedChilds stamp: 'Federico 11/7/2020 22:11:10'!
PASSED!

!testRun: #PortfolioTest #test12AddedPortafolioShouldNotContainSuccesiveRepeatedChilds stamp: 'Federico 11/7/2020 22:11:10'!
PASSED!

!testRun: #PortfolioTest #test13AddedPortafolioShouldNotBeInHisChilds stamp: 'Federico 11/7/2020 22:11:10'!
PASSED!

!testRun: #PortfolioTest #test13deprecated stamp: 'Federico 11/7/2020 22:11:10'!
PASSED!

!testRun: #PortfolioTest #test14AddedPortafolioShouldNotBeInHisSuccesiveChilds stamp: 'Federico 11/7/2020 22:11:10'!
FAILURE!

!testRun: #PortfolioTest #test14deprecated stamp: 'Federico 11/7/2020 22:11:10'!
PASSED!

!testRun: #PortfolioTest #test15deprecated stamp: 'Federico 11/7/2020 22:11:10'!
PASSED!

!testRun: #PortfolioTest #test14AddedPortafolioShouldNotBeInHisSuccesiveChilds stamp: 'Federico 11/7/2020 22:11:10'!
FAILURE!
!PortfolioTest methodsFor: 'add tests' stamp: 'Federico 11/7/2020 22:12:24' prior: 50938246!
test14AddedPortafolioShouldNotBeInHisSuccesiveChilds

	| mainPortfolio secondPortfolio aRepeatedPortfolio |
	
	mainPortfolio := Portfolio new.
	secondPortfolio := Portfolio new.
	aRepeatedPortfolio  := Portfolio new.
	
	mainPortfolio add: secondPortfolio. 
	secondPortfolio add: aRepeatedPortfolio.
	
	self 
		should: [ mainPortfolio add: aRepeatedPortfolio. ]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedPortfolioRegistersErrorDescription
		
! !

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'Federico 11/7/2020 22:12:28'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'Federico 11/7/2020 22:12:28'!
PASSED!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'Federico 11/7/2020 22:12:28'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'Federico 11/7/2020 22:12:29'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'Federico 11/7/2020 22:12:29'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'Federico 11/7/2020 22:12:29'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'Federico 11/7/2020 22:12:29'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'Federico 11/7/2020 22:12:29'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'Federico 11/7/2020 22:12:29'!
PASSED!

!testRun: #PortfolioTest #test10PortafolioShouldNotBeAddedToHimself stamp: 'Federico 11/7/2020 22:12:29'!
PASSED!

!testRun: #PortfolioTest #test11AddedPortfolioShouldNotContainRepeatedChilds stamp: 'Federico 11/7/2020 22:12:29'!
PASSED!

!testRun: #PortfolioTest #test12AddedPortafolioShouldNotContainSuccesiveRepeatedChilds stamp: 'Federico 11/7/2020 22:12:29'!
PASSED!

!testRun: #PortfolioTest #test13AddedPortafolioShouldNotBeInHisChilds stamp: 'Federico 11/7/2020 22:12:29'!
PASSED!

!testRun: #PortfolioTest #test13deprecated stamp: 'Federico 11/7/2020 22:12:29'!
PASSED!

!testRun: #PortfolioTest #test14AddedPortafolioShouldNotBeInHisSuccesiveChilds stamp: 'Federico 11/7/2020 22:12:29'!
FAILURE!

!testRun: #PortfolioTest #test14deprecated stamp: 'Federico 11/7/2020 22:12:29'!
PASSED!

!testRun: #PortfolioTest #test15deprecated stamp: 'Federico 11/7/2020 22:12:29'!
PASSED!

!testRun: #PortfolioTest #test14AddedPortafolioShouldNotBeInHisSuccesiveChilds stamp: 'Federico 11/7/2020 22:12:29'!
FAILURE!
!PortfolioTest methodsFor: 'add tests' stamp: 'Federico 11/7/2020 22:17:09' prior: 50937938!
test11AddedPortfolioShouldNotContainRepeatedChilds
	| mainPortfolio secondPortfolio thirdPortfolio |
	
	mainPortfolio := Portfolio new.
	secondPortfolio := Portfolio new.
	
	secondPortfolio add: mainPortfolio.
	self 
		should: [ mainPortfolio add: secondPortfolio. ]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedPortfolioRegistersErrorDescription
! !
!PortfolioTest methodsFor: 'add tests' stamp: 'Federico 11/7/2020 22:17:14' prior: 50938477!
test11AddedPortfolioShouldNotContainRepeatedChilds
	| mainPortfolio secondPortfolio |
	
	mainPortfolio := Portfolio new.
	secondPortfolio := Portfolio new.
	
	secondPortfolio add: mainPortfolio.
	self 
		should: [ mainPortfolio add: secondPortfolio. ]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedPortfolioRegistersErrorDescription
! !

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'Federico 11/7/2020 22:17:18'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'Federico 11/7/2020 22:17:18'!
PASSED!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'Federico 11/7/2020 22:17:19'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'Federico 11/7/2020 22:17:19'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'Federico 11/7/2020 22:17:19'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'Federico 11/7/2020 22:17:19'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'Federico 11/7/2020 22:17:19'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'Federico 11/7/2020 22:17:19'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'Federico 11/7/2020 22:17:19'!
PASSED!

!testRun: #PortfolioTest #test10PortafolioShouldNotBeAddedToHimself stamp: 'Federico 11/7/2020 22:17:19'!
PASSED!

!testRun: #PortfolioTest #test11AddedPortfolioShouldNotContainRepeatedChilds stamp: 'Federico 11/7/2020 22:17:19'!
PASSED!

!testRun: #PortfolioTest #test12AddedPortafolioShouldNotContainSuccesiveRepeatedChilds stamp: 'Federico 11/7/2020 22:17:19'!
PASSED!

!testRun: #PortfolioTest #test13AddedPortafolioShouldNotBeInHisChilds stamp: 'Federico 11/7/2020 22:17:19'!
PASSED!

!testRun: #PortfolioTest #test13deprecated stamp: 'Federico 11/7/2020 22:17:19'!
PASSED!

!testRun: #PortfolioTest #test14AddedPortafolioShouldNotBeInHisSuccesiveChilds stamp: 'Federico 11/7/2020 22:17:19'!
FAILURE!

!testRun: #PortfolioTest #test14deprecated stamp: 'Federico 11/7/2020 22:17:19'!
PASSED!

!testRun: #PortfolioTest #test15deprecated stamp: 'Federico 11/7/2020 22:17:19'!
PASSED!

!testRun: #PortfolioTest #test14AddedPortafolioShouldNotBeInHisSuccesiveChilds stamp: 'Federico 11/7/2020 22:17:19'!
FAILURE!
!PortfolioTest methodsFor: 'add tests' stamp: 'Federico 11/7/2020 22:18:16' prior: 50938000!
test12AddedPortafolioShouldNotContainSuccesiveRepeatedChilds
	| mainPortfolio secondPortfolio thirdPortfolio |
	
	mainPortfolio := Portfolio new.
	secondPortfolio := Portfolio new.
	thirdPortfolio := Portfolio new.
	
	mainPortfolio add: secondPortfolio.
	secondPortfolio add: thirdPortfolio.
	self 
		should: [ thirdPortfolio add: mainPortfolio. ]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedPortfolioRegistersErrorDescription
! !
!PortfolioTest methodsFor: 'add tests' stamp: 'Federico 11/7/2020 22:18:32' prior: 50938492!
test11AddedPortfolioShouldNotContainRepeatedChilds
	| mainPortfolio secondPortfolio |
	
	mainPortfolio := Portfolio new.
	secondPortfolio := Portfolio new.
	
	mainPortfolio add: secondPortfolio.
	self 
		should: [ secondPortfolio add: mainPortfolio. ]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedPortfolioRegistersErrorDescription
! !

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'Federico 11/7/2020 22:18:35'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'Federico 11/7/2020 22:18:35'!
PASSED!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'Federico 11/7/2020 22:18:35'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'Federico 11/7/2020 22:18:35'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'Federico 11/7/2020 22:18:35'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'Federico 11/7/2020 22:18:35'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'Federico 11/7/2020 22:18:35'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'Federico 11/7/2020 22:18:35'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'Federico 11/7/2020 22:18:35'!
PASSED!

!testRun: #PortfolioTest #test10PortafolioShouldNotBeAddedToHimself stamp: 'Federico 11/7/2020 22:18:35'!
PASSED!

!testRun: #PortfolioTest #test11AddedPortfolioShouldNotContainRepeatedChilds stamp: 'Federico 11/7/2020 22:18:35'!
PASSED!

!testRun: #PortfolioTest #test12AddedPortafolioShouldNotContainSuccesiveRepeatedChilds stamp: 'Federico 11/7/2020 22:18:35'!
FAILURE!

!testRun: #PortfolioTest #test13AddedPortafolioShouldNotBeInHisChilds stamp: 'Federico 11/7/2020 22:18:35'!
PASSED!

!testRun: #PortfolioTest #test13deprecated stamp: 'Federico 11/7/2020 22:18:35'!
PASSED!

!testRun: #PortfolioTest #test14AddedPortafolioShouldNotBeInHisSuccesiveChilds stamp: 'Federico 11/7/2020 22:18:35'!
FAILURE!

!testRun: #PortfolioTest #test14deprecated stamp: 'Federico 11/7/2020 22:18:36'!
PASSED!

!testRun: #PortfolioTest #test15deprecated stamp: 'Federico 11/7/2020 22:18:36'!
PASSED!
!Portfolio methodsFor: 'testing' stamp: 'Federico 11/7/2020 22:20:57' prior: 50937769!
hasPortfolioRegister: aPortfolioRegister

	^(portfolioRegisters includes: aPortfolioRegister)
	or: [(portfolioRegisters select: [ :childRegisters | childRegisters  hasPortfolioRegister: aPortfolioRegister ]) isEmpty not].
	"
	^(self = aPortfolioRegister)
	or: [portfolioRegisters includes: aPortfolioRegister]
	or: [(portfolioRegisters select: [ :selfportfolioRegisters | selfportfolioRegisters  hasPortfolioRegister: aPortfolioRegister ]) isEmpty not] 
	
	or: [(portfolioRegisters select: [ :selfportfolioRegisters | aPortfolioRegister  hasPortfolioRegister: selfportfolioRegisters ]) isEmpty not] 
	"
	! !

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'Federico 11/7/2020 22:21:04'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'Federico 11/7/2020 22:21:04'!
PASSED!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'Federico 11/7/2020 22:21:05'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'Federico 11/7/2020 22:21:05'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'Federico 11/7/2020 22:21:05'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'Federico 11/7/2020 22:21:05'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'Federico 11/7/2020 22:21:05'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'Federico 11/7/2020 22:21:05'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'Federico 11/7/2020 22:21:05'!
PASSED!

!testRun: #PortfolioTest #test10PortafolioShouldNotBeAddedToHimself stamp: 'Federico 11/7/2020 22:21:05'!
PASSED!

!testRun: #PortfolioTest #test11AddedPortfolioShouldNotContainRepeatedChilds stamp: 'Federico 11/7/2020 22:21:05'!
PASSED!

!testRun: #PortfolioTest #test12AddedPortafolioShouldNotContainSuccesiveRepeatedChilds stamp: 'Federico 11/7/2020 22:21:05'!
PASSED!

!testRun: #PortfolioTest #test13AddedPortafolioShouldNotBeInHisChilds stamp: 'Federico 11/7/2020 22:21:05'!
PASSED!

!testRun: #PortfolioTest #test13deprecated stamp: 'Federico 11/7/2020 22:21:05'!
PASSED!

!testRun: #PortfolioTest #test14AddedPortafolioShouldNotBeInHisSuccesiveChilds stamp: 'Federico 11/7/2020 22:21:05'!
PASSED!

!testRun: #PortfolioTest #test14deprecated stamp: 'Federico 11/7/2020 22:21:05'!
PASSED!

!testRun: #PortfolioTest #test15deprecated stamp: 'Federico 11/7/2020 22:21:05'!
PASSED!
!Portfolio methodsFor: 'adding' stamp: 'Federico 11/7/2020 22:22:08' prior: 50938170!
add: aPortfolioRegister

	((self = aPortfolioRegister)
	or: [aPortfolioRegister hasPortfolioRegister: self]
	or:[self hasPortfolioRegister: aPortfolioRegister])
	
	ifTrue: [self error: self class shouldNotHaveRepeatedPortfolioRegistersErrorDescription ].
	"
	(
		(self hasPortfolioRegister: aPortfolioRegister)
		or: [aPortfolioRegister hasPortfolioRegister: self] 
	)
		ifTrue: [self error: self class shouldNotHaveRepeatedPortfolioRegistersErrorDescription ].
	"
	
	
	portfolioRegisters add: aPortfolioRegister.! !
!PortfolioTest methodsFor: 'transactions tests' stamp: 'Federico 11/7/2020 22:22:40' prior: 50937151!
test15deprecated

	| mainPortfolio secondPortfolio thirdPortfolio aRepeatedPortfolioRegister |
	
	mainPortfolio := Portfolio new.
	secondPortfolio  := Portfolio new.
	thirdPortfolio  := Portfolio new.
	
	aRepeatedPortfolioRegister := ReceptiveAccount new.
		
	secondPortfolio add: aRepeatedPortfolioRegister.
	thirdPortfolio add: aRepeatedPortfolioRegister.
	
	mainPortfolio add: secondPortfolio. 

	self 
		should: [mainPortfolio add: thirdPortfolio.]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedPortfolioRegistersErrorDescription
! !
!PortfolioTest methodsFor: 'transactions tests' stamp: 'Federico 11/7/2020 22:22:48' prior: 50937212!
test14deprecated
	
	| aPortfolio secondPortfolio thirdPortfolio aRepeatedPortfolioRegister |
	
	aPortfolio := Portfolio new.
	secondPortfolio  := Portfolio new.
	thirdPortfolio  := Portfolio new.
	
	aRepeatedPortfolioRegister := ReceptiveAccount new.
		
	aPortfolio add: aRepeatedPortfolioRegister.
	thirdPortfolio add: aRepeatedPortfolioRegister.
	
	secondPortfolio add: thirdPortfolio. 

	self 
		should: [aPortfolio add: secondPortfolio.]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedPortfolioRegistersErrorDescription
	! !
!PortfolioTest methodsFor: 'transactions tests' stamp: 'Federico 11/7/2020 22:22:51' prior: 50937266!
test13deprecated
	

	| aPortfolio secondPortfolio aRepeatedPortfolioRegister |
	
	aPortfolio := Portfolio new.
	secondPortfolio  := Portfolio new.
	
	aRepeatedPortfolioRegister := ReceptiveAccount new.
	
	secondPortfolio add: aRepeatedPortfolioRegister.
	aPortfolio add: aRepeatedPortfolioRegister.
	
	self 
		should: [ aPortfolio add: secondPortfolio. ]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedPortfolioRegistersErrorDescription
		
! !

!testRun: #PortfolioTest #test13deprecated stamp: 'Federico 11/7/2020 22:22:53'!
FAILURE!

!testRun: #PortfolioTest #test15deprecated stamp: 'Federico 11/7/2020 22:23:02'!
FAILURE!
!PortfolioTest methodsFor: 'transactions tests' stamp: 'Federico 11/7/2020 22:24:57'!
test15
	
	| aPortfolio secondPortfolio aRepeatedPortfolioRegister |
	
	aPortfolio := Portfolio new.
	secondPortfolio  := Portfolio new.
	
	aRepeatedPortfolioRegister := ReceptiveAccount new.
	
	secondPortfolio add: aRepeatedPortfolioRegister.
	aPortfolio add: aRepeatedPortfolioRegister.
	
	self 
		should: [ aPortfolio add: secondPortfolio. ]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedPortfolioRegistersErrorDescription
		
! !

!methodRemoval: PortfolioTest #test13deprecated stamp: 'Federico 11/7/2020 22:25:01'!
test13deprecated
	

	| aPortfolio secondPortfolio aRepeatedPortfolioRegister |
	
	aPortfolio := Portfolio new.
	secondPortfolio  := Portfolio new.
	
	aRepeatedPortfolioRegister := ReceptiveAccount new.
	
	secondPortfolio add: aRepeatedPortfolioRegister.
	aPortfolio add: aRepeatedPortfolioRegister.
	
	self 
		should: [ aPortfolio add: secondPortfolio. ]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedPortfolioRegistersErrorDescription
		
!
!PortfolioTest methodsFor: 'add tests' stamp: 'Federico 11/7/2020 22:26:17'!
test15AddedPortfolioChildsShouldNotBeInPortfolioChilds

	| mainPortfolio secondPortfolio aRepeatedPortfolio |
	
	mainPortfolio := Portfolio new.
	secondPortfolio := Portfolio new.
	aRepeatedPortfolio  := Portfolio new.
	
	mainPortfolio add: secondPortfolio. 
	secondPortfolio add: aRepeatedPortfolio.
	
	self 
		should: [ mainPortfolio add: aRepeatedPortfolio. ]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedPortfolioRegistersErrorDescription
		
! !

!methodRemoval: PortfolioTest #test15 stamp: 'Federico 11/7/2020 22:26:25'!
test15
	
	| aPortfolio secondPortfolio aRepeatedPortfolioRegister |
	
	aPortfolio := Portfolio new.
	secondPortfolio  := Portfolio new.
	
	aRepeatedPortfolioRegister := ReceptiveAccount new.
	
	secondPortfolio add: aRepeatedPortfolioRegister.
	aPortfolio add: aRepeatedPortfolioRegister.
	
	self 
		should: [ aPortfolio add: secondPortfolio. ]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedPortfolioRegistersErrorDescription
		
!
!PortfolioTest methodsFor: 'add tests' stamp: 'Federico 11/7/2020 22:26:43' prior: 50938867!
test15AddedPortfolioChildsShouldNotBeInPortfolioChilds
	
	| aPortfolio secondPortfolio aRepeatedPortfolioRegister |
	
	aPortfolio := Portfolio new.
	secondPortfolio  := Portfolio new.
	
	aRepeatedPortfolioRegister := ReceptiveAccount new.
	
	secondPortfolio add: aRepeatedPortfolioRegister.
	aPortfolio add: aRepeatedPortfolioRegister.
	
	self 
		should: [ aPortfolio add: secondPortfolio. ]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedPortfolioRegistersErrorDescription
		
! !
!PortfolioTest methodsFor: 'transactions tests' stamp: 'Federico 11/7/2020 22:26:52' prior: 50938768!
test15deprecated
"
	| mainPortfolio secondPortfolio thirdPortfolio aRepeatedPortfolioRegister |
	
	mainPortfolio := Portfolio new.
	secondPortfolio  := Portfolio new.
	thirdPortfolio  := Portfolio new.
	
	aRepeatedPortfolioRegister := ReceptiveAccount new.
		
	secondPortfolio add: aRepeatedPortfolioRegister.
	thirdPortfolio add: aRepeatedPortfolioRegister.
	
	mainPortfolio add: secondPortfolio. 

	self 
		should: [mainPortfolio add: thirdPortfolio.]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedPortfolioRegistersErrorDescription
		"
! !
!PortfolioTest methodsFor: 'transactions tests' stamp: 'Federico 11/7/2020 22:26:57' prior: 50938789!
test14deprecated
	"
	| aPortfolio secondPortfolio thirdPortfolio aRepeatedPortfolioRegister |
	
	aPortfolio := Portfolio new.
	secondPortfolio  := Portfolio new.
	thirdPortfolio  := Portfolio new.
	
	aRepeatedPortfolioRegister := ReceptiveAccount new.
		
	aPortfolio add: aRepeatedPortfolioRegister.
	thirdPortfolio add: aRepeatedPortfolioRegister.
	
	secondPortfolio add: thirdPortfolio. 

	self 
		should: [aPortfolio add: secondPortfolio.]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedPortfolioRegistersErrorDescription
		"
	! !

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'Federico 11/7/2020 22:27:01'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'Federico 11/7/2020 22:27:01'!
PASSED!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'Federico 11/7/2020 22:27:01'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'Federico 11/7/2020 22:27:01'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'Federico 11/7/2020 22:27:01'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'Federico 11/7/2020 22:27:01'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'Federico 11/7/2020 22:27:01'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'Federico 11/7/2020 22:27:01'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'Federico 11/7/2020 22:27:01'!
PASSED!

!testRun: #PortfolioTest #test10PortafolioShouldNotBeAddedToHimself stamp: 'Federico 11/7/2020 22:27:01'!
PASSED!

!testRun: #PortfolioTest #test11AddedPortfolioShouldNotContainRepeatedChilds stamp: 'Federico 11/7/2020 22:27:01'!
PASSED!

!testRun: #PortfolioTest #test12AddedPortafolioShouldNotContainSuccesiveRepeatedChilds stamp: 'Federico 11/7/2020 22:27:01'!
PASSED!

!testRun: #PortfolioTest #test13AddedPortafolioShouldNotBeInHisChilds stamp: 'Federico 11/7/2020 22:27:01'!
PASSED!

!testRun: #PortfolioTest #test14AddedPortafolioShouldNotBeInHisSuccesiveChilds stamp: 'Federico 11/7/2020 22:27:02'!
PASSED!

!testRun: #PortfolioTest #test14deprecated stamp: 'Federico 11/7/2020 22:27:02'!
PASSED!

!testRun: #PortfolioTest #test15AddedPortfolioChildsShouldNotBeInPortfolioChilds stamp: 'Federico 11/7/2020 22:27:02'!
FAILURE!

!testRun: #PortfolioTest #test15deprecated stamp: 'Federico 11/7/2020 22:27:02'!
PASSED!

!testRun: #PortfolioTest #test15AddedPortfolioChildsShouldNotBeInPortfolioChilds stamp: 'Federico 11/7/2020 22:27:02'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'Federico 11/7/2020 22:31:20' prior: 50938748!
add: aPortfolioRegister

	((self = aPortfolioRegister)
	or: [aPortfolioRegister hasPortfolioRegister: self]
	or:[self hasPortfolioRegister: aPortfolioRegister]
	
	or:[portfolioRegisters select: [ :childRegisters | aPortfolioRegister hasPortfolioRegister: childRegisters ]])
	
	ifTrue: [self error: self class shouldNotHaveRepeatedPortfolioRegistersErrorDescription ].
	"
	(
		(self hasPortfolioRegister: aPortfolioRegister)
		or: [aPortfolioRegister hasPortfolioRegister: self] 
	)
		ifTrue: [self error: self class shouldNotHaveRepeatedPortfolioRegistersErrorDescription ].
	"
	
	
	portfolioRegisters add: aPortfolioRegister.! !

!testRun: #PortfolioTest #test15AddedPortfolioChildsShouldNotBeInPortfolioChilds stamp: 'Federico 11/7/2020 22:31:21'!
FAILURE!

!testRun: #PortfolioTest #test15AddedPortfolioChildsShouldNotBeInPortfolioChilds stamp: 'Federico 11/7/2020 22:31:38'!
ERROR!
!Portfolio methodsFor: 'adding' stamp: 'Federico 11/7/2020 22:33:52' prior: 50939029!
add: aPortfolioRegister

	((self = aPortfolioRegister)
	or: [aPortfolioRegister hasPortfolioRegister: self]
	or:[self hasPortfolioRegister: aPortfolioRegister]
	
	or:[portfolioRegisters select: [ :childRegisters | aPortfolioRegister hasPortfolioRegister: childRegisters ] isEmpty not])
	
	ifTrue: [self error: self class shouldNotHaveRepeatedPortfolioRegistersErrorDescription ].
	"
	(
		(self hasPortfolioRegister: aPortfolioRegister)
		or: [aPortfolioRegister hasPortfolioRegister: self] 
	)
		ifTrue: [self error: self class shouldNotHaveRepeatedPortfolioRegistersErrorDescription ].
	"
	
	
	portfolioRegisters add: aPortfolioRegister.! !

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'Federico 11/7/2020 22:33:55'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'Federico 11/7/2020 22:33:56'!
ERROR!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'Federico 11/7/2020 22:33:56'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'Federico 11/7/2020 22:33:56'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'Federico 11/7/2020 22:33:56'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'Federico 11/7/2020 22:33:56'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'Federico 11/7/2020 22:33:56'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'Federico 11/7/2020 22:33:56'!
ERROR!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'Federico 11/7/2020 22:33:56'!
ERROR!

!testRun: #PortfolioTest #test10PortafolioShouldNotBeAddedToHimself stamp: 'Federico 11/7/2020 22:33:56'!
PASSED!

!testRun: #PortfolioTest #test11AddedPortfolioShouldNotContainRepeatedChilds stamp: 'Federico 11/7/2020 22:33:56'!
ERROR!

!testRun: #PortfolioTest #test12AddedPortafolioShouldNotContainSuccesiveRepeatedChilds stamp: 'Federico 11/7/2020 22:33:56'!
ERROR!

!testRun: #PortfolioTest #test13AddedPortafolioShouldNotBeInHisChilds stamp: 'Federico 11/7/2020 22:33:56'!
ERROR!

!testRun: #PortfolioTest #test14AddedPortafolioShouldNotBeInHisSuccesiveChilds stamp: 'Federico 11/7/2020 22:33:56'!
ERROR!

!testRun: #PortfolioTest #test14deprecated stamp: 'Federico 11/7/2020 22:33:56'!
PASSED!

!testRun: #PortfolioTest #test15AddedPortfolioChildsShouldNotBeInPortfolioChilds stamp: 'Federico 11/7/2020 22:33:56'!
ERROR!

!testRun: #PortfolioTest #test15deprecated stamp: 'Federico 11/7/2020 22:33:56'!
PASSED!
!Portfolio methodsFor: 'adding' stamp: 'Federico 11/7/2020 22:34:43' prior: 50939060!
add: aPortfolioRegister

	((self = aPortfolioRegister)
	or: [aPortfolioRegister hasPortfolioRegister: self]
	or:[self hasPortfolioRegister: aPortfolioRegister])
	
	ifTrue: [self error: self class shouldNotHaveRepeatedPortfolioRegistersErrorDescription ].
	"
	(
		(self hasPortfolioRegister: aPortfolioRegister)
		or: [aPortfolioRegister hasPortfolioRegister: self] 
	)
		ifTrue: [self error: self class shouldNotHaveRepeatedPortfolioRegistersErrorDescription ].
	"
	
	
	portfolioRegisters add: aPortfolioRegister.! !
!Portfolio methodsFor: 'adding' stamp: 'Federico 11/7/2020 22:38:05' prior: 50939145!
add: aPortfolioRegister

	((self = aPortfolioRegister)
	or: [aPortfolioRegister hasPortfolioRegister: self]
	or:[self hasPortfolioRegister: aPortfolioRegister]
	
	or: [(portfolioRegisters select: [ :childRegisters | childRegisters  hasPortfolioRegister: aPortfolioRegister ]) isEmpty not])
	
	ifTrue: [self error: self class shouldNotHaveRepeatedPortfolioRegistersErrorDescription ].
	"
	(
		(self hasPortfolioRegister: aPortfolioRegister)
		or: [aPortfolioRegister hasPortfolioRegister: self] 
	)
		ifTrue: [self error: self class shouldNotHaveRepeatedPortfolioRegistersErrorDescription ].
	"
	
	
	portfolioRegisters add: aPortfolioRegister.! !

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'Federico 11/7/2020 22:38:24'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'Federico 11/7/2020 22:38:26'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'Federico 11/7/2020 22:38:26'!
PASSED!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'Federico 11/7/2020 22:38:26'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'Federico 11/7/2020 22:38:26'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'Federico 11/7/2020 22:38:26'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'Federico 11/7/2020 22:38:26'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'Federico 11/7/2020 22:38:26'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'Federico 11/7/2020 22:38:26'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'Federico 11/7/2020 22:38:26'!
PASSED!

!testRun: #PortfolioTest #test10PortafolioShouldNotBeAddedToHimself stamp: 'Federico 11/7/2020 22:38:26'!
PASSED!

!testRun: #PortfolioTest #test11AddedPortfolioShouldNotContainRepeatedChilds stamp: 'Federico 11/7/2020 22:38:26'!
PASSED!

!testRun: #PortfolioTest #test12AddedPortafolioShouldNotContainSuccesiveRepeatedChilds stamp: 'Federico 11/7/2020 22:38:26'!
PASSED!

!testRun: #PortfolioTest #test13AddedPortafolioShouldNotBeInHisChilds stamp: 'Federico 11/7/2020 22:38:26'!
PASSED!

!testRun: #PortfolioTest #test14AddedPortafolioShouldNotBeInHisSuccesiveChilds stamp: 'Federico 11/7/2020 22:38:26'!
PASSED!

!testRun: #PortfolioTest #test14deprecated stamp: 'Federico 11/7/2020 22:38:27'!
PASSED!

!testRun: #PortfolioTest #test15AddedPortfolioChildsShouldNotBeInPortfolioChilds stamp: 'Federico 11/7/2020 22:38:27'!
FAILURE!

!testRun: #PortfolioTest #test15deprecated stamp: 'Federico 11/7/2020 22:38:27'!
PASSED!

!testRun: #PortfolioTest #test15AddedPortfolioChildsShouldNotBeInPortfolioChilds stamp: 'Federico 11/7/2020 22:38:27'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'Federico 11/7/2020 22:38:41' prior: 50939164!
add: aPortfolioRegister

	((self = aPortfolioRegister)
	or: [aPortfolioRegister hasPortfolioRegister: self]
	or:[self hasPortfolioRegister: aPortfolioRegister]
	
	or: [(portfolioRegisters select: [ :childRegisters | aPortfolioRegister  hasPortfolioRegister: childRegisters ]) isEmpty not])
	
	ifTrue: [self error: self class shouldNotHaveRepeatedPortfolioRegistersErrorDescription ].
	"
	(
		(self hasPortfolioRegister: aPortfolioRegister)
		or: [aPortfolioRegister hasPortfolioRegister: self] 
	)
		ifTrue: [self error: self class shouldNotHaveRepeatedPortfolioRegistersErrorDescription ].
	"
	
	
	portfolioRegisters add: aPortfolioRegister.! !

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'Federico 11/7/2020 22:38:46'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'Federico 11/7/2020 22:38:46'!
PASSED!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'Federico 11/7/2020 22:38:46'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'Federico 11/7/2020 22:38:46'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'Federico 11/7/2020 22:38:46'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'Federico 11/7/2020 22:38:46'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'Federico 11/7/2020 22:38:47'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'Federico 11/7/2020 22:38:47'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'Federico 11/7/2020 22:38:47'!
PASSED!

!testRun: #PortfolioTest #test10PortafolioShouldNotBeAddedToHimself stamp: 'Federico 11/7/2020 22:38:47'!
PASSED!

!testRun: #PortfolioTest #test11AddedPortfolioShouldNotContainRepeatedChilds stamp: 'Federico 11/7/2020 22:38:47'!
PASSED!

!testRun: #PortfolioTest #test12AddedPortafolioShouldNotContainSuccesiveRepeatedChilds stamp: 'Federico 11/7/2020 22:38:47'!
PASSED!

!testRun: #PortfolioTest #test13AddedPortafolioShouldNotBeInHisChilds stamp: 'Federico 11/7/2020 22:38:47'!
PASSED!

!testRun: #PortfolioTest #test14AddedPortafolioShouldNotBeInHisSuccesiveChilds stamp: 'Federico 11/7/2020 22:38:47'!
PASSED!

!testRun: #PortfolioTest #test14deprecated stamp: 'Federico 11/7/2020 22:38:47'!
PASSED!

!testRun: #PortfolioTest #test15AddedPortfolioChildsShouldNotBeInPortfolioChilds stamp: 'Federico 11/7/2020 22:38:47'!
PASSED!

!testRun: #PortfolioTest #test15deprecated stamp: 'Federico 11/7/2020 22:38:47'!
PASSED!
!Portfolio methodsFor: 'adding' stamp: 'Federico 11/7/2020 22:38:58' prior: 50939257!
add: aPortfolioRegister

	((self = aPortfolioRegister)
	or: [aPortfolioRegister hasPortfolioRegister: self]
	or:[self hasPortfolioRegister: aPortfolioRegister]
	
	or: [(portfolioRegisters select: [ :childRegisters | aPortfolioRegister  hasPortfolioRegister: childRegisters ]) isEmpty not])
	
	ifTrue: [self error: self class shouldNotHaveRepeatedPortfolioRegistersErrorDescription ].
	
	
	portfolioRegisters add: aPortfolioRegister.! !

!methodRemoval: PortfolioTest #test14deprecated stamp: 'Federico 11/7/2020 22:39:34'!
test14deprecated
	"
	| aPortfolio secondPortfolio thirdPortfolio aRepeatedPortfolioRegister |
	
	aPortfolio := Portfolio new.
	secondPortfolio  := Portfolio new.
	thirdPortfolio  := Portfolio new.
	
	aRepeatedPortfolioRegister := ReceptiveAccount new.
		
	aPortfolio add: aRepeatedPortfolioRegister.
	thirdPortfolio add: aRepeatedPortfolioRegister.
	
	secondPortfolio add: thirdPortfolio. 

	self 
		should: [aPortfolio add: secondPortfolio.]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedPortfolioRegistersErrorDescription
		"
	!

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'Federico 11/7/2020 22:39:50'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'Federico 11/7/2020 22:39:50'!
PASSED!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'Federico 11/7/2020 22:39:50'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'Federico 11/7/2020 22:39:50'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'Federico 11/7/2020 22:39:50'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'Federico 11/7/2020 22:39:50'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'Federico 11/7/2020 22:39:50'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'Federico 11/7/2020 22:39:50'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'Federico 11/7/2020 22:39:50'!
PASSED!

!testRun: #PortfolioTest #test10PortafolioShouldNotBeAddedToHimself stamp: 'Federico 11/7/2020 22:39:50'!
PASSED!

!testRun: #PortfolioTest #test11AddedPortfolioShouldNotContainRepeatedChilds stamp: 'Federico 11/7/2020 22:39:50'!
PASSED!

!testRun: #PortfolioTest #test12AddedPortafolioShouldNotContainSuccesiveRepeatedChilds stamp: 'Federico 11/7/2020 22:39:50'!
PASSED!

!testRun: #PortfolioTest #test13AddedPortafolioShouldNotBeInHisChilds stamp: 'Federico 11/7/2020 22:39:50'!
PASSED!

!testRun: #PortfolioTest #test14AddedPortafolioShouldNotBeInHisSuccesiveChilds stamp: 'Federico 11/7/2020 22:39:50'!
PASSED!

!testRun: #PortfolioTest #test15AddedPortfolioChildsShouldNotBeInPortfolioChilds stamp: 'Federico 11/7/2020 22:39:50'!
PASSED!

!testRun: #PortfolioTest #test15deprecated stamp: 'Federico 11/7/2020 22:39:50'!
PASSED!
!PortfolioTest methodsFor: 'add tests' stamp: 'Federico 11/7/2020 22:40:31' prior: 50938902!
test15AddedPortfolioChildsShouldNotBeInPortfolioChilds
	
	| aPortfolio secondPortfolio thirdPortfolio aRepeatedPortfolioRegister |
	
	aPortfolio := Portfolio new.
	secondPortfolio  := Portfolio new.
	thirdPortfolio  := Portfolio new.
	
	aRepeatedPortfolioRegister := ReceptiveAccount new.
	
	secondPortfolio add: thirdPortfolio.
	thirdPortfolio add: aRepeatedPortfolioRegister.
	aPortfolio add: aRepeatedPortfolioRegister.
	
	self 
		should: [ aPortfolio add: secondPortfolio. ]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedPortfolioRegistersErrorDescription
		
! !
!PortfolioTest methodsFor: 'add tests' stamp: 'Federico 11/7/2020 22:26:43' prior: 50939439!
test15AddedPortfolioChildsShouldNotBeInPortfolioChilds
	
	| aPortfolio secondPortfolio aRepeatedPortfolioRegister |
	
	aPortfolio := Portfolio new.
	secondPortfolio  := Portfolio new.
	
	aRepeatedPortfolioRegister := ReceptiveAccount new.
	
	secondPortfolio add: aRepeatedPortfolioRegister.
	aPortfolio add: aRepeatedPortfolioRegister.
	
	self 
		should: [ aPortfolio add: secondPortfolio. ]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedPortfolioRegistersErrorDescription
		
! !

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'Federico 11/7/2020 22:41:13'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'Federico 11/7/2020 22:41:13'!
PASSED!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'Federico 11/7/2020 22:41:13'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'Federico 11/7/2020 22:41:13'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'Federico 11/7/2020 22:41:13'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'Federico 11/7/2020 22:41:13'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'Federico 11/7/2020 22:41:13'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'Federico 11/7/2020 22:41:13'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'Federico 11/7/2020 22:41:13'!
PASSED!

!testRun: #PortfolioTest #test10PortafolioShouldNotBeAddedToHimself stamp: 'Federico 11/7/2020 22:41:13'!
PASSED!

!testRun: #PortfolioTest #test11AddedPortfolioShouldNotContainRepeatedChilds stamp: 'Federico 11/7/2020 22:41:13'!
PASSED!

!testRun: #PortfolioTest #test12AddedPortafolioShouldNotContainSuccesiveRepeatedChilds stamp: 'Federico 11/7/2020 22:41:14'!
PASSED!

!testRun: #PortfolioTest #test13AddedPortafolioShouldNotBeInHisChilds stamp: 'Federico 11/7/2020 22:41:14'!
PASSED!

!testRun: #PortfolioTest #test14AddedPortafolioShouldNotBeInHisSuccesiveChilds stamp: 'Federico 11/7/2020 22:41:14'!
PASSED!

!testRun: #PortfolioTest #test15AddedPortfolioChildsShouldNotBeInPortfolioChilds stamp: 'Federico 11/7/2020 22:41:14'!
PASSED!

!testRun: #PortfolioTest #test15deprecated stamp: 'Federico 11/7/2020 22:41:14'!
PASSED!
!PortfolioTest methodsFor: 'add tests' stamp: 'Federico 11/7/2020 22:46:25'!
test16AddedPortfolioChildsJerarchyShouldNotBeInHisChildJerarchy
	
	| aPortfolio secondPortfolio thirdPortfolio aRepeatedPortfolioRegister |
	
	aPortfolio := Portfolio new.
	secondPortfolio  := Portfolio new.
	thirdPortfolio := Portfolio new.
	
	aRepeatedPortfolioRegister := ReceptiveAccount new.
	
	thirdPortfolio add: aRepeatedPortfolioRegister.
	secondPortfolio add: aRepeatedPortfolioRegister.
	
	aPortfolio add: secondPortfolio.
	
	self 
		should: [ aPortfolio add: thirdPortfolio. ]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedPortfolioRegistersErrorDescription
		
! !

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'Federico 11/7/2020 22:46:29'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'Federico 11/7/2020 22:46:29'!
PASSED!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'Federico 11/7/2020 22:46:29'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'Federico 11/7/2020 22:46:29'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'Federico 11/7/2020 22:46:29'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'Federico 11/7/2020 22:46:29'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'Federico 11/7/2020 22:46:29'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'Federico 11/7/2020 22:46:29'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'Federico 11/7/2020 22:46:29'!
PASSED!

!testRun: #PortfolioTest #test10PortafolioShouldNotBeAddedToHimself stamp: 'Federico 11/7/2020 22:46:29'!
PASSED!

!testRun: #PortfolioTest #test11AddedPortfolioShouldNotContainRepeatedChilds stamp: 'Federico 11/7/2020 22:46:29'!
PASSED!

!testRun: #PortfolioTest #test12AddedPortafolioShouldNotContainSuccesiveRepeatedChilds stamp: 'Federico 11/7/2020 22:46:29'!
PASSED!

!testRun: #PortfolioTest #test13AddedPortafolioShouldNotBeInHisChilds stamp: 'Federico 11/7/2020 22:46:29'!
PASSED!

!testRun: #PortfolioTest #test14AddedPortafolioShouldNotBeInHisSuccesiveChilds stamp: 'Federico 11/7/2020 22:46:29'!
PASSED!

!testRun: #PortfolioTest #test15AddedPortfolioChildsShouldNotBeInPortfolioChilds stamp: 'Federico 11/7/2020 22:46:29'!
PASSED!

!testRun: #PortfolioTest #test15deprecated stamp: 'Federico 11/7/2020 22:46:30'!
PASSED!

!testRun: #PortfolioTest #test16AddedPortfolioChildsJerarchyShouldNotBeInHisChildJerarchy stamp: 'Federico 11/7/2020 22:46:30'!
FAILURE!

!testRun: #PortfolioTest #test16AddedPortfolioChildsJerarchyShouldNotBeInHisChildJerarchy stamp: 'Federico 11/7/2020 22:46:30'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'Federico 11/7/2020 22:46:55' prior: 50939343!
add: aPortfolioRegister

	((self = aPortfolioRegister)
	or: [aPortfolioRegister hasPortfolioRegister: self]
	or:[self hasPortfolioRegister: aPortfolioRegister]
	
	or: [(portfolioRegisters select: [ :childRegisters | aPortfolioRegister  hasPortfolioRegister: childRegisters ]) isEmpty not]
	or: [(portfolioRegisters select: [ :childRegisters | childRegisters  hasPortfolioRegister: aPortfolioRegister ]) isEmpty not])
	
	ifTrue: [self error: self class shouldNotHaveRepeatedPortfolioRegistersErrorDescription ].
	
	
	portfolioRegisters add: aPortfolioRegister.! !

!testRun: #PortfolioTest #test16AddedPortfolioChildsJerarchyShouldNotBeInHisChildJerarchy stamp: 'Federico 11/7/2020 22:46:57'!
FAILURE!

	portfolioRegisters select: [ :childRegisters | aPortfolioRegister  hasPortfolioRegister: childRegisters ].!

portfolioRegisters select: [ :childRegisters | aPortfolioRegister  hasPortfolioRegister: childRegisters ].!

	portfolioRegisters !

	(portfolioRegisters select: [:childRegisters | childRegisters includes: aPortfolioRegister])!

(portfolioRegisters select: [:childRegisters | childRegisters includes: aPortfolioRegister])!

	portfolioRegisters select: [ :childRegisters | childRegisters includes: aPortfolioRegister].!

	portfolioRegisters select: [ :childRegisters | childRegisters includes: aPortfolioRegister] isEmpty.!

	portfolioRegisters select: [ :childRegisters | childRegisters includes: aPortfolioRegister] isEmpty not.!

!testRun: #PortfolioTest #test16AddedPortfolioChildsJerarchyShouldNotBeInHisChildJerarchy stamp: 'Federico 11/7/2020 22:52:19'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'Federico 11/7/2020 22:52:31' prior: 50939629!
add: aPortfolioRegister

	((self = aPortfolioRegister)
	or: [aPortfolioRegister hasPortfolioRegister: self]
	or:[self hasPortfolioRegister: aPortfolioRegister]
	
	or: [(portfolioRegisters select: [ :childRegisters | aPortfolioRegister  hasPortfolioRegister: childRegisters ]) isEmpty not])
	
	ifTrue: [self error: self class shouldNotHaveRepeatedPortfolioRegistersErrorDescription ].
	
	
	portfolioRegisters add: aPortfolioRegister.! !

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'Federico 11/7/2020 22:52:37'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'Federico 11/7/2020 22:52:37'!
PASSED!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'Federico 11/7/2020 22:52:37'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'Federico 11/7/2020 22:52:37'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'Federico 11/7/2020 22:52:37'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'Federico 11/7/2020 22:52:37'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'Federico 11/7/2020 22:52:37'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'Federico 11/7/2020 22:52:37'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'Federico 11/7/2020 22:52:38'!
PASSED!

!testRun: #PortfolioTest #test10PortafolioShouldNotBeAddedToHimself stamp: 'Federico 11/7/2020 22:52:38'!
PASSED!

!testRun: #PortfolioTest #test11AddedPortfolioShouldNotContainRepeatedChilds stamp: 'Federico 11/7/2020 22:52:38'!
PASSED!

!testRun: #PortfolioTest #test12AddedPortafolioShouldNotContainSuccesiveRepeatedChilds stamp: 'Federico 11/7/2020 22:52:38'!
PASSED!

!testRun: #PortfolioTest #test13AddedPortafolioShouldNotBeInHisChilds stamp: 'Federico 11/7/2020 22:52:38'!
PASSED!

!testRun: #PortfolioTest #test14AddedPortafolioShouldNotBeInHisSuccesiveChilds stamp: 'Federico 11/7/2020 22:52:38'!
PASSED!

!testRun: #PortfolioTest #test15AddedPortfolioChildsShouldNotBeInPortfolioChilds stamp: 'Federico 11/7/2020 22:52:38'!
PASSED!

!testRun: #PortfolioTest #test15deprecated stamp: 'Federico 11/7/2020 22:52:38'!
PASSED!

!testRun: #PortfolioTest #test16AddedPortfolioChildsJerarchyShouldNotBeInHisChildJerarchy stamp: 'Federico 11/7/2020 22:52:38'!
FAILURE!

!testRun: #PortfolioTest #test16AddedPortfolioChildsJerarchyShouldNotBeInHisChildJerarchy stamp: 'Federico 11/7/2020 22:52:38'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'Federico 11/7/2020 22:54:16' prior: 50939682!
add: aPortfolioRegister

	((self = aPortfolioRegister)
	or: [aPortfolioRegister hasPortfolioRegister: self]
	or:[self hasPortfolioRegister: aPortfolioRegister]
	
	or: [(portfolioRegisters select: [ :childRegisters | aPortfolioRegister  hasPortfolioRegister: childRegisters ]) isEmpty not])
	
	ifTrue: [self error: self class shouldNotHaveRepeatedPortfolioRegistersErrorDescription ].
	
	
	portfolioRegisters add: aPortfolioRegister.! !
!Portfolio methodsFor: 'testing' stamp: 'Federico 11/7/2020 22:54:30' prior: 50938665!
hasPortfolioRegister: aPortfolioRegister

	^(portfolioRegisters includes: aPortfolioRegister)
	or: [(portfolioRegisters select: [ :childRegisters | aPortfolioRegister  hasPortfolioRegister: childRegisters ]) isEmpty not].
	"
	^(self = aPortfolioRegister)
	or: [portfolioRegisters includes: aPortfolioRegister]
	or: [(portfolioRegisters select: [ :selfportfolioRegisters | selfportfolioRegisters  hasPortfolioRegister: aPortfolioRegister ]) isEmpty not] 
	
	or: [(portfolioRegisters select: [ :selfportfolioRegisters | aPortfolioRegister  hasPortfolioRegister: selfportfolioRegisters ]) isEmpty not] 
	"
	! !

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'Federico 11/7/2020 22:54:33'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'Federico 11/7/2020 22:54:33'!
PASSED!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'Federico 11/7/2020 22:54:33'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'Federico 11/7/2020 22:54:33'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'Federico 11/7/2020 22:54:33'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'Federico 11/7/2020 22:54:33'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'Federico 11/7/2020 22:54:33'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'Federico 11/7/2020 22:54:34'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'Federico 11/7/2020 22:54:34'!
PASSED!

!testRun: #PortfolioTest #test10PortafolioShouldNotBeAddedToHimself stamp: 'Federico 11/7/2020 22:54:34'!
PASSED!

!testRun: #PortfolioTest #test11AddedPortfolioShouldNotContainRepeatedChilds stamp: 'Federico 11/7/2020 22:54:34'!
PASSED!

!testRun: #PortfolioTest #test12AddedPortafolioShouldNotContainSuccesiveRepeatedChilds stamp: 'Federico 11/7/2020 22:54:34'!
FAILURE!

!testRun: #PortfolioTest #test13AddedPortafolioShouldNotBeInHisChilds stamp: 'Federico 11/7/2020 22:54:34'!
PASSED!

!testRun: #PortfolioTest #test14AddedPortafolioShouldNotBeInHisSuccesiveChilds stamp: 'Federico 11/7/2020 22:54:34'!
FAILURE!

!testRun: #PortfolioTest #test15AddedPortfolioChildsShouldNotBeInPortfolioChilds stamp: 'Federico 11/7/2020 22:54:34'!
PASSED!

!testRun: #PortfolioTest #test15deprecated stamp: 'Federico 11/7/2020 22:54:34'!
PASSED!

!testRun: #PortfolioTest #test16AddedPortfolioChildsJerarchyShouldNotBeInHisChildJerarchy stamp: 'Federico 11/7/2020 22:54:34'!
PASSED!
!Portfolio methodsFor: 'testing' stamp: 'Federico 11/7/2020 22:55:01' prior: 50939784!
hasPortfolioRegister: aPortfolioRegister

	^(portfolioRegisters includes: aPortfolioRegister)
	or: [(portfolioRegisters select: [ :childRegisters | aPortfolioRegister  hasPortfolioRegister: childRegisters ]) isEmpty not]
	or: [(portfolioRegisters select: [ :childRegisters | childRegisters  hasPortfolioRegister: aPortfolioRegister ]) isEmpty not].
	"
	^(self = aPortfolioRegister)
	or: [portfolioRegisters includes: aPortfolioRegister]
	or: [(portfolioRegisters select: [ :selfportfolioRegisters | selfportfolioRegisters  hasPortfolioRegister: aPortfolioRegister ]) isEmpty not] 
	
	or: [(portfolioRegisters select: [ :selfportfolioRegisters | aPortfolioRegister  hasPortfolioRegister: selfportfolioRegisters ]) isEmpty not] 
	"
	! !

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'Federico 11/7/2020 22:55:04'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'Federico 11/7/2020 22:55:05'!
PASSED!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'Federico 11/7/2020 22:55:05'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'Federico 11/7/2020 22:55:05'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'Federico 11/7/2020 22:55:05'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'Federico 11/7/2020 22:55:05'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'Federico 11/7/2020 22:55:05'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'Federico 11/7/2020 22:55:05'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'Federico 11/7/2020 22:55:05'!
PASSED!

!testRun: #PortfolioTest #test10PortafolioShouldNotBeAddedToHimself stamp: 'Federico 11/7/2020 22:55:05'!
PASSED!

!testRun: #PortfolioTest #test11AddedPortfolioShouldNotContainRepeatedChilds stamp: 'Federico 11/7/2020 22:55:05'!
PASSED!

!testRun: #PortfolioTest #test12AddedPortafolioShouldNotContainSuccesiveRepeatedChilds stamp: 'Federico 11/7/2020 22:55:05'!
PASSED!

!testRun: #PortfolioTest #test13AddedPortafolioShouldNotBeInHisChilds stamp: 'Federico 11/7/2020 22:55:05'!
PASSED!

!testRun: #PortfolioTest #test14AddedPortafolioShouldNotBeInHisSuccesiveChilds stamp: 'Federico 11/7/2020 22:55:05'!
PASSED!

!testRun: #PortfolioTest #test15AddedPortfolioChildsShouldNotBeInPortfolioChilds stamp: 'Federico 11/7/2020 22:55:05'!
PASSED!

!testRun: #PortfolioTest #test15deprecated stamp: 'Federico 11/7/2020 22:55:05'!
PASSED!

!testRun: #PortfolioTest #test16AddedPortfolioChildsJerarchyShouldNotBeInHisChildJerarchy stamp: 'Federico 11/7/2020 22:55:05'!
PASSED!
!Portfolio methodsFor: 'adding' stamp: 'Federico 11/7/2020 22:55:13' prior: 50939767!
add: aPortfolioRegister

	((self = aPortfolioRegister)
	or: [aPortfolioRegister hasPortfolioRegister: self]
	or:[self hasPortfolioRegister: aPortfolioRegister])
	
	ifTrue: [self error: self class shouldNotHaveRepeatedPortfolioRegistersErrorDescription ].
	
	
	portfolioRegisters add: aPortfolioRegister.! !

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'Federico 11/7/2020 22:55:16'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'Federico 11/7/2020 22:55:16'!
PASSED!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'Federico 11/7/2020 22:55:16'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'Federico 11/7/2020 22:55:16'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'Federico 11/7/2020 22:55:16'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'Federico 11/7/2020 22:55:16'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'Federico 11/7/2020 22:55:16'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'Federico 11/7/2020 22:55:16'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'Federico 11/7/2020 22:55:16'!
PASSED!

!testRun: #PortfolioTest #test10PortafolioShouldNotBeAddedToHimself stamp: 'Federico 11/7/2020 22:55:16'!
PASSED!

!testRun: #PortfolioTest #test11AddedPortfolioShouldNotContainRepeatedChilds stamp: 'Federico 11/7/2020 22:55:16'!
PASSED!

!testRun: #PortfolioTest #test12AddedPortafolioShouldNotContainSuccesiveRepeatedChilds stamp: 'Federico 11/7/2020 22:55:16'!
PASSED!

!testRun: #PortfolioTest #test13AddedPortafolioShouldNotBeInHisChilds stamp: 'Federico 11/7/2020 22:55:16'!
PASSED!

!testRun: #PortfolioTest #test14AddedPortafolioShouldNotBeInHisSuccesiveChilds stamp: 'Federico 11/7/2020 22:55:16'!
PASSED!

!testRun: #PortfolioTest #test15AddedPortfolioChildsShouldNotBeInPortfolioChilds stamp: 'Federico 11/7/2020 22:55:16'!
PASSED!

!testRun: #PortfolioTest #test15deprecated stamp: 'Federico 11/7/2020 22:55:17'!
PASSED!

!testRun: #PortfolioTest #test16AddedPortfolioChildsJerarchyShouldNotBeInHisChildJerarchy stamp: 'Federico 11/7/2020 22:55:17'!
PASSED!
!Portfolio methodsFor: 'testing' stamp: 'Federico 11/7/2020 22:55:27' prior: 50939870!
hasPortfolioRegister: aPortfolioRegister

	^(portfolioRegisters includes: aPortfolioRegister)
	or: [(portfolioRegisters select: [ :childRegisters | aPortfolioRegister  hasPortfolioRegister: childRegisters ]) isEmpty not]
	or: [(portfolioRegisters select: [ :childRegisters | childRegisters  hasPortfolioRegister: aPortfolioRegister ]) isEmpty not].
	! !

!methodRemoval: PortfolioTest #test15deprecated stamp: 'Federico 11/7/2020 22:55:45'!
test15deprecated
"
	| mainPortfolio secondPortfolio thirdPortfolio aRepeatedPortfolioRegister |
	
	mainPortfolio := Portfolio new.
	secondPortfolio  := Portfolio new.
	thirdPortfolio  := Portfolio new.
	
	aRepeatedPortfolioRegister := ReceptiveAccount new.
		
	secondPortfolio add: aRepeatedPortfolioRegister.
	thirdPortfolio add: aRepeatedPortfolioRegister.
	
	mainPortfolio add: secondPortfolio. 

	self 
		should: [mainPortfolio add: thirdPortfolio.]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedPortfolioRegistersErrorDescription
		"
!

----SNAPSHOT----(7 November 2020 22:55:56) CuisUniversity-4365.image priorSource: 19371638!

----SNAPSHOT----(7 November 2020 23:31:03) CuisUniversity-4365.image priorSource: 19469448!
!PortfolioTest methodsFor: 'add tests' stamp: 'Federico 11/7/2020 23:31:31'!
test16AddedPortfolioHerarchyShouldNotBeInHisHerarchy
	
	| aPortfolio secondPortfolio thirdPortfolio aRepeatedPortfolioRegister |
	
	aPortfolio := Portfolio new.
	secondPortfolio  := Portfolio new.
	thirdPortfolio := Portfolio new.
	
	aRepeatedPortfolioRegister := ReceptiveAccount new.
	
	thirdPortfolio add: aRepeatedPortfolioRegister.
	secondPortfolio add: aRepeatedPortfolioRegister.
	
	aPortfolio add: secondPortfolio.
	
	self 
		should: [ aPortfolio add: thirdPortfolio. ]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedPortfolioRegistersErrorDescription
		
! !

!methodRemoval: PortfolioTest #test16AddedPortfolioChildsJerarchyShouldNotBeInHisChildJerarchy stamp: 'Federico 11/7/2020 23:31:41'!
test16AddedPortfolioChildsJerarchyShouldNotBeInHisChildJerarchy
	
	| aPortfolio secondPortfolio thirdPortfolio aRepeatedPortfolioRegister |
	
	aPortfolio := Portfolio new.
	secondPortfolio  := Portfolio new.
	thirdPortfolio := Portfolio new.
	
	aRepeatedPortfolioRegister := ReceptiveAccount new.
	
	thirdPortfolio add: aRepeatedPortfolioRegister.
	secondPortfolio add: aRepeatedPortfolioRegister.
	
	aPortfolio add: secondPortfolio.
	
	self 
		should: [ aPortfolio add: thirdPortfolio. ]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedPortfolioRegistersErrorDescription
		
!

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'Federico 11/7/2020 23:31:55'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'Federico 11/7/2020 23:31:55'!
PASSED!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'Federico 11/7/2020 23:31:55'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'Federico 11/7/2020 23:31:55'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'Federico 11/7/2020 23:31:55'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'Federico 11/7/2020 23:31:55'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'Federico 11/7/2020 23:31:55'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'Federico 11/7/2020 23:31:55'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'Federico 11/7/2020 23:31:55'!
PASSED!

!testRun: #PortfolioTest #test10PortafolioShouldNotBeAddedToHimself stamp: 'Federico 11/7/2020 23:31:55'!
PASSED!

!testRun: #PortfolioTest #test11AddedPortfolioShouldNotContainRepeatedChilds stamp: 'Federico 11/7/2020 23:31:55'!
PASSED!

!testRun: #PortfolioTest #test12AddedPortafolioShouldNotContainSuccesiveRepeatedChilds stamp: 'Federico 11/7/2020 23:31:55'!
PASSED!

!testRun: #PortfolioTest #test13AddedPortafolioShouldNotBeInHisChilds stamp: 'Federico 11/7/2020 23:31:55'!
PASSED!

!testRun: #PortfolioTest #test14AddedPortafolioShouldNotBeInHisSuccesiveChilds stamp: 'Federico 11/7/2020 23:31:56'!
PASSED!

!testRun: #PortfolioTest #test15AddedPortfolioChildsShouldNotBeInPortfolioChilds stamp: 'Federico 11/7/2020 23:31:56'!
PASSED!

!testRun: #PortfolioTest #test16AddedPortfolioHerarchyShouldNotBeInHisHerarchy stamp: 'Federico 11/7/2020 23:31:56'!
PASSED!

----SNAPSHOT----(7 November 2020 23:32:03) CuisUniversity-4365.image priorSource: 19469541!

----QUIT----(7 November 2020 23:34:38) CuisUniversity-4365.image priorSource: 19472979!

----STARTUP---- (8 November 2020 16:03:55) as D:\facultad\Smalltalk\windows64\CuisUniversity-4365.image!

!PortfolioTest methodsFor: 'add tests' stamp: 'Federico 11/8/2020 16:59:35'!
test17
	
	| rootPortfolio secondPortfolio thirdPortfolio  |
	
	rootPortfolio := Portfolio new.
	secondPortfolio  := Portfolio new.
	thirdPortfolio := Portfolio new.

	rootPortfolio add: secondPortfolio.
	rootPortfolio add: thirdPortfolio.
	
	
	self 
		should: [ secondPortfolio add: thirdPortfolio ]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedPortfolioRegistersErrorDescription
		
! !
!PortfolioTest methodsFor: 'add tests' stamp: 'Federico 11/8/2020 16:59:40' prior: 50940191!
test17
	
	| rootPortfolio secondPortfolio thirdPortfolio  |
	
	rootPortfolio := Portfolio new.
	secondPortfolio  := Portfolio new.
	thirdPortfolio := Portfolio new.

	rootPortfolio add: secondPortfolio.
	rootPortfolio add: thirdPortfolio.
	
	self 
		should: [ secondPortfolio add: thirdPortfolio ]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedPortfolioRegistersErrorDescription
		
! !

!testRun: #PortfolioTest #test17 stamp: 'Federico 11/8/2020 16:59:43'!
FAILURE!

!classDefinition: #Portfolio category: #'Portfolio-Ejercicio' stamp: 'Federico 11/8/2020 17:04:50'!
PortfolioRegister subclass: #Portfolio
	instanceVariableNames: 'portfolioRegisters parentRegister'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'adding' stamp: 'Federico 11/8/2020 17:04:44' prior: 50939960!
add: aPortfolioRegister
	
	((self = aPortfolioRegister)
	or: [aPortfolioRegister hasPortfolioRegister: self]
	or:[self hasPortfolioRegister: aPortfolioRegister]
	or:[parentRegister hasPortfolioRegister: aPortfolioRegister])
	
	ifTrue: [self error: self class shouldNotHaveRepeatedPortfolioRegistersErrorDescription ].
	
	portfolioRegisters add: aPortfolioRegister.
	
	"parentRegister en initialize parentRegister es null o nil, o no seteado o false"
	
	"parentRegister luego del add es self o el root que lo llamo"
	! !
!Portfolio methodsFor: 'adding' stamp: 'Federico 11/8/2020 17:05:34' prior: 50940234!
add: aPortfolioRegister
	
	((self = aPortfolioRegister)
	or: [aPortfolioRegister hasPortfolioRegister: self]
	or:[self hasPortfolioRegister: aPortfolioRegister]
	or:[parentRegister hasPortfolioRegister: aPortfolioRegister])
	
	ifTrue: [self error: self class shouldNotHaveRepeatedPortfolioRegistersErrorDescription ].
	
	portfolioRegisters add: aPortfolioRegister.
	
	aPortfolioRegister setParentRegister: self.
	
	"parentRegister en initialize parentRegister es null o nil, o no seteado o false"
	
	"parentRegister luego del add es self o el root que lo llamo"
	! !

!testRun: #PortfolioTest #test17 stamp: 'Federico 11/8/2020 17:05:41'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'Federico 11/8/2020 17:06:00' prior: 50940253!
add: aPortfolioRegister
	
	((self = aPortfolioRegister)
	or: [aPortfolioRegister hasPortfolioRegister: self]
	or:[self hasPortfolioRegister: aPortfolioRegister]
	or:[parentRegister hasPortfolioRegister: aPortfolioRegister])
	ifTrue: [self error: self class shouldNotHaveRepeatedPortfolioRegistersErrorDescription ].
	
	
	portfolioRegisters add: aPortfolioRegister.
	aPortfolioRegister setParentRegister: self.
	! !

!testRun: #PortfolioTest #test17 stamp: 'Federico 11/8/2020 17:06:07'!
ERROR!

!testRun: #PortfolioTest #test17 stamp: 'Federico 11/8/2020 17:06:28'!
ERROR!
!Portfolio methodsFor: 'adding' stamp: 'Federico 11/8/2020 17:06:53' prior: 50940276!
add: aPortfolioRegister
	
	((self = aPortfolioRegister)
	or: [aPortfolioRegister hasPortfolioRegister: self]
	or:[self hasPortfolioRegister: aPortfolioRegister]
	"or:[parentRegister hasPortfolioRegister: aPortfolioRegister]")
	ifTrue: [self error: self class shouldNotHaveRepeatedPortfolioRegistersErrorDescription ].
	
	
	portfolioRegisters add: aPortfolioRegister.
	aPortfolioRegister setParentRegister: self.
	! !

!testRun: #PortfolioTest #test17 stamp: 'Federico 11/8/2020 17:06:54'!
ERROR!

!testRun: #PortfolioTest #test17 stamp: 'Federico 11/8/2020 17:07:05'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Federico 11/8/2020 17:08:26'!
setParentRegister: aPortfolio 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Federico 11/8/2020 17:09:19' prior: 50940318!
setParentRegister: aPortfolio
	parentRegister := aPortfolio.! !

!testRun: #PortfolioTest #test17 stamp: 'Federico 11/8/2020 17:09:25'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'Federico 11/8/2020 17:09:46' prior: 50940297!
add: aPortfolioRegister
	
	((self = aPortfolioRegister)
	or: [aPortfolioRegister hasPortfolioRegister: self]
	or:[self hasPortfolioRegister: aPortfolioRegister]
	or:[parentRegister hasPortfolioRegister: aPortfolioRegister])
	ifTrue: [self error: self class shouldNotHaveRepeatedPortfolioRegistersErrorDescription ].
	
	
	portfolioRegisters add: aPortfolioRegister.
	aPortfolioRegister setParentRegister: self.
	! !
!Portfolio methodsFor: 'adding' stamp: 'Federico 11/8/2020 17:11:13' prior: 50940331!
add: aPortfolioRegister
	
	((self = aPortfolioRegister)
	or: [aPortfolioRegister hasPortfolioRegister: self]
	or:[self hasPortfolioRegister: aPortfolioRegister]
	or:[parentRegister ifNotNil: [parentRegister hasPortfolioRegister: aPortfolioRegister]])
	ifTrue: [self error: self class shouldNotHaveRepeatedPortfolioRegistersErrorDescription ].
	
	
	portfolioRegisters add: aPortfolioRegister.
	aPortfolioRegister setParentRegister: self.
	! !

!testRun: #PortfolioTest #test17 stamp: 'Federico 11/8/2020 17:11:15'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'Federico 11/8/2020 17:11:15'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'Federico 11/8/2020 17:11:15'!
ERROR!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'Federico 11/8/2020 17:11:16'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'Federico 11/8/2020 17:11:16'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'Federico 11/8/2020 17:11:16'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'Federico 11/8/2020 17:11:16'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'Federico 11/8/2020 17:11:16'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'Federico 11/8/2020 17:11:16'!
ERROR!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'Federico 11/8/2020 17:11:16'!
ERROR!

!testRun: #PortfolioTest #test10PortafolioShouldNotBeAddedToHimself stamp: 'Federico 11/8/2020 17:11:16'!
PASSED!

!testRun: #PortfolioTest #test11AddedPortfolioShouldNotContainRepeatedChilds stamp: 'Federico 11/8/2020 17:11:16'!
ERROR!

!testRun: #PortfolioTest #test12AddedPortafolioShouldNotContainSuccesiveRepeatedChilds stamp: 'Federico 11/8/2020 17:11:16'!
ERROR!

!testRun: #PortfolioTest #test13AddedPortafolioShouldNotBeInHisChilds stamp: 'Federico 11/8/2020 17:11:16'!
ERROR!

!testRun: #PortfolioTest #test14AddedPortafolioShouldNotBeInHisSuccesiveChilds stamp: 'Federico 11/8/2020 17:11:16'!
ERROR!

!testRun: #PortfolioTest #test15AddedPortfolioChildsShouldNotBeInPortfolioChilds stamp: 'Federico 11/8/2020 17:11:16'!
ERROR!

!testRun: #PortfolioTest #test16AddedPortfolioHerarchyShouldNotBeInHisHerarchy stamp: 'Federico 11/8/2020 17:11:16'!
ERROR!

!testRun: #PortfolioTest #test17 stamp: 'Federico 11/8/2020 17:11:16'!
ERROR!

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'Federico 11/8/2020 17:11:32'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'Federico 11/8/2020 17:11:32'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'Federico 11/8/2020 17:11:32'!
PASSED!

!testRun: #PortfolioTest #test10PortafolioShouldNotBeAddedToHimself stamp: 'Federico 11/8/2020 17:11:32'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'Federico 11/8/2020 17:11:32'!
ERROR!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'Federico 11/8/2020 17:11:32'!
ERROR!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'Federico 11/8/2020 17:11:32'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'Federico 11/8/2020 17:11:32'!
ERROR!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'Federico 11/8/2020 17:11:32'!
ERROR!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'Federico 11/8/2020 17:11:32'!
ERROR!

!testRun: #PortfolioTest #test11AddedPortfolioShouldNotContainRepeatedChilds stamp: 'Federico 11/8/2020 17:11:32'!
ERROR!

!testRun: #PortfolioTest #test12AddedPortafolioShouldNotContainSuccesiveRepeatedChilds stamp: 'Federico 11/8/2020 17:11:32'!
ERROR!

!testRun: #PortfolioTest #test13AddedPortafolioShouldNotBeInHisChilds stamp: 'Federico 11/8/2020 17:11:32'!
ERROR!

!testRun: #PortfolioTest #test14AddedPortafolioShouldNotBeInHisSuccesiveChilds stamp: 'Federico 11/8/2020 17:11:32'!
ERROR!

!testRun: #PortfolioTest #test15AddedPortfolioChildsShouldNotBeInPortfolioChilds stamp: 'Federico 11/8/2020 17:11:32'!
ERROR!

!testRun: #PortfolioTest #test16AddedPortfolioHerarchyShouldNotBeInHisHerarchy stamp: 'Federico 11/8/2020 17:11:32'!
ERROR!

!testRun: #PortfolioTest #test17 stamp: 'Federico 11/8/2020 17:11:32'!
ERROR!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'Federico 11/8/2020 17:11:34'!
ERROR!

!classDefinition: #ReceptiveAccount category: #'Portfolio-Ejercicio' stamp: 'Federico 11/8/2020 17:12:04'!
PortfolioRegister subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions parentRegister'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!ReceptiveAccount methodsFor: 'nil' stamp: 'Federico 11/8/2020 17:12:03'!
setParentRegister: aPortfolio
	parentRegister := aPortfolio.! !

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'Federico 11/8/2020 17:12:20'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'Federico 11/8/2020 17:12:20'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'Federico 11/8/2020 17:12:20'!
ERROR!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'Federico 11/8/2020 17:12:20'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'Federico 11/8/2020 17:12:20'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'Federico 11/8/2020 17:12:20'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'Federico 11/8/2020 17:12:20'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'Federico 11/8/2020 17:12:20'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'Federico 11/8/2020 17:12:20'!
ERROR!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'Federico 11/8/2020 17:12:21'!
ERROR!

!testRun: #PortfolioTest #test10PortafolioShouldNotBeAddedToHimself stamp: 'Federico 11/8/2020 17:12:21'!
PASSED!

!testRun: #PortfolioTest #test11AddedPortfolioShouldNotContainRepeatedChilds stamp: 'Federico 11/8/2020 17:12:21'!
ERROR!

!testRun: #PortfolioTest #test12AddedPortafolioShouldNotContainSuccesiveRepeatedChilds stamp: 'Federico 11/8/2020 17:12:21'!
ERROR!

!testRun: #PortfolioTest #test13AddedPortafolioShouldNotBeInHisChilds stamp: 'Federico 11/8/2020 17:12:21'!
ERROR!

!testRun: #PortfolioTest #test14AddedPortafolioShouldNotBeInHisSuccesiveChilds stamp: 'Federico 11/8/2020 17:12:21'!
ERROR!

!testRun: #PortfolioTest #test15AddedPortfolioChildsShouldNotBeInPortfolioChilds stamp: 'Federico 11/8/2020 17:12:21'!
ERROR!

!testRun: #PortfolioTest #test16AddedPortfolioHerarchyShouldNotBeInHisHerarchy stamp: 'Federico 11/8/2020 17:12:21'!
ERROR!

!testRun: #PortfolioTest #test17 stamp: 'Federico 11/8/2020 17:12:21'!
ERROR!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'Federico 11/8/2020 17:12:25'!
ERROR!
!Portfolio methodsFor: 'adding' stamp: 'Federico 11/8/2020 17:13:13' prior: 50940347!
add: aPortfolioRegister
	
	((self = aPortfolioRegister)
	or: [aPortfolioRegister hasPortfolioRegister: self]
	or:[self hasPortfolioRegister: aPortfolioRegister]
	"or:[parentRegister ifNotNil: [parentRegister hasPortfolioRegister: aPortfolioRegister]]")
	ifTrue: [self error: self class shouldNotHaveRepeatedPortfolioRegistersErrorDescription ].
	
	
	portfolioRegisters add: aPortfolioRegister.
	aPortfolioRegister setParentRegister: self.
	! !

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'Federico 11/8/2020 17:13:16'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'Federico 11/8/2020 17:13:16'!
PASSED!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'Federico 11/8/2020 17:13:16'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'Federico 11/8/2020 17:13:16'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'Federico 11/8/2020 17:13:16'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'Federico 11/8/2020 17:13:16'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'Federico 11/8/2020 17:13:16'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'Federico 11/8/2020 17:13:16'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'Federico 11/8/2020 17:13:16'!
PASSED!

!testRun: #PortfolioTest #test10PortafolioShouldNotBeAddedToHimself stamp: 'Federico 11/8/2020 17:13:16'!
PASSED!

!testRun: #PortfolioTest #test11AddedPortfolioShouldNotContainRepeatedChilds stamp: 'Federico 11/8/2020 17:13:16'!
PASSED!

!testRun: #PortfolioTest #test12AddedPortafolioShouldNotContainSuccesiveRepeatedChilds stamp: 'Federico 11/8/2020 17:13:17'!
PASSED!

!testRun: #PortfolioTest #test13AddedPortafolioShouldNotBeInHisChilds stamp: 'Federico 11/8/2020 17:13:17'!
PASSED!

!testRun: #PortfolioTest #test14AddedPortafolioShouldNotBeInHisSuccesiveChilds stamp: 'Federico 11/8/2020 17:13:17'!
PASSED!

!testRun: #PortfolioTest #test15AddedPortfolioChildsShouldNotBeInPortfolioChilds stamp: 'Federico 11/8/2020 17:13:17'!
PASSED!

!testRun: #PortfolioTest #test16AddedPortfolioHerarchyShouldNotBeInHisHerarchy stamp: 'Federico 11/8/2020 17:13:17'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'Federico 11/8/2020 17:13:17'!
FAILURE!

!testRun: #PortfolioTest #test17 stamp: 'Federico 11/8/2020 17:13:17'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'Federico 11/8/2020 17:14:23' prior: 50940579!
add: aPortfolioRegister
	
	((self = aPortfolioRegister)
	or: [aPortfolioRegister hasPortfolioRegister: self]
	or:[self hasPortfolioRegister: aPortfolioRegister]
	or:[parentRegister ifNotNil: [parentRegister hasPortfolioRegister: aPortfolioRegister]])
	ifTrue: [self error: self class shouldNotHaveRepeatedPortfolioRegistersErrorDescription ].
	
	
	portfolioRegisters add: aPortfolioRegister.
	aPortfolioRegister setParentRegister: self.
	! !

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'Federico 11/8/2020 17:14:31'!
ERROR!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'Federico 11/8/2020 17:14:31'!
ERROR!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'Federico 11/8/2020 17:14:41'!
ERROR!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'Federico 11/8/2020 17:14:42'!
ERROR!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'Federico 11/8/2020 17:14:56'!
ERROR!

	parentRegister ifNotNil: [parentRegister hasPortfolioRegister: aPortfolioRegister].!

	parentRegister ifNotNil: [parentRegister hasPortfolioRegister: aPortfolioRegister].!
!Portfolio methodsFor: 'adding' stamp: 'Federico 11/8/2020 17:16:57' prior: 50940662!
add: aPortfolioRegister
	
	((self = aPortfolioRegister)
	or: [aPortfolioRegister hasPortfolioRegister: self]
	or:[self hasPortfolioRegister: aPortfolioRegister]
	or:[parentRegister ifNotNil: [parentRegister hasPortfolioRegister: aPortfolioRegister] ifNil: [false]])
	ifTrue: [self error: self class shouldNotHaveRepeatedPortfolioRegistersErrorDescription ].
	
	portfolioRegisters add: aPortfolioRegister.
	aPortfolioRegister setParentRegister: self.
	! !

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'Federico 11/8/2020 17:17:00'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'Federico 11/8/2020 17:17:07'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'Federico 11/8/2020 17:17:07'!
PASSED!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'Federico 11/8/2020 17:17:07'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'Federico 11/8/2020 17:17:07'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'Federico 11/8/2020 17:17:07'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'Federico 11/8/2020 17:17:07'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'Federico 11/8/2020 17:17:07'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'Federico 11/8/2020 17:17:07'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'Federico 11/8/2020 17:17:07'!
PASSED!

!testRun: #PortfolioTest #test10PortafolioShouldNotBeAddedToHimself stamp: 'Federico 11/8/2020 17:17:07'!
PASSED!

!testRun: #PortfolioTest #test11AddedPortfolioShouldNotContainRepeatedChilds stamp: 'Federico 11/8/2020 17:17:07'!
PASSED!

!testRun: #PortfolioTest #test12AddedPortafolioShouldNotContainSuccesiveRepeatedChilds stamp: 'Federico 11/8/2020 17:17:07'!
PASSED!

!testRun: #PortfolioTest #test13AddedPortafolioShouldNotBeInHisChilds stamp: 'Federico 11/8/2020 17:17:07'!
PASSED!

!testRun: #PortfolioTest #test14AddedPortafolioShouldNotBeInHisSuccesiveChilds stamp: 'Federico 11/8/2020 17:17:07'!
PASSED!

!testRun: #PortfolioTest #test15AddedPortfolioChildsShouldNotBeInPortfolioChilds stamp: 'Federico 11/8/2020 17:17:07'!
PASSED!

!testRun: #PortfolioTest #test16AddedPortfolioHerarchyShouldNotBeInHisHerarchy stamp: 'Federico 11/8/2020 17:17:07'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'Federico 11/8/2020 17:17:08'!
PASSED!
!Portfolio methodsFor: 'adding' stamp: 'Federico 11/8/2020 17:18:26' prior: 50940702!
add: aPortfolioRegister
	
	((self = aPortfolioRegister)
	or: [aPortfolioRegister hasPortfolioRegister: self]
	or:[self hasPortfolioRegister: aPortfolioRegister]
	or:[parentRegister ifNotNil: [parentRegister hasPortfolioRegister: aPortfolioRegister] ifNil: [false]])
	
	ifTrue: [self error: self class shouldNotHaveRepeatedPortfolioRegistersErrorDescription ].
	
	portfolioRegisters add: aPortfolioRegister.
	aPortfolioRegister setParentRegister: self.
	! !

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'Federico 11/8/2020 17:18:30'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'Federico 11/8/2020 17:18:30'!
PASSED!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'Federico 11/8/2020 17:18:30'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'Federico 11/8/2020 17:18:30'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'Federico 11/8/2020 17:18:31'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'Federico 11/8/2020 17:18:31'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'Federico 11/8/2020 17:18:31'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'Federico 11/8/2020 17:18:31'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'Federico 11/8/2020 17:18:31'!
PASSED!

!testRun: #PortfolioTest #test10PortafolioShouldNotBeAddedToHimself stamp: 'Federico 11/8/2020 17:18:31'!
PASSED!

!testRun: #PortfolioTest #test11AddedPortfolioShouldNotContainRepeatedChilds stamp: 'Federico 11/8/2020 17:18:31'!
PASSED!

!testRun: #PortfolioTest #test12AddedPortafolioShouldNotContainSuccesiveRepeatedChilds stamp: 'Federico 11/8/2020 17:18:31'!
PASSED!

!testRun: #PortfolioTest #test13AddedPortafolioShouldNotBeInHisChilds stamp: 'Federico 11/8/2020 17:18:31'!
PASSED!

!testRun: #PortfolioTest #test14AddedPortafolioShouldNotBeInHisSuccesiveChilds stamp: 'Federico 11/8/2020 17:18:31'!
PASSED!

!testRun: #PortfolioTest #test15AddedPortfolioChildsShouldNotBeInPortfolioChilds stamp: 'Federico 11/8/2020 17:18:31'!
PASSED!

!testRun: #PortfolioTest #test16AddedPortfolioHerarchyShouldNotBeInHisHerarchy stamp: 'Federico 11/8/2020 17:18:31'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'Federico 11/8/2020 17:18:31'!
PASSED!

----SNAPSHOT----(8 November 2020 17:18:41) CuisUniversity-4365.image priorSource: 19473072!
!PortfolioTest methodsFor: 'add tests' stamp: 'Federico 11/8/2020 17:19:01'!
test18
	
	| rootPortfolio secondPortfolio thirdPortfolio secondAccount thirdAccount |
	
	rootPortfolio := Portfolio new.
	secondPortfolio  := Portfolio new.
	thirdPortfolio := Portfolio new.

	rootPortfolio add: secondPortfolio.
	rootPortfolio add: thirdPortfolio.
	
	self 
		should: [ secondPortfolio add: thirdPortfolio ]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedPortfolioRegistersErrorDescription
		
! !
!PortfolioTest methodsFor: 'add tests' stamp: 'Federico 11/8/2020 17:19:44' prior: 50940869!
test18
	
	| rootPortfolio secondPortfolio thirdPortfolio secondAccount thirdAccount |
	
	rootPortfolio := Portfolio new.
	secondPortfolio  := Portfolio new.
	thirdPortfolio := Portfolio new.
	
	secondAccount := ReceptiveAccount new.
	thirdAccount := ReceptiveAccount new.
	
	rootPortfolio add: secondPortfolio.
	rootPortfolio add: thirdPortfolio.
	
	secondPortfolio add: secondAccount.
	thirdPortfolio add: thirdAccount.
	
	self 
		should: [ secondPortfolio add: thirdPortfolio ]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedPortfolioRegistersErrorDescription
		
! !
!PortfolioTest methodsFor: 'add tests' stamp: 'Federico 11/8/2020 17:19:54' prior: 50940886!
test18
	
	| rootPortfolio secondPortfolio thirdPortfolio secondAccount thirdAccount |
	
	rootPortfolio := Portfolio new.
	secondPortfolio  := Portfolio new.
	thirdPortfolio := Portfolio new.
	
	secondAccount := ReceptiveAccount new.
	thirdAccount := ReceptiveAccount new.
	
	rootPortfolio add: secondPortfolio.
	rootPortfolio add: thirdPortfolio.
	
	secondPortfolio add: secondAccount.
	thirdPortfolio add: thirdAccount.
	
	self 
		should: [ secondAccount add: thirdAccount ]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedPortfolioRegistersErrorDescription
		
! !
!PortfolioTest methodsFor: 'add tests' stamp: 'Federico 11/8/2020 17:20:48' prior: 50940908!
test18
	
	| rootPortfolio secondPortfolio thirdPortfolio FourthPortfolio Account |
	
	rootPortfolio := Portfolio new.
	secondPortfolio  := Portfolio new.
	thirdPortfolio := Portfolio new.
	
	FourthPortfolio := Portfolio new.
	Account := ReceptiveAccount new.
	
	rootPortfolio add: secondPortfolio.
	rootPortfolio add: thirdPortfolio.
	
	secondPortfolio add: Account.
	thirdPortfolio add: FourthPortfolio.
	
	self 
		should: [ FourthPortfolio add: Account ]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedPortfolioRegistersErrorDescription
		
! !

!testRun: #PortfolioTest #test18 stamp: 'Federico 11/8/2020 17:21:15'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'Federico 11/8/2020 17:26:36' prior: 50940786!
add: aPortfolioRegister
	| rootPortfolio |
	
	rootPortfolio := self rootPortfolio.		
	
	((self = aPortfolioRegister)
	or: [aPortfolioRegister hasPortfolioRegister: self]
	or:[self hasPortfolioRegister: aPortfolioRegister]
	
	or:[rootPortfolio ifNotNil: [rootPortfolio hasPortfolioRegister: aPortfolioRegister] ifNil: [false]])
	
	ifTrue: [self error: self class shouldNotHaveRepeatedPortfolioRegistersErrorDescription ].
	
	portfolioRegisters add: aPortfolioRegister.
	aPortfolioRegister setParentRegister: self.
	! !

!testRun: #PortfolioTest #test18 stamp: 'Federico 11/8/2020 17:26:46'!
FAILURE!

!testRun: #PortfolioTest #test18 stamp: 'Federico 11/8/2020 17:26:56'!
FAILURE!

!testRun: #PortfolioTest #test18 stamp: 'Federico 11/8/2020 17:27:14'!
ERROR!

!testRun: #PortfolioTest #test18 stamp: 'Federico 11/8/2020 17:27:14'!
ERROR!

!testRun: #PortfolioTest #test18 stamp: 'Federico 11/8/2020 17:27:26'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Federico 11/8/2020 17:27:32'!
rootPortfolio
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Federico 11/8/2020 17:29:18' prior: 50940985!
rootPortfolio
	^parentRegister ifNotNil: [parentRegister rootPortfolio] ifNil: [self].! !

!testRun: #PortfolioTest #test18 stamp: 'Federico 11/8/2020 17:29:39'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'Federico 11/8/2020 17:29:43'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'Federico 11/8/2020 17:29:47'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'Federico 11/8/2020 17:29:47'!
PASSED!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'Federico 11/8/2020 17:29:47'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'Federico 11/8/2020 17:29:47'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'Federico 11/8/2020 17:29:47'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'Federico 11/8/2020 17:29:47'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'Federico 11/8/2020 17:29:47'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'Federico 11/8/2020 17:29:47'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'Federico 11/8/2020 17:29:47'!
PASSED!

!testRun: #PortfolioTest #test10PortafolioShouldNotBeAddedToHimself stamp: 'Federico 11/8/2020 17:29:47'!
PASSED!

!testRun: #PortfolioTest #test11AddedPortfolioShouldNotContainRepeatedChilds stamp: 'Federico 11/8/2020 17:29:47'!
PASSED!

!testRun: #PortfolioTest #test12AddedPortafolioShouldNotContainSuccesiveRepeatedChilds stamp: 'Federico 11/8/2020 17:29:48'!
PASSED!

!testRun: #PortfolioTest #test13AddedPortafolioShouldNotBeInHisChilds stamp: 'Federico 11/8/2020 17:29:48'!
PASSED!

!testRun: #PortfolioTest #test14AddedPortafolioShouldNotBeInHisSuccesiveChilds stamp: 'Federico 11/8/2020 17:29:48'!
PASSED!

!testRun: #PortfolioTest #test15AddedPortfolioChildsShouldNotBeInPortfolioChilds stamp: 'Federico 11/8/2020 17:29:48'!
PASSED!

!testRun: #PortfolioTest #test16AddedPortfolioHerarchyShouldNotBeInHisHerarchy stamp: 'Federico 11/8/2020 17:29:48'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'Federico 11/8/2020 17:29:48'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'Federico 11/8/2020 17:29:48'!
PASSED!
!Portfolio methodsFor: 'adding' stamp: 'Federico 11/8/2020 17:30:53' prior: 50940953!
add: aPortfolioRegister
	| rootPortfolio |
	
	rootPortfolio := self rootPortfolio.		
	
	((self = aPortfolioRegister)
	or: [aPortfolioRegister hasPortfolioRegister: self]
	or:[rootPortfolio hasPortfolioRegister: aPortfolioRegister])
	
	ifTrue: [self error: self class shouldNotHaveRepeatedPortfolioRegistersErrorDescription ].
	
	portfolioRegisters add: aPortfolioRegister.
	aPortfolioRegister setParentRegister: self.
	! !
!Portfolio methodsFor: 'adding' stamp: 'Federico 11/8/2020 17:31:26' prior: 50941067!
add: aPortfolioRegister
	| rootPortfolio |
	
	rootPortfolio := self rootPortfolio.		
	
	((self = aPortfolioRegister)
	or: [aPortfolioRegister hasPortfolioRegister: self]
	or:[rootPortfolio hasPortfolioRegister: aPortfolioRegister])
	
	ifTrue: [self error: self class shouldNotHaveRepeatedPortfolioRegistersErrorDescription ].
	
	portfolioRegisters add: aPortfolioRegister.
	aPortfolioRegister setParentRegister: self.
	! !

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'Federico 11/8/2020 17:32:08'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'Federico 11/8/2020 17:32:08'!
PASSED!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'Federico 11/8/2020 17:32:08'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'Federico 11/8/2020 17:32:08'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'Federico 11/8/2020 17:32:08'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'Federico 11/8/2020 17:32:08'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'Federico 11/8/2020 17:32:08'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'Federico 11/8/2020 17:32:08'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'Federico 11/8/2020 17:32:08'!
PASSED!

!testRun: #PortfolioTest #test10PortafolioShouldNotBeAddedToHimself stamp: 'Federico 11/8/2020 17:32:08'!
PASSED!

!testRun: #PortfolioTest #test11AddedPortfolioShouldNotContainRepeatedChilds stamp: 'Federico 11/8/2020 17:32:09'!
PASSED!

!testRun: #PortfolioTest #test12AddedPortafolioShouldNotContainSuccesiveRepeatedChilds stamp: 'Federico 11/8/2020 17:32:09'!
PASSED!

!testRun: #PortfolioTest #test13AddedPortafolioShouldNotBeInHisChilds stamp: 'Federico 11/8/2020 17:32:09'!
PASSED!

!testRun: #PortfolioTest #test14AddedPortafolioShouldNotBeInHisSuccesiveChilds stamp: 'Federico 11/8/2020 17:32:09'!
PASSED!

!testRun: #PortfolioTest #test15AddedPortfolioChildsShouldNotBeInPortfolioChilds stamp: 'Federico 11/8/2020 17:32:09'!
PASSED!

!testRun: #PortfolioTest #test16AddedPortfolioHerarchyShouldNotBeInHisHerarchy stamp: 'Federico 11/8/2020 17:32:09'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'Federico 11/8/2020 17:32:09'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'Federico 11/8/2020 17:32:09'!
PASSED!

----SNAPSHOT----(8 November 2020 17:32:21) CuisUniversity-4365.image priorSource: 19494891!
!Portfolio methodsFor: 'adding' stamp: 'Federico 11/8/2020 17:34:52' prior: 50941083!
add: aPortfolioRegister
	| rootPortfolio |
	
	rootPortfolio := self rootPortfolio.		
	
	((aPortfolioRegister hasPortfolioRegister: self)
	or:[rootPortfolio hasPortfolioRegister: aPortfolioRegister])
	
	ifTrue: [self error: self class shouldNotHaveRepeatedPortfolioRegistersErrorDescription ].
	
	portfolioRegisters add: aPortfolioRegister.
	aPortfolioRegister setParentRegister: self.
	! !
!Portfolio methodsFor: 'testing' stamp: 'Federico 11/8/2020 17:35:16' prior: 50940037!
hasPortfolioRegister: aPortfolioRegister

	^(self = aPortfolioRegister)
	or: [(portfolioRegisters select: [ :childRegisters | aPortfolioRegister  hasPortfolioRegister: childRegisters ]) isEmpty not]
	or: [(portfolioRegisters select: [ :childRegisters | childRegisters  hasPortfolioRegister: aPortfolioRegister ]) isEmpty not].
	! !

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'Federico 11/8/2020 17:35:20'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'Federico 11/8/2020 17:35:20'!
PASSED!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'Federico 11/8/2020 17:35:20'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'Federico 11/8/2020 17:35:20'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'Federico 11/8/2020 17:35:20'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'Federico 11/8/2020 17:35:20'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'Federico 11/8/2020 17:35:20'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'Federico 11/8/2020 17:35:20'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'Federico 11/8/2020 17:35:20'!
PASSED!

!testRun: #PortfolioTest #test10PortafolioShouldNotBeAddedToHimself stamp: 'Federico 11/8/2020 17:35:20'!
PASSED!

!testRun: #PortfolioTest #test11AddedPortfolioShouldNotContainRepeatedChilds stamp: 'Federico 11/8/2020 17:35:20'!
PASSED!

!testRun: #PortfolioTest #test12AddedPortafolioShouldNotContainSuccesiveRepeatedChilds stamp: 'Federico 11/8/2020 17:35:20'!
PASSED!

!testRun: #PortfolioTest #test13AddedPortafolioShouldNotBeInHisChilds stamp: 'Federico 11/8/2020 17:35:20'!
PASSED!

!testRun: #PortfolioTest #test14AddedPortafolioShouldNotBeInHisSuccesiveChilds stamp: 'Federico 11/8/2020 17:35:20'!
PASSED!

!testRun: #PortfolioTest #test15AddedPortfolioChildsShouldNotBeInPortfolioChilds stamp: 'Federico 11/8/2020 17:35:20'!
PASSED!

!testRun: #PortfolioTest #test16AddedPortfolioHerarchyShouldNotBeInHisHerarchy stamp: 'Federico 11/8/2020 17:35:20'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'Federico 11/8/2020 17:35:20'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'Federico 11/8/2020 17:35:21'!
PASSED!
!Portfolio methodsFor: 'adding' stamp: 'Federico 11/8/2020 17:47:44' prior: 50941168!
add: aPortfolioRegister
	| rootPortfolio |
	
	rootPortfolio := self rootPortfolio.		
	
	(rootPortfolio hasPortfolioRegister: aPortfolioRegister)
	
	ifTrue: [self error: self class shouldNotHaveRepeatedPortfolioRegistersErrorDescription ].
	
	portfolioRegisters add: aPortfolioRegister.
	aPortfolioRegister setParentRegister: self.
	! !

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'Federico 11/8/2020 17:47:46'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'Federico 11/8/2020 17:47:46'!
PASSED!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'Federico 11/8/2020 17:47:46'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'Federico 11/8/2020 17:47:46'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'Federico 11/8/2020 17:47:46'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'Federico 11/8/2020 17:47:46'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'Federico 11/8/2020 17:47:46'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'Federico 11/8/2020 17:47:46'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'Federico 11/8/2020 17:47:46'!
PASSED!

!testRun: #PortfolioTest #test10PortafolioShouldNotBeAddedToHimself stamp: 'Federico 11/8/2020 17:47:46'!
PASSED!

!testRun: #PortfolioTest #test11AddedPortfolioShouldNotContainRepeatedChilds stamp: 'Federico 11/8/2020 17:47:46'!
PASSED!

!testRun: #PortfolioTest #test12AddedPortafolioShouldNotContainSuccesiveRepeatedChilds stamp: 'Federico 11/8/2020 17:47:47'!
PASSED!

!testRun: #PortfolioTest #test13AddedPortafolioShouldNotBeInHisChilds stamp: 'Federico 11/8/2020 17:47:47'!
PASSED!

!testRun: #PortfolioTest #test14AddedPortafolioShouldNotBeInHisSuccesiveChilds stamp: 'Federico 11/8/2020 17:47:47'!
PASSED!

!testRun: #PortfolioTest #test15AddedPortfolioChildsShouldNotBeInPortfolioChilds stamp: 'Federico 11/8/2020 17:47:47'!
PASSED!

!testRun: #PortfolioTest #test16AddedPortfolioHerarchyShouldNotBeInHisHerarchy stamp: 'Federico 11/8/2020 17:47:47'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'Federico 11/8/2020 17:47:47'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'Federico 11/8/2020 17:47:47'!
PASSED!
!Portfolio methodsFor: 'adding' stamp: 'Federico 11/8/2020 17:49:09' prior: 50941262!
add: aPortfolioRegister
	| rootPortfolio |
	
	rootPortfolio := self rootPortfolio.		
	
	(rootPortfolio hasPortfolioRegister: aPortfolioRegister)
	ifTrue: [self error: self class shouldNotHaveRepeatedPortfolioRegistersErrorDescription ].
	
	portfolioRegisters add: aPortfolioRegister.
	aPortfolioRegister setParentRegister: self.
	! !

----SNAPSHOT----(8 November 2020 17:51:16) CuisUniversity-4365.image priorSource: 19504441!

----STARTUP---- (8 November 2020 17:57:00) as /mnt/sdb5/Ingenieria1/CuisUniversity/CuisUniversity-4384.image!


!classRemoval: #ReceptiveAccount stamp: 'DS 11/8/2020 17:57:04'!
PortfolioRegister subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Portfolio stamp: 'DS 11/8/2020 17:57:04'!
PortfolioRegister subclass: #Portfolio
	instanceVariableNames: 'portfolioRegisters'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #PortfolioRegister stamp: 'DS 11/8/2020 17:57:05'!
Object subclass: #PortfolioRegister
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Withdraw stamp: 'DS 11/8/2020 17:57:05'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Deposit stamp: 'DS 11/8/2020 17:57:06'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #AccountTransaction stamp: 'DS 11/8/2020 17:57:06'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #ReceptiveAccountTest stamp: 'DS 11/8/2020 17:57:06'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #PortfolioTest stamp: 'DS 11/8/2020 17:57:07'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

----End fileIn of /mnt/sdb5/Ingenieria1/CuisUniversity/Portfolio-Ejercicio.st----!

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'DS 11/8/2020 17:57:13'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'DS 11/8/2020 17:57:13'!
PASSED!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'DS 11/8/2020 17:57:13'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'DS 11/8/2020 17:57:13'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'DS 11/8/2020 17:57:13'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'DS 11/8/2020 17:57:13'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'DS 11/8/2020 17:57:13'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'DS 11/8/2020 17:57:13'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'DS 11/8/2020 17:57:13'!
PASSED!

!testRun: #PortfolioTest #test10PortafolioShouldNotBeAddedToHimself stamp: 'DS 11/8/2020 17:57:13'!
PASSED!

!testRun: #PortfolioTest #test11AddedPortfolioShouldNotContainRepeatedChilds stamp: 'DS 11/8/2020 17:57:13'!
PASSED!

!testRun: #PortfolioTest #test12AddedPortafolioShouldNotContainSuccesiveRepeatedChilds stamp: 'DS 11/8/2020 17:57:13'!
PASSED!

!testRun: #PortfolioTest #test13AddedPortafolioShouldNotBeInHisChilds stamp: 'DS 11/8/2020 17:57:13'!
PASSED!

!testRun: #PortfolioTest #test14AddedPortafolioShouldNotBeInHisSuccesiveChilds stamp: 'DS 11/8/2020 17:57:13'!
PASSED!

!testRun: #PortfolioTest #test15AddedPortfolioChildsShouldNotBeInPortfolioChilds stamp: 'DS 11/8/2020 17:57:13'!
PASSED!

!testRun: #PortfolioTest #test16AddedPortfolioHerarchyShouldNotBeInHisHerarchy stamp: 'DS 11/8/2020 17:57:13'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'DS 11/8/2020 17:57:13'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'DS 11/8/2020 17:57:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'DS 11/8/2020 17:57:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'DS 11/8/2020 17:57:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DS 11/8/2020 17:57:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'DS 11/8/2020 17:57:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'DS 11/8/2020 17:57:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'DS 11/8/2020 17:57:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'DS 11/8/2020 17:57:13'!
PASSED!
!PortfolioTest methodsFor: 'add tests' stamp: 'DS 11/8/2020 18:04:18'!
test19
	
	| rootPortfolio1 rootPortfolio2 aPortfolio anAccount |
	
	rootPortfolio1 := Portfolio new.
	rootPortfolio2 := Portfolio new.

	aPortfolio := Portfolio new.
	anAccount := ReceptiveAccount new.

	rootPortfolio1 add: aPortfolio.
	rootPortfolio2 add: aPortfolio.
	rootPortfolio2 add: anAccount.	

	self 
		should: [ aPortfolio add: anAccount ]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedPortfolioRegistersErrorDescription
		
! !

!testRun: #PortfolioTest #test19 stamp: 'DS 11/8/2020 18:04:28'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'DS 11/8/2020 18:04:28'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'DS 11/8/2020 18:04:28'!
PASSED!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'DS 11/8/2020 18:04:28'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'DS 11/8/2020 18:04:28'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'DS 11/8/2020 18:04:28'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'DS 11/8/2020 18:04:28'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'DS 11/8/2020 18:04:28'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'DS 11/8/2020 18:04:28'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'DS 11/8/2020 18:04:28'!
PASSED!

!testRun: #PortfolioTest #test10PortafolioShouldNotBeAddedToHimself stamp: 'DS 11/8/2020 18:04:28'!
PASSED!

!testRun: #PortfolioTest #test11AddedPortfolioShouldNotContainRepeatedChilds stamp: 'DS 11/8/2020 18:04:28'!
PASSED!

!testRun: #PortfolioTest #test12AddedPortafolioShouldNotContainSuccesiveRepeatedChilds stamp: 'DS 11/8/2020 18:04:28'!
PASSED!

!testRun: #PortfolioTest #test13AddedPortafolioShouldNotBeInHisChilds stamp: 'DS 11/8/2020 18:04:28'!
PASSED!

!testRun: #PortfolioTest #test14AddedPortafolioShouldNotBeInHisSuccesiveChilds stamp: 'DS 11/8/2020 18:04:28'!
PASSED!

!testRun: #PortfolioTest #test15AddedPortfolioChildsShouldNotBeInPortfolioChilds stamp: 'DS 11/8/2020 18:04:28'!
PASSED!

!testRun: #PortfolioTest #test16AddedPortfolioHerarchyShouldNotBeInHisHerarchy stamp: 'DS 11/8/2020 18:04:28'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'DS 11/8/2020 18:04:28'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'DS 11/8/2020 18:04:28'!
PASSED!

!testRun: #PortfolioTest #test19 stamp: 'DS 11/8/2020 18:04:28'!
PASSED!

!testRun: #PortfolioTest #test19 stamp: 'DS 11/8/2020 18:06:02'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'DS 11/8/2020 18:06:02'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'DS 11/8/2020 18:06:02'!
PASSED!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'DS 11/8/2020 18:06:02'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'DS 11/8/2020 18:06:02'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'DS 11/8/2020 18:06:02'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'DS 11/8/2020 18:06:02'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'DS 11/8/2020 18:06:02'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'DS 11/8/2020 18:06:02'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'DS 11/8/2020 18:06:02'!
PASSED!

!testRun: #PortfolioTest #test10PortafolioShouldNotBeAddedToHimself stamp: 'DS 11/8/2020 18:06:02'!
PASSED!

!testRun: #PortfolioTest #test11AddedPortfolioShouldNotContainRepeatedChilds stamp: 'DS 11/8/2020 18:06:02'!
PASSED!

!testRun: #PortfolioTest #test12AddedPortafolioShouldNotContainSuccesiveRepeatedChilds stamp: 'DS 11/8/2020 18:06:02'!
PASSED!

!testRun: #PortfolioTest #test13AddedPortafolioShouldNotBeInHisChilds stamp: 'DS 11/8/2020 18:06:02'!
PASSED!

!testRun: #PortfolioTest #test14AddedPortafolioShouldNotBeInHisSuccesiveChilds stamp: 'DS 11/8/2020 18:06:02'!
PASSED!

!testRun: #PortfolioTest #test15AddedPortfolioChildsShouldNotBeInPortfolioChilds stamp: 'DS 11/8/2020 18:06:02'!
PASSED!

!testRun: #PortfolioTest #test16AddedPortfolioHerarchyShouldNotBeInHisHerarchy stamp: 'DS 11/8/2020 18:06:02'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'DS 11/8/2020 18:06:02'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'DS 11/8/2020 18:06:02'!
PASSED!

!testRun: #PortfolioTest #test19 stamp: 'DS 11/8/2020 18:06:02'!
PASSED!
!PortfolioTest methodsFor: 'add tests' stamp: 'DS 11/8/2020 18:06:53' prior: 50927279!
test19
	
	| rootPortfolio1 rootPortfolio2 aPortfolio anAccount |
	
	rootPortfolio1 := Portfolio new.
	rootPortfolio2 := Portfolio new.

	aPortfolio := Portfolio new.
	anAccount := ReceptiveAccount new.

	rootPortfolio1 add: aPortfolio.
	rootPortfolio1 add: anAccount.	
	rootPortfolio2 add: aPortfolio.

	self 
		should: [ aPortfolio add: anAccount ]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedPortfolioRegistersErrorDescription
		
! !

!testRun: #PortfolioTest #test19 stamp: 'DS 11/8/2020 18:07:18'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'DS 11/8/2020 18:09:14' prior: 50927093!
add: aPortfolioRegister
	| rootPortfolio |
	
	rootPortfolio := self rootPortfolio.		
	
	(rootPortfolio hasPortfolioRegister: aPortfolioRegister)
	ifTrue: [self error: self class shouldNotHaveRepeatedPortfolioRegistersErrorDescription ].
	
	portfolioRegisters add: aPortfolioRegister.
	aPortfolioRegister setParentRegister: self.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'DS 11/8/2020 18:09:39' prior: 50927113!
setParentRegister: aPortfolio

	parentRegister add: aPortfolio.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'DS 11/8/2020 18:09:50' prior: 50927183!
setParentRegister: aPortfolio
	parentRegister add: aPortfolio.! !
!ReceptiveAccount methodsFor: 'initialization' stamp: 'DS 11/8/2020 18:10:06' prior: 50927148 overrides: 16896425!
initialize

	transactions := OrderedCollection new.
	parentRegister  := OrderedCollection new.! !
!Portfolio methodsFor: 'initialization' stamp: 'DS 11/8/2020 18:10:14' prior: 50927077 overrides: 16896425!
initialize

	portfolioRegisters := OrderedCollection new.
	parentRegister := OrderedCollection new.! !

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'DS 11/8/2020 18:10:28'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'DS 11/8/2020 18:10:28'!
ERROR!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'DS 11/8/2020 18:10:28'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'DS 11/8/2020 18:10:28'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'DS 11/8/2020 18:10:28'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'DS 11/8/2020 18:10:28'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'DS 11/8/2020 18:10:28'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'DS 11/8/2020 18:10:28'!
ERROR!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'DS 11/8/2020 18:10:28'!
ERROR!

!testRun: #PortfolioTest #test10PortafolioShouldNotBeAddedToHimself stamp: 'DS 11/8/2020 18:10:28'!
FAILURE!

!testRun: #PortfolioTest #test11AddedPortfolioShouldNotContainRepeatedChilds stamp: 'DS 11/8/2020 18:10:28'!
ERROR!

!testRun: #PortfolioTest #test12AddedPortafolioShouldNotContainSuccesiveRepeatedChilds stamp: 'DS 11/8/2020 18:10:28'!
ERROR!

!testRun: #PortfolioTest #test13AddedPortafolioShouldNotBeInHisChilds stamp: 'DS 11/8/2020 18:10:28'!
ERROR!

!testRun: #PortfolioTest #test14AddedPortafolioShouldNotBeInHisSuccesiveChilds stamp: 'DS 11/8/2020 18:10:28'!
ERROR!

!testRun: #PortfolioTest #test15AddedPortfolioChildsShouldNotBeInPortfolioChilds stamp: 'DS 11/8/2020 18:10:28'!
ERROR!

!testRun: #PortfolioTest #test16AddedPortfolioHerarchyShouldNotBeInHisHerarchy stamp: 'DS 11/8/2020 18:10:28'!
ERROR!

!testRun: #PortfolioTest #test17 stamp: 'DS 11/8/2020 18:10:28'!
ERROR!

!testRun: #PortfolioTest #test18 stamp: 'DS 11/8/2020 18:10:28'!
ERROR!

!testRun: #PortfolioTest #test19 stamp: 'DS 11/8/2020 18:10:28'!
ERROR!
!Portfolio methodsFor: 'adding' stamp: 'DS 11/8/2020 18:11:43' prior: 50927450!
add: aPortfolioRegister

	| rootPortfolios |
	
	rootPortfolios := self rootPortfolio.		
	
	(rootPortfolios select: [:rootPorfolio | rootPorfolio hasPortfolioRegister: aPortfolioRegister] isEmpty not)
	ifTrue: [self error: self class shouldNotHaveRepeatedPortfolioRegistersErrorDescription ].
	
	portfolioRegisters add: aPortfolioRegister.
	aPortfolioRegister setParentRegister: self.! !

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'DS 11/8/2020 18:11:45'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'DS 11/8/2020 18:11:45'!
ERROR!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'DS 11/8/2020 18:11:45'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'DS 11/8/2020 18:11:45'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'DS 11/8/2020 18:11:45'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'DS 11/8/2020 18:11:45'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'DS 11/8/2020 18:11:45'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'DS 11/8/2020 18:11:45'!
ERROR!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'DS 11/8/2020 18:11:45'!
ERROR!

!testRun: #PortfolioTest #test10PortafolioShouldNotBeAddedToHimself stamp: 'DS 11/8/2020 18:11:45'!
FAILURE!

!testRun: #PortfolioTest #test11AddedPortfolioShouldNotContainRepeatedChilds stamp: 'DS 11/8/2020 18:11:45'!
ERROR!

!testRun: #PortfolioTest #test12AddedPortafolioShouldNotContainSuccesiveRepeatedChilds stamp: 'DS 11/8/2020 18:11:45'!
ERROR!

!testRun: #PortfolioTest #test13AddedPortafolioShouldNotBeInHisChilds stamp: 'DS 11/8/2020 18:11:45'!
ERROR!

!testRun: #PortfolioTest #test14AddedPortafolioShouldNotBeInHisSuccesiveChilds stamp: 'DS 11/8/2020 18:11:45'!
ERROR!

!testRun: #PortfolioTest #test15AddedPortfolioChildsShouldNotBeInPortfolioChilds stamp: 'DS 11/8/2020 18:11:45'!
ERROR!

!testRun: #PortfolioTest #test16AddedPortfolioHerarchyShouldNotBeInHisHerarchy stamp: 'DS 11/8/2020 18:11:45'!
ERROR!

!testRun: #PortfolioTest #test17 stamp: 'DS 11/8/2020 18:11:45'!
ERROR!

!testRun: #PortfolioTest #test18 stamp: 'DS 11/8/2020 18:11:45'!
ERROR!

!testRun: #PortfolioTest #test19 stamp: 'DS 11/8/2020 18:11:45'!
ERROR!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'DS 11/8/2020 18:11:48'!
ERROR!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Ejercicio' stamp: 'DS 11/8/2020 18:14:01'!
PortfolioRegister subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions parentRegisters'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'DS 11/8/2020 18:14:01' prior: 50927470!
setParentRegister: aPortfolio
	parentRegisters add: aPortfolio.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'DS 11/8/2020 18:14:01' prior: 50927476 overrides: 16896425!
initialize

	transactions := OrderedCollection new.
	parentRegisters  := OrderedCollection new.! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'DS 11/8/2020 18:14:09'!
PortfolioRegister subclass: #Portfolio
	instanceVariableNames: 'portfolioRegisters parentRegisters'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'DS 11/8/2020 18:14:09' prior: 50927107!
rootPortfolio
	^parentRegisters ifNotNil: [parentRegisters rootPortfolio] ifNil: [self].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'DS 11/8/2020 18:14:09' prior: 50927483 overrides: 16896425!
initialize

	portfolioRegisters := OrderedCollection new.
	parentRegisters := OrderedCollection new.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'DS 11/8/2020 18:14:09' prior: 50927464!
setParentRegister: aPortfolio

	parentRegisters add: aPortfolio.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'DS 11/8/2020 18:15:36' prior: 50927666!
rootPortfolio
	^parentRegisters isEmpty
		ifTrue: [self]	
		ifFalse: [ (parentRegisters collect: [ :parentRegister | parentRegister rootPortfolio ]) flatten ].! !

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'DS 11/8/2020 18:16:27'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'DS 11/8/2020 18:16:27'!
ERROR!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'DS 11/8/2020 18:16:27'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'DS 11/8/2020 18:16:27'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'DS 11/8/2020 18:16:27'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'DS 11/8/2020 18:16:27'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'DS 11/8/2020 18:16:27'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'DS 11/8/2020 18:16:27'!
ERROR!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'DS 11/8/2020 18:16:27'!
ERROR!

!testRun: #PortfolioTest #test10PortafolioShouldNotBeAddedToHimself stamp: 'DS 11/8/2020 18:16:27'!
FAILURE!

!testRun: #PortfolioTest #test11AddedPortfolioShouldNotContainRepeatedChilds stamp: 'DS 11/8/2020 18:16:27'!
ERROR!

!testRun: #PortfolioTest #test12AddedPortafolioShouldNotContainSuccesiveRepeatedChilds stamp: 'DS 11/8/2020 18:16:27'!
ERROR!

!testRun: #PortfolioTest #test13AddedPortafolioShouldNotBeInHisChilds stamp: 'DS 11/8/2020 18:16:27'!
ERROR!

!testRun: #PortfolioTest #test14AddedPortafolioShouldNotBeInHisSuccesiveChilds stamp: 'DS 11/8/2020 18:16:27'!
ERROR!

!testRun: #PortfolioTest #test15AddedPortfolioChildsShouldNotBeInPortfolioChilds stamp: 'DS 11/8/2020 18:16:27'!
ERROR!

!testRun: #PortfolioTest #test16AddedPortfolioHerarchyShouldNotBeInHisHerarchy stamp: 'DS 11/8/2020 18:16:27'!
ERROR!

!testRun: #PortfolioTest #test17 stamp: 'DS 11/8/2020 18:16:27'!
ERROR!

!testRun: #PortfolioTest #test18 stamp: 'DS 11/8/2020 18:16:27'!
ERROR!

!testRun: #PortfolioTest #test19 stamp: 'DS 11/8/2020 18:16:27'!
ERROR!

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'DS 11/8/2020 18:17:08'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'DS 11/8/2020 18:17:08'!
ERROR!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'DS 11/8/2020 18:17:08'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'DS 11/8/2020 18:17:08'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'DS 11/8/2020 18:17:08'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'DS 11/8/2020 18:17:08'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'DS 11/8/2020 18:17:08'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'DS 11/8/2020 18:17:08'!
ERROR!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'DS 11/8/2020 18:17:08'!
ERROR!

!testRun: #PortfolioTest #test10PortafolioShouldNotBeAddedToHimself stamp: 'DS 11/8/2020 18:17:08'!
FAILURE!

!testRun: #PortfolioTest #test11AddedPortfolioShouldNotContainRepeatedChilds stamp: 'DS 11/8/2020 18:17:08'!
ERROR!

!testRun: #PortfolioTest #test12AddedPortafolioShouldNotContainSuccesiveRepeatedChilds stamp: 'DS 11/8/2020 18:17:08'!
ERROR!

!testRun: #PortfolioTest #test13AddedPortafolioShouldNotBeInHisChilds stamp: 'DS 11/8/2020 18:17:08'!
ERROR!

!testRun: #PortfolioTest #test14AddedPortafolioShouldNotBeInHisSuccesiveChilds stamp: 'DS 11/8/2020 18:17:08'!
ERROR!

!testRun: #PortfolioTest #test15AddedPortfolioChildsShouldNotBeInPortfolioChilds stamp: 'DS 11/8/2020 18:17:08'!
ERROR!

!testRun: #PortfolioTest #test16AddedPortfolioHerarchyShouldNotBeInHisHerarchy stamp: 'DS 11/8/2020 18:17:08'!
ERROR!

!testRun: #PortfolioTest #test17 stamp: 'DS 11/8/2020 18:17:08'!
ERROR!

!testRun: #PortfolioTest #test18 stamp: 'DS 11/8/2020 18:17:08'!
ERROR!

!testRun: #PortfolioTest #test19 stamp: 'DS 11/8/2020 18:17:08'!
ERROR!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'DS 11/8/2020 18:17:09'!
ERROR!
!Portfolio methodsFor: 'adding' stamp: 'DS 11/8/2020 18:17:25' prior: 50927553!
add: aPortfolioRegister

	| rootPortfolios |
	
	rootPortfolios := self rootPortfolio.		
	
	((rootPortfolios select: [:rootPorfolio | rootPorfolio hasPortfolioRegister: aPortfolioRegister]) isEmpty not)
	ifTrue: [self error: self class shouldNotHaveRepeatedPortfolioRegistersErrorDescription ].
	
	portfolioRegisters add: aPortfolioRegister.
	aPortfolioRegister setParentRegister: self.! !

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'DS 11/8/2020 18:17:26'!
ERROR!

rootPortfolios!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'DS 11/8/2020 18:18:09' prior: 50927686!
rootPortfolio
	^parentRegisters isEmpty
		ifTrue: [OrderedCollection with: self]	
		ifFalse: [ (parentRegisters collect: [ :parentRegister | parentRegister rootPortfolio ]) flatten ].! !

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'DS 11/8/2020 18:18:10'!
PASSED!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'DS 11/8/2020 18:18:12'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'DS 11/8/2020 18:18:12'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'DS 11/8/2020 18:18:12'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'DS 11/8/2020 18:18:12'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'DS 11/8/2020 18:18:13'!
PASSED!

!testRun: #PortfolioTest #test11AddedPortfolioShouldNotContainRepeatedChilds stamp: 'DS 11/8/2020 18:18:13'!
PASSED!

!testRun: #PortfolioTest #test12AddedPortafolioShouldNotContainSuccesiveRepeatedChilds stamp: 'DS 11/8/2020 18:18:13'!
PASSED!

!testRun: #PortfolioTest #test13AddedPortafolioShouldNotBeInHisChilds stamp: 'DS 11/8/2020 18:18:13'!
PASSED!

!testRun: #PortfolioTest #test14AddedPortafolioShouldNotBeInHisSuccesiveChilds stamp: 'DS 11/8/2020 18:18:13'!
PASSED!

!testRun: #PortfolioTest #test15AddedPortfolioChildsShouldNotBeInPortfolioChilds stamp: 'DS 11/8/2020 18:18:13'!
PASSED!

!testRun: #PortfolioTest #test16AddedPortfolioHerarchyShouldNotBeInHisHerarchy stamp: 'DS 11/8/2020 18:18:13'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'DS 11/8/2020 18:18:14'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'DS 11/8/2020 18:18:14'!
PASSED!

!testRun: #PortfolioTest #test19 stamp: 'DS 11/8/2020 18:18:14'!
PASSED!

!testRun: #PortfolioTest #test10PortafolioShouldNotBeAddedToHimself stamp: 'DS 11/8/2020 18:18:14'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'DS 11/8/2020 18:18:18'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'DS 11/8/2020 18:18:18'!
PASSED!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'DS 11/8/2020 18:18:18'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'DS 11/8/2020 18:18:18'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'DS 11/8/2020 18:18:18'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'DS 11/8/2020 18:18:18'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'DS 11/8/2020 18:18:18'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'DS 11/8/2020 18:18:18'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'DS 11/8/2020 18:18:18'!
PASSED!

!testRun: #PortfolioTest #test10PortafolioShouldNotBeAddedToHimself stamp: 'DS 11/8/2020 18:18:18'!
PASSED!

!testRun: #PortfolioTest #test11AddedPortfolioShouldNotContainRepeatedChilds stamp: 'DS 11/8/2020 18:18:18'!
PASSED!

!testRun: #PortfolioTest #test12AddedPortafolioShouldNotContainSuccesiveRepeatedChilds stamp: 'DS 11/8/2020 18:18:18'!
PASSED!

!testRun: #PortfolioTest #test13AddedPortafolioShouldNotBeInHisChilds stamp: 'DS 11/8/2020 18:18:18'!
PASSED!

!testRun: #PortfolioTest #test14AddedPortafolioShouldNotBeInHisSuccesiveChilds stamp: 'DS 11/8/2020 18:18:18'!
PASSED!

!testRun: #PortfolioTest #test15AddedPortfolioChildsShouldNotBeInPortfolioChilds stamp: 'DS 11/8/2020 18:18:18'!
PASSED!

!testRun: #PortfolioTest #test16AddedPortfolioHerarchyShouldNotBeInHisHerarchy stamp: 'DS 11/8/2020 18:18:18'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'DS 11/8/2020 18:18:18'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'DS 11/8/2020 18:18:18'!
PASSED!

!testRun: #PortfolioTest #test19 stamp: 'DS 11/8/2020 18:18:18'!
PASSED!

!testRun: #PortfolioTest #test19 stamp: 'DS 11/8/2020 18:18:44'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'DS 11/8/2020 18:18:44'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'DS 11/8/2020 18:18:44'!
PASSED!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'DS 11/8/2020 18:18:44'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'DS 11/8/2020 18:18:44'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'DS 11/8/2020 18:18:44'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'DS 11/8/2020 18:18:44'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'DS 11/8/2020 18:18:44'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'DS 11/8/2020 18:18:44'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'DS 11/8/2020 18:18:44'!
PASSED!

!testRun: #PortfolioTest #test10PortafolioShouldNotBeAddedToHimself stamp: 'DS 11/8/2020 18:18:44'!
PASSED!

!testRun: #PortfolioTest #test11AddedPortfolioShouldNotContainRepeatedChilds stamp: 'DS 11/8/2020 18:18:44'!
PASSED!

!testRun: #PortfolioTest #test12AddedPortafolioShouldNotContainSuccesiveRepeatedChilds stamp: 'DS 11/8/2020 18:18:44'!
PASSED!

!testRun: #PortfolioTest #test13AddedPortafolioShouldNotBeInHisChilds stamp: 'DS 11/8/2020 18:18:44'!
PASSED!

!testRun: #PortfolioTest #test14AddedPortafolioShouldNotBeInHisSuccesiveChilds stamp: 'DS 11/8/2020 18:18:44'!
PASSED!

!testRun: #PortfolioTest #test15AddedPortfolioChildsShouldNotBeInPortfolioChilds stamp: 'DS 11/8/2020 18:18:44'!
PASSED!

!testRun: #PortfolioTest #test16AddedPortfolioHerarchyShouldNotBeInHisHerarchy stamp: 'DS 11/8/2020 18:18:44'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'DS 11/8/2020 18:18:44'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'DS 11/8/2020 18:18:44'!
PASSED!

!testRun: #PortfolioTest #test19 stamp: 'DS 11/8/2020 18:18:44'!
PASSED!

----SNAPSHOT----(8 November 2020 18:23:22) CuisUniversity-4384.image priorSource: 19033841!
!PortfolioTest methodsFor: 'add tests' stamp: 'DS 11/8/2020 18:30:31'!
test20

	| rootPortfolio1 rootPortfolio2 firstPortfolio secondPortfolio anAccount |
	
	rootPortfolio1 := Portfolio new.
	rootPortfolio2 := Portfolio new.

	firstPortfolio := Portfolio new.
	secondPortfolio := Portfolio new.
	anAccount := ReceptiveAccount new.

	rootPortfolio1 add: firstPortfolio.
	rootPortfolio2 add: secondPortfolio.
	firstPortfolio add: anAccount.
	firstPortfolio add: rootPortfolio2.

	self 
		should: [ secondPortfolio add: anAccount ]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedPortfolioRegistersErrorDescription
		
! !

!testRun: #PortfolioTest #test20 stamp: 'DS 11/8/2020 18:30:34'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'DS 11/8/2020 18:30:34'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'DS 11/8/2020 18:30:34'!
PASSED!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'DS 11/8/2020 18:30:34'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'DS 11/8/2020 18:30:34'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'DS 11/8/2020 18:30:34'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'DS 11/8/2020 18:30:34'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'DS 11/8/2020 18:30:34'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'DS 11/8/2020 18:30:34'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'DS 11/8/2020 18:30:34'!
PASSED!

!testRun: #PortfolioTest #test10PortafolioShouldNotBeAddedToHimself stamp: 'DS 11/8/2020 18:30:34'!
PASSED!

!testRun: #PortfolioTest #test11AddedPortfolioShouldNotContainRepeatedChilds stamp: 'DS 11/8/2020 18:30:34'!
PASSED!

!testRun: #PortfolioTest #test12AddedPortafolioShouldNotContainSuccesiveRepeatedChilds stamp: 'DS 11/8/2020 18:30:34'!
PASSED!

!testRun: #PortfolioTest #test13AddedPortafolioShouldNotBeInHisChilds stamp: 'DS 11/8/2020 18:30:34'!
PASSED!

!testRun: #PortfolioTest #test14AddedPortafolioShouldNotBeInHisSuccesiveChilds stamp: 'DS 11/8/2020 18:30:34'!
PASSED!

!testRun: #PortfolioTest #test15AddedPortfolioChildsShouldNotBeInPortfolioChilds stamp: 'DS 11/8/2020 18:30:34'!
PASSED!

!testRun: #PortfolioTest #test16AddedPortfolioHerarchyShouldNotBeInHisHerarchy stamp: 'DS 11/8/2020 18:30:34'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'DS 11/8/2020 18:30:34'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'DS 11/8/2020 18:30:34'!
PASSED!

!testRun: #PortfolioTest #test19 stamp: 'DS 11/8/2020 18:30:34'!
PASSED!

!testRun: #PortfolioTest #test20 stamp: 'DS 11/8/2020 18:30:34'!
PASSED!

!testRun: #PortfolioTest #test20 stamp: 'DS 11/8/2020 18:34:53'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'DS 11/8/2020 18:34:53'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'DS 11/8/2020 18:34:53'!
PASSED!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'DS 11/8/2020 18:34:53'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'DS 11/8/2020 18:34:53'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'DS 11/8/2020 18:34:53'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'DS 11/8/2020 18:34:53'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'DS 11/8/2020 18:34:53'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'DS 11/8/2020 18:34:53'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'DS 11/8/2020 18:34:53'!
PASSED!

!testRun: #PortfolioTest #test10PortafolioShouldNotBeAddedToHimself stamp: 'DS 11/8/2020 18:34:53'!
PASSED!

!testRun: #PortfolioTest #test11AddedPortfolioShouldNotContainRepeatedChilds stamp: 'DS 11/8/2020 18:34:53'!
PASSED!

!testRun: #PortfolioTest #test12AddedPortafolioShouldNotContainSuccesiveRepeatedChilds stamp: 'DS 11/8/2020 18:34:53'!
PASSED!

!testRun: #PortfolioTest #test13AddedPortafolioShouldNotBeInHisChilds stamp: 'DS 11/8/2020 18:34:53'!
PASSED!

!testRun: #PortfolioTest #test14AddedPortafolioShouldNotBeInHisSuccesiveChilds stamp: 'DS 11/8/2020 18:34:53'!
PASSED!

!testRun: #PortfolioTest #test15AddedPortfolioChildsShouldNotBeInPortfolioChilds stamp: 'DS 11/8/2020 18:34:53'!
PASSED!

!testRun: #PortfolioTest #test16AddedPortfolioHerarchyShouldNotBeInHisHerarchy stamp: 'DS 11/8/2020 18:34:53'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'DS 11/8/2020 18:34:53'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'DS 11/8/2020 18:34:53'!
PASSED!

!testRun: #PortfolioTest #test19 stamp: 'DS 11/8/2020 18:34:53'!
PASSED!

!testRun: #PortfolioTest #test20 stamp: 'DS 11/8/2020 18:34:53'!
PASSED!

!methodRemoval: PortfolioTest #test20 stamp: 'DS 11/8/2020 18:41:06'!
test20

	| rootPortfolio1 rootPortfolio2 firstPortfolio secondPortfolio anAccount |
	
	rootPortfolio1 := Portfolio new.
	rootPortfolio2 := Portfolio new.

	firstPortfolio := Portfolio new.
	secondPortfolio := Portfolio new.
	anAccount := ReceptiveAccount new.

	rootPortfolio1 add: firstPortfolio.
	rootPortfolio2 add: secondPortfolio.
	firstPortfolio add: anAccount.
	firstPortfolio add: rootPortfolio2.

	self 
		should: [ secondPortfolio add: anAccount ]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedPortfolioRegistersErrorDescription
		
!

----SNAPSHOT----(8 November 2020 18:41:23) CuisUniversity-4384.image priorSource: 19084435!
!Portfolio methodsFor: 'adding' stamp: 'DS 11/8/2020 18:42:44'!
signalShouldNotHaveRepeatedPortfolioRegisters

	^ self error: self class shouldNotHaveRepeatedPortfolioRegistersErrorDescription! !
!Portfolio methodsFor: 'adding' stamp: 'DS 11/8/2020 18:42:44' prior: 50927826!
add: aPortfolioRegister

	| rootPortfolios |
	
	rootPortfolios := self rootPortfolio.		
	
	((rootPortfolios select: [:rootPorfolio | rootPorfolio hasPortfolioRegister: aPortfolioRegister]) isEmpty not)
	ifTrue: [self signalShouldNotHaveRepeatedPortfolioRegisters ].
	
	portfolioRegisters add: aPortfolioRegister.
	aPortfolioRegister setParentRegister: self.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'DS 11/8/2020 18:45:17' prior: 50927645!
setParentRegister: aPortfolio
"	parentRegisters add: aPortfolio."! !

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'DS 11/8/2020 18:45:19'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'DS 11/8/2020 18:45:19'!
PASSED!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'DS 11/8/2020 18:45:19'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'DS 11/8/2020 18:45:19'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'DS 11/8/2020 18:45:19'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'DS 11/8/2020 18:45:19'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'DS 11/8/2020 18:45:19'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'DS 11/8/2020 18:45:19'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'DS 11/8/2020 18:45:19'!
PASSED!

!testRun: #PortfolioTest #test10PortafolioShouldNotBeAddedToHimself stamp: 'DS 11/8/2020 18:45:19'!
PASSED!

!testRun: #PortfolioTest #test11AddedPortfolioShouldNotContainRepeatedChilds stamp: 'DS 11/8/2020 18:45:19'!
PASSED!

!testRun: #PortfolioTest #test12AddedPortafolioShouldNotContainSuccesiveRepeatedChilds stamp: 'DS 11/8/2020 18:45:19'!
PASSED!

!testRun: #PortfolioTest #test13AddedPortafolioShouldNotBeInHisChilds stamp: 'DS 11/8/2020 18:45:19'!
PASSED!

!testRun: #PortfolioTest #test14AddedPortafolioShouldNotBeInHisSuccesiveChilds stamp: 'DS 11/8/2020 18:45:19'!
PASSED!

!testRun: #PortfolioTest #test15AddedPortfolioChildsShouldNotBeInPortfolioChilds stamp: 'DS 11/8/2020 18:45:19'!
PASSED!

!testRun: #PortfolioTest #test16AddedPortfolioHerarchyShouldNotBeInHisHerarchy stamp: 'DS 11/8/2020 18:45:19'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'DS 11/8/2020 18:45:19'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'DS 11/8/2020 18:45:19'!
PASSED!

!testRun: #PortfolioTest #test19 stamp: 'DS 11/8/2020 18:45:19'!
PASSED!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'DS 11/8/2020 18:46:31'!
rootPortfolios
	^parentRegisters isEmpty
		ifTrue: [OrderedCollection with: self]	
		ifFalse: [ (parentRegisters collect: [ :parentRegister | parentRegister rootPortfolio ]) flatten ].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'DS 11/8/2020 18:46:31' prior: 50928230!
add: aPortfolioRegister

	| rootPortfolios |
	
	rootPortfolios := self rootPortfolios.		
	
	((rootPortfolios select: [:rootPorfolio | rootPorfolio hasPortfolioRegister: aPortfolioRegister]) isEmpty not)
	ifTrue: [self signalShouldNotHaveRepeatedPortfolioRegisters ].
	
	portfolioRegisters add: aPortfolioRegister.
	aPortfolioRegister setParentRegister: self.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'DS 11/8/2020 18:46:31' prior: 50927845!
rootPortfolio
	^parentRegisters isEmpty
		ifTrue: [OrderedCollection with: self]	
		ifFalse: [ (parentRegisters collect: [ :parentRegister | parentRegister rootPortfolios ]) flatten ].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'DS 11/8/2020 18:46:31' prior: 50928315!
rootPortfolios
	^parentRegisters isEmpty
		ifTrue: [OrderedCollection with: self]	
		ifFalse: [ (parentRegisters collect: [ :parentRegister | parentRegister rootPortfolios ]) flatten ].! !

!methodRemoval: Portfolio #rootPortfolio stamp: 'DS 11/8/2020 18:46:31'!
rootPortfolio
	^parentRegisters isEmpty
		ifTrue: [OrderedCollection with: self]	
		ifFalse: [ (parentRegisters collect: [ :parentRegister | parentRegister rootPortfolios ]) flatten ].!
!Portfolio methodsFor: 'adding' stamp: 'DS 11/8/2020 18:48:49'!
assertRepeatedPortfolioRegister: aPortfolioRegister

	| rootPortfolios |
	
	rootPortfolios := self rootPortfolios.		
	
	((rootPortfolios select: [:rootPorfolio | rootPorfolio hasPortfolioRegister: aPortfolioRegister]) isEmpty not)
	ifTrue: [self signalShouldNotHaveRepeatedPortfolioRegisters ]! !
!Portfolio methodsFor: 'adding' stamp: 'DS 11/8/2020 18:48:49' prior: 50928324!
add: aPortfolioRegister

	self assertRepeatedPortfolioRegister: aPortfolioRegister.
	
	portfolioRegisters add: aPortfolioRegister.
	aPortfolioRegister setParentRegister: self.! !

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'DS 11/8/2020 18:49:02'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'DS 11/8/2020 18:49:02'!
PASSED!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'DS 11/8/2020 18:49:02'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'DS 11/8/2020 18:49:02'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'DS 11/8/2020 18:49:02'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'DS 11/8/2020 18:49:02'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'DS 11/8/2020 18:49:02'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'DS 11/8/2020 18:49:02'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'DS 11/8/2020 18:49:02'!
PASSED!

!testRun: #PortfolioTest #test10PortafolioShouldNotBeAddedToHimself stamp: 'DS 11/8/2020 18:49:02'!
PASSED!

!testRun: #PortfolioTest #test11AddedPortfolioShouldNotContainRepeatedChilds stamp: 'DS 11/8/2020 18:49:02'!
PASSED!

!testRun: #PortfolioTest #test12AddedPortafolioShouldNotContainSuccesiveRepeatedChilds stamp: 'DS 11/8/2020 18:49:02'!
PASSED!

!testRun: #PortfolioTest #test13AddedPortafolioShouldNotBeInHisChilds stamp: 'DS 11/8/2020 18:49:02'!
PASSED!

!testRun: #PortfolioTest #test14AddedPortafolioShouldNotBeInHisSuccesiveChilds stamp: 'DS 11/8/2020 18:49:02'!
PASSED!

!testRun: #PortfolioTest #test15AddedPortfolioChildsShouldNotBeInPortfolioChilds stamp: 'DS 11/8/2020 18:49:02'!
PASSED!

!testRun: #PortfolioTest #test16AddedPortfolioHerarchyShouldNotBeInHisHerarchy stamp: 'DS 11/8/2020 18:49:02'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'DS 11/8/2020 18:49:02'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'DS 11/8/2020 18:49:02'!
PASSED!

!testRun: #PortfolioTest #test19 stamp: 'DS 11/8/2020 18:49:02'!
PASSED!
!Portfolio methodsFor: 'adding' stamp: 'DS 11/8/2020 18:49:33' prior: 50928377!
add: aPortfolioRegister

	self assertRepeatedPortfolioRegister: aPortfolioRegister.

	portfolioRegisters add: aPortfolioRegister.
	aPortfolioRegister setParentRegister: self.! !
!Portfolio methodsFor: 'adding' stamp: 'DS 11/8/2020 19:07:41' prior: 50928450!
add: aPortfolioRegister

	self assertRepeatedPortfolioRegister: aPortfolioRegister.

	aPortfolioRegister addTo: self.	! !
!Portfolio methodsFor: 'adding' stamp: 'DS 11/8/2020 19:09:02'!
addTo: aPortfolio

	parentRegisters add: aPortfolio.

	aPortfolio addSecure: self.! !
!Portfolio methodsFor: 'adding' stamp: 'DS 11/8/2020 19:09:28'!
addSecure: aPortfolioRegister

	portfolioRegisters add: aPortfolioRegister.! !
!ReceptiveAccount methodsFor: 'adding' stamp: 'DS 11/8/2020 19:09:51'!
addTo: aPortfolio

	aPortfolio addSecure: self.! !

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'DS 11/8/2020 19:10:19'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'DS 11/8/2020 19:10:19'!
PASSED!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'DS 11/8/2020 19:10:19'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'DS 11/8/2020 19:10:19'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'DS 11/8/2020 19:10:19'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'DS 11/8/2020 19:10:19'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'DS 11/8/2020 19:10:19'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'DS 11/8/2020 19:10:19'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'DS 11/8/2020 19:10:19'!
PASSED!

!testRun: #PortfolioTest #test10PortafolioShouldNotBeAddedToHimself stamp: 'DS 11/8/2020 19:10:19'!
PASSED!

!testRun: #PortfolioTest #test11AddedPortfolioShouldNotContainRepeatedChilds stamp: 'DS 11/8/2020 19:10:19'!
PASSED!

!testRun: #PortfolioTest #test12AddedPortafolioShouldNotContainSuccesiveRepeatedChilds stamp: 'DS 11/8/2020 19:10:19'!
PASSED!

!testRun: #PortfolioTest #test13AddedPortafolioShouldNotBeInHisChilds stamp: 'DS 11/8/2020 19:10:19'!
PASSED!

!testRun: #PortfolioTest #test14AddedPortafolioShouldNotBeInHisSuccesiveChilds stamp: 'DS 11/8/2020 19:10:19'!
PASSED!

!testRun: #PortfolioTest #test15AddedPortfolioChildsShouldNotBeInPortfolioChilds stamp: 'DS 11/8/2020 19:10:19'!
PASSED!

!testRun: #PortfolioTest #test16AddedPortfolioHerarchyShouldNotBeInHisHerarchy stamp: 'DS 11/8/2020 19:10:19'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'DS 11/8/2020 19:10:19'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'DS 11/8/2020 19:10:19'!
PASSED!

!testRun: #PortfolioTest #test19 stamp: 'DS 11/8/2020 19:10:19'!
PASSED!

!methodRemoval: ReceptiveAccount #setParentRegister: stamp: 'DS 11/8/2020 19:11:30'!
setParentRegister: aPortfolio
"	parentRegisters add: aPortfolio."!

!methodRemoval: Portfolio #setParentRegister: stamp: 'DS 11/8/2020 19:11:35'!
setParentRegister: aPortfolio

	parentRegisters add: aPortfolio.!

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'DS 11/8/2020 19:11:37'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'DS 11/8/2020 19:11:37'!
PASSED!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'DS 11/8/2020 19:11:37'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'DS 11/8/2020 19:11:37'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'DS 11/8/2020 19:11:37'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'DS 11/8/2020 19:11:37'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'DS 11/8/2020 19:11:37'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'DS 11/8/2020 19:11:37'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'DS 11/8/2020 19:11:37'!
PASSED!

!testRun: #PortfolioTest #test10PortafolioShouldNotBeAddedToHimself stamp: 'DS 11/8/2020 19:11:37'!
PASSED!

!testRun: #PortfolioTest #test11AddedPortfolioShouldNotContainRepeatedChilds stamp: 'DS 11/8/2020 19:11:37'!
PASSED!

!testRun: #PortfolioTest #test12AddedPortafolioShouldNotContainSuccesiveRepeatedChilds stamp: 'DS 11/8/2020 19:11:37'!
PASSED!

!testRun: #PortfolioTest #test13AddedPortafolioShouldNotBeInHisChilds stamp: 'DS 11/8/2020 19:11:37'!
PASSED!

!testRun: #PortfolioTest #test14AddedPortafolioShouldNotBeInHisSuccesiveChilds stamp: 'DS 11/8/2020 19:11:37'!
PASSED!

!testRun: #PortfolioTest #test15AddedPortfolioChildsShouldNotBeInPortfolioChilds stamp: 'DS 11/8/2020 19:11:37'!
PASSED!

!testRun: #PortfolioTest #test16AddedPortfolioHerarchyShouldNotBeInHisHerarchy stamp: 'DS 11/8/2020 19:11:37'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'DS 11/8/2020 19:11:37'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'DS 11/8/2020 19:11:37'!
PASSED!

!testRun: #PortfolioTest #test19 stamp: 'DS 11/8/2020 19:11:37'!
PASSED!

----SNAPSHOT----(8 November 2020 19:11:40) CuisUniversity-4384.image priorSource: 19090232!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'DS 11/8/2020 19:17:42'!
PortfolioRegister subclass: #Portfolio
	instanceVariableNames: 'portfolioRegisters parentPortfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'DS 11/8/2020 19:17:42' prior: 50928348!
rootPortfolios
	^parentPortfolios isEmpty
		ifTrue: [OrderedCollection with: self]	
		ifFalse: [ (parentPortfolios collect: [ :parentRegister | parentRegister rootPortfolios ]) flatten ].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'DS 11/8/2020 19:17:42' prior: 50927673 overrides: 16896425!
initialize

	portfolioRegisters := OrderedCollection new.
	parentPortfolios := OrderedCollection new.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'DS 11/8/2020 19:17:42' prior: 50928465!
addTo: aPortfolio

	parentPortfolios add: aPortfolio.

	aPortfolio addSecure: self.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'DS 11/8/2020 19:17:56' prior: 50928630!
rootPortfolios
	^parentPortfolios isEmpty
		ifTrue: [OrderedCollection with: self]	
		ifFalse: [ (parentPortfolios collect: [ :parentPortfolio | parentPortfolio rootPortfolios ]) flatten ].! !

collection add: 2.!

collection = collection add: 2.!

collection := collection add: 2.!

collection!

collection := OrderedCollection new.!

collection := collection add: 2; yourself!

collection!

Object subclass: #ParentPortfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ParentPortfolio category: 'Portfolio-Ejercicio' stamp: 'DS 11/8/2020 19:34:30'!
Object subclass: #ParentPortfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

ParentPortfolio subclass: #RootPortfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #RootPortfolio category: 'Portfolio-Ejercicio' stamp: 'DS 11/8/2020 19:34:55'!
ParentPortfolio subclass: #RootPortfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

ParentPortfolio subclass: #RootParentPortfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #RootParentPortfolio category: 'Portfolio-Ejercicio' stamp: 'DS 11/8/2020 19:35:07'!
ParentPortfolio subclass: #RootParentPortfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #RootPortfolio stamp: 'DS 11/8/2020 19:35:10'!
ParentPortfolio subclass: #RootPortfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

ParentPortfolio subclass: #CollectionParentPortfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #CollectionParentPortfolio category: 'Portfolio-Ejercicio' stamp: 'DS 11/8/2020 19:35:31'!
ParentPortfolio subclass: #CollectionParentPortfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!RootParentPortfolio methodsFor: 'no messages' stamp: 'DS 11/8/2020 19:36:31'!
addParent: aPortfolio

	^CollectionParentPortfolio with: aPortfolio.! !

!classDefinition: #RootParentPortfolio category: 'Portfolio-Ejercicio' stamp: 'DS 11/8/2020 19:37:55'!
ParentPortfolio subclass: #RootParentPortfolio
	instanceVariableNames: 'portfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!RootParentPortfolio methodsFor: 'as yet unclassified' stamp: 'DS 11/8/2020 19:37:53' prior: 50928725!
addParent: aParentPortfolio

	^CollectionParentPortfolio for: portfolio with: aParentPortfolio.! !
!RootParentPortfolio methodsFor: 'as yet unclassified' stamp: 'DS 11/8/2020 19:38:13'!
roots

	^OrderedCollection with: portfolio.! !

!classDefinition: #CollectionParentPortfolio category: 'Portfolio-Ejercicio' stamp: 'DS 11/8/2020 19:38:52'!
ParentPortfolio subclass: #CollectionParentPortfolio
	instanceVariableNames: 'parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!CollectionParentPortfolio methodsFor: 'no messages' stamp: 'DS 11/8/2020 19:38:50'!
addParent: aParentPortfolio

	parents add: aParentPortfolio.
	^self.! !
!CollectionParentPortfolio methodsFor: 'as yet unclassified' stamp: 'DS 11/8/2020 19:39:31'!
roots

	^(parents collect: [ :parentPortfolio | parentPortfolio rootPortfolios ]) flatten.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'DS 11/8/2020 19:39:58' prior: 50928653!
rootPortfolios
	^parentPortfolios roots.! !
!Portfolio methodsFor: 'initialization' stamp: 'DS 11/8/2020 19:40:25' prior: 50928640 overrides: 16896425!
initialize

	portfolioRegisters := OrderedCollection new.
	parentPortfolios := RootParentPortfolio for: self.! !
!Portfolio methodsFor: 'adding' stamp: 'DS 11/8/2020 19:40:50' prior: 50928647!
addTo: aPortfolio

	parentPortfolios := 	parentPortfolios add: aPortfolio.

	aPortfolio addSecure: self.! !
!Portfolio methodsFor: 'adding' stamp: 'DS 11/8/2020 19:41:10' prior: 50928782!
addTo: aPortfolio

	parentPortfolios := 	parentPortfolios addParent: aPortfolio.

	aPortfolio addSecure: self.! !
!CollectionParentPortfolio class methodsFor: 'no messages' stamp: 'DS 11/8/2020 19:43:11'!
for: aPortfolio with: aParentPortfolio

	^self new initializeFor: aPortfolio with: aParentPortfolio.! !

!classDefinition: #CollectionParentPortfolio category: 'Portfolio-Ejercicio' stamp: 'DS 11/8/2020 19:44:09'!
ParentPortfolio subclass: #CollectionParentPortfolio
	instanceVariableNames: 'parents portfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!CollectionParentPortfolio methodsFor: 'as yet unclassified' stamp: 'DS 11/8/2020 19:44:08'!
initializeFor: aPortfolio with: aParentPortfolio

	portfolio := aPortfolio.
	parents := OrderedCollection with: aParentPortfolio.! !
!RootParentPortfolio class methodsFor: 'no messages' stamp: 'DS 11/8/2020 19:44:36'!
for: aPortfolio

	^self initializateFor: aPortfolio.! !
!RootParentPortfolio class methodsFor: 'as yet unclassified' stamp: 'DS 11/8/2020 19:44:38' prior: 50928818!
for: aPortfolio

	^self new initializateFor: aPortfolio.! !
!RootParentPortfolio methodsFor: 'as yet unclassified' stamp: 'DS 11/8/2020 19:44:52'!
initializateFor: aPortfolio

	portfolio := aPortfolio! !
!RootParentPortfolio methodsFor: 'as yet unclassified' stamp: 'DS 11/8/2020 19:44:53' prior: 50928829!
initializateFor: aPortfolio

	portfolio := aPortfolio.! !

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'DS 11/8/2020 19:45:27'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'DS 11/8/2020 19:45:27'!
PASSED!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'DS 11/8/2020 19:45:27'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'DS 11/8/2020 19:45:27'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'DS 11/8/2020 19:45:27'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'DS 11/8/2020 19:45:27'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'DS 11/8/2020 19:45:27'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'DS 11/8/2020 19:45:27'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'DS 11/8/2020 19:45:27'!
PASSED!

!testRun: #PortfolioTest #test10PortafolioShouldNotBeAddedToHimself stamp: 'DS 11/8/2020 19:45:27'!
PASSED!

!testRun: #PortfolioTest #test11AddedPortfolioShouldNotContainRepeatedChilds stamp: 'DS 11/8/2020 19:45:27'!
PASSED!

!testRun: #PortfolioTest #test12AddedPortafolioShouldNotContainSuccesiveRepeatedChilds stamp: 'DS 11/8/2020 19:45:27'!
PASSED!

!testRun: #PortfolioTest #test13AddedPortafolioShouldNotBeInHisChilds stamp: 'DS 11/8/2020 19:45:27'!
PASSED!

!testRun: #PortfolioTest #test14AddedPortafolioShouldNotBeInHisSuccesiveChilds stamp: 'DS 11/8/2020 19:45:27'!
PASSED!

!testRun: #PortfolioTest #test15AddedPortfolioChildsShouldNotBeInPortfolioChilds stamp: 'DS 11/8/2020 19:45:27'!
PASSED!

!testRun: #PortfolioTest #test16AddedPortfolioHerarchyShouldNotBeInHisHerarchy stamp: 'DS 11/8/2020 19:45:27'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'DS 11/8/2020 19:45:27'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'DS 11/8/2020 19:45:27'!
PASSED!

!testRun: #PortfolioTest #test19 stamp: 'DS 11/8/2020 19:45:27'!
PASSED!
!Portfolio methodsFor: 'roots' stamp: 'DS 11/8/2020 19:45:47' prior: 50928770!
rootPortfolios

	^parentPortfolios roots.! !

----SNAPSHOT----(8 November 2020 19:45:49) CuisUniversity-4384.image priorSource: 19102942!

!classRenamed: #PortfolioRegister as: #FinancialRecord stamp: 'DS 11/8/2020 19:49:43'!
Smalltalk renameClassNamed: #PortfolioRegister as: #FinancialRecord!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'DS 11/8/2020 19:58:53'!
FinancialRecord subclass: #Portfolio
	instanceVariableNames: 'financialRecords parentPortfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'DS 11/8/2020 19:58:53' prior: 50928470!
addSecure: aPortfolioRegister

	financialRecords add: aPortfolioRegister.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'DS 11/8/2020 19:58:53' prior: 50927056!
hasPortfolioRegister: aPortfolioRegister

	^(self = aPortfolioRegister)
	or: [(financialRecords select: [ :childRegisters | aPortfolioRegister  hasPortfolioRegister: childRegisters ]) isEmpty not]
	or: [(financialRecords select: [ :childRegisters | childRegisters  hasPortfolioRegister: aPortfolioRegister ]) isEmpty not].
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'DS 11/8/2020 19:58:53' prior: 50928775 overrides: 16896425!
initialize

	financialRecords := OrderedCollection new.
	parentPortfolios := RootParentPortfolio for: self.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'DS 11/8/2020 19:58:53' prior: 50927070 overrides: 50927037!
hasRegistered: aTransaction
	^(financialRecords select: [ :aNode | aNode  hasRegistered: aTransaction. ]) isEmpty not.
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'DS 11/8/2020 19:58:53' prior: 50927082 overrides: 50927029!
transactions
	^(financialRecords collect: [ :node | node transactions ]) flatten.
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'DS 11/8/2020 19:58:53' prior: 50927088 overrides: 50927033!
balance
	^financialRecords sum: [ :aNode | aNode balance.] ifEmpty: [0].
	
	! !

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'DS 11/8/2020 19:59:07'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'DS 11/8/2020 19:59:07'!
PASSED!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'DS 11/8/2020 19:59:07'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'DS 11/8/2020 19:59:07'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'DS 11/8/2020 19:59:07'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'DS 11/8/2020 19:59:07'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'DS 11/8/2020 19:59:07'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'DS 11/8/2020 19:59:07'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'DS 11/8/2020 19:59:07'!
PASSED!

!testRun: #PortfolioTest #test10PortafolioShouldNotBeAddedToHimself stamp: 'DS 11/8/2020 19:59:07'!
PASSED!

!testRun: #PortfolioTest #test11AddedPortfolioShouldNotContainRepeatedChilds stamp: 'DS 11/8/2020 19:59:07'!
PASSED!

!testRun: #PortfolioTest #test12AddedPortafolioShouldNotContainSuccesiveRepeatedChilds stamp: 'DS 11/8/2020 19:59:07'!
PASSED!

!testRun: #PortfolioTest #test13AddedPortafolioShouldNotBeInHisChilds stamp: 'DS 11/8/2020 19:59:07'!
PASSED!

!testRun: #PortfolioTest #test14AddedPortafolioShouldNotBeInHisSuccesiveChilds stamp: 'DS 11/8/2020 19:59:07'!
PASSED!

!testRun: #PortfolioTest #test15AddedPortfolioChildsShouldNotBeInPortfolioChilds stamp: 'DS 11/8/2020 19:59:07'!
PASSED!

!testRun: #PortfolioTest #test16AddedPortfolioHerarchyShouldNotBeInHisHerarchy stamp: 'DS 11/8/2020 19:59:07'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'DS 11/8/2020 19:59:07'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'DS 11/8/2020 19:59:07'!
PASSED!

!testRun: #PortfolioTest #test19 stamp: 'DS 11/8/2020 19:59:07'!
PASSED!
!Portfolio methodsFor: 'adding' stamp: 'DS 11/8/2020 19:59:38' prior: 50928459!
add: aFinancialRecord

	self assertRepeatedPortfolioRegister: aFinancialRecord.

	aFinancialRecord addTo: self.	! !
!Portfolio methodsFor: 'adding' stamp: 'DS 11/8/2020 19:59:45' prior: 50928924!
addSecure: aFinancialRecord

	financialRecords add: aFinancialRecord.! !

!classRenamed: #FinancialRecord as: #BankRecord stamp: 'DS 11/8/2020 20:00:17'!
Smalltalk renameClassNamed: #FinancialRecord as: #BankRecord!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'DS 11/8/2020 20:00:29'!
BankRecord subclass: #Portfolio
	instanceVariableNames: 'bankRecords parentPortfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'DS 11/8/2020 20:00:29' prior: 50929043!
addSecure: aFinancialRecord

	bankRecords add: aFinancialRecord.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'DS 11/8/2020 20:00:29' prior: 50928930!
hasPortfolioRegister: aPortfolioRegister

	^(self = aPortfolioRegister)
	or: [(bankRecords select: [ :childRegisters | aPortfolioRegister  hasPortfolioRegister: childRegisters ]) isEmpty not]
	or: [(bankRecords select: [ :childRegisters | childRegisters  hasPortfolioRegister: aPortfolioRegister ]) isEmpty not].
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'DS 11/8/2020 20:00:29' prior: 50928944 overrides: 16896425!
initialize

	bankRecords := OrderedCollection new.
	parentPortfolios := RootParentPortfolio for: self.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'DS 11/8/2020 20:00:29' prior: 50928951 overrides: 50927037!
hasRegistered: aTransaction
	^(bankRecords select: [ :aNode | aNode  hasRegistered: aTransaction. ]) isEmpty not.
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'DS 11/8/2020 20:00:29' prior: 50928959 overrides: 50927029!
transactions
	^(bankRecords collect: [ :node | node transactions ]) flatten.
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'DS 11/8/2020 20:00:29' prior: 50928966 overrides: 50927033!
balance
	^bankRecords sum: [ :aNode | aNode balance.] ifEmpty: [0].
	
	! !
!Portfolio methodsFor: 'adding' stamp: 'DS 11/8/2020 20:00:39' prior: 50929036!
add: aBankRecord

	self assertRepeatedPortfolioRegister: aBankRecord.

	aBankRecord addTo: self.	! !
!Portfolio methodsFor: 'adding' stamp: 'DS 11/8/2020 20:00:47' prior: 50929061!
addSecure: aBankRecord

	bankRecords add: aBankRecord.! !
!Portfolio methodsFor: 'assert / errors' stamp: 'DS 11/8/2020 20:01:05'!
assertRepeatedBankRecord: aPortfolioRegister

	| rootPortfolios |
	
	rootPortfolios := self rootPortfolios.		
	
	((rootPortfolios select: [:rootPorfolio | rootPorfolio hasPortfolioRegister: aPortfolioRegister]) isEmpty not)
	ifTrue: [self signalShouldNotHaveRepeatedPortfolioRegisters ]! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'DS 11/8/2020 20:01:05' prior: 50929108!
add: aBankRecord

	self assertRepeatedBankRecord: aBankRecord.

	aBankRecord addTo: self.	! !

!methodRemoval: Portfolio #assertRepeatedPortfolioRegister: stamp: 'DS 11/8/2020 20:01:05'!
assertRepeatedPortfolioRegister: aPortfolioRegister

	| rootPortfolios |
	
	rootPortfolios := self rootPortfolios.		
	
	((rootPortfolios select: [:rootPorfolio | rootPorfolio hasPortfolioRegister: aPortfolioRegister]) isEmpty not)
	ifTrue: [self signalShouldNotHaveRepeatedPortfolioRegisters ]!

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'DS 11/8/2020 20:01:16'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'DS 11/8/2020 20:01:16'!
PASSED!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'DS 11/8/2020 20:01:16'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'DS 11/8/2020 20:01:16'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'DS 11/8/2020 20:01:16'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'DS 11/8/2020 20:01:16'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'DS 11/8/2020 20:01:16'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'DS 11/8/2020 20:01:16'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'DS 11/8/2020 20:01:16'!
PASSED!

!testRun: #PortfolioTest #test10PortafolioShouldNotBeAddedToHimself stamp: 'DS 11/8/2020 20:01:16'!
PASSED!

!testRun: #PortfolioTest #test11AddedPortfolioShouldNotContainRepeatedChilds stamp: 'DS 11/8/2020 20:01:16'!
PASSED!

!testRun: #PortfolioTest #test12AddedPortafolioShouldNotContainSuccesiveRepeatedChilds stamp: 'DS 11/8/2020 20:01:16'!
PASSED!

!testRun: #PortfolioTest #test13AddedPortafolioShouldNotBeInHisChilds stamp: 'DS 11/8/2020 20:01:16'!
PASSED!

!testRun: #PortfolioTest #test14AddedPortafolioShouldNotBeInHisSuccesiveChilds stamp: 'DS 11/8/2020 20:01:16'!
PASSED!

!testRun: #PortfolioTest #test15AddedPortfolioChildsShouldNotBeInPortfolioChilds stamp: 'DS 11/8/2020 20:01:16'!
PASSED!

!testRun: #PortfolioTest #test16AddedPortfolioHerarchyShouldNotBeInHisHerarchy stamp: 'DS 11/8/2020 20:01:16'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'DS 11/8/2020 20:01:16'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'DS 11/8/2020 20:01:16'!
PASSED!

!testRun: #PortfolioTest #test19 stamp: 'DS 11/8/2020 20:01:16'!
PASSED!
!Portfolio methodsFor: 'assert / errors' stamp: 'DS 11/8/2020 20:01:38' prior: 50929119!
assertRepeatedBankRecord: aBankRecord

	| rootPortfolios |
	
	rootPortfolios := self rootPortfolios.		
	
	((rootPortfolios select: [:rootPorfolio | rootPorfolio hasPortfolioRegister: aBankRecord]) isEmpty not)
	ifTrue: [self signalShouldNotHaveRepeatedPortfolioRegisters ]! !
!Portfolio methodsFor: 'assert / errors' stamp: 'DS 11/8/2020 20:01:56'!
signalShouldNotHaveRepeatedBankRecords

	^ self error: self class shouldNotHaveRepeatedPortfolioRegistersErrorDescription! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'DS 11/8/2020 20:01:56' prior: 50929214!
assertRepeatedBankRecord: aBankRecord

	| rootPortfolios |
	
	rootPortfolios := self rootPortfolios.		
	
	((rootPortfolios select: [:rootPorfolio | rootPorfolio hasPortfolioRegister: aBankRecord]) isEmpty not)
	ifTrue: [self signalShouldNotHaveRepeatedBankRecords ]! !

!methodRemoval: Portfolio #signalShouldNotHaveRepeatedPortfolioRegisters stamp: 'DS 11/8/2020 20:01:56'!
signalShouldNotHaveRepeatedPortfolioRegisters

	^ self error: self class shouldNotHaveRepeatedPortfolioRegistersErrorDescription!
!Portfolio class methodsFor: 'error descriptions' stamp: 'DS 11/8/2020 20:02:22'!
shouldNotHaveRepeatedBankRecordsErrorDescription
	^'A portfolio should not have repeated portfolio registers'! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'DS 11/8/2020 20:02:22' prior: 50929225!
signalShouldNotHaveRepeatedBankRecords

	^ self error: self class shouldNotHaveRepeatedBankRecordsErrorDescription! !

!methodRemoval: Portfolio class #shouldNotHaveRepeatedPortfolioRegistersErrorDescription stamp: 'DS 11/8/2020 20:02:22'!
shouldNotHaveRepeatedPortfolioRegistersErrorDescription
	^'A portfolio should not have repeated portfolio registers'!
!Portfolio class methodsFor: 'error descriptions' stamp: 'DS 11/8/2020 20:02:32' prior: 50929251!
shouldNotHaveRepeatedBankRecordsErrorDescription
	^'A portfolio should not have repeated bank records'! !

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'DS 11/8/2020 20:02:36'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'DS 11/8/2020 20:02:36'!
PASSED!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'DS 11/8/2020 20:02:36'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'DS 11/8/2020 20:02:36'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'DS 11/8/2020 20:02:36'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'DS 11/8/2020 20:02:36'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'DS 11/8/2020 20:02:36'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'DS 11/8/2020 20:02:36'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'DS 11/8/2020 20:02:36'!
PASSED!

!testRun: #PortfolioTest #test10PortafolioShouldNotBeAddedToHimself stamp: 'DS 11/8/2020 20:02:36'!
ERROR!

!testRun: #PortfolioTest #test11AddedPortfolioShouldNotContainRepeatedChilds stamp: 'DS 11/8/2020 20:02:36'!
ERROR!

!testRun: #PortfolioTest #test12AddedPortafolioShouldNotContainSuccesiveRepeatedChilds stamp: 'DS 11/8/2020 20:02:36'!
ERROR!

!testRun: #PortfolioTest #test13AddedPortafolioShouldNotBeInHisChilds stamp: 'DS 11/8/2020 20:02:36'!
ERROR!

!testRun: #PortfolioTest #test14AddedPortafolioShouldNotBeInHisSuccesiveChilds stamp: 'DS 11/8/2020 20:02:36'!
ERROR!

!testRun: #PortfolioTest #test15AddedPortfolioChildsShouldNotBeInPortfolioChilds stamp: 'DS 11/8/2020 20:02:36'!
ERROR!

!testRun: #PortfolioTest #test16AddedPortfolioHerarchyShouldNotBeInHisHerarchy stamp: 'DS 11/8/2020 20:02:36'!
ERROR!

!testRun: #PortfolioTest #test17 stamp: 'DS 11/8/2020 20:02:36'!
ERROR!

!testRun: #PortfolioTest #test18 stamp: 'DS 11/8/2020 20:02:36'!
ERROR!

!testRun: #PortfolioTest #test19 stamp: 'DS 11/8/2020 20:02:36'!
ERROR!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'DS 11/8/2020 20:03:17' prior: 50926692!
test12AddedPortafolioShouldNotContainSuccesiveRepeatedChilds
	| mainPortfolio secondPortfolio thirdPortfolio |
	
	mainPortfolio := Portfolio new.
	secondPortfolio := Portfolio new.
	thirdPortfolio := Portfolio new.
	
	mainPortfolio add: secondPortfolio.
	secondPortfolio add: thirdPortfolio.
	self 
		should: [ thirdPortfolio add: mainPortfolio. ]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedBankRecordsErrorDescription
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'DS 11/8/2020 20:03:17' prior: 50926723!
test14AddedPortafolioShouldNotBeInHisSuccesiveChilds

	| mainPortfolio secondPortfolio aRepeatedPortfolio |
	
	mainPortfolio := Portfolio new.
	secondPortfolio := Portfolio new.
	aRepeatedPortfolio  := Portfolio new.
	
	mainPortfolio add: secondPortfolio. 
	secondPortfolio add: aRepeatedPortfolio.
	
	self 
		should: [ mainPortfolio add: aRepeatedPortfolio. ]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedBankRecordsErrorDescription
		
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'DS 11/8/2020 20:03:17' prior: 50926709!
test13AddedPortafolioShouldNotBeInHisChilds

	| aPortfolio aRepeatedPortfolio |
	
	aPortfolio := Portfolio new.
	aRepeatedPortfolio  := Portfolio new.
	
	aPortfolio add: aRepeatedPortfolio.
	
	self 
		should: [ aPortfolio add: aRepeatedPortfolio. ]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedBankRecordsErrorDescription
		
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'DS 11/8/2020 20:03:17' prior: 50926678!
test11AddedPortfolioShouldNotContainRepeatedChilds
	| mainPortfolio secondPortfolio |
	
	mainPortfolio := Portfolio new.
	secondPortfolio := Portfolio new.
	
	mainPortfolio add: secondPortfolio.
	self 
		should: [ secondPortfolio add: mainPortfolio. ]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedBankRecordsErrorDescription
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'DS 11/8/2020 20:03:17' prior: 50926667!
test10PortafolioShouldNotBeAddedToHimself
	| aPortfolio |
	
	aPortfolio := Portfolio new.
	
	self 
		should: [ aPortfolio add: aPortfolio. ]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedBankRecordsErrorDescription
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'DS 11/8/2020 20:03:17' prior: 50927430!
test19
	
	| rootPortfolio1 rootPortfolio2 aPortfolio anAccount |
	
	rootPortfolio1 := Portfolio new.
	rootPortfolio2 := Portfolio new.

	aPortfolio := Portfolio new.
	anAccount := ReceptiveAccount new.

	rootPortfolio1 add: aPortfolio.
	rootPortfolio1 add: anAccount.	
	rootPortfolio2 add: aPortfolio.

	self 
		should: [ aPortfolio add: anAccount ]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedBankRecordsErrorDescription
		
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'DS 11/8/2020 20:03:17' prior: 50926741!
test15AddedPortfolioChildsShouldNotBeInPortfolioChilds
	
	| aPortfolio secondPortfolio aRepeatedPortfolioRegister |
	
	aPortfolio := Portfolio new.
	secondPortfolio  := Portfolio new.
	
	aRepeatedPortfolioRegister := ReceptiveAccount new.
	
	secondPortfolio add: aRepeatedPortfolioRegister.
	aPortfolio add: aRepeatedPortfolioRegister.
	
	self 
		should: [ aPortfolio add: secondPortfolio. ]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedBankRecordsErrorDescription
		
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'DS 11/8/2020 20:03:17' prior: 50926780!
test17
	
	| rootPortfolio secondPortfolio thirdPortfolio  |
	
	rootPortfolio := Portfolio new.
	secondPortfolio  := Portfolio new.
	thirdPortfolio := Portfolio new.

	rootPortfolio add: secondPortfolio.
	rootPortfolio add: thirdPortfolio.
	
	self 
		should: [ secondPortfolio add: thirdPortfolio ]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedBankRecordsErrorDescription
		
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'DS 11/8/2020 20:03:17' prior: 50926759!
test16AddedPortfolioHerarchyShouldNotBeInHisHerarchy
	
	| aPortfolio secondPortfolio thirdPortfolio aRepeatedPortfolioRegister |
	
	aPortfolio := Portfolio new.
	secondPortfolio  := Portfolio new.
	thirdPortfolio := Portfolio new.
	
	aRepeatedPortfolioRegister := ReceptiveAccount new.
	
	thirdPortfolio add: aRepeatedPortfolioRegister.
	secondPortfolio add: aRepeatedPortfolioRegister.
	
	aPortfolio add: secondPortfolio.
	
	self 
		should: [ aPortfolio add: thirdPortfolio. ]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedBankRecordsErrorDescription
		
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'DS 11/8/2020 20:03:17' prior: 50926796!
test18
	
	| rootPortfolio secondPortfolio thirdPortfolio FourthPortfolio Account |
	
	rootPortfolio := Portfolio new.
	secondPortfolio  := Portfolio new.
	thirdPortfolio := Portfolio new.
	
	FourthPortfolio := Portfolio new.
	Account := ReceptiveAccount new.
	
	rootPortfolio add: secondPortfolio.
	rootPortfolio add: thirdPortfolio.
	
	secondPortfolio add: Account.
	thirdPortfolio add: FourthPortfolio.
	
	self 
		should: [ FourthPortfolio add: Account ]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedBankRecordsErrorDescription
		
! !

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'DS 11/8/2020 20:03:20'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'DS 11/8/2020 20:03:20'!
PASSED!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'DS 11/8/2020 20:03:20'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'DS 11/8/2020 20:03:20'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'DS 11/8/2020 20:03:20'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'DS 11/8/2020 20:03:20'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'DS 11/8/2020 20:03:20'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'DS 11/8/2020 20:03:20'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'DS 11/8/2020 20:03:20'!
PASSED!

!testRun: #PortfolioTest #test10PortafolioShouldNotBeAddedToHimself stamp: 'DS 11/8/2020 20:03:20'!
PASSED!

!testRun: #PortfolioTest #test11AddedPortfolioShouldNotContainRepeatedChilds stamp: 'DS 11/8/2020 20:03:20'!
PASSED!

!testRun: #PortfolioTest #test12AddedPortafolioShouldNotContainSuccesiveRepeatedChilds stamp: 'DS 11/8/2020 20:03:20'!
PASSED!

!testRun: #PortfolioTest #test13AddedPortafolioShouldNotBeInHisChilds stamp: 'DS 11/8/2020 20:03:20'!
PASSED!

!testRun: #PortfolioTest #test14AddedPortafolioShouldNotBeInHisSuccesiveChilds stamp: 'DS 11/8/2020 20:03:20'!
PASSED!

!testRun: #PortfolioTest #test15AddedPortfolioChildsShouldNotBeInPortfolioChilds stamp: 'DS 11/8/2020 20:03:20'!
PASSED!

!testRun: #PortfolioTest #test16AddedPortfolioHerarchyShouldNotBeInHisHerarchy stamp: 'DS 11/8/2020 20:03:20'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'DS 11/8/2020 20:03:20'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'DS 11/8/2020 20:03:20'!
PASSED!

!testRun: #PortfolioTest #test19 stamp: 'DS 11/8/2020 20:03:20'!
PASSED!

----SNAPSHOT----(8 November 2020 20:03:23) CuisUniversity-4384.image priorSource: 19112204!

----QUIT----(8 November 2020 20:24:29) CuisUniversity-4384.image priorSource: 19133661!

----STARTUP---- (8 November 2020 20:24:46) as /mnt/sdb5/Ingenieria1/CuisUniversity/CuisUniversity-4384.image!


!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'DS 11/8/2020 20:24:57'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'DS 11/8/2020 20:24:57'!
PASSED!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'DS 11/8/2020 20:24:57'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'DS 11/8/2020 20:24:57'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'DS 11/8/2020 20:24:57'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'DS 11/8/2020 20:24:57'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'DS 11/8/2020 20:24:57'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'DS 11/8/2020 20:24:57'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'DS 11/8/2020 20:24:57'!
PASSED!

!testRun: #PortfolioTest #test10PortafolioShouldNotBeAddedToHimself stamp: 'DS 11/8/2020 20:24:57'!
PASSED!

!testRun: #PortfolioTest #test11AddedPortfolioShouldNotContainRepeatedChilds stamp: 'DS 11/8/2020 20:24:57'!
PASSED!

!testRun: #PortfolioTest #test12AddedPortafolioShouldNotContainSuccesiveRepeatedChilds stamp: 'DS 11/8/2020 20:24:57'!
PASSED!

!testRun: #PortfolioTest #test13AddedPortafolioShouldNotBeInHisChilds stamp: 'DS 11/8/2020 20:24:57'!
PASSED!

!testRun: #PortfolioTest #test14AddedPortafolioShouldNotBeInHisSuccesiveChilds stamp: 'DS 11/8/2020 20:24:57'!
PASSED!

!testRun: #PortfolioTest #test15AddedPortfolioChildsShouldNotBeInPortfolioChilds stamp: 'DS 11/8/2020 20:24:57'!
PASSED!

!testRun: #PortfolioTest #test16AddedPortfolioHerarchyShouldNotBeInHisHerarchy stamp: 'DS 11/8/2020 20:24:57'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'DS 11/8/2020 20:24:57'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'DS 11/8/2020 20:24:57'!
PASSED!

!testRun: #PortfolioTest #test19 stamp: 'DS 11/8/2020 20:24:57'!
PASSED!

----QUIT----(8 November 2020 20:25:05) CuisUniversity-4384.image priorSource: 19133754!

----STARTUP---- (8 November 2020 20:43:54) as /home/diego/Documents/Ingenieria 1/CuisUniversity/CuisUniversity-4384.image!


----SNAPSHOT----(8 November 2020 20:44:04) CuisUniversity-4384.image priorSource: 17308736!

----End fileIn of /home/diego/Documents/Ingenieria 1/CuisUniversity/Portfolio-Ejercicio.st----!

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'DS 11/8/2020 20:45:21'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'DS 11/8/2020 20:45:21'!
PASSED!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'DS 11/8/2020 20:45:21'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'DS 11/8/2020 20:45:21'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'DS 11/8/2020 20:45:21'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'DS 11/8/2020 20:45:21'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'DS 11/8/2020 20:45:21'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'DS 11/8/2020 20:45:21'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'DS 11/8/2020 20:45:21'!
PASSED!

!testRun: #PortfolioTest #test10PortafolioShouldNotBeAddedToHimself stamp: 'DS 11/8/2020 20:45:21'!
PASSED!

!testRun: #PortfolioTest #test11AddedPortfolioShouldNotContainRepeatedChilds stamp: 'DS 11/8/2020 20:45:21'!
PASSED!

!testRun: #PortfolioTest #test12AddedPortafolioShouldNotContainSuccesiveRepeatedChilds stamp: 'DS 11/8/2020 20:45:21'!
PASSED!

!testRun: #PortfolioTest #test13AddedPortafolioShouldNotBeInHisChilds stamp: 'DS 11/8/2020 20:45:21'!
PASSED!

!testRun: #PortfolioTest #test14AddedPortafolioShouldNotBeInHisSuccesiveChilds stamp: 'DS 11/8/2020 20:45:21'!
PASSED!

!testRun: #PortfolioTest #test15AddedPortfolioChildsShouldNotBeInPortfolioChilds stamp: 'DS 11/8/2020 20:45:21'!
PASSED!

!testRun: #PortfolioTest #test16AddedPortfolioHerarchyShouldNotBeInHisHerarchy stamp: 'DS 11/8/2020 20:45:21'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'DS 11/8/2020 20:45:21'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'DS 11/8/2020 20:45:21'!
PASSED!

!testRun: #PortfolioTest #test19 stamp: 'DS 11/8/2020 20:45:21'!
PASSED!

----SNAPSHOT----(8 November 2020 20:45:24) CuisUniversity-4384.image priorSource: 17308950!
!Portfolio methodsFor: 'balance' stamp: 'DS 11/8/2020 20:48:06' prior: 50873141 overrides: 50873086!
balance
	^bankRecords sum: [ :aBankRecord | aBankRecord balance.] ifEmpty: [0].
	
	! !
!Portfolio methodsFor: 'testing' stamp: 'DS 11/8/2020 20:49:06' prior: 50873108!
hasPortfolioRegister: aBankRecord

	^(self = aBankRecord)
	or: [(bankRecords select: [ :childRegisters | aBankRecord  hasPortfolioRegister: childRegisters ]) isEmpty not]
	or: [(bankRecords select: [ :childRegisters | childRegisters  hasPortfolioRegister: aBankRecord ]) isEmpty not].
	! !
!Portfolio methodsFor: 'testing' stamp: 'DS 11/8/2020 20:49:15' prior: 50873121 overrides: 50873090!
hasRegistered: aTransaction
	^(bankRecords select: [ :aBankRecord | aBankRecord  hasRegistered: aTransaction. ]) isEmpty not.
! !
!Portfolio methodsFor: 'transactions' stamp: 'DS 11/8/2020 20:49:37' prior: 50873135 overrides: 50873082!
transactions
	^(bankRecords collect: [ :aBankRecord | aBankRecord transactions ]) flatten.
	! !

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'DS 11/8/2020 20:49:51'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'DS 11/8/2020 20:49:51'!
PASSED!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'DS 11/8/2020 20:49:51'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'DS 11/8/2020 20:49:51'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'DS 11/8/2020 20:49:51'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'DS 11/8/2020 20:49:51'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'DS 11/8/2020 20:49:51'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'DS 11/8/2020 20:49:51'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'DS 11/8/2020 20:49:51'!
PASSED!

!testRun: #PortfolioTest #test10PortafolioShouldNotBeAddedToHimself stamp: 'DS 11/8/2020 20:49:51'!
PASSED!

!testRun: #PortfolioTest #test11AddedPortfolioShouldNotContainRepeatedChilds stamp: 'DS 11/8/2020 20:49:51'!
PASSED!

!testRun: #PortfolioTest #test12AddedPortafolioShouldNotContainSuccesiveRepeatedChilds stamp: 'DS 11/8/2020 20:49:51'!
PASSED!

!testRun: #PortfolioTest #test13AddedPortafolioShouldNotBeInHisChilds stamp: 'DS 11/8/2020 20:49:51'!
PASSED!

!testRun: #PortfolioTest #test14AddedPortafolioShouldNotBeInHisSuccesiveChilds stamp: 'DS 11/8/2020 20:49:51'!
PASSED!

!testRun: #PortfolioTest #test15AddedPortfolioChildsShouldNotBeInPortfolioChilds stamp: 'DS 11/8/2020 20:49:51'!
PASSED!

!testRun: #PortfolioTest #test16AddedPortfolioHerarchyShouldNotBeInHisHerarchy stamp: 'DS 11/8/2020 20:49:51'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'DS 11/8/2020 20:49:51'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'DS 11/8/2020 20:49:51'!
PASSED!

!testRun: #PortfolioTest #test19 stamp: 'DS 11/8/2020 20:49:51'!
PASSED!
!Portfolio methodsFor: 'testing' stamp: 'DS 11/8/2020 20:55:12'!
hasBankRecord: aBankRecord

	^(self = aBankRecord)
	or: [(bankRecords select: [ :childRegisters | aBankRecord  hasPortfolioRegister: childRegisters ]) isEmpty not]
	or: [(bankRecords select: [ :childRegisters | childRegisters  hasPortfolioRegister: aBankRecord ]) isEmpty not].
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'DS 11/8/2020 20:55:12' prior: 50873434!
hasPortfolioRegister: aBankRecord

	^(self = aBankRecord)
	or: [(bankRecords select: [ :childRegisters | aBankRecord  hasBankRecord: childRegisters ]) isEmpty not]
	or: [(bankRecords select: [ :childRegisters | childRegisters  hasBankRecord: aBankRecord ]) isEmpty not].
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'DS 11/8/2020 20:55:12' prior: 50873146!
assertRepeatedBankRecord: aBankRecord

	| rootPortfolios |
	
	rootPortfolios := self rootPortfolios.		
	
	((rootPortfolios select: [:rootPorfolio | rootPorfolio hasBankRecord: aBankRecord]) isEmpty not)
	ifTrue: [self signalShouldNotHaveRepeatedBankRecords ]! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'DS 11/8/2020 20:55:12' prior: 50873525!
hasBankRecord: aBankRecord

	^(self = aBankRecord)
	or: [(bankRecords select: [ :childRegisters | aBankRecord  hasBankRecord: childRegisters ]) isEmpty not]
	or: [(bankRecords select: [ :childRegisters | childRegisters  hasBankRecord: aBankRecord ]) isEmpty not].
	! !

!methodRemoval: Portfolio #hasPortfolioRegister: stamp: 'DS 11/8/2020 20:55:12'!
hasPortfolioRegister: aBankRecord

	^(self = aBankRecord)
	or: [(bankRecords select: [ :childRegisters | aBankRecord  hasBankRecord: childRegisters ]) isEmpty not]
	or: [(bankRecords select: [ :childRegisters | childRegisters  hasBankRecord: aBankRecord ]) isEmpty not].
	!
!ReceptiveAccount methodsFor: 'testing' stamp: 'DS 11/8/2020 20:55:34'!
hasBankRecord: aPortfolioRegister
	^self = aPortfolioRegister.
! !

!methodRemoval: ReceptiveAccount #hasPortfolioRegister: stamp: 'DS 11/8/2020 20:55:34'!
hasPortfolioRegister: aPortfolioRegister
	^self = aPortfolioRegister.
!
!ReceptiveAccount methodsFor: 'testing' stamp: 'DS 11/8/2020 20:55:39' prior: 50873583!
hasBankRecord: aPortfolioRegister

	^self = aPortfolioRegister.
! !

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'DS 11/8/2020 20:55:46'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'DS 11/8/2020 20:55:46'!
PASSED!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'DS 11/8/2020 20:55:46'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'DS 11/8/2020 20:55:46'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'DS 11/8/2020 20:55:46'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'DS 11/8/2020 20:55:46'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'DS 11/8/2020 20:55:46'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'DS 11/8/2020 20:55:46'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'DS 11/8/2020 20:55:46'!
PASSED!

!testRun: #PortfolioTest #test10PortafolioShouldNotBeAddedToHimself stamp: 'DS 11/8/2020 20:55:46'!
PASSED!

!testRun: #PortfolioTest #test11AddedPortfolioShouldNotContainRepeatedChilds stamp: 'DS 11/8/2020 20:55:46'!
PASSED!

!testRun: #PortfolioTest #test12AddedPortafolioShouldNotContainSuccesiveRepeatedChilds stamp: 'DS 11/8/2020 20:55:46'!
PASSED!

!testRun: #PortfolioTest #test13AddedPortafolioShouldNotBeInHisChilds stamp: 'DS 11/8/2020 20:55:46'!
PASSED!

!testRun: #PortfolioTest #test14AddedPortafolioShouldNotBeInHisSuccesiveChilds stamp: 'DS 11/8/2020 20:55:46'!
PASSED!

!testRun: #PortfolioTest #test15AddedPortfolioChildsShouldNotBeInPortfolioChilds stamp: 'DS 11/8/2020 20:55:46'!
PASSED!

!testRun: #PortfolioTest #test16AddedPortfolioHerarchyShouldNotBeInHisHerarchy stamp: 'DS 11/8/2020 20:55:46'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'DS 11/8/2020 20:55:46'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'DS 11/8/2020 20:55:46'!
PASSED!

!testRun: #PortfolioTest #test19 stamp: 'DS 11/8/2020 20:55:46'!
PASSED!

----SNAPSHOT----(8 November 2020 20:55:55) CuisUniversity-4384.image priorSource: 17336749!
!ReceptiveAccount methodsFor: 'testing' stamp: 'DS 11/8/2020 20:56:19' prior: 50873593!
hasBankRecord: aBankRecord

	^self = aBankRecord.! !
!BankRecord methodsFor: 'adding' stamp: 'DS 11/8/2020 20:59:10'!
addTo: aPortfolio

	self subclassResponsibility.! !
!RootParentPortfolio methodsFor: 'as yet unclassified' stamp: 'DS 11/8/2020 21:03:35' prior: 50873332!
addParent: aParentPortfolio

	^CollectionParentPortfolio adding: aParentPortfolio.! !
!CollectionParentPortfolio class methodsFor: 'instance creation' stamp: 'DS 11/8/2020 21:03:53'!
adding: aParentPortfolio

	^self new initializeAdding: aParentPortfolio.! !

!methodRemoval: CollectionParentPortfolio class #for:with: stamp: 'DS 11/8/2020 21:03:58'!
for: aPortfolio with: aParentPortfolio

	^self new initializeFor: aPortfolio with: aParentPortfolio.!
!CollectionParentPortfolio methodsFor: 'initialization' stamp: 'DS 11/8/2020 21:04:13'!
initializeAdding: aParentPortfolio

	parents := OrderedCollection with: aParentPortfolio.! !

!methodRemoval: CollectionParentPortfolio #initializeFor:with: stamp: 'DS 11/8/2020 21:04:15'!
initializeFor: aPortfolio with: aParentPortfolio

	portfolio := aPortfolio.
	parents := OrderedCollection with: aParentPortfolio.!

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'DS 11/8/2020 21:04:17'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'DS 11/8/2020 21:04:17'!
PASSED!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'DS 11/8/2020 21:04:17'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'DS 11/8/2020 21:04:17'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'DS 11/8/2020 21:04:17'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'DS 11/8/2020 21:04:17'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'DS 11/8/2020 21:04:17'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'DS 11/8/2020 21:04:17'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'DS 11/8/2020 21:04:17'!
PASSED!

!testRun: #PortfolioTest #test10PortafolioShouldNotBeAddedToHimself stamp: 'DS 11/8/2020 21:04:17'!
PASSED!

!testRun: #PortfolioTest #test11AddedPortfolioShouldNotContainRepeatedChilds stamp: 'DS 11/8/2020 21:04:17'!
PASSED!

!testRun: #PortfolioTest #test12AddedPortafolioShouldNotContainSuccesiveRepeatedChilds stamp: 'DS 11/8/2020 21:04:17'!
PASSED!

!testRun: #PortfolioTest #test13AddedPortafolioShouldNotBeInHisChilds stamp: 'DS 11/8/2020 21:04:17'!
PASSED!

!testRun: #PortfolioTest #test14AddedPortafolioShouldNotBeInHisSuccesiveChilds stamp: 'DS 11/8/2020 21:04:17'!
PASSED!

!testRun: #PortfolioTest #test15AddedPortfolioChildsShouldNotBeInPortfolioChilds stamp: 'DS 11/8/2020 21:04:17'!
PASSED!

!testRun: #PortfolioTest #test16AddedPortfolioHerarchyShouldNotBeInHisHerarchy stamp: 'DS 11/8/2020 21:04:17'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'DS 11/8/2020 21:04:17'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'DS 11/8/2020 21:04:17'!
PASSED!

!testRun: #PortfolioTest #test19 stamp: 'DS 11/8/2020 21:04:17'!
PASSED!

ParentPortfolio subclass: #CollectionParentPortfolio
	instanceVariableNames: 'parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #CollectionParentPortfolio category: 'Portfolio-Ejercicio' stamp: 'DS 11/8/2020 21:04:24'!
ParentPortfolio subclass: #CollectionParentPortfolio
	instanceVariableNames: 'parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

ParentPortfolio subclass: #RootParentPortfolio
	instanceVariableNames: 'root'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #RootParentPortfolio category: 'Portfolio-Ejercicio' stamp: 'DS 11/8/2020 21:04:31'!
ParentPortfolio subclass: #RootParentPortfolio
	instanceVariableNames: 'root'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!RootParentPortfolio methodsFor: 'initialization' stamp: 'DS 11/8/2020 21:04:45' prior: 50873327!
initializateFor: aPortfolio

	root := aPortfolio.! !
!RootParentPortfolio methodsFor: 'as yet unclassified' stamp: 'DS 11/8/2020 21:04:54' prior: 50873338!
roots

	^OrderedCollection with: root.! !
!RootParentPortfolio methodsFor: 'as yet unclassified' stamp: 'DS 11/8/2020 21:04:58' prior: 50873803!
roots

	^OrderedCollection with: root.! !
!ParentPortfolio methodsFor: 'adding' stamp: 'DS 11/8/2020 21:05:37'!
addParent: aParentPortfolio

	self subclassResponsibility.! !
!ParentPortfolio methodsFor: 'roots' stamp: 'DS 11/8/2020 21:06:19'!
roots

	self subclassResponsibility.! !

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'DS 11/8/2020 21:07:00'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'DS 11/8/2020 21:07:00'!
PASSED!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'DS 11/8/2020 21:07:00'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'DS 11/8/2020 21:07:00'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'DS 11/8/2020 21:07:00'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'DS 11/8/2020 21:07:00'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'DS 11/8/2020 21:07:00'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'DS 11/8/2020 21:07:00'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'DS 11/8/2020 21:07:00'!
PASSED!

!testRun: #PortfolioTest #test10PortafolioShouldNotBeAddedToHimself stamp: 'DS 11/8/2020 21:07:00'!
PASSED!

!testRun: #PortfolioTest #test11AddedPortfolioShouldNotContainRepeatedChilds stamp: 'DS 11/8/2020 21:07:00'!
PASSED!

!testRun: #PortfolioTest #test12AddedPortafolioShouldNotContainSuccesiveRepeatedChilds stamp: 'DS 11/8/2020 21:07:00'!
PASSED!

!testRun: #PortfolioTest #test13AddedPortafolioShouldNotBeInHisChilds stamp: 'DS 11/8/2020 21:07:00'!
PASSED!

!testRun: #PortfolioTest #test14AddedPortafolioShouldNotBeInHisSuccesiveChilds stamp: 'DS 11/8/2020 21:07:00'!
PASSED!

!testRun: #PortfolioTest #test15AddedPortfolioChildsShouldNotBeInPortfolioChilds stamp: 'DS 11/8/2020 21:07:00'!
PASSED!

!testRun: #PortfolioTest #test16AddedPortfolioHerarchyShouldNotBeInHisHerarchy stamp: 'DS 11/8/2020 21:07:00'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'DS 11/8/2020 21:07:00'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'DS 11/8/2020 21:07:00'!
PASSED!

!testRun: #PortfolioTest #test19 stamp: 'DS 11/8/2020 21:07:00'!
PASSED!

----SNAPSHOT----(8 November 2020 21:07:10) CuisUniversity-4384.image priorSource: 17344372!
!Portfolio methodsFor: 'assert / errors' stamp: 'DS 11/8/2020 21:11:32' prior: 50873549!
assertRepeatedBankRecord: aBankRecord

	((self rootPortfolios select: [:rootPorfolio | rootPorfolio hasBankRecord: aBankRecord]) isEmpty not)
		ifTrue: [self signalShouldNotHaveRepeatedBankRecords ]! !

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'DS 11/8/2020 21:11:35'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'DS 11/8/2020 21:11:35'!
PASSED!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'DS 11/8/2020 21:11:35'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'DS 11/8/2020 21:11:35'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'DS 11/8/2020 21:11:35'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'DS 11/8/2020 21:11:35'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'DS 11/8/2020 21:11:35'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'DS 11/8/2020 21:11:35'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'DS 11/8/2020 21:11:35'!
PASSED!

!testRun: #PortfolioTest #test10PortafolioShouldNotBeAddedToHimself stamp: 'DS 11/8/2020 21:11:35'!
PASSED!

!testRun: #PortfolioTest #test11AddedPortfolioShouldNotContainRepeatedChilds stamp: 'DS 11/8/2020 21:11:35'!
PASSED!

!testRun: #PortfolioTest #test12AddedPortafolioShouldNotContainSuccesiveRepeatedChilds stamp: 'DS 11/8/2020 21:11:35'!
PASSED!

!testRun: #PortfolioTest #test13AddedPortafolioShouldNotBeInHisChilds stamp: 'DS 11/8/2020 21:11:35'!
PASSED!

!testRun: #PortfolioTest #test14AddedPortafolioShouldNotBeInHisSuccesiveChilds stamp: 'DS 11/8/2020 21:11:35'!
PASSED!

!testRun: #PortfolioTest #test15AddedPortfolioChildsShouldNotBeInPortfolioChilds stamp: 'DS 11/8/2020 21:11:35'!
PASSED!

!testRun: #PortfolioTest #test16AddedPortfolioHerarchyShouldNotBeInHisHerarchy stamp: 'DS 11/8/2020 21:11:35'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'DS 11/8/2020 21:11:35'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'DS 11/8/2020 21:11:35'!
PASSED!

!testRun: #PortfolioTest #test19 stamp: 'DS 11/8/2020 21:11:35'!
PASSED!
!Portfolio methodsFor: 'assert / errors' stamp: 'DS 11/8/2020 21:24:06' prior: 50873889!
assertRepeatedBankRecord: aBankRecord

	"((self rootPortfolios select: [:rootPorfolio | rootPorfolio hasBankRecord: aBankRecord]) isEmpty not)"
	( (self rootPortfolios findFirst: [:rootPorfolio | rootPorfolio hasBankRecord: aBankRecord] ) = 0 )
		ifTrue: [self signalShouldNotHaveRepeatedBankRecords ]! !

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'DS 11/8/2020 21:24:08'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'DS 11/8/2020 21:24:08'!
ERROR!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'DS 11/8/2020 21:24:08'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'DS 11/8/2020 21:24:08'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'DS 11/8/2020 21:24:08'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'DS 11/8/2020 21:24:08'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'DS 11/8/2020 21:24:08'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'DS 11/8/2020 21:24:08'!
ERROR!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'DS 11/8/2020 21:24:08'!
ERROR!

!testRun: #PortfolioTest #test10PortafolioShouldNotBeAddedToHimself stamp: 'DS 11/8/2020 21:24:08'!
FAILURE!

!testRun: #PortfolioTest #test11AddedPortfolioShouldNotContainRepeatedChilds stamp: 'DS 11/8/2020 21:24:08'!
ERROR!

!testRun: #PortfolioTest #test12AddedPortafolioShouldNotContainSuccesiveRepeatedChilds stamp: 'DS 11/8/2020 21:24:08'!
ERROR!

!testRun: #PortfolioTest #test13AddedPortafolioShouldNotBeInHisChilds stamp: 'DS 11/8/2020 21:24:08'!
ERROR!

!testRun: #PortfolioTest #test14AddedPortafolioShouldNotBeInHisSuccesiveChilds stamp: 'DS 11/8/2020 21:24:08'!
ERROR!

!testRun: #PortfolioTest #test15AddedPortfolioChildsShouldNotBeInPortfolioChilds stamp: 'DS 11/8/2020 21:24:08'!
ERROR!

!testRun: #PortfolioTest #test16AddedPortfolioHerarchyShouldNotBeInHisHerarchy stamp: 'DS 11/8/2020 21:24:08'!
ERROR!

!testRun: #PortfolioTest #test17 stamp: 'DS 11/8/2020 21:24:08'!
ERROR!

!testRun: #PortfolioTest #test18 stamp: 'DS 11/8/2020 21:24:08'!
ERROR!

!testRun: #PortfolioTest #test19 stamp: 'DS 11/8/2020 21:24:08'!
ERROR!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'DS 11/8/2020 21:24:10'!
ERROR!

(self rootPortfolios findFirst: [:rootPorfolio | rootPorfolio hasBankRecord: aBankRecord] )!

self rootPortfolios!

aBankRecord!

rootPorfolio hasBankRecord: aBankRecord!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'DS 11/8/2020 21:26:11'!
ERROR!
!Portfolio methodsFor: 'assert / errors' stamp: 'DS 11/8/2020 21:26:49' prior: 50873963!
assertRepeatedBankRecord: aBankRecord

	((self rootPortfolios select: [:rootPorfolio | rootPorfolio hasBankRecord: aBankRecord]) isEmpty not)
		ifTrue: [self signalShouldNotHaveRepeatedBankRecords ]! !

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'DS 11/8/2020 21:26:51'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'DS 11/8/2020 21:26:51'!
PASSED!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'DS 11/8/2020 21:26:51'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'DS 11/8/2020 21:26:51'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'DS 11/8/2020 21:26:51'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'DS 11/8/2020 21:26:51'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'DS 11/8/2020 21:26:51'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'DS 11/8/2020 21:26:51'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'DS 11/8/2020 21:26:51'!
PASSED!

!testRun: #PortfolioTest #test10PortafolioShouldNotBeAddedToHimself stamp: 'DS 11/8/2020 21:26:51'!
PASSED!

!testRun: #PortfolioTest #test11AddedPortfolioShouldNotContainRepeatedChilds stamp: 'DS 11/8/2020 21:26:51'!
PASSED!

!testRun: #PortfolioTest #test12AddedPortafolioShouldNotContainSuccesiveRepeatedChilds stamp: 'DS 11/8/2020 21:26:51'!
PASSED!

!testRun: #PortfolioTest #test13AddedPortafolioShouldNotBeInHisChilds stamp: 'DS 11/8/2020 21:26:51'!
PASSED!

!testRun: #PortfolioTest #test14AddedPortafolioShouldNotBeInHisSuccesiveChilds stamp: 'DS 11/8/2020 21:26:51'!
PASSED!

!testRun: #PortfolioTest #test15AddedPortfolioChildsShouldNotBeInPortfolioChilds stamp: 'DS 11/8/2020 21:26:51'!
PASSED!

!testRun: #PortfolioTest #test16AddedPortfolioHerarchyShouldNotBeInHisHerarchy stamp: 'DS 11/8/2020 21:26:51'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'DS 11/8/2020 21:26:51'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'DS 11/8/2020 21:26:51'!
PASSED!

!testRun: #PortfolioTest #test19 stamp: 'DS 11/8/2020 21:26:51'!
PASSED!
!Portfolio methodsFor: 'assert / errors' stamp: 'DS 11/8/2020 21:30:17'!
collection: aCollection isNotEmptyWhenSelect: aSelectBlock

	^(aCollection select: aSelectBlock) isEmpty not.! !
!Portfolio methodsFor: 'assert / errors' stamp: 'DS 11/8/2020 21:33:16' prior: 50874052!
assertRepeatedBankRecord: aBankRecord

	(self 
		collection: (self rootPortfolios) 
		isNotEmptyWhenSelect: [:rootPorfolio | rootPorfolio hasBankRecord: aBankRecord]
	) ifTrue: [self signalShouldNotHaveRepeatedBankRecords].! !

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'DS 11/8/2020 21:33:19'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'DS 11/8/2020 21:33:19'!
PASSED!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'DS 11/8/2020 21:33:19'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'DS 11/8/2020 21:33:19'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'DS 11/8/2020 21:33:19'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'DS 11/8/2020 21:33:19'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'DS 11/8/2020 21:33:19'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'DS 11/8/2020 21:33:19'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'DS 11/8/2020 21:33:19'!
PASSED!

!testRun: #PortfolioTest #test10PortafolioShouldNotBeAddedToHimself stamp: 'DS 11/8/2020 21:33:19'!
PASSED!

!testRun: #PortfolioTest #test11AddedPortfolioShouldNotContainRepeatedChilds stamp: 'DS 11/8/2020 21:33:19'!
PASSED!

!testRun: #PortfolioTest #test12AddedPortafolioShouldNotContainSuccesiveRepeatedChilds stamp: 'DS 11/8/2020 21:33:19'!
PASSED!

!testRun: #PortfolioTest #test13AddedPortafolioShouldNotBeInHisChilds stamp: 'DS 11/8/2020 21:33:19'!
PASSED!

!testRun: #PortfolioTest #test14AddedPortafolioShouldNotBeInHisSuccesiveChilds stamp: 'DS 11/8/2020 21:33:19'!
PASSED!

!testRun: #PortfolioTest #test15AddedPortfolioChildsShouldNotBeInPortfolioChilds stamp: 'DS 11/8/2020 21:33:19'!
PASSED!

!testRun: #PortfolioTest #test16AddedPortfolioHerarchyShouldNotBeInHisHerarchy stamp: 'DS 11/8/2020 21:33:19'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'DS 11/8/2020 21:33:19'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'DS 11/8/2020 21:33:19'!
PASSED!

!testRun: #PortfolioTest #test19 stamp: 'DS 11/8/2020 21:33:19'!
PASSED!
!Portfolio methodsFor: 'assert / errors' stamp: 'DS 11/8/2020 21:33:55' prior: 50874133!
assertRepeatedBankRecord: aBankRecord

	(self 	collection: self rootPortfolios
		isNotEmptyWhenSelect: [:rootPorfolio | rootPorfolio hasBankRecord: aBankRecord]
	) ifTrue: [self signalShouldNotHaveRepeatedBankRecords].! !

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'DS 11/8/2020 21:33:58'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'DS 11/8/2020 21:33:58'!
PASSED!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'DS 11/8/2020 21:33:58'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'DS 11/8/2020 21:33:58'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'DS 11/8/2020 21:33:58'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'DS 11/8/2020 21:33:58'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'DS 11/8/2020 21:33:58'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'DS 11/8/2020 21:33:58'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'DS 11/8/2020 21:33:58'!
PASSED!

!testRun: #PortfolioTest #test10PortafolioShouldNotBeAddedToHimself stamp: 'DS 11/8/2020 21:33:58'!
PASSED!

!testRun: #PortfolioTest #test11AddedPortfolioShouldNotContainRepeatedChilds stamp: 'DS 11/8/2020 21:33:58'!
PASSED!

!testRun: #PortfolioTest #test12AddedPortafolioShouldNotContainSuccesiveRepeatedChilds stamp: 'DS 11/8/2020 21:33:58'!
PASSED!

!testRun: #PortfolioTest #test13AddedPortafolioShouldNotBeInHisChilds stamp: 'DS 11/8/2020 21:33:58'!
PASSED!

!testRun: #PortfolioTest #test14AddedPortafolioShouldNotBeInHisSuccesiveChilds stamp: 'DS 11/8/2020 21:33:58'!
PASSED!

!testRun: #PortfolioTest #test15AddedPortfolioChildsShouldNotBeInPortfolioChilds stamp: 'DS 11/8/2020 21:33:58'!
PASSED!

!testRun: #PortfolioTest #test16AddedPortfolioHerarchyShouldNotBeInHisHerarchy stamp: 'DS 11/8/2020 21:33:58'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'DS 11/8/2020 21:33:58'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'DS 11/8/2020 21:33:58'!
PASSED!

!testRun: #PortfolioTest #test19 stamp: 'DS 11/8/2020 21:33:58'!
PASSED!
!Portfolio methodsFor: 'testing' stamp: 'DS 11/8/2020 21:36:29' prior: 50873447 overrides: 50873090!
hasRegistered: aTransaction
	^ self	collection: bankRecords
		 isNotEmptyWhenSelect: [ :aBankRecord | aBankRecord  hasRegistered: aTransaction ].
! !

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'DS 11/8/2020 21:36:43'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'DS 11/8/2020 21:36:43'!
PASSED!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'DS 11/8/2020 21:36:43'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'DS 11/8/2020 21:36:43'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'DS 11/8/2020 21:36:43'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'DS 11/8/2020 21:36:43'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'DS 11/8/2020 21:36:43'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'DS 11/8/2020 21:36:43'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'DS 11/8/2020 21:36:43'!
PASSED!

!testRun: #PortfolioTest #test10PortafolioShouldNotBeAddedToHimself stamp: 'DS 11/8/2020 21:36:43'!
PASSED!

!testRun: #PortfolioTest #test11AddedPortfolioShouldNotContainRepeatedChilds stamp: 'DS 11/8/2020 21:36:43'!
PASSED!

!testRun: #PortfolioTest #test12AddedPortafolioShouldNotContainSuccesiveRepeatedChilds stamp: 'DS 11/8/2020 21:36:43'!
PASSED!

!testRun: #PortfolioTest #test13AddedPortafolioShouldNotBeInHisChilds stamp: 'DS 11/8/2020 21:36:43'!
PASSED!

!testRun: #PortfolioTest #test14AddedPortafolioShouldNotBeInHisSuccesiveChilds stamp: 'DS 11/8/2020 21:36:43'!
PASSED!

!testRun: #PortfolioTest #test15AddedPortfolioChildsShouldNotBeInPortfolioChilds stamp: 'DS 11/8/2020 21:36:43'!
PASSED!

!testRun: #PortfolioTest #test16AddedPortfolioHerarchyShouldNotBeInHisHerarchy stamp: 'DS 11/8/2020 21:36:43'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'DS 11/8/2020 21:36:43'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'DS 11/8/2020 21:36:43'!
PASSED!

!testRun: #PortfolioTest #test19 stamp: 'DS 11/8/2020 21:36:43'!
PASSED!
!Portfolio methodsFor: 'testing' stamp: 'DS 11/8/2020 21:37:09' prior: 50874283 overrides: 50873090!
hasRegistered: aTransaction

	^ self	collection: bankRecords
		 isNotEmptyWhenSelect: [ :aBankRecord | aBankRecord  hasRegistered: aTransaction ].
! !
!Portfolio methodsFor: 'testing' stamp: 'DS 11/8/2020 21:38:07' prior: 50873561!
hasBankRecord: aBankRecord

	^(self = aBankRecord)
	or: [(bankRecords select: [ :childRegisters | 
			(aBankRecord  hasBankRecord: childRegisters) or: [ childRegisters  hasBankRecord: aBankRecord ]
		]) isEmpty not].
	! !

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'DS 11/8/2020 21:38:11'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'DS 11/8/2020 21:38:11'!
PASSED!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'DS 11/8/2020 21:38:11'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'DS 11/8/2020 21:38:11'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'DS 11/8/2020 21:38:11'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'DS 11/8/2020 21:38:11'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'DS 11/8/2020 21:38:11'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'DS 11/8/2020 21:38:11'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'DS 11/8/2020 21:38:11'!
PASSED!

!testRun: #PortfolioTest #test10PortafolioShouldNotBeAddedToHimself stamp: 'DS 11/8/2020 21:38:11'!
PASSED!

!testRun: #PortfolioTest #test11AddedPortfolioShouldNotContainRepeatedChilds stamp: 'DS 11/8/2020 21:38:11'!
PASSED!

!testRun: #PortfolioTest #test12AddedPortafolioShouldNotContainSuccesiveRepeatedChilds stamp: 'DS 11/8/2020 21:38:11'!
PASSED!

!testRun: #PortfolioTest #test13AddedPortafolioShouldNotBeInHisChilds stamp: 'DS 11/8/2020 21:38:11'!
PASSED!

!testRun: #PortfolioTest #test14AddedPortafolioShouldNotBeInHisSuccesiveChilds stamp: 'DS 11/8/2020 21:38:11'!
PASSED!

!testRun: #PortfolioTest #test15AddedPortfolioChildsShouldNotBeInPortfolioChilds stamp: 'DS 11/8/2020 21:38:11'!
PASSED!

!testRun: #PortfolioTest #test16AddedPortfolioHerarchyShouldNotBeInHisHerarchy stamp: 'DS 11/8/2020 21:38:11'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'DS 11/8/2020 21:38:11'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'DS 11/8/2020 21:38:11'!
PASSED!

!testRun: #PortfolioTest #test19 stamp: 'DS 11/8/2020 21:38:11'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'DS 11/8/2020 21:38:14'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'DS 11/8/2020 21:38:14'!
PASSED!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'DS 11/8/2020 21:38:14'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'DS 11/8/2020 21:38:14'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'DS 11/8/2020 21:38:14'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'DS 11/8/2020 21:38:14'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'DS 11/8/2020 21:38:14'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'DS 11/8/2020 21:38:14'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'DS 11/8/2020 21:38:14'!
PASSED!

!testRun: #PortfolioTest #test10PortafolioShouldNotBeAddedToHimself stamp: 'DS 11/8/2020 21:38:14'!
PASSED!

!testRun: #PortfolioTest #test11AddedPortfolioShouldNotContainRepeatedChilds stamp: 'DS 11/8/2020 21:38:14'!
PASSED!

!testRun: #PortfolioTest #test12AddedPortafolioShouldNotContainSuccesiveRepeatedChilds stamp: 'DS 11/8/2020 21:38:14'!
PASSED!

!testRun: #PortfolioTest #test13AddedPortafolioShouldNotBeInHisChilds stamp: 'DS 11/8/2020 21:38:14'!
PASSED!

!testRun: #PortfolioTest #test14AddedPortafolioShouldNotBeInHisSuccesiveChilds stamp: 'DS 11/8/2020 21:38:14'!
PASSED!

!testRun: #PortfolioTest #test15AddedPortfolioChildsShouldNotBeInPortfolioChilds stamp: 'DS 11/8/2020 21:38:14'!
PASSED!

!testRun: #PortfolioTest #test16AddedPortfolioHerarchyShouldNotBeInHisHerarchy stamp: 'DS 11/8/2020 21:38:14'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'DS 11/8/2020 21:38:14'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'DS 11/8/2020 21:38:14'!
PASSED!

!testRun: #PortfolioTest #test19 stamp: 'DS 11/8/2020 21:38:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'DS 11/8/2020 21:38:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'DS 11/8/2020 21:38:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DS 11/8/2020 21:38:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'DS 11/8/2020 21:38:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'DS 11/8/2020 21:38:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'DS 11/8/2020 21:38:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'DS 11/8/2020 21:38:14'!
PASSED!
!Portfolio methodsFor: 'testing' stamp: 'DS 11/8/2020 21:40:39' prior: 50874364!
hasBankRecord: aBankRecord

	^self = aBankRecord
	or: [ self collection: bankRecords
		isNotEmptyWhenSelect: [ :childRegisters | 
			(aBankRecord  hasBankRecord: childRegisters) or: [ childRegisters  hasBankRecord: aBankRecord ]]
	].
	! !

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'DS 11/8/2020 21:40:45'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'DS 11/8/2020 21:40:45'!
PASSED!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'DS 11/8/2020 21:40:45'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'DS 11/8/2020 21:40:45'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'DS 11/8/2020 21:40:45'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'DS 11/8/2020 21:40:45'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'DS 11/8/2020 21:40:45'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'DS 11/8/2020 21:40:45'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'DS 11/8/2020 21:40:45'!
PASSED!

!testRun: #PortfolioTest #test10PortafolioShouldNotBeAddedToHimself stamp: 'DS 11/8/2020 21:40:45'!
PASSED!

!testRun: #PortfolioTest #test11AddedPortfolioShouldNotContainRepeatedChilds stamp: 'DS 11/8/2020 21:40:45'!
PASSED!

!testRun: #PortfolioTest #test12AddedPortafolioShouldNotContainSuccesiveRepeatedChilds stamp: 'DS 11/8/2020 21:40:45'!
PASSED!

!testRun: #PortfolioTest #test13AddedPortafolioShouldNotBeInHisChilds stamp: 'DS 11/8/2020 21:40:45'!
PASSED!

!testRun: #PortfolioTest #test14AddedPortafolioShouldNotBeInHisSuccesiveChilds stamp: 'DS 11/8/2020 21:40:45'!
PASSED!

!testRun: #PortfolioTest #test15AddedPortfolioChildsShouldNotBeInPortfolioChilds stamp: 'DS 11/8/2020 21:40:45'!
PASSED!

!testRun: #PortfolioTest #test16AddedPortfolioHerarchyShouldNotBeInHisHerarchy stamp: 'DS 11/8/2020 21:40:45'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'DS 11/8/2020 21:40:45'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'DS 11/8/2020 21:40:45'!
PASSED!

!testRun: #PortfolioTest #test19 stamp: 'DS 11/8/2020 21:40:45'!
PASSED!

----SNAPSHOT----(8 November 2020 21:41:31) CuisUniversity-4384.image priorSource: 17351512!
!PortfolioTest methodsFor: 'add tests' stamp: 'DS 11/8/2020 21:44:52'!
test17AddedPortfolioShouldNotHasSameParent
	
	| rootPortfolio secondPortfolio thirdPortfolio  |
	
	rootPortfolio := Portfolio new.
	secondPortfolio  := Portfolio new.
	thirdPortfolio := Portfolio new.

	rootPortfolio add: secondPortfolio.
	rootPortfolio add: thirdPortfolio.
	
	self 
		should: [ secondPortfolio add: thirdPortfolio ]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedBankRecordsErrorDescription
		
! !

!methodRemoval: PortfolioTest #test17 stamp: 'DS 11/8/2020 21:44:52'!
test17
	
	| rootPortfolio secondPortfolio thirdPortfolio  |
	
	rootPortfolio := Portfolio new.
	secondPortfolio  := Portfolio new.
	thirdPortfolio := Portfolio new.

	rootPortfolio add: secondPortfolio.
	rootPortfolio add: thirdPortfolio.
	
	self 
		should: [ secondPortfolio add: thirdPortfolio ]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedBankRecordsErrorDescription
		
!
!PortfolioTest methodsFor: 'add tests' stamp: 'DS 11/8/2020 21:47:33'!
test18AddedBankRecordShouldNotBeInLastHerachyOfBrotherBranch
	
	| rootPortfolio secondPortfolio thirdPortfolio FourthPortfolio Account |
	
	rootPortfolio := Portfolio new.
	secondPortfolio  := Portfolio new.
	thirdPortfolio := Portfolio new.
	
	FourthPortfolio := Portfolio new.
	Account := ReceptiveAccount new.
	
	rootPortfolio add: secondPortfolio.
	rootPortfolio add: thirdPortfolio.
	
	secondPortfolio add: Account.
	thirdPortfolio add: FourthPortfolio.
	
	self 
		should: [ FourthPortfolio add: Account ]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedBankRecordsErrorDescription
		
! !

!methodRemoval: PortfolioTest #test18 stamp: 'DS 11/8/2020 21:47:33'!
test18
	
	| rootPortfolio secondPortfolio thirdPortfolio FourthPortfolio Account |
	
	rootPortfolio := Portfolio new.
	secondPortfolio  := Portfolio new.
	thirdPortfolio := Portfolio new.
	
	FourthPortfolio := Portfolio new.
	Account := ReceptiveAccount new.
	
	rootPortfolio add: secondPortfolio.
	rootPortfolio add: thirdPortfolio.
	
	secondPortfolio add: Account.
	thirdPortfolio add: FourthPortfolio.
	
	self 
		should: [ FourthPortfolio add: Account ]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedBankRecordsErrorDescription
		
!
!PortfolioTest methodsFor: 'add tests' stamp: 'DS 11/8/2020 21:50:16'!
test19ShouldNotAddABankRecordWhenAnyOfParentsHaveIt
	
	| rootPortfolio1 rootPortfolio2 aPortfolio anAccount |
	
	rootPortfolio1 := Portfolio new.
	rootPortfolio2 := Portfolio new.

	aPortfolio := Portfolio new.
	anAccount := ReceptiveAccount new.

	rootPortfolio1 add: aPortfolio.
	rootPortfolio1 add: anAccount.	
	rootPortfolio2 add: aPortfolio.

	self 
		should: [ aPortfolio add: anAccount ]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedBankRecordsErrorDescription
		
! !

!methodRemoval: PortfolioTest #test19 stamp: 'DS 11/8/2020 21:50:16'!
test19
	
	| rootPortfolio1 rootPortfolio2 aPortfolio anAccount |
	
	rootPortfolio1 := Portfolio new.
	rootPortfolio2 := Portfolio new.

	aPortfolio := Portfolio new.
	anAccount := ReceptiveAccount new.

	rootPortfolio1 add: aPortfolio.
	rootPortfolio1 add: anAccount.	
	rootPortfolio2 add: aPortfolio.

	self 
		should: [ aPortfolio add: anAccount ]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedBankRecordsErrorDescription
		
!
!PortfolioTest methodsFor: 'add tests' stamp: 'DS 11/8/2020 21:51:34'!
shouldNotHaveRepeatedBankRecordWhen: aPortfolio add: aBankRecord
	self 
		should: [ aPortfolio add: aBankRecord. ]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedBankRecordsErrorDescription
! !
!PortfolioTest methodsFor: 'add tests' stamp: 'DS 11/8/2020 21:51:57' prior: 50872708!
test10PortafolioShouldNotBeAddedToHimself
	| aPortfolio |
	
	aPortfolio := Portfolio new.

	self shouldNotHaveRepeatedBankRecordWhen: aPortfolio add: aPortfolio.! !

!testRun: #PortfolioTest #test10PortafolioShouldNotBeAddedToHimself stamp: 'DS 11/8/2020 21:51:57'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'DS 11/8/2020 21:51:57'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'DS 11/8/2020 21:51:57'!
PASSED!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'DS 11/8/2020 21:51:57'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'DS 11/8/2020 21:51:57'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'DS 11/8/2020 21:51:57'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'DS 11/8/2020 21:51:57'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'DS 11/8/2020 21:51:57'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'DS 11/8/2020 21:51:57'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'DS 11/8/2020 21:51:57'!
PASSED!

!testRun: #PortfolioTest #test10PortafolioShouldNotBeAddedToHimself stamp: 'DS 11/8/2020 21:51:57'!
PASSED!

!testRun: #PortfolioTest #test11AddedPortfolioShouldNotContainRepeatedChilds stamp: 'DS 11/8/2020 21:51:57'!
PASSED!

!testRun: #PortfolioTest #test12AddedPortafolioShouldNotContainSuccesiveRepeatedChilds stamp: 'DS 11/8/2020 21:51:57'!
PASSED!

!testRun: #PortfolioTest #test13AddedPortafolioShouldNotBeInHisChilds stamp: 'DS 11/8/2020 21:51:57'!
PASSED!

!testRun: #PortfolioTest #test14AddedPortafolioShouldNotBeInHisSuccesiveChilds stamp: 'DS 11/8/2020 21:51:57'!
PASSED!

!testRun: #PortfolioTest #test15AddedPortfolioChildsShouldNotBeInPortfolioChilds stamp: 'DS 11/8/2020 21:51:57'!
PASSED!

!testRun: #PortfolioTest #test16AddedPortfolioHerarchyShouldNotBeInHisHerarchy stamp: 'DS 11/8/2020 21:51:57'!
PASSED!

!testRun: #PortfolioTest #test17AddedPortfolioShouldNotHasSameParent stamp: 'DS 11/8/2020 21:51:57'!
PASSED!

!testRun: #PortfolioTest #test18AddedBankRecordShouldNotBeInLastHerachyOfBrotherBranch stamp: 'DS 11/8/2020 21:51:57'!
PASSED!

!testRun: #PortfolioTest #test19ShouldNotAddABankRecordWhenAnyOfParentsHaveIt stamp: 'DS 11/8/2020 21:51:57'!
PASSED!
!PortfolioTest methodsFor: 'add tests' stamp: 'DS 11/8/2020 21:52:17' prior: 50872718!
test11AddedPortfolioShouldNotContainRepeatedChilds
	| mainPortfolio secondPortfolio |
	
	mainPortfolio := Portfolio new.
	secondPortfolio := Portfolio new.
	
	mainPortfolio add: secondPortfolio.
	self shouldNotHaveRepeatedBankRecordWhen: secondPortfolio add: mainPortfolio.! !

!testRun: #PortfolioTest #test11AddedPortfolioShouldNotContainRepeatedChilds stamp: 'DS 11/8/2020 21:52:17'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'DS 11/8/2020 21:52:17'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'DS 11/8/2020 21:52:17'!
PASSED!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'DS 11/8/2020 21:52:17'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'DS 11/8/2020 21:52:17'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'DS 11/8/2020 21:52:17'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'DS 11/8/2020 21:52:17'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'DS 11/8/2020 21:52:17'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'DS 11/8/2020 21:52:17'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'DS 11/8/2020 21:52:17'!
PASSED!

!testRun: #PortfolioTest #test10PortafolioShouldNotBeAddedToHimself stamp: 'DS 11/8/2020 21:52:17'!
PASSED!

!testRun: #PortfolioTest #test11AddedPortfolioShouldNotContainRepeatedChilds stamp: 'DS 11/8/2020 21:52:17'!
PASSED!

!testRun: #PortfolioTest #test12AddedPortafolioShouldNotContainSuccesiveRepeatedChilds stamp: 'DS 11/8/2020 21:52:17'!
PASSED!

!testRun: #PortfolioTest #test13AddedPortafolioShouldNotBeInHisChilds stamp: 'DS 11/8/2020 21:52:17'!
PASSED!

!testRun: #PortfolioTest #test14AddedPortafolioShouldNotBeInHisSuccesiveChilds stamp: 'DS 11/8/2020 21:52:17'!
PASSED!

!testRun: #PortfolioTest #test15AddedPortfolioChildsShouldNotBeInPortfolioChilds stamp: 'DS 11/8/2020 21:52:17'!
PASSED!

!testRun: #PortfolioTest #test16AddedPortfolioHerarchyShouldNotBeInHisHerarchy stamp: 'DS 11/8/2020 21:52:17'!
PASSED!

!testRun: #PortfolioTest #test17AddedPortfolioShouldNotHasSameParent stamp: 'DS 11/8/2020 21:52:17'!
PASSED!

!testRun: #PortfolioTest #test18AddedBankRecordShouldNotBeInLastHerachyOfBrotherBranch stamp: 'DS 11/8/2020 21:52:17'!
PASSED!

!testRun: #PortfolioTest #test19ShouldNotAddABankRecordWhenAnyOfParentsHaveIt stamp: 'DS 11/8/2020 21:52:17'!
PASSED!
!PortfolioTest methodsFor: 'add tests' stamp: 'DS 11/8/2020 21:52:39' prior: 50874804!
test11AddedPortfolioShouldNotContainRepeatedChilds

	| rootPortfolio secondPortfolio |
	
	rootPortfolio := Portfolio new.
	secondPortfolio := Portfolio new.
	
	rootPortfolio add: secondPortfolio.
	self shouldNotHaveRepeatedBankRecordWhen: secondPortfolio add: rootPortfolio.! !
!PortfolioTest methodsFor: 'add tests' stamp: 'DS 11/8/2020 21:52:55' prior: 50874723!
test10PortafolioShouldNotBeAddedToHimself

	| rootPortfolio |
	
	rootPortfolio := Portfolio new.

	self shouldNotHaveRepeatedBankRecordWhen: rootPortfolio add: rootPortfolio.! !
!PortfolioTest methodsFor: 'add tests' stamp: 'DS 11/8/2020 21:53:18' prior: 50872732!
test12AddedPortafolioShouldNotContainSuccesiveRepeatedChilds

	| rootPortfolio secondPortfolio thirdPortfolio |
	
	rootPortfolio := Portfolio new.
	secondPortfolio := Portfolio new.
	thirdPortfolio := Portfolio new.
	
	rootPortfolio add: secondPortfolio.
	secondPortfolio add: thirdPortfolio.
	self shouldNotHaveRepeatedBankRecordWhen: thirdPortfolio add: rootPortfolio.! !
!PortfolioTest methodsFor: 'add tests' stamp: 'DS 11/8/2020 21:53:32' prior: 50872749!
test13AddedPortafolioShouldNotBeInHisChilds

	| rootPortfolio aRepeatedPortfolio |
	
	rootPortfolio := Portfolio new.
	aRepeatedPortfolio  := Portfolio new.
	
	rootPortfolio add: aRepeatedPortfolio.
	
	self 
		should: [ rootPortfolio add: aRepeatedPortfolio. ]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedBankRecordsErrorDescription
		
! !
!PortfolioTest methodsFor: 'add tests' stamp: 'DS 11/8/2020 21:53:49' prior: 50874924!
test13AddedPortafolioShouldNotBeInHisChilds

	| rootPortfolio aRepeatedPortfolio |
	
	rootPortfolio := Portfolio new.
	aRepeatedPortfolio  := Portfolio new.
	
	rootPortfolio add: aRepeatedPortfolio.
	self shouldNotHaveRepeatedBankRecordWhen: rootPortfolio add: aRepeatedPortfolio.! !

!testRun: #PortfolioTest #test13AddedPortafolioShouldNotBeInHisChilds stamp: 'DS 11/8/2020 21:53:51'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'DS 11/8/2020 21:53:51'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'DS 11/8/2020 21:53:51'!
PASSED!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'DS 11/8/2020 21:53:51'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'DS 11/8/2020 21:53:51'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'DS 11/8/2020 21:53:51'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'DS 11/8/2020 21:53:51'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'DS 11/8/2020 21:53:51'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'DS 11/8/2020 21:53:51'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'DS 11/8/2020 21:53:51'!
PASSED!

!testRun: #PortfolioTest #test10PortafolioShouldNotBeAddedToHimself stamp: 'DS 11/8/2020 21:53:51'!
PASSED!

!testRun: #PortfolioTest #test11AddedPortfolioShouldNotContainRepeatedChilds stamp: 'DS 11/8/2020 21:53:51'!
PASSED!

!testRun: #PortfolioTest #test12AddedPortafolioShouldNotContainSuccesiveRepeatedChilds stamp: 'DS 11/8/2020 21:53:51'!
PASSED!

!testRun: #PortfolioTest #test13AddedPortafolioShouldNotBeInHisChilds stamp: 'DS 11/8/2020 21:53:51'!
PASSED!

!testRun: #PortfolioTest #test14AddedPortafolioShouldNotBeInHisSuccesiveChilds stamp: 'DS 11/8/2020 21:53:51'!
PASSED!

!testRun: #PortfolioTest #test15AddedPortfolioChildsShouldNotBeInPortfolioChilds stamp: 'DS 11/8/2020 21:53:51'!
PASSED!

!testRun: #PortfolioTest #test16AddedPortfolioHerarchyShouldNotBeInHisHerarchy stamp: 'DS 11/8/2020 21:53:51'!
PASSED!

!testRun: #PortfolioTest #test17AddedPortfolioShouldNotHasSameParent stamp: 'DS 11/8/2020 21:53:51'!
PASSED!

!testRun: #PortfolioTest #test18AddedBankRecordShouldNotBeInLastHerachyOfBrotherBranch stamp: 'DS 11/8/2020 21:53:51'!
PASSED!

!testRun: #PortfolioTest #test19ShouldNotAddABankRecordWhenAnyOfParentsHaveIt stamp: 'DS 11/8/2020 21:53:51'!
PASSED!
!PortfolioTest methodsFor: 'add tests' stamp: 'DS 11/8/2020 21:54:01' prior: 50872763!
test14AddedPortafolioShouldNotBeInHisSuccesiveChilds

	| rootPortfolio secondPortfolio aRepeatedPortfolio |
	
	rootPortfolio := Portfolio new.
	secondPortfolio := Portfolio new.
	aRepeatedPortfolio  := Portfolio new.
	
	rootPortfolio add: secondPortfolio. 
	secondPortfolio add: aRepeatedPortfolio.
	
	self 
		should: [ rootPortfolio add: aRepeatedPortfolio. ]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedBankRecordsErrorDescription
		
! !
!PortfolioTest methodsFor: 'add tests' stamp: 'DS 11/8/2020 21:54:16' prior: 50875022!
test14AddedPortafolioShouldNotBeInHisSuccesiveChilds

	| rootPortfolio secondPortfolio aRepeatedPortfolio |
	
	rootPortfolio := Portfolio new.
	secondPortfolio := Portfolio new.
	aRepeatedPortfolio  := Portfolio new.
	
	rootPortfolio add: secondPortfolio. 
	secondPortfolio add: aRepeatedPortfolio.

	self shouldNotHaveRepeatedBankRecordWhen: rootPortfolio add: aRepeatedPortfolio.! !
!PortfolioTest methodsFor: 'add tests' stamp: 'DS 11/8/2020 21:54:30' prior: 50872780!
test15AddedPortfolioChildsShouldNotBeInPortfolioChilds
	
	| rootPortfolio secondPortfolio aRepeatedPortfolioRegister |
	
	rootPortfolio := Portfolio new.
	secondPortfolio  := Portfolio new.
	
	aRepeatedPortfolioRegister := ReceptiveAccount new.
	
	secondPortfolio add: aRepeatedPortfolioRegister.
	rootPortfolio add: aRepeatedPortfolioRegister.
	
	self 
		should: [ rootPortfolio add: secondPortfolio. ]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedBankRecordsErrorDescription
		
! !
!PortfolioTest methodsFor: 'add tests' stamp: 'DS 11/8/2020 21:54:42' prior: 50875055!
test15AddedPortfolioChildsShouldNotBeInPortfolioChilds
	
	| rootPortfolio secondPortfolio aRepeatedPortfolioRegister |
	
	rootPortfolio := Portfolio new.
	secondPortfolio  := Portfolio new.
	
	aRepeatedPortfolioRegister := ReceptiveAccount new.
	
	secondPortfolio add: aRepeatedPortfolioRegister.
	rootPortfolio add: aRepeatedPortfolioRegister.
	
	self shouldNotHaveRepeatedBankRecordWhen: rootPortfolio add: secondPortfolio.! !

!testRun: #PortfolioTest #test15AddedPortfolioChildsShouldNotBeInPortfolioChilds stamp: 'DS 11/8/2020 21:54:43'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'DS 11/8/2020 21:54:43'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'DS 11/8/2020 21:54:43'!
PASSED!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'DS 11/8/2020 21:54:43'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'DS 11/8/2020 21:54:43'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'DS 11/8/2020 21:54:43'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'DS 11/8/2020 21:54:43'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'DS 11/8/2020 21:54:43'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'DS 11/8/2020 21:54:43'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'DS 11/8/2020 21:54:43'!
PASSED!

!testRun: #PortfolioTest #test10PortafolioShouldNotBeAddedToHimself stamp: 'DS 11/8/2020 21:54:43'!
PASSED!

!testRun: #PortfolioTest #test11AddedPortfolioShouldNotContainRepeatedChilds stamp: 'DS 11/8/2020 21:54:43'!
PASSED!

!testRun: #PortfolioTest #test12AddedPortafolioShouldNotContainSuccesiveRepeatedChilds stamp: 'DS 11/8/2020 21:54:43'!
PASSED!

!testRun: #PortfolioTest #test13AddedPortafolioShouldNotBeInHisChilds stamp: 'DS 11/8/2020 21:54:43'!
PASSED!

!testRun: #PortfolioTest #test14AddedPortafolioShouldNotBeInHisSuccesiveChilds stamp: 'DS 11/8/2020 21:54:43'!
PASSED!

!testRun: #PortfolioTest #test15AddedPortfolioChildsShouldNotBeInPortfolioChilds stamp: 'DS 11/8/2020 21:54:43'!
PASSED!

!testRun: #PortfolioTest #test16AddedPortfolioHerarchyShouldNotBeInHisHerarchy stamp: 'DS 11/8/2020 21:54:43'!
PASSED!

!testRun: #PortfolioTest #test17AddedPortfolioShouldNotHasSameParent stamp: 'DS 11/8/2020 21:54:43'!
PASSED!

!testRun: #PortfolioTest #test18AddedBankRecordShouldNotBeInLastHerachyOfBrotherBranch stamp: 'DS 11/8/2020 21:54:43'!
PASSED!

!testRun: #PortfolioTest #test19ShouldNotAddABankRecordWhenAnyOfParentsHaveIt stamp: 'DS 11/8/2020 21:54:43'!
PASSED!
!PortfolioTest methodsFor: 'add tests' stamp: 'DS 11/8/2020 21:55:03' prior: 50875074!
test15AddedPortfolioChildsShouldNotBeInPortfolioChilds
	
	| rootPortfolio secondPortfolio aRepeatedBankRecord |
	
	rootPortfolio := Portfolio new.
	secondPortfolio  := Portfolio new.
	
	aRepeatedBankRecord := ReceptiveAccount new.
	
	secondPortfolio add: aRepeatedBankRecord.
	rootPortfolio add: aRepeatedBankRecord.
	
	self shouldNotHaveRepeatedBankRecordWhen: rootPortfolio add: secondPortfolio.! !
!PortfolioTest methodsFor: 'add tests' stamp: 'DS 11/8/2020 21:55:21' prior: 50872798!
test16AddedPortfolioHerarchyShouldNotBeInHisHerarchy
	
	| rootPortfolio secondPortfolio thirdPortfolio aRepeatedPortfolioRegister |
	
	rootPortfolio := Portfolio new.
	secondPortfolio  := Portfolio new.
	thirdPortfolio := Portfolio new.
	
	aRepeatedPortfolioRegister := ReceptiveAccount new.
	
	thirdPortfolio add: aRepeatedPortfolioRegister.
	secondPortfolio add: aRepeatedPortfolioRegister.
	
	rootPortfolio add: secondPortfolio.
	
	self 
		should: [ rootPortfolio add: thirdPortfolio. ]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedBankRecordsErrorDescription
		
! !
!PortfolioTest methodsFor: 'add tests' stamp: 'DS 11/8/2020 21:55:31' prior: 50875179!
test16AddedPortfolioHerarchyShouldNotBeInHisHerarchy
	
	| rootPortfolio secondPortfolio thirdPortfolio aRepeatedBankRecord |
	
	rootPortfolio := Portfolio new.
	secondPortfolio  := Portfolio new.
	thirdPortfolio := Portfolio new.
	
	aRepeatedBankRecord := ReceptiveAccount new.
	
	thirdPortfolio add: aRepeatedBankRecord.
	secondPortfolio add: aRepeatedBankRecord.
	
	rootPortfolio add: secondPortfolio.
	
	self 
		should: [ rootPortfolio add: thirdPortfolio. ]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedBankRecordsErrorDescription
		
! !
!PortfolioTest methodsFor: 'add tests' stamp: 'DS 11/8/2020 21:55:50' prior: 50875201!
test16AddedPortfolioHerarchyShouldNotBeInHisHerarchy
	
	| rootPortfolio secondPortfolio thirdPortfolio aRepeatedBankRecord |
	
	rootPortfolio := Portfolio new.
	secondPortfolio  := Portfolio new.
	thirdPortfolio := Portfolio new.
	
	aRepeatedBankRecord := ReceptiveAccount new.
	
	thirdPortfolio add: aRepeatedBankRecord.
	secondPortfolio add: aRepeatedBankRecord.
	
	rootPortfolio add: secondPortfolio.
	
	self shouldNotHaveRepeatedBankRecordWhen: rootPortfolio add: thirdPortfolio.! !
!PortfolioTest methodsFor: 'add tests' stamp: 'DS 11/8/2020 21:56:05' prior: 50874607!
test17AddedPortfolioShouldNotHasSameParent
	
	| rootPortfolio secondPortfolio thirdPortfolio  |
	
	rootPortfolio := Portfolio new.
	secondPortfolio  := Portfolio new.
	thirdPortfolio := Portfolio new.

	rootPortfolio add: secondPortfolio.
	rootPortfolio add: thirdPortfolio.
	
	self shouldNotHaveRepeatedBankRecordWhen: secondPortfolio add: thirdPortfolio.! !
!PortfolioTest methodsFor: 'add tests' stamp: 'DS 11/8/2020 21:56:17' prior: 50874638!
test18AddedBankRecordShouldNotBeInLastHerachyOfBrotherBranch
	
	| rootPortfolio secondPortfolio thirdPortfolio fourthPortfolio Account |
	
	rootPortfolio := Portfolio new.
	secondPortfolio  := Portfolio new.
	thirdPortfolio := Portfolio new.
	
	fourthPortfolio := Portfolio new.
	Account := ReceptiveAccount new.
	
	rootPortfolio add: secondPortfolio.
	rootPortfolio add: thirdPortfolio.
	
	secondPortfolio add: Account.
	thirdPortfolio add: fourthPortfolio.
	
	self 
		should: [ fourthPortfolio add: Account ]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedBankRecordsErrorDescription
		
! !
!PortfolioTest methodsFor: 'add tests' stamp: 'DS 11/8/2020 21:56:58' prior: 50875254!
test18AddedBankRecordShouldNotBeInLastHerachyOfBrotherBranch
	
	| rootPortfolio secondPortfolio thirdPortfolio fourthPortfolio aRepeatedBankRecord |
	
	rootPortfolio := Portfolio new.
	secondPortfolio  := Portfolio new.
	thirdPortfolio := Portfolio new.
	
	fourthPortfolio := Portfolio new.
	aRepeatedBankRecord := ReceptiveAccount new.
	
	rootPortfolio add: secondPortfolio.
	rootPortfolio add: thirdPortfolio.
	
	secondPortfolio add: aRepeatedBankRecord.
	thirdPortfolio add: fourthPortfolio.
	
	self 
		should: [ fourthPortfolio add: aRepeatedBankRecord ]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedBankRecordsErrorDescription
		
! !
!PortfolioTest methodsFor: 'add tests' stamp: 'DS 11/8/2020 21:57:14' prior: 50875276!
test18AddedBankRecordShouldNotBeInLastHerachyOfBrotherBranch
	
	| rootPortfolio secondPortfolio thirdPortfolio fourthPortfolio aRepeatedBankRecord |
	
	rootPortfolio := Portfolio new.
	secondPortfolio  := Portfolio new.
	thirdPortfolio := Portfolio new.
	
	fourthPortfolio := Portfolio new.
	aRepeatedBankRecord := ReceptiveAccount new.
	
	rootPortfolio add: secondPortfolio.
	rootPortfolio add: thirdPortfolio.
	
	secondPortfolio add: aRepeatedBankRecord.
	thirdPortfolio add: fourthPortfolio.
	
	self shouldNotHaveRepeatedBankRecordWhen: fourthPortfolio add: aRepeatedBankRecord.! !
!PortfolioTest methodsFor: 'add tests' stamp: 'DS 11/8/2020 21:57:26' prior: 50874679!
test19ShouldNotAddABankRecordWhenAnyOfParentsHaveIt
	
	| rootPortfolio1 rootPortfolio2 aPortfolio aRepeatedAccount |
	
	rootPortfolio1 := Portfolio new.
	rootPortfolio2 := Portfolio new.

	aPortfolio := Portfolio new.
	aRepeatedAccount := ReceptiveAccount new.

	rootPortfolio1 add: aPortfolio.
	rootPortfolio1 add: aRepeatedAccount.	
	rootPortfolio2 add: aPortfolio.

	self 
		should: [ aPortfolio add: aRepeatedAccount ]
		raise: Error
		withMessageText: Portfolio shouldNotHaveRepeatedBankRecordsErrorDescription
		
! !
!PortfolioTest methodsFor: 'add tests' stamp: 'DS 11/8/2020 21:57:50' prior: 50875321!
test19ShouldNotAddABankRecordWhenAnyOfParentsHaveIt
	
	| rootPortfolio1 rootPortfolio2 aPortfolio aRepeatedAccount |
	
	rootPortfolio1 := Portfolio new.
	rootPortfolio2 := Portfolio new.

	aPortfolio := Portfolio new.
	aRepeatedAccount := ReceptiveAccount new.

	rootPortfolio1 add: aPortfolio.
	rootPortfolio1 add: aRepeatedAccount.	
	rootPortfolio2 add: aPortfolio.

	self shouldNotHaveRepeatedBankRecordWhen: aPortfolio add: aRepeatedAccount.! !

!testRun: #PortfolioTest #test19ShouldNotAddABankRecordWhenAnyOfParentsHaveIt stamp: 'DS 11/8/2020 21:57:51'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'DS 11/8/2020 21:57:51'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'DS 11/8/2020 21:57:51'!
PASSED!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'DS 11/8/2020 21:57:51'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'DS 11/8/2020 21:57:51'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'DS 11/8/2020 21:57:51'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'DS 11/8/2020 21:57:51'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'DS 11/8/2020 21:57:51'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'DS 11/8/2020 21:57:51'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'DS 11/8/2020 21:57:51'!
PASSED!

!testRun: #PortfolioTest #test10PortafolioShouldNotBeAddedToHimself stamp: 'DS 11/8/2020 21:57:51'!
PASSED!

!testRun: #PortfolioTest #test11AddedPortfolioShouldNotContainRepeatedChilds stamp: 'DS 11/8/2020 21:57:51'!
PASSED!

!testRun: #PortfolioTest #test12AddedPortafolioShouldNotContainSuccesiveRepeatedChilds stamp: 'DS 11/8/2020 21:57:51'!
PASSED!

!testRun: #PortfolioTest #test13AddedPortafolioShouldNotBeInHisChilds stamp: 'DS 11/8/2020 21:57:51'!
PASSED!

!testRun: #PortfolioTest #test14AddedPortafolioShouldNotBeInHisSuccesiveChilds stamp: 'DS 11/8/2020 21:57:51'!
PASSED!

!testRun: #PortfolioTest #test15AddedPortfolioChildsShouldNotBeInPortfolioChilds stamp: 'DS 11/8/2020 21:57:51'!
PASSED!

!testRun: #PortfolioTest #test16AddedPortfolioHerarchyShouldNotBeInHisHerarchy stamp: 'DS 11/8/2020 21:57:51'!
PASSED!

!testRun: #PortfolioTest #test17AddedPortfolioShouldNotHasSameParent stamp: 'DS 11/8/2020 21:57:51'!
PASSED!

!testRun: #PortfolioTest #test18AddedBankRecordShouldNotBeInLastHerachyOfBrotherBranch stamp: 'DS 11/8/2020 21:57:51'!
PASSED!

!testRun: #PortfolioTest #test19ShouldNotAddABankRecordWhenAnyOfParentsHaveIt stamp: 'DS 11/8/2020 21:57:51'!
PASSED!
!PortfolioTest methodsFor: 'add tests' stamp: 'DS 11/8/2020 21:58:32' prior: 50874938!
test13AddedPortafolioShouldNotBeInHisChilds

	| rootPortfolio aRepeatedPortfolio |
	
	rootPortfolio := Portfolio new.
	aRepeatedPortfolio  := Portfolio new.
	
	rootPortfolio add: aRepeatedPortfolio.

	self shouldNotHaveRepeatedBankRecordWhen: rootPortfolio add: aRepeatedPortfolio.! !
!PortfolioTest methodsFor: 'add tests' stamp: 'DS 11/8/2020 21:58:38' prior: 50874909!
test12AddedPortafolioShouldNotContainSuccesiveRepeatedChilds

	| rootPortfolio secondPortfolio thirdPortfolio |
	
	rootPortfolio := Portfolio new.
	secondPortfolio := Portfolio new.
	thirdPortfolio := Portfolio new.
	
	rootPortfolio add: secondPortfolio.
	secondPortfolio add: thirdPortfolio.

	self shouldNotHaveRepeatedBankRecordWhen: thirdPortfolio add: rootPortfolio.! !
!PortfolioTest methodsFor: 'add tests' stamp: 'DS 11/8/2020 21:58:45' prior: 50874888!
test11AddedPortfolioShouldNotContainRepeatedChilds

	| rootPortfolio secondPortfolio |
	
	rootPortfolio := Portfolio new.
	secondPortfolio := Portfolio new.
	
	rootPortfolio add: secondPortfolio.

	self shouldNotHaveRepeatedBankRecordWhen: secondPortfolio add: rootPortfolio.! !
!PortfolioTest methodsFor: 'transactions tests' stamp: 'DS 11/8/2020 21:59:10' prior: 50872659!
test07PortfolioStartsWithNoTransactions
	| aPortfolio |
	
	aPortfolio := Portfolio new.

	self assert: (aPortfolio transactions) isEmpty.

! !

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'DS 11/8/2020 21:59:10'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'DS 11/8/2020 21:59:10'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'DS 11/8/2020 21:59:10'!
PASSED!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'DS 11/8/2020 21:59:10'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'DS 11/8/2020 21:59:10'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'DS 11/8/2020 21:59:10'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'DS 11/8/2020 21:59:10'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'DS 11/8/2020 21:59:10'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'DS 11/8/2020 21:59:10'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'DS 11/8/2020 21:59:10'!
PASSED!

!testRun: #PortfolioTest #test10PortafolioShouldNotBeAddedToHimself stamp: 'DS 11/8/2020 21:59:10'!
PASSED!

!testRun: #PortfolioTest #test11AddedPortfolioShouldNotContainRepeatedChilds stamp: 'DS 11/8/2020 21:59:10'!
PASSED!

!testRun: #PortfolioTest #test12AddedPortafolioShouldNotContainSuccesiveRepeatedChilds stamp: 'DS 11/8/2020 21:59:10'!
PASSED!

!testRun: #PortfolioTest #test13AddedPortafolioShouldNotBeInHisChilds stamp: 'DS 11/8/2020 21:59:10'!
PASSED!

!testRun: #PortfolioTest #test14AddedPortafolioShouldNotBeInHisSuccesiveChilds stamp: 'DS 11/8/2020 21:59:10'!
PASSED!

!testRun: #PortfolioTest #test15AddedPortfolioChildsShouldNotBeInPortfolioChilds stamp: 'DS 11/8/2020 21:59:10'!
PASSED!

!testRun: #PortfolioTest #test16AddedPortfolioHerarchyShouldNotBeInHisHerarchy stamp: 'DS 11/8/2020 21:59:10'!
PASSED!

!testRun: #PortfolioTest #test17AddedPortfolioShouldNotHasSameParent stamp: 'DS 11/8/2020 21:59:10'!
PASSED!

!testRun: #PortfolioTest #test18AddedBankRecordShouldNotBeInLastHerachyOfBrotherBranch stamp: 'DS 11/8/2020 21:59:10'!
PASSED!

!testRun: #PortfolioTest #test19ShouldNotAddABankRecordWhenAnyOfParentsHaveIt stamp: 'DS 11/8/2020 21:59:10'!
PASSED!
!PortfolioTest methodsFor: 'transactions tests' stamp: 'DS 11/8/2020 21:59:24' prior: 50872681!
test09PortfolioIncludesAnotherPortfolioTransactions
	| aRootPortfolio anotherPortfolio aMainAccount aPortfolioAccount aTransaction secondTransaction |
	
	aRootPortfolio := Portfolio new.
	anotherPortfolio := Portfolio new.
	
	aPortfolioAccount  := ReceptiveAccount new.
	aMainAccount  := ReceptiveAccount new.
	
	anotherPortfolio add: aPortfolioAccount.
	
	aRootPortfolio add: anotherPortfolio.
	aRootPortfolio add: aMainAccount.

	aTransaction := Deposit register: 100 on: aPortfolioAccount.	
	secondTransaction := Deposit register: 200 on: aMainAccount.	
		
	self assert: 2 equals: aRootPortfolio transactions size.
	self assert: (aRootPortfolio transactions includes: aTransaction).
	self assert: (aRootPortfolio transactions includes: secondTransaction).
		

! !
!PortfolioTest methodsFor: 'balance tests' stamp: 'DS 11/8/2020 21:59:55' prior: 50872589!
test03BalanceCountPortafolioAndAccountTransactions
	| aRootPortfolio anotherPortfolio aPortfolioAccount aMainAccount |
	
	aRootPortfolio := Portfolio new.
	anotherPortfolio := Portfolio new.
	
	aMainAccount := ReceptiveAccount new.
	aPortfolioAccount  := ReceptiveAccount new.
	
	anotherPortfolio add: aPortfolioAccount.
	aRootPortfolio add: aMainAccount.
	aRootPortfolio add: anotherPortfolio.

	Deposit register: 100 on: aMainAccount.
	Deposit register: 100 on: aPortfolioAccount.
		
	self assert: 200 equals: aRootPortfolio balance.

! !
!PortfolioTest methodsFor: 'balance tests' stamp: 'DS 11/8/2020 21:59:58' prior: 50875577!
test03BalanceCountPortafolioAndAccountTransactions

	| aRootPortfolio anotherPortfolio aPortfolioAccount aMainAccount |
	
	aRootPortfolio := Portfolio new.
	anotherPortfolio := Portfolio new.
	
	aMainAccount := ReceptiveAccount new.
	aPortfolioAccount  := ReceptiveAccount new.
	
	anotherPortfolio add: aPortfolioAccount.
	aRootPortfolio add: aMainAccount.
	aRootPortfolio add: anotherPortfolio.

	Deposit register: 100 on: aMainAccount.
	Deposit register: 100 on: aPortfolioAccount.
		
	self assert: 200 equals: aRootPortfolio balance.

! !
!PortfolioTest methodsFor: 'balance tests' stamp: 'DS 11/8/2020 22:00:03' prior: 50872578!
test02BalanceCountAccountTransactions

	| aPortfolio anAccount |
	
	aPortfolio := Portfolio new.
	anAccount := ReceptiveAccount new.
	
	aPortfolio add: anAccount.
	Deposit register: 100 on: anAccount.
		
	self assert: 100 equals: aPortfolio balance.

! !
!PortfolioTest methodsFor: 'balance tests' stamp: 'DS 11/8/2020 22:00:06' prior: 50872571!
test01PortfolioStartsWithNoIncome

	| aPortfolio |
	aPortfolio := Portfolio new.
	
	self assert: 0 equals: aPortfolio balance.! !
!PortfolioTest methodsFor: 'hasRegistered tests' stamp: 'DS 11/8/2020 22:00:11' prior: 50872619!
test05PortfolioHasRegisteredAccountTransactions

	| aPortfolio anAccount aTransaction |
	
	aPortfolio := Portfolio new.
	anAccount := ReceptiveAccount new.
	
	aTransaction := Deposit register: 100 on: anAccount.
	aPortfolio add: anAccount.
		
	self assert: (aPortfolio hasRegistered: aTransaction).

! !

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'DS 11/8/2020 22:00:14'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'DS 11/8/2020 22:00:14'!
PASSED!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'DS 11/8/2020 22:00:14'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'DS 11/8/2020 22:00:14'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'DS 11/8/2020 22:00:14'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'DS 11/8/2020 22:00:14'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'DS 11/8/2020 22:00:14'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'DS 11/8/2020 22:00:14'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'DS 11/8/2020 22:00:14'!
PASSED!

!testRun: #PortfolioTest #test10PortafolioShouldNotBeAddedToHimself stamp: 'DS 11/8/2020 22:00:14'!
PASSED!

!testRun: #PortfolioTest #test11AddedPortfolioShouldNotContainRepeatedChilds stamp: 'DS 11/8/2020 22:00:14'!
PASSED!

!testRun: #PortfolioTest #test12AddedPortafolioShouldNotContainSuccesiveRepeatedChilds stamp: 'DS 11/8/2020 22:00:14'!
PASSED!

!testRun: #PortfolioTest #test13AddedPortafolioShouldNotBeInHisChilds stamp: 'DS 11/8/2020 22:00:14'!
PASSED!

!testRun: #PortfolioTest #test14AddedPortafolioShouldNotBeInHisSuccesiveChilds stamp: 'DS 11/8/2020 22:00:14'!
PASSED!

!testRun: #PortfolioTest #test15AddedPortfolioChildsShouldNotBeInPortfolioChilds stamp: 'DS 11/8/2020 22:00:14'!
PASSED!

!testRun: #PortfolioTest #test16AddedPortfolioHerarchyShouldNotBeInHisHerarchy stamp: 'DS 11/8/2020 22:00:14'!
PASSED!

!testRun: #PortfolioTest #test17AddedPortfolioShouldNotHasSameParent stamp: 'DS 11/8/2020 22:00:14'!
PASSED!

!testRun: #PortfolioTest #test18AddedBankRecordShouldNotBeInLastHerachyOfBrotherBranch stamp: 'DS 11/8/2020 22:00:14'!
PASSED!

!testRun: #PortfolioTest #test19ShouldNotAddABankRecordWhenAnyOfParentsHaveIt stamp: 'DS 11/8/2020 22:00:14'!
PASSED!
!BankRecord methodsFor: 'balance' stamp: 'DS 11/8/2020 22:01:04' prior: 50873086!
balance

	self subclassResponsibility ! !
!BankRecord methodsFor: 'testing' stamp: 'DS 11/8/2020 22:01:07' prior: 50873090!
hasRegistered: aTransaction

	self subclassResponsibility ! !
!BankRecord methodsFor: 'transactions' stamp: 'DS 11/8/2020 22:01:19' prior: 50873082!
transactions

	self subclassResponsibility ! !

----SNAPSHOT----(8 November 2020 22:02:14) CuisUniversity-4384.image priorSource: 17374495!

!testRun: #PortfolioTest #test01PortfolioStartsWithNoIncome stamp: 'DS 11/8/2020 22:02:20'!
PASSED!

!testRun: #PortfolioTest #test02BalanceCountAccountTransactions stamp: 'DS 11/8/2020 22:02:20'!
PASSED!

!testRun: #PortfolioTest #test03BalanceCountPortafolioAndAccountTransactions stamp: 'DS 11/8/2020 22:02:20'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotRegisterUnknownTransaction stamp: 'DS 11/8/2020 22:02:20'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredAccountTransactions stamp: 'DS 11/8/2020 22:02:20'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredAnotherPortfolioTransactions stamp: 'DS 11/8/2020 22:02:20'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioStartsWithNoTransactions stamp: 'DS 11/8/2020 22:02:20'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioIncludesAccountTransactions stamp: 'DS 11/8/2020 22:02:20'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioIncludesAnotherPortfolioTransactions stamp: 'DS 11/8/2020 22:02:20'!
PASSED!

!testRun: #PortfolioTest #test10PortafolioShouldNotBeAddedToHimself stamp: 'DS 11/8/2020 22:02:20'!
PASSED!

!testRun: #PortfolioTest #test11AddedPortfolioShouldNotContainRepeatedChilds stamp: 'DS 11/8/2020 22:02:20'!
PASSED!

!testRun: #PortfolioTest #test12AddedPortafolioShouldNotContainSuccesiveRepeatedChilds stamp: 'DS 11/8/2020 22:02:20'!
PASSED!

!testRun: #PortfolioTest #test13AddedPortafolioShouldNotBeInHisChilds stamp: 'DS 11/8/2020 22:02:20'!
PASSED!

!testRun: #PortfolioTest #test14AddedPortafolioShouldNotBeInHisSuccesiveChilds stamp: 'DS 11/8/2020 22:02:20'!
PASSED!

!testRun: #PortfolioTest #test15AddedPortfolioChildsShouldNotBeInPortfolioChilds stamp: 'DS 11/8/2020 22:02:20'!
PASSED!

!testRun: #PortfolioTest #test16AddedPortfolioHerarchyShouldNotBeInHisHerarchy stamp: 'DS 11/8/2020 22:02:20'!
PASSED!

!testRun: #PortfolioTest #test17AddedPortfolioShouldNotHasSameParent stamp: 'DS 11/8/2020 22:02:20'!
PASSED!

!testRun: #PortfolioTest #test18AddedBankRecordShouldNotBeInLastHerachyOfBrotherBranch stamp: 'DS 11/8/2020 22:02:20'!
PASSED!

!testRun: #PortfolioTest #test19ShouldNotAddABankRecordWhenAnyOfParentsHaveIt stamp: 'DS 11/8/2020 22:02:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'DS 11/8/2020 22:02:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'DS 11/8/2020 22:02:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DS 11/8/2020 22:02:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'DS 11/8/2020 22:02:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'DS 11/8/2020 22:02:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'DS 11/8/2020 22:02:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'DS 11/8/2020 22:02:20'!
PASSED!

----QUIT----(8 November 2020 22:02:23) CuisUniversity-4384.image priorSource: 17410542!
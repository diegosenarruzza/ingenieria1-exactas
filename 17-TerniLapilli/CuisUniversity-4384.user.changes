

----STARTUP---- (24 October 2020 15:56:29) as /mnt/sdb5/Ingenieria1/CuisUniversity/CuisUniversity-4384.image!


Object subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Solution'!

!classDefinition: #MarsRoverTest category: 'MarsRover-Solution' stamp: 'DS 10/24/2020 15:58:25'!
Object subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Solution'!

!classDefinition: #MarsRover category: 'MarsRover-Solution' stamp: 'DS 10/24/2020 16:14:45'!
Object subclass: #MarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Solution'!
!MarsRoverTest methodsFor: 'no messages' stamp: 'DS 10/24/2020 16:14:29'!
test01

	| aMarsRover |

	aMarsRover := MarsRover with: 0@0 lookingAt: #N.
	
	self assert: 0@0 = aMarsRover whereAreYou.
	self assert: #N = aMarsRover whereAreYouLookingAt.! !

----SNAPSHOT----(24 October 2020 16:14:58) CuisUniversity-4384.image priorSource: 17770667!

TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Solution'!

!classDefinition: #MarsRoverTest category: 'MarsRover-Solution' stamp: 'DS 10/24/2020 16:15:18'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Solution'!

!testRun: #MarsRoverTest #test01 stamp: 'DS 10/24/2020 16:15:28'!
ERROR!
!MarsRover class methodsFor: 'instance creation' stamp: 'DS 10/24/2020 16:15:53'!
with: aPoint lookingAt: aSymbol 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWith: aPoint lookingAt: aSymbol ! !
!MarsRover class methodsFor: 'instance creation' stamp: 'DS 10/24/2020 16:17:43' prior: 50887035!
with: aPoint lookingAt: aCardinalPoint

	^self new initializeWith: aPoint lookingAt: aCardinalPoint.! !

!testRun: #MarsRoverTest #test01 stamp: 'DS 10/24/2020 16:18:05'!
ERROR!

!classDefinition: #MarsRover category: 'MarsRover-Solution' stamp: 'DS 10/24/2020 16:18:26'!
Object subclass: #MarsRover
	instanceVariableNames: 'point'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Solution'!

!classDefinition: #MarsRover category: 'MarsRover-Solution' stamp: 'DS 10/24/2020 16:18:26'!
Object subclass: #MarsRover
	instanceVariableNames: 'point cardinalPoint'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Solution'!
!MarsRover methodsFor: 'initialize' stamp: 'DS 10/24/2020 16:18:26'!
initializeWith: aPoint lookingAt: aCardinalPoint 
	self shouldBeImplemented.
	point := aPoint.
	cardinalPoint := aCardinalPoint.! !
!MarsRover methodsFor: 'initialize' stamp: 'DS 10/24/2020 16:18:40' prior: 50887067!
initializeWith: aPoint lookingAt: aCardinalPoint 

	point := aPoint.
	cardinalPoint := aCardinalPoint.! !

!testRun: #MarsRoverTest #test01 stamp: 'DS 10/24/2020 16:18:50'!
ERROR!
!MarsRover methodsFor: 'accessing' stamp: 'DS 10/24/2020 16:19:05'!
whereAreYou
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'accessing' stamp: 'DS 10/24/2020 16:19:34' prior: 50887082!
whereAreYou

	^point.! !

!testRun: #MarsRoverTest #test01 stamp: 'DS 10/24/2020 16:19:42'!
ERROR!
!MarsRover methodsFor: 'accessing' stamp: 'DS 10/24/2020 16:19:46'!
whereAreYouLookingAt
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'accessing' stamp: 'DS 10/24/2020 16:19:54' prior: 50887092!
whereAreYouLookingAt

	^cardinalPoint.! !

!testRun: #MarsRoverTest #test01 stamp: 'DS 10/24/2020 16:19:55'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'DS 10/24/2020 16:19:55'!
PASSED!

----SNAPSHOT----(24 October 2020 16:19:58) CuisUniversity-4384.image priorSource: 17771727!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'DS 10/24/2020 16:25:44'!
test02

	| aMarsRover aCommandSequence |

	aCommandSequence := 'f'.
	aMarsRover := MarsRover with: 0@0 lookingAt: #N.
	aMarsRover execute: aCommandSequence.
	
	self assert: 0@1 = aMarsRover whereAreYou.
	self assert: #N = aMarsRover whereAreYouLookingAt.! !

!testRun: #MarsRoverTest #test02 stamp: 'DS 10/24/2020 16:25:46'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DS 10/24/2020 16:26:59'!
execute: aString 
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DS 10/24/2020 16:28:14' prior: 50887122!
execute: aCommandSequence

	point := point + 0@1.! !

!testRun: #MarsRoverTest #test02 stamp: 'DS 10/24/2020 16:28:16'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DS 10/24/2020 16:28:42' prior: 50887127!
execute: aCommandSequence

	point := point + (0@1).! !

!testRun: #MarsRoverTest #test02 stamp: 'DS 10/24/2020 16:28:43'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'DS 10/24/2020 16:28:43'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'DS 10/24/2020 16:28:43'!
PASSED!

----SNAPSHOT----(24 October 2020 16:28:45) CuisUniversity-4384.image priorSource: 17774559!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'DS 10/24/2020 16:29:53' prior: 50887109!
test02

	| aMarsRover aCommandSequence |

	aCommandSequence := 'f'.
	aMarsRover := MarsRover with: 0@0 lookingAt: #N.
	aMarsRover execute: aCommandSequence.
	
	self assert: 0@1 = aMarsRover whereAreYou.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'DS 10/24/2020 16:30:33'!
test03

	| aMarsRover aCommandSequence |

	aCommandSequence := 'b'.
	aMarsRover := MarsRover with: 0@0 lookingAt: #N.
	aMarsRover execute: aCommandSequence.
	
	self assert: 0@-1 = aMarsRover whereAreYou.! !

!testRun: #MarsRoverTest #test03 stamp: 'DS 10/24/2020 16:30:35'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DS 10/24/2020 16:32:07' prior: 50887134!
execute: aCommandSequence

	aCommandSequence = 'f' ifTrue: [point := point + (0@1)].
	aCommandSequence = 'b' ifTrue: [point := point + (0@-1)].! !

!testRun: #MarsRoverTest #test03 stamp: 'DS 10/24/2020 16:32:08'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'DS 10/24/2020 16:32:08'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'DS 10/24/2020 16:32:08'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'DS 10/24/2020 16:32:08'!
PASSED!

----SNAPSHOT----(24 October 2020 16:32:12) CuisUniversity-4384.image priorSource: 17775831!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'DS 10/24/2020 16:34:28'!
test04

	| aMarsRover aCommandSequence |

	aCommandSequence := 'l'.
	aMarsRover := MarsRover with: 0@0 lookingAt: #N.
	aMarsRover execute: aCommandSequence.
	
	self assert: #W = aMarsRover whereAreYouLookingAt.! !

!testRun: #MarsRoverTest #test04 stamp: 'DS 10/24/2020 16:34:49'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DS 10/24/2020 16:35:35' prior: 50887170!
execute: aCommandSequence

	aCommandSequence = 'f' ifTrue: [point := point + (0@1)].
	aCommandSequence = 'b' ifTrue: [point := point + (0@-1)].
	aCommandSequence = 'l' ifTrue: [cardinalPoint := #W].! !

!testRun: #MarsRoverTest #test04 stamp: 'DS 10/24/2020 16:35:36'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'DS 10/24/2020 16:35:36'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'DS 10/24/2020 16:35:36'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'DS 10/24/2020 16:35:36'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'DS 10/24/2020 16:35:36'!
PASSED!

----SNAPSHOT----(24 October 2020 16:35:42) CuisUniversity-4384.image priorSource: 17777150!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'DS 10/24/2020 16:36:16' prior: 50887190!
test04

	| aMarsRover aCommandSequence |

	aCommandSequence := 'r'.
	aMarsRover := MarsRover with: 0@0 lookingAt: #N.
	aMarsRover execute: aCommandSequence.
	
	self assert: #E = aMarsRover whereAreYouLookingAt.! !

!testRun: #MarsRoverTest #test04 stamp: 'DS 10/24/2020 16:36:17'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DS 10/24/2020 16:36:31' prior: 50887202!
execute: aCommandSequence

	aCommandSequence = 'f' ifTrue: [point := point + (0@1)].
	aCommandSequence = 'b' ifTrue: [point := point + (0@-1)].
	aCommandSequence = 'l' ifTrue: [cardinalPoint := #W].
	aCommandSequence = 'l' ifTrue: [cardinalPoint := #E].! !

!testRun: #MarsRoverTest #test04 stamp: 'DS 10/24/2020 16:36:33'!
FAILURE!

!testRun: #MarsRoverTest #test04 stamp: 'DS 10/24/2020 16:36:42'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DS 10/24/2020 16:36:54' prior: 50887238!
execute: aCommandSequence

	aCommandSequence = 'f' ifTrue: [point := point + (0@1)].
	aCommandSequence = 'b' ifTrue: [point := point + (0@-1)].
	aCommandSequence = 'l' ifTrue: [cardinalPoint := #W].
	aCommandSequence = 'r' ifTrue: [cardinalPoint := #E].! !

!testRun: #MarsRoverTest #test04 stamp: 'DS 10/24/2020 16:36:55'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'DS 10/24/2020 16:36:55'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'DS 10/24/2020 16:36:55'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'DS 10/24/2020 16:36:55'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'DS 10/24/2020 16:36:55'!
PASSED!

----SNAPSHOT----(24 October 2020 16:36:58) CuisUniversity-4384.image priorSource: 17778304!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'DS 10/24/2020 16:38:56'!
test05

	| aMarsRover aCommandSequence |

	aCommandSequence := 'r'.
	aMarsRover := MarsRover with: 0@0 lookingAt: #N.
	aMarsRover execute: aCommandSequence.
	
	self assert: #E = aMarsRover whereAreYouLookingAt.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'DS 10/24/2020 16:39:04' prior: 50887226!
test04

	| aMarsRover aCommandSequence |

	aCommandSequence := 'l'.
	aMarsRover := MarsRover with: 0@0 lookingAt: #N.
	aMarsRover execute: aCommandSequence.
	
	self assert: #W = aMarsRover whereAreYouLookingAt.! !

!testRun: #MarsRoverTest #test04 stamp: 'DS 10/24/2020 16:39:07'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'DS 10/24/2020 16:39:07'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'DS 10/24/2020 16:39:07'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'DS 10/24/2020 16:39:07'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'DS 10/24/2020 16:39:07'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'DS 10/24/2020 16:39:07'!
PASSED!

----SNAPSHOT----(24 October 2020 16:39:12) CuisUniversity-4384.image priorSource: 17780023!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'DS 10/24/2020 16:43:46'!
test06

	| aMarsRover aCommandSequence |

	aCommandSequence := 'f'.
	aMarsRover := MarsRover with: 0@0 lookingAt: #E.
	aMarsRover execute: aCommandSequence.
	
	self assert: 1@0 = aMarsRover whereAreYou.! !

!testRun: #MarsRoverTest #test06 stamp: 'DS 10/24/2020 16:43:47'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DS 10/24/2020 16:45:15' prior: 50887254!
execute: aCommandSequence

	aCommandSequence = 'f' ifTrue: [
		cardinalPoint = #N 
			ifTrue: [point := point + (0@1)]
			ifFalse: [point := point + (1@0)]
	].
	aCommandSequence = 'b' ifTrue: [point := point + (0@-1)].
	aCommandSequence = 'l' ifTrue: [cardinalPoint := #W].
	aCommandSequence = 'r' ifTrue: [cardinalPoint := #E].! !

!testRun: #MarsRoverTest #test06 stamp: 'DS 10/24/2020 16:45:16'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'DS 10/24/2020 16:45:16'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'DS 10/24/2020 16:45:16'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'DS 10/24/2020 16:45:16'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'DS 10/24/2020 16:45:16'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'DS 10/24/2020 16:45:16'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'DS 10/24/2020 16:45:16'!
PASSED!

----SNAPSHOT----(24 October 2020 16:45:19) CuisUniversity-4384.image priorSource: 17781207!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DS 10/24/2020 16:46:04' prior: 50887329!
execute: aCommandSequence

	aCommandSequence = 'f' ifTrue: [
		cardinalPoint = #N 			ifTrue: [point := point + (0@1)].
		cardinalPoint = #E 			ifTrue: [point := point + (1@0)].
	].
	aCommandSequence = 'b' ifTrue: [point := point + (0@-1)].
	aCommandSequence = 'l' ifTrue: [cardinalPoint := #W].
	aCommandSequence = 'r' ifTrue: [cardinalPoint := #E].! !

!testRun: #MarsRoverTest #test06 stamp: 'DS 10/24/2020 16:46:06'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'DS 10/24/2020 16:46:06'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'DS 10/24/2020 16:46:06'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'DS 10/24/2020 16:46:06'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'DS 10/24/2020 16:46:06'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'DS 10/24/2020 16:46:06'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'DS 10/24/2020 16:46:06'!
PASSED!

----SNAPSHOT----(24 October 2020 16:46:09) CuisUniversity-4384.image priorSource: 17782648!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'DS 10/24/2020 16:46:46'!
test07

	| aMarsRover aCommandSequence |

	aCommandSequence := 'f'.
	aMarsRover := MarsRover with: 0@0 lookingAt: #W.
	aMarsRover execute: aCommandSequence.
	
	self assert: -1@0 = aMarsRover whereAreYou.! !

!testRun: #MarsRoverTest #test07 stamp: 'DS 10/24/2020 16:46:48'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DS 10/24/2020 16:47:46' prior: 50887362!
execute: aCommandSequence

	aCommandSequence = 'f' ifTrue: [
		cardinalPoint = #N 			ifTrue: [point := point + (0@1)].
		cardinalPoint = #E 			ifTrue: [point := point + (1@0)].
		cardinalPoint = #W 			ifTrue: [point := point + (-1@0)].
	].
	aCommandSequence = 'b' ifTrue: [point := point + (0@-1)].
	aCommandSequence = 'l' ifTrue: [cardinalPoint := #W].
	aCommandSequence = 'r' ifTrue: [cardinalPoint := #E].! !

!testRun: #MarsRoverTest #test07 stamp: 'DS 10/24/2020 16:47:47'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'DS 10/24/2020 16:47:47'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'DS 10/24/2020 16:47:47'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'DS 10/24/2020 16:47:47'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'DS 10/24/2020 16:47:47'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'DS 10/24/2020 16:47:47'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'DS 10/24/2020 16:47:47'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'DS 10/24/2020 16:47:47'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'DS 10/24/2020 16:47:59'!
test08

	| aMarsRover aCommandSequence |

	aCommandSequence := 'f'.
	aMarsRover := MarsRover with: 0@0 lookingAt: #S.
	aMarsRover execute: aCommandSequence.
	
	self assert: 0@-1 = aMarsRover whereAreYou.! !

!testRun: #MarsRoverTest #test08 stamp: 'DS 10/24/2020 16:48:01'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DS 10/24/2020 16:48:17' prior: 50887407!
execute: aCommandSequence

	aCommandSequence = 'f' ifTrue: [
		cardinalPoint = #N 			ifTrue: [point := point + (0@1)].
		cardinalPoint = #E 			ifTrue: [point := point + (1@0)].
		cardinalPoint = #W 			ifTrue: [point := point + (-1@0)].
		cardinalPoint = #S 			ifTrue: [point := point + (0@-1)].
	].
	aCommandSequence = 'b' ifTrue: [point := point + (0@-1)].
	aCommandSequence = 'l' ifTrue: [cardinalPoint := #W].
	aCommandSequence = 'r' ifTrue: [cardinalPoint := #E].! !

!testRun: #MarsRoverTest #test08 stamp: 'DS 10/24/2020 16:48:19'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'DS 10/24/2020 16:48:19'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'DS 10/24/2020 16:48:19'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'DS 10/24/2020 16:48:19'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'DS 10/24/2020 16:48:19'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'DS 10/24/2020 16:48:19'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'DS 10/24/2020 16:48:19'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'DS 10/24/2020 16:48:19'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'DS 10/24/2020 16:48:19'!
PASSED!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DS 10/24/2020 16:49:59'!
forward

	^ [
		cardinalPoint = #N 			ifTrue: [point := point + (0@1)].
		cardinalPoint = #E 			ifTrue: [point := point + (1@0)].
		cardinalPoint = #W 			ifTrue: [point := point + (-1@0)].
		cardinalPoint = #S 			ifTrue: [point := point + (0@-1)].
	]! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DS 10/24/2020 16:49:59' prior: 50887454!
execute: aCommandSequence

	aCommandSequence = 'f' ifTrue: self forward.
	aCommandSequence = 'b' ifTrue: [point := point + (0@-1)].
	aCommandSequence = 'l' ifTrue: [cardinalPoint := #W].
	aCommandSequence = 'r' ifTrue: [cardinalPoint := #E].! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DS 10/24/2020 16:50:34' prior: 50887493!
forward

	cardinalPoint = #N 			ifTrue: [point := point + (0@1)].
	cardinalPoint = #E 			ifTrue: [point := point + (1@0)].
	cardinalPoint = #W 			ifTrue: [point := point + (-1@0)].
	cardinalPoint = #S 			ifTrue: [point := point + (0@-1)].! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DS 10/24/2020 16:50:41' prior: 50887504!
execute: aCommandSequence

	aCommandSequence = 'f' ifTrue: [ self forward ].
	aCommandSequence = 'b' ifTrue: [point := point + (0@-1)].
	aCommandSequence = 'l' ifTrue: [cardinalPoint := #W].
	aCommandSequence = 'r' ifTrue: [cardinalPoint := #E].! !

!testRun: #MarsRoverTest #test01 stamp: 'DS 10/24/2020 16:50:57'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'DS 10/24/2020 16:50:57'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'DS 10/24/2020 16:50:57'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'DS 10/24/2020 16:50:57'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'DS 10/24/2020 16:50:57'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'DS 10/24/2020 16:50:57'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'DS 10/24/2020 16:50:57'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'DS 10/24/2020 16:50:57'!
PASSED!

----SNAPSHOT----(24 October 2020 16:51:00) CuisUniversity-4384.image priorSource: 17783725!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'DS 10/24/2020 16:52:57' prior: 50887158!
test03

	| aMarsRover aCommandSequence |

	aCommandSequence := 'b'.
	aMarsRover := MarsRover with: 0@0 lookingAt: #E.
	aMarsRover execute: aCommandSequence.
	
	self assert: -1@0 = aMarsRover whereAreYou.! !

!testRun: #MarsRoverTest #test03 stamp: 'DS 10/24/2020 16:52:59'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DS 10/24/2020 16:53:53'!
backward

	^ point := point + (0@-1)! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DS 10/24/2020 16:53:53' prior: 50887526!
execute: aCommandSequence

	aCommandSequence = 'f' ifTrue: [ self forward ].
	aCommandSequence = 'b' ifTrue: [self backward].
	aCommandSequence = 'l' ifTrue: [cardinalPoint := #W].
	aCommandSequence = 'r' ifTrue: [cardinalPoint := #E].! !

!testRun: #MarsRoverTest #test03 stamp: 'DS 10/24/2020 16:54:12'!
FAILURE!

!testRun: #MarsRoverTest #test03 stamp: 'DS 10/24/2020 16:54:16'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DS 10/24/2020 16:54:51' prior: 50887571!
backward

	cardinalPoint = #N 			ifTrue: [point := point + (0@-1)].
	cardinalPoint = #E 			ifTrue: [point := point + (-1@0)].! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DS 10/24/2020 16:54:58' prior: 50887576!
execute: aCommandSequence

	aCommandSequence = 'f' ifTrue: [ self forward ].
	aCommandSequence = 'b' ifTrue: [ self backward ].
	aCommandSequence = 'l' ifTrue: [cardinalPoint := #W].
	aCommandSequence = 'r' ifTrue: [cardinalPoint := #E].! !

!testRun: #MarsRoverTest #test01 stamp: 'DS 10/24/2020 16:55:12'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'DS 10/24/2020 16:55:12'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'DS 10/24/2020 16:55:12'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'DS 10/24/2020 16:55:12'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'DS 10/24/2020 16:55:12'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'DS 10/24/2020 16:55:12'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'DS 10/24/2020 16:55:12'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'DS 10/24/2020 16:55:12'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'DS 10/24/2020 16:55:25' prior: 50887559!
test03

	| aMarsRover aCommandSequence |

	aCommandSequence := 'b'.
	aMarsRover := MarsRover with: 0@0 lookingAt: #N.
	aMarsRover execute: aCommandSequence.
	
	self assert: -1@0 = aMarsRover whereAreYou.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'DS 10/24/2020 16:55:41' prior: 50887629!
test03

	| aMarsRover aCommandSequence |

	aCommandSequence := 'b'.
	aMarsRover := MarsRover with: 0@0 lookingAt: #N.
	aMarsRover execute: aCommandSequence.
	
	self assert: 0@-1 = aMarsRover whereAreYou.! !

!testRun: #MarsRoverTest #test03 stamp: 'DS 10/24/2020 16:55:41'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'DS 10/24/2020 16:55:41'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'DS 10/24/2020 16:55:41'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'DS 10/24/2020 16:55:41'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'DS 10/24/2020 16:55:41'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'DS 10/24/2020 16:55:41'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'DS 10/24/2020 16:55:41'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'DS 10/24/2020 16:55:41'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'DS 10/24/2020 16:55:41'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'DS 10/24/2020 16:55:52'!
test09

	| aMarsRover aCommandSequence |

	aCommandSequence := 'b'.
	aMarsRover := MarsRover with: 0@0 lookingAt: #E.
	aMarsRover execute: aCommandSequence.
	
	self assert: -1@0 = aMarsRover whereAreYou.! !

!testRun: #MarsRoverTest #test09 stamp: 'DS 10/24/2020 16:55:53'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'DS 10/24/2020 16:55:53'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'DS 10/24/2020 16:55:53'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'DS 10/24/2020 16:55:53'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'DS 10/24/2020 16:55:53'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'DS 10/24/2020 16:55:53'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'DS 10/24/2020 16:55:53'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'DS 10/24/2020 16:55:53'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'DS 10/24/2020 16:55:53'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'DS 10/24/2020 16:55:53'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'DS 10/24/2020 16:56:03'!
test10

	| aMarsRover aCommandSequence |

	aCommandSequence := 'b'.
	aMarsRover := MarsRover with: 0@0 lookingAt: #W.
	aMarsRover execute: aCommandSequence.
	
	self assert: 1@0 = aMarsRover whereAreYou.! !

!testRun: #MarsRoverTest #test10 stamp: 'DS 10/24/2020 16:56:04'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DS 10/24/2020 16:56:27' prior: 50887592!
backward

	cardinalPoint = #N 			ifTrue: [point := point + (0@-1)].
	cardinalPoint = #E 			ifTrue: [point := point + (-1@0)].
	cardinalPoint = #W 			ifTrue: [point := point + (1@0)].! !

!testRun: #MarsRoverTest #test10 stamp: 'DS 10/24/2020 16:56:28'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'DS 10/24/2020 16:56:28'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'DS 10/24/2020 16:56:28'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'DS 10/24/2020 16:56:28'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'DS 10/24/2020 16:56:28'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'DS 10/24/2020 16:56:28'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'DS 10/24/2020 16:56:28'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'DS 10/24/2020 16:56:28'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'DS 10/24/2020 16:56:28'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'DS 10/24/2020 16:56:28'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'DS 10/24/2020 16:56:28'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'DS 10/24/2020 16:56:38'!
test11

	| aMarsRover aCommandSequence |

	aCommandSequence := 'b'.
	aMarsRover := MarsRover with: 0@0 lookingAt: #S.
	aMarsRover execute: aCommandSequence.
	
	self assert: 0@1 = aMarsRover whereAreYou.! !

!testRun: #MarsRoverTest #test11 stamp: 'DS 10/24/2020 16:56:56'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DS 10/24/2020 16:57:25' prior: 50887715!
backward

	cardinalPoint = #N 			ifTrue: [point := point + (0@-1)].
	cardinalPoint = #E 			ifTrue: [point := point + (-1@0)].
	cardinalPoint = #W 			ifTrue: [point := point + (1@0)].
	cardinalPoint = #S 			ifTrue: [point := point + (0@1)].! !

!testRun: #MarsRoverTest #test11 stamp: 'DS 10/24/2020 16:57:27'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'DS 10/24/2020 16:57:27'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'DS 10/24/2020 16:57:27'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'DS 10/24/2020 16:57:27'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'DS 10/24/2020 16:57:27'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'DS 10/24/2020 16:57:27'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'DS 10/24/2020 16:57:27'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'DS 10/24/2020 16:57:27'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'DS 10/24/2020 16:57:27'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'DS 10/24/2020 16:57:27'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'DS 10/24/2020 16:57:27'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'DS 10/24/2020 16:57:27'!
PASSED!

----SNAPSHOT----(24 October 2020 16:57:34) CuisUniversity-4384.image priorSource: 17788944!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'DS 10/24/2020 17:03:58'!
test12

	| aMarsRover aCommandSequence |

	aCommandSequence := 'l'.
	aMarsRover := MarsRover with: 0@0 lookingAt: #W.
	aMarsRover execute: aCommandSequence.
	
	self assert: #S = aMarsRover whereAreYouLookingAt.! !

!testRun: #MarsRoverTest #test12 stamp: 'DS 10/24/2020 17:03:59'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DS 10/24/2020 17:04:31'!
leftRotation

	^ cardinalPoint := #W! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DS 10/24/2020 17:04:31' prior: 50887599!
execute: aCommandSequence

	aCommandSequence = 'f' ifTrue: [ self forward ].
	aCommandSequence = 'b' ifTrue: [ self backward ].
	aCommandSequence = 'l' ifTrue: [self leftRotation].
	aCommandSequence = 'r' ifTrue: [cardinalPoint := #E].! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DS 10/24/2020 17:05:26' prior: 50887816!
leftRotation

	cardinalPoint = #N ifTrue: [cardinalPoint := #W].
	cardinalPoint = #W ifTrue: [cardinalPoint := #S]! !

!testRun: #MarsRoverTest #test12 stamp: 'DS 10/24/2020 17:05:28'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'DS 10/24/2020 17:05:28'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'DS 10/24/2020 17:05:28'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'DS 10/24/2020 17:05:28'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'DS 10/24/2020 17:05:28'!
FAILURE!

!testRun: #MarsRoverTest #test05 stamp: 'DS 10/24/2020 17:05:28'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'DS 10/24/2020 17:05:28'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'DS 10/24/2020 17:05:28'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'DS 10/24/2020 17:05:28'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'DS 10/24/2020 17:05:28'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'DS 10/24/2020 17:05:28'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'DS 10/24/2020 17:05:28'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'DS 10/24/2020 17:05:28'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'DS 10/24/2020 17:05:28'!
FAILURE!

!testRun: #MarsRoverTest #test12 stamp: 'DS 10/24/2020 17:05:36'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'DS 10/24/2020 17:05:42'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'DS 10/24/2020 17:05:42'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'DS 10/24/2020 17:05:42'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'DS 10/24/2020 17:05:42'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'DS 10/24/2020 17:05:42'!
FAILURE!

!testRun: #MarsRoverTest #test05 stamp: 'DS 10/24/2020 17:05:42'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'DS 10/24/2020 17:05:42'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'DS 10/24/2020 17:05:42'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'DS 10/24/2020 17:05:42'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'DS 10/24/2020 17:05:42'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'DS 10/24/2020 17:05:42'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'DS 10/24/2020 17:05:42'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'DS 10/24/2020 17:05:42'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'DS 10/24/2020 17:05:42'!
FAILURE!

!testRun: #MarsRoverTest #test12 stamp: 'DS 10/24/2020 17:05:46'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'DS 10/24/2020 17:05:46'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'DS 10/24/2020 17:05:46'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'DS 10/24/2020 17:05:46'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'DS 10/24/2020 17:05:46'!
FAILURE!

!testRun: #MarsRoverTest #test05 stamp: 'DS 10/24/2020 17:05:46'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'DS 10/24/2020 17:05:46'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'DS 10/24/2020 17:05:46'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'DS 10/24/2020 17:05:46'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'DS 10/24/2020 17:05:46'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'DS 10/24/2020 17:05:46'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'DS 10/24/2020 17:05:46'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'DS 10/24/2020 17:05:46'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'DS 10/24/2020 17:05:46'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DS 10/24/2020 17:07:11' prior: 50887832!
leftRotation

	cardinalPoint = #N ifTrue: [^cardinalPoint := #W].
	cardinalPoint = #W ifTrue: [^cardinalPoint := #S]! !

!testRun: #MarsRoverTest #test04 stamp: 'DS 10/24/2020 17:07:13'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'DS 10/24/2020 17:07:15'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'DS 10/24/2020 17:07:15'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'DS 10/24/2020 17:07:15'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'DS 10/24/2020 17:07:15'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'DS 10/24/2020 17:07:15'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'DS 10/24/2020 17:07:15'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'DS 10/24/2020 17:07:15'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'DS 10/24/2020 17:07:15'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'DS 10/24/2020 17:07:15'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'DS 10/24/2020 17:07:15'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'DS 10/24/2020 17:07:15'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'DS 10/24/2020 17:07:15'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'DS 10/24/2020 17:07:15'!
PASSED!

----SNAPSHOT----(24 October 2020 17:07:18) CuisUniversity-4384.image priorSource: 17796790!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'DS 10/24/2020 17:07:29' prior: 50887804!
test12

	| aMarsRover aCommandSequence |

	aCommandSequence := 'l'.
	aMarsRover := MarsRover with: 0@0 lookingAt: #S.
	aMarsRover execute: aCommandSequence.
	
	self assert: #E = aMarsRover whereAreYouLookingAt.! !

!testRun: #MarsRoverTest #test12 stamp: 'DS 10/24/2020 17:07:29'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DS 10/24/2020 17:07:48' prior: 50887940!
leftRotation

	cardinalPoint = #N ifTrue: [^cardinalPoint := #W].
	cardinalPoint = #W ifTrue: [^cardinalPoint := #S].
	cardinalPoint = #S ifTrue: [^cardinalPoint := #E].! !

!testRun: #MarsRoverTest #test12 stamp: 'DS 10/24/2020 17:07:50'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'DS 10/24/2020 17:07:50'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'DS 10/24/2020 17:07:50'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'DS 10/24/2020 17:07:50'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'DS 10/24/2020 17:07:50'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'DS 10/24/2020 17:07:50'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'DS 10/24/2020 17:07:50'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'DS 10/24/2020 17:07:50'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'DS 10/24/2020 17:07:50'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'DS 10/24/2020 17:07:50'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'DS 10/24/2020 17:07:50'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'DS 10/24/2020 17:07:50'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'DS 10/24/2020 17:07:50'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'DS 10/24/2020 17:08:00'!
test13

	| aMarsRover aCommandSequence |

	aCommandSequence := 'l'.
	aMarsRover := MarsRover with: 0@0 lookingAt: #E.
	aMarsRover execute: aCommandSequence.
	
	self assert: #N = aMarsRover whereAreYouLookingAt.! !

!testRun: #MarsRoverTest #test13 stamp: 'DS 10/24/2020 17:08:01'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DS 10/24/2020 17:08:17' prior: 50887995!
leftRotation

	cardinalPoint = #N ifTrue: [^cardinalPoint := #W].
	cardinalPoint = #W ifTrue: [^cardinalPoint := #S].
	cardinalPoint = #S ifTrue: [^cardinalPoint := #E].
	cardinalPoint = #E ifTrue: [^cardinalPoint := #N].! !

!testRun: #MarsRoverTest #test13 stamp: 'DS 10/24/2020 17:08:18'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'DS 10/24/2020 17:08:18'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'DS 10/24/2020 17:08:18'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'DS 10/24/2020 17:08:18'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'DS 10/24/2020 17:08:18'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'DS 10/24/2020 17:08:18'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'DS 10/24/2020 17:08:18'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'DS 10/24/2020 17:08:18'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'DS 10/24/2020 17:08:18'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'DS 10/24/2020 17:08:18'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'DS 10/24/2020 17:08:18'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'DS 10/24/2020 17:08:18'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'DS 10/24/2020 17:08:18'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'DS 10/24/2020 17:08:18'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'DS 10/24/2020 17:09:36'!
test14

	| aMarsRover aCommandSequence |

	aCommandSequence := 'l'.
	aMarsRover := MarsRover with: 0@0 lookingAt: #E.
	aMarsRover execute: aCommandSequence.
	
	self assert: #N = aMarsRover whereAreYouLookingAt.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'DS 10/24/2020 17:09:48' prior: 50888034!
test13

	| aMarsRover aCommandSequence |

	aCommandSequence := 'l'.
	aMarsRover := MarsRover with: 0@0 lookingAt: #S.
	aMarsRover execute: aCommandSequence.
	
	self assert: #E = aMarsRover whereAreYouLookingAt.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'DS 10/24/2020 17:10:03' prior: 50887983!
test12

	| aMarsRover aCommandSequence |

	aCommandSequence := 'l'.
	aMarsRover := MarsRover with: 0@0 lookingAt: #W.
	aMarsRover execute: aCommandSequence.
	
	self assert: #S = aMarsRover whereAreYouLookingAt.! !

!testRun: #MarsRoverTest #test14 stamp: 'DS 10/24/2020 17:10:10'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'DS 10/24/2020 17:10:25'!
test15

	| aMarsRover aCommandSequence |

	aCommandSequence := 'r'.
	aMarsRover := MarsRover with: 0@0 lookingAt: #E.
	aMarsRover execute: aCommandSequence.
	
	self assert: #S = aMarsRover whereAreYouLookingAt.! !

!testRun: #MarsRoverTest #test15 stamp: 'DS 10/24/2020 17:10:26'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DS 10/24/2020 17:11:21'!
rightRotation

	^ cardinalPoint := #E! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DS 10/24/2020 17:11:21' prior: 50887821!
execute: aCommandSequence

	aCommandSequence = 'f' ifTrue: [ self forward ].
	aCommandSequence = 'b' ifTrue: [ self backward ].
	aCommandSequence = 'l' ifTrue: [self leftRotation].
	aCommandSequence = 'r' ifTrue: [self rightRotation].! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DS 10/24/2020 17:12:04' prior: 50888133!
rightRotation

	cardinalPoint = #N ifTrue: [^cardinalPoint := #E].
	cardinalPoint = #E ifTrue: [^cardinalPoint := #S].! !

!testRun: #MarsRoverTest #test15 stamp: 'DS 10/24/2020 17:12:05'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'DS 10/24/2020 17:12:05'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'DS 10/24/2020 17:12:05'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'DS 10/24/2020 17:12:05'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'DS 10/24/2020 17:12:05'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'DS 10/24/2020 17:12:05'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'DS 10/24/2020 17:12:05'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'DS 10/24/2020 17:12:05'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'DS 10/24/2020 17:12:05'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'DS 10/24/2020 17:12:05'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'DS 10/24/2020 17:12:05'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'DS 10/24/2020 17:12:05'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'DS 10/24/2020 17:12:05'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'DS 10/24/2020 17:12:05'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'DS 10/24/2020 17:12:05'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'DS 10/24/2020 17:12:05'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'DS 10/24/2020 17:12:17'!
test16

	| aMarsRover aCommandSequence |

	aCommandSequence := 'r'.
	aMarsRover := MarsRover with: 0@0 lookingAt: #S.
	aMarsRover execute: aCommandSequence.
	
	self assert: #S = aMarsRover whereAreYouLookingAt.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'DS 10/24/2020 17:12:30' prior: 50888193!
test16

	| aMarsRover aCommandSequence |

	aCommandSequence := 'r'.
	aMarsRover := MarsRover with: 0@0 lookingAt: #S.
	aMarsRover execute: aCommandSequence.
	
	self assert: #W = aMarsRover whereAreYouLookingAt.! !

!testRun: #MarsRoverTest #test16 stamp: 'DS 10/24/2020 17:12:30'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DS 10/24/2020 17:12:45' prior: 50888149!
rightRotation

	cardinalPoint = #N ifTrue: [^cardinalPoint := #E].
	cardinalPoint = #E ifTrue: [^cardinalPoint := #S].
	cardinalPoint = #S ifTrue: [^cardinalPoint := #W].! !

!testRun: #MarsRoverTest #test16 stamp: 'DS 10/24/2020 17:12:46'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'DS 10/24/2020 17:12:46'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'DS 10/24/2020 17:12:46'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'DS 10/24/2020 17:12:46'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'DS 10/24/2020 17:12:46'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'DS 10/24/2020 17:12:46'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'DS 10/24/2020 17:12:46'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'DS 10/24/2020 17:12:46'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'DS 10/24/2020 17:12:46'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'DS 10/24/2020 17:12:46'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'DS 10/24/2020 17:12:46'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'DS 10/24/2020 17:12:46'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'DS 10/24/2020 17:12:46'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'DS 10/24/2020 17:12:46'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'DS 10/24/2020 17:12:46'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'DS 10/24/2020 17:12:46'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'DS 10/24/2020 17:12:46'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'DS 10/24/2020 17:12:54'!
test17

	| aMarsRover aCommandSequence |

	aCommandSequence := 'r'.
	aMarsRover := MarsRover with: 0@0 lookingAt: #W.
	aMarsRover execute: aCommandSequence.
	
	self assert: #N = aMarsRover whereAreYouLookingAt.! !

!testRun: #MarsRoverTest #test17 stamp: 'DS 10/24/2020 17:12:55'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DS 10/24/2020 17:13:09' prior: 50888215!
rightRotation

	cardinalPoint = #N ifTrue: [^cardinalPoint := #E].
	cardinalPoint = #E ifTrue: [^cardinalPoint := #S].
	cardinalPoint = #S ifTrue: [^cardinalPoint := #W].
	cardinalPoint = #W ifTrue: [^cardinalPoint := #N].! !

!testRun: #MarsRoverTest #test17 stamp: 'DS 10/24/2020 17:13:10'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'DS 10/24/2020 17:13:10'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'DS 10/24/2020 17:13:10'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'DS 10/24/2020 17:13:10'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'DS 10/24/2020 17:13:10'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'DS 10/24/2020 17:13:10'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'DS 10/24/2020 17:13:10'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'DS 10/24/2020 17:13:10'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'DS 10/24/2020 17:13:10'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'DS 10/24/2020 17:13:10'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'DS 10/24/2020 17:13:10'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'DS 10/24/2020 17:13:10'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'DS 10/24/2020 17:13:10'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'DS 10/24/2020 17:13:10'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'DS 10/24/2020 17:13:10'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'DS 10/24/2020 17:13:10'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'DS 10/24/2020 17:13:10'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'DS 10/24/2020 17:13:10'!
PASSED!

----SNAPSHOT----(24 October 2020 17:13:14) CuisUniversity-4384.image priorSource: 17802513!

----SNAPSHOT----(24 October 2020 17:15:23) CuisUniversity-4384.image priorSource: 17813639!

!methodRemoval: MarsRoverTest #test01 stamp: 'DS 10/24/2020 17:19:35'!
test01

	| aMarsRover |

	aMarsRover := MarsRover with: 0@0 lookingAt: #N.
	
	self assert: 0@0 = aMarsRover whereAreYou.
	self assert: #N = aMarsRover whereAreYouLookingAt.!

----SNAPSHOT----(24 October 2020 17:22:14) CuisUniversity-4384.image priorSource: 17813732!

!testRun: #MarsRoverTest #test02 stamp: 'DS 10/24/2020 17:22:25'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'DS 10/24/2020 17:22:25'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'DS 10/24/2020 17:22:25'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'DS 10/24/2020 17:22:25'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'DS 10/24/2020 17:22:25'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'DS 10/24/2020 17:22:25'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'DS 10/24/2020 17:22:25'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'DS 10/24/2020 17:22:25'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'DS 10/24/2020 17:22:25'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'DS 10/24/2020 17:22:25'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'DS 10/24/2020 17:22:25'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'DS 10/24/2020 17:22:25'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'DS 10/24/2020 17:22:25'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'DS 10/24/2020 17:22:25'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'DS 10/24/2020 17:22:25'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'DS 10/24/2020 17:22:25'!
PASSED!

----SNAPSHOT----(24 October 2020 17:31:03) CuisUniversity-4384.image priorSource: 17814071!
!MarsRoverTest methodsFor: 'forward' stamp: 'DS 10/24/2020 19:28:15'!
test18

	| aMarsRover aCommandSequence |

	aCommandSequence := 'fb'.
	aMarsRover := MarsRover with: 0@0 lookingAt: #N.
	aMarsRover execute: aCommandSequence.
	
	self assert: 0@0 = aMarsRover whereAreYou.! !

!testRun: #MarsRoverTest #test18 stamp: 'DS 10/24/2020 19:28:16'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'DS 10/24/2020 19:28:16'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'DS 10/24/2020 19:28:16'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'DS 10/24/2020 19:28:16'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'DS 10/24/2020 19:28:16'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'DS 10/24/2020 19:28:16'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'DS 10/24/2020 19:28:16'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'DS 10/24/2020 19:28:16'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'DS 10/24/2020 19:28:16'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'DS 10/24/2020 19:28:16'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'DS 10/24/2020 19:28:16'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'DS 10/24/2020 19:28:16'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'DS 10/24/2020 19:28:16'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'DS 10/24/2020 19:28:16'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'DS 10/24/2020 19:28:16'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'DS 10/24/2020 19:28:16'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'DS 10/24/2020 19:28:16'!
PASSED!

!testRun: #MarsRoverTest #test18 stamp: 'DS 10/24/2020 19:28:16'!
PASSED!
!MarsRoverTest methodsFor: 'forward' stamp: 'DS 10/24/2020 19:28:56' prior: 50888384!
test18

	| aMarsRover aCommandSequence |

	aCommandSequence := 'ffb'.
	aMarsRover := MarsRover with: 0@0 lookingAt: #N.
	aMarsRover execute: aCommandSequence.
	
	self assert: 0@1 = aMarsRover whereAreYou.! !

!testRun: #MarsRoverTest #test18 stamp: 'DS 10/24/2020 19:29:03'!
FAILURE!
!MarsRover methodsFor: 'executing' stamp: 'DS 10/24/2020 19:34:00' prior: 50888138!
execute: aCommandSequence

	aCommandSequence do: [ :aCommand |
		aCommand = $f ifTrue: [ self forward ].
		aCommand = $b ifTrue: [ self backward ].
		aCommand = $l ifTrue: [self leftRotation].
		aCommand = $r ifTrue: [self rightRotation].
	].! !

!testRun: #MarsRoverTest #test18 stamp: 'DS 10/24/2020 19:34:08'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'DS 10/24/2020 19:34:11'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'DS 10/24/2020 19:34:11'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'DS 10/24/2020 19:34:11'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'DS 10/24/2020 19:34:11'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'DS 10/24/2020 19:34:11'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'DS 10/24/2020 19:34:11'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'DS 10/24/2020 19:34:11'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'DS 10/24/2020 19:34:11'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'DS 10/24/2020 19:34:11'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'DS 10/24/2020 19:34:11'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'DS 10/24/2020 19:34:11'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'DS 10/24/2020 19:34:11'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'DS 10/24/2020 19:34:11'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'DS 10/24/2020 19:34:11'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'DS 10/24/2020 19:34:11'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'DS 10/24/2020 19:34:11'!
PASSED!

!testRun: #MarsRoverTest #test18 stamp: 'DS 10/24/2020 19:34:11'!
PASSED!

----SNAPSHOT----(24 October 2020 19:34:14) CuisUniversity-4384.image priorSource: 17815364!
!MarsRoverTest methodsFor: 'forward' stamp: 'DS 10/24/2020 19:41:12'!
test19

	| aMarsRover aCommandSequence |

	aCommandSequence := 'faf'.
	aMarsRover := MarsRover with: 0@0 lookingAt: #N.
	aMarsRover execute: aCommandSequence.
	
	self assert: 0@1 = aMarsRover whereAreYou.! !

!testRun: #MarsRoverTest #test19 stamp: 'DS 10/24/2020 19:41:16'!
FAILURE!
!MarsRover methodsFor: 'executing' stamp: 'DS 10/24/2020 19:41:54' prior: 50888448!
execute: aCommandSequence

	aCommandSequence do: [ :aCommand |
		aCommand = $f ifTrue: [ self forward ].
		aCommand = $b ifTrue: [ self backward ].
		aCommand = $l ifTrue: [self leftRotation].
		aCommand = $r ifTrue: [self rightRotation].
		^nil.
	].! !

!testRun: #MarsRoverTest #test19 stamp: 'DS 10/24/2020 19:41:57'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'DS 10/24/2020 19:41:57'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'DS 10/24/2020 19:41:57'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'DS 10/24/2020 19:41:57'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'DS 10/24/2020 19:41:57'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'DS 10/24/2020 19:41:57'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'DS 10/24/2020 19:41:57'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'DS 10/24/2020 19:41:57'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'DS 10/24/2020 19:41:57'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'DS 10/24/2020 19:41:57'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'DS 10/24/2020 19:41:57'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'DS 10/24/2020 19:41:57'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'DS 10/24/2020 19:41:57'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'DS 10/24/2020 19:41:57'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'DS 10/24/2020 19:41:57'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'DS 10/24/2020 19:41:57'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'DS 10/24/2020 19:41:57'!
PASSED!

!testRun: #MarsRoverTest #test18 stamp: 'DS 10/24/2020 19:41:57'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'DS 10/24/2020 19:41:57'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'DS 10/24/2020 19:42:13'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'DS 10/24/2020 19:42:13'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'DS 10/24/2020 19:42:13'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'DS 10/24/2020 19:42:13'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'DS 10/24/2020 19:42:13'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'DS 10/24/2020 19:42:13'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'DS 10/24/2020 19:42:13'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'DS 10/24/2020 19:42:13'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'DS 10/24/2020 19:42:13'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'DS 10/24/2020 19:42:13'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'DS 10/24/2020 19:42:13'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'DS 10/24/2020 19:42:13'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'DS 10/24/2020 19:42:13'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'DS 10/24/2020 19:42:13'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'DS 10/24/2020 19:42:13'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'DS 10/24/2020 19:42:13'!
PASSED!

!testRun: #MarsRoverTest #test18 stamp: 'DS 10/24/2020 19:42:13'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'DS 10/24/2020 19:42:13'!
PASSED!
!MarsRover methodsFor: 'executing' stamp: 'DS 10/24/2020 19:42:23' prior: 50888515!
execute: aCommandSequence

	aCommandSequence do: [ :aCommand |
		aCommand = $f ifTrue: [ self forward ].
		aCommand = $b ifTrue: [ self backward ].
		aCommand = $l ifTrue: [self leftRotation].
		aCommand = $r ifTrue: [self rightRotation].
	].! !
!MarsRover methodsFor: 'executing' stamp: 'DS 10/24/2020 19:34:00' prior: 50888613!
execute: aCommandSequence

	aCommandSequence do: [ :aCommand |
		aCommand = $f ifTrue: [ self forward ].
		aCommand = $b ifTrue: [ self backward ].
		aCommand = $l ifTrue: [self leftRotation].
		aCommand = $r ifTrue: [self rightRotation].
	].! !

!testRun: #MarsRoverTest #test02 stamp: 'DS 10/24/2020 19:43:06'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'DS 10/24/2020 19:43:06'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'DS 10/24/2020 19:43:06'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'DS 10/24/2020 19:43:06'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'DS 10/24/2020 19:43:06'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'DS 10/24/2020 19:43:06'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'DS 10/24/2020 19:43:06'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'DS 10/24/2020 19:43:06'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'DS 10/24/2020 19:43:06'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'DS 10/24/2020 19:43:06'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'DS 10/24/2020 19:43:06'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'DS 10/24/2020 19:43:06'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'DS 10/24/2020 19:43:06'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'DS 10/24/2020 19:43:06'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'DS 10/24/2020 19:43:06'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'DS 10/24/2020 19:43:06'!
PASSED!

!testRun: #MarsRoverTest #test18 stamp: 'DS 10/24/2020 19:43:06'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'DS 10/24/2020 19:43:06'!
FAILURE!

!testRun: #MarsRoverTest #test19 stamp: 'DS 10/24/2020 19:43:06'!
FAILURE!
!MarsRover methodsFor: 'executing' stamp: 'DS 10/24/2020 19:45:12' prior: 50888624!
execute: aCommandSequence

	aCommandSequence do: [ :aCommand |
		({$f. $b. $l. $r} includes: aCommand) ifTrue: [
			aCommand = $f ifTrue: [ self forward ].
			aCommand = $b ifTrue: [ self backward ].
			aCommand = $l ifTrue: [self leftRotation].
			aCommand = $r ifTrue: [self rightRotation].
		] ifFalse: [^nil].
	].! !

!testRun: #MarsRoverTest #test19 stamp: 'DS 10/24/2020 19:45:13'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'DS 10/24/2020 19:45:16'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'DS 10/24/2020 19:45:16'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'DS 10/24/2020 19:45:16'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'DS 10/24/2020 19:45:16'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'DS 10/24/2020 19:45:16'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'DS 10/24/2020 19:45:16'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'DS 10/24/2020 19:45:16'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'DS 10/24/2020 19:45:16'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'DS 10/24/2020 19:45:16'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'DS 10/24/2020 19:45:16'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'DS 10/24/2020 19:45:16'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'DS 10/24/2020 19:45:16'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'DS 10/24/2020 19:45:16'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'DS 10/24/2020 19:45:16'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'DS 10/24/2020 19:45:16'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'DS 10/24/2020 19:45:16'!
PASSED!

!testRun: #MarsRoverTest #test18 stamp: 'DS 10/24/2020 19:45:16'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'DS 10/24/2020 19:45:16'!
PASSED!

----SNAPSHOT----(24 October 2020 19:53:06) CuisUniversity-4384.image priorSource: 17819195!

!testRun: #MarsRoverTest #test02 stamp: 'DS 10/24/2020 19:53:09'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'DS 10/24/2020 19:53:09'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'DS 10/24/2020 19:53:09'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'DS 10/24/2020 19:53:09'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'DS 10/24/2020 19:53:09'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'DS 10/24/2020 19:53:09'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'DS 10/24/2020 19:53:09'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'DS 10/24/2020 19:53:09'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'DS 10/24/2020 19:53:09'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'DS 10/24/2020 19:53:09'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'DS 10/24/2020 19:53:09'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'DS 10/24/2020 19:53:09'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'DS 10/24/2020 19:53:09'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'DS 10/24/2020 19:53:09'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'DS 10/24/2020 19:53:09'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'DS 10/24/2020 19:53:09'!
PASSED!

!testRun: #MarsRoverTest #test18 stamp: 'DS 10/24/2020 19:53:09'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'DS 10/24/2020 19:53:09'!
PASSED!
!MarsRoverTest methodsFor: 'forward' stamp: 'DS 10/24/2020 19:59:45'!
test01ForwardLookingAtNorthAdvanceOnYAxis

	| aMarsRover aCommandSequence |

	aCommandSequence := 'f'.
	aMarsRover := MarsRover with: 0@0 lookingAt: #N.
	aMarsRover execute: aCommandSequence.
	
	self assert: 0@1 = aMarsRover whereAreYou.! !

!methodRemoval: MarsRoverTest #test02 stamp: 'DS 10/24/2020 19:59:45'!
test02

	| aMarsRover aCommandSequence |

	aCommandSequence := 'f'.
	aMarsRover := MarsRover with: 0@0 lookingAt: #N.
	aMarsRover execute: aCommandSequence.
	
	self assert: 0@1 = aMarsRover whereAreYou.!
!MarsRoverTest methodsFor: 'forward' stamp: 'DS 10/24/2020 20:01:16'!
test02ForwardLookingAtEastAdvanceOnXAxis

	| aMarsRover aCommandSequence |

	aCommandSequence := 'f'.
	aMarsRover := MarsRover with: 0@0 lookingAt: #E.
	aMarsRover execute: aCommandSequence.
	
	self assert: 1@0 = aMarsRover whereAreYou.! !

!methodRemoval: MarsRoverTest #test06 stamp: 'DS 10/24/2020 20:01:16'!
test06

	| aMarsRover aCommandSequence |

	aCommandSequence := 'f'.
	aMarsRover := MarsRover with: 0@0 lookingAt: #E.
	aMarsRover execute: aCommandSequence.
	
	self assert: 1@0 = aMarsRover whereAreYou.!
!MarsRoverTest methodsFor: 'forward' stamp: 'DS 10/24/2020 20:01:53'!
test03ForwardLookingAtWestBackOnXAxis

	| aMarsRover aCommandSequence |

	aCommandSequence := 'f'.
	aMarsRover := MarsRover with: 0@0 lookingAt: #W.
	aMarsRover execute: aCommandSequence.
	
	self assert: -1@0 = aMarsRover whereAreYou.! !

!methodRemoval: MarsRoverTest #test07 stamp: 'DS 10/24/2020 20:01:53'!
test07

	| aMarsRover aCommandSequence |

	aCommandSequence := 'f'.
	aMarsRover := MarsRover with: 0@0 lookingAt: #W.
	aMarsRover execute: aCommandSequence.
	
	self assert: -1@0 = aMarsRover whereAreYou.!
!MarsRoverTest methodsFor: 'forward' stamp: 'DS 10/24/2020 20:02:32'!
test04ForwardLookingAtSouthBackOnYAxis

	| aMarsRover aCommandSequence |

	aCommandSequence := 'f'.
	aMarsRover := MarsRover with: 0@0 lookingAt: #S.
	aMarsRover execute: aCommandSequence.
	
	self assert: 0@-1 = aMarsRover whereAreYou.! !

!methodRemoval: MarsRoverTest #test08 stamp: 'DS 10/24/2020 20:02:32'!
test08

	| aMarsRover aCommandSequence |

	aCommandSequence := 'f'.
	aMarsRover := MarsRover with: 0@0 lookingAt: #S.
	aMarsRover execute: aCommandSequence.
	
	self assert: 0@-1 = aMarsRover whereAreYou.!

----SNAPSHOT----(24 October 2020 20:03:02) CuisUniversity-4384.image priorSource: 17826737!
!MarsRoverTest methodsFor: 'backward' stamp: 'DS 10/24/2020 20:05:11'!
test05BackwardLookingAtNorthBackOnYAxis

	| aMarsRover aCommandSequence |

	aCommandSequence := 'b'.
	aMarsRover := MarsRover with: 0@0 lookingAt: #N.
	aMarsRover execute: aCommandSequence.
	
	self assert: 0@-1 = aMarsRover whereAreYou.! !

!methodRemoval: MarsRoverTest #test03 stamp: 'DS 10/24/2020 20:05:11'!
test03

	| aMarsRover aCommandSequence |

	aCommandSequence := 'b'.
	aMarsRover := MarsRover with: 0@0 lookingAt: #N.
	aMarsRover execute: aCommandSequence.
	
	self assert: 0@-1 = aMarsRover whereAreYou.!
!MarsRoverTest methodsFor: 'backward' stamp: 'DS 10/24/2020 20:05:31'!
test06BackwardLookingAtEastBackwardOnXAxis

	| aMarsRover aCommandSequence |

	aCommandSequence := 'b'.
	aMarsRover := MarsRover with: 0@0 lookingAt: #E.
	aMarsRover execute: aCommandSequence.
	
	self assert: -1@0 = aMarsRover whereAreYou.! !

!methodRemoval: MarsRoverTest #test09 stamp: 'DS 10/24/2020 20:05:31'!
test09

	| aMarsRover aCommandSequence |

	aCommandSequence := 'b'.
	aMarsRover := MarsRover with: 0@0 lookingAt: #E.
	aMarsRover execute: aCommandSequence.
	
	self assert: -1@0 = aMarsRover whereAreYou.!
!MarsRoverTest methodsFor: 'backward' stamp: 'DS 10/24/2020 20:05:53'!
test07BackwardLookingAtWestAdvanceOnXAxis

	| aMarsRover aCommandSequence |

	aCommandSequence := 'b'.
	aMarsRover := MarsRover with: 0@0 lookingAt: #W.
	aMarsRover execute: aCommandSequence.
	
	self assert: 1@0 = aMarsRover whereAreYou.! !

!methodRemoval: MarsRoverTest #test10 stamp: 'DS 10/24/2020 20:05:53'!
test10

	| aMarsRover aCommandSequence |

	aCommandSequence := 'b'.
	aMarsRover := MarsRover with: 0@0 lookingAt: #W.
	aMarsRover execute: aCommandSequence.
	
	self assert: 1@0 = aMarsRover whereAreYou.!
!MarsRoverTest methodsFor: 'backward' stamp: 'DS 10/24/2020 20:06:19'!
test08BackwardLookingAtSouthBackOnAdvanceOnYAxis

	| aMarsRover aCommandSequence |

	aCommandSequence := 'b'.
	aMarsRover := MarsRover with: 0@0 lookingAt: #S.
	aMarsRover execute: aCommandSequence.
	
	self assert: 0@1 = aMarsRover whereAreYou.! !

!methodRemoval: MarsRoverTest #test11 stamp: 'DS 10/24/2020 20:06:19'!
test11

	| aMarsRover aCommandSequence |

	aCommandSequence := 'b'.
	aMarsRover := MarsRover with: 0@0 lookingAt: #S.
	aMarsRover execute: aCommandSequence.
	
	self assert: 0@1 = aMarsRover whereAreYou.!
!MarsRoverTest methodsFor: 'backward' stamp: 'DS 10/24/2020 20:06:47'!
test08BackwardLookingAtSouthAdvanceOnYAxis

	| aMarsRover aCommandSequence |

	aCommandSequence := 'b'.
	aMarsRover := MarsRover with: 0@0 lookingAt: #S.
	aMarsRover execute: aCommandSequence.
	
	self assert: 0@1 = aMarsRover whereAreYou.! !

!methodRemoval: MarsRoverTest #test08BackwardLookingAtSouthBackOnAdvanceOnYAxis stamp: 'DS 10/24/2020 20:06:47'!
test08BackwardLookingAtSouthBackOnAdvanceOnYAxis

	| aMarsRover aCommandSequence |

	aCommandSequence := 'b'.
	aMarsRover := MarsRover with: 0@0 lookingAt: #S.
	aMarsRover execute: aCommandSequence.
	
	self assert: 0@1 = aMarsRover whereAreYou.!
!MarsRoverTest methodsFor: 'backward' stamp: 'DS 10/24/2020 20:07:00'!
test06BackwardLookingAtEastBackOnXAxis

	| aMarsRover aCommandSequence |

	aCommandSequence := 'b'.
	aMarsRover := MarsRover with: 0@0 lookingAt: #E.
	aMarsRover execute: aCommandSequence.
	
	self assert: -1@0 = aMarsRover whereAreYou.! !

!methodRemoval: MarsRoverTest #test06BackwardLookingAtEastBackwardOnXAxis stamp: 'DS 10/24/2020 20:07:00'!
test06BackwardLookingAtEastBackwardOnXAxis

	| aMarsRover aCommandSequence |

	aCommandSequence := 'b'.
	aMarsRover := MarsRover with: 0@0 lookingAt: #E.
	aMarsRover execute: aCommandSequence.
	
	self assert: -1@0 = aMarsRover whereAreYou.!
!MarsRoverTest methodsFor: 'left rotation' stamp: 'DS 10/24/2020 20:07:39'!
test09LeftRotationLookingAtNorthRotateToWest

	| aMarsRover aCommandSequence |

	aCommandSequence := 'l'.
	aMarsRover := MarsRover with: 0@0 lookingAt: #N.
	aMarsRover execute: aCommandSequence.
	
	self assert: #W = aMarsRover whereAreYouLookingAt.! !

!methodRemoval: MarsRoverTest #test04 stamp: 'DS 10/24/2020 20:07:39'!
test04

	| aMarsRover aCommandSequence |

	aCommandSequence := 'l'.
	aMarsRover := MarsRover with: 0@0 lookingAt: #N.
	aMarsRover execute: aCommandSequence.
	
	self assert: #W = aMarsRover whereAreYouLookingAt.!
!MarsRoverTest methodsFor: 'left rotation' stamp: 'DS 10/24/2020 20:07:57'!
test10LeftRotationLookingAtWestRotateToSouth

	| aMarsRover aCommandSequence |

	aCommandSequence := 'l'.
	aMarsRover := MarsRover with: 0@0 lookingAt: #W.
	aMarsRover execute: aCommandSequence.
	
	self assert: #S = aMarsRover whereAreYouLookingAt.! !

!methodRemoval: MarsRoverTest #test12 stamp: 'DS 10/24/2020 20:07:57'!
test12

	| aMarsRover aCommandSequence |

	aCommandSequence := 'l'.
	aMarsRover := MarsRover with: 0@0 lookingAt: #W.
	aMarsRover execute: aCommandSequence.
	
	self assert: #S = aMarsRover whereAreYouLookingAt.!
!MarsRoverTest methodsFor: 'left rotation' stamp: 'DS 10/24/2020 20:08:18'!
test11LeftRotationLookingAtSouthRotateToEast

	| aMarsRover aCommandSequence |

	aCommandSequence := 'l'.
	aMarsRover := MarsRover with: 0@0 lookingAt: #S.
	aMarsRover execute: aCommandSequence.
	
	self assert: #E = aMarsRover whereAreYouLookingAt.! !

!methodRemoval: MarsRoverTest #test13 stamp: 'DS 10/24/2020 20:08:18'!
test13

	| aMarsRover aCommandSequence |

	aCommandSequence := 'l'.
	aMarsRover := MarsRover with: 0@0 lookingAt: #S.
	aMarsRover execute: aCommandSequence.
	
	self assert: #E = aMarsRover whereAreYouLookingAt.!
!MarsRoverTest methodsFor: 'left rotation' stamp: 'DS 10/24/2020 20:08:44'!
test12LeftRotationLookingAtEastRotateToNorth

	| aMarsRover aCommandSequence |

	aCommandSequence := 'l'.
	aMarsRover := MarsRover with: 0@0 lookingAt: #E.
	aMarsRover execute: aCommandSequence.
	
	self assert: #N = aMarsRover whereAreYouLookingAt.! !

!methodRemoval: MarsRoverTest #test14 stamp: 'DS 10/24/2020 20:08:44'!
test14

	| aMarsRover aCommandSequence |

	aCommandSequence := 'l'.
	aMarsRover := MarsRover with: 0@0 lookingAt: #E.
	aMarsRover execute: aCommandSequence.
	
	self assert: #N = aMarsRover whereAreYouLookingAt.!

----SNAPSHOT----(24 October 2020 20:08:49) CuisUniversity-4384.image priorSource: 17830595!
!MarsRoverTest methodsFor: 'right rotation' stamp: 'DS 10/24/2020 20:09:14'!
test13RightRotationLookingAtNorthRotateToEast

	| aMarsRover aCommandSequence |

	aCommandSequence := 'r'.
	aMarsRover := MarsRover with: 0@0 lookingAt: #N.
	aMarsRover execute: aCommandSequence.
	
	self assert: #E = aMarsRover whereAreYouLookingAt.! !

!methodRemoval: MarsRoverTest #test05 stamp: 'DS 10/24/2020 20:09:14'!
test05

	| aMarsRover aCommandSequence |

	aCommandSequence := 'r'.
	aMarsRover := MarsRover with: 0@0 lookingAt: #N.
	aMarsRover execute: aCommandSequence.
	
	self assert: #E = aMarsRover whereAreYouLookingAt.!
!MarsRoverTest methodsFor: 'right rotation' stamp: 'DS 10/24/2020 20:09:31'!
test14RightRotationLookingAtEastRotateToSouth

	| aMarsRover aCommandSequence |

	aCommandSequence := 'r'.
	aMarsRover := MarsRover with: 0@0 lookingAt: #E.
	aMarsRover execute: aCommandSequence.
	
	self assert: #S = aMarsRover whereAreYouLookingAt.! !

!methodRemoval: MarsRoverTest #test15 stamp: 'DS 10/24/2020 20:09:31'!
test15

	| aMarsRover aCommandSequence |

	aCommandSequence := 'r'.
	aMarsRover := MarsRover with: 0@0 lookingAt: #E.
	aMarsRover execute: aCommandSequence.
	
	self assert: #S = aMarsRover whereAreYouLookingAt.!
!MarsRoverTest methodsFor: 'right rotation' stamp: 'DS 10/24/2020 20:09:45'!
test15RightRotationLookingAtSouthRotateToWest

	| aMarsRover aCommandSequence |

	aCommandSequence := 'r'.
	aMarsRover := MarsRover with: 0@0 lookingAt: #S.
	aMarsRover execute: aCommandSequence.
	
	self assert: #W = aMarsRover whereAreYouLookingAt.! !

!methodRemoval: MarsRoverTest #test16 stamp: 'DS 10/24/2020 20:09:45'!
test16

	| aMarsRover aCommandSequence |

	aCommandSequence := 'r'.
	aMarsRover := MarsRover with: 0@0 lookingAt: #S.
	aMarsRover execute: aCommandSequence.
	
	self assert: #W = aMarsRover whereAreYouLookingAt.!
!MarsRoverTest methodsFor: 'right rotation' stamp: 'DS 10/24/2020 20:10:00'!
test16RightRotationLookingAtWestRotateToNorth

	| aMarsRover aCommandSequence |

	aCommandSequence := 'r'.
	aMarsRover := MarsRover with: 0@0 lookingAt: #W.
	aMarsRover execute: aCommandSequence.
	
	self assert: #N = aMarsRover whereAreYouLookingAt.! !

!methodRemoval: MarsRoverTest #test17 stamp: 'DS 10/24/2020 20:10:00'!
test17

	| aMarsRover aCommandSequence |

	aCommandSequence := 'r'.
	aMarsRover := MarsRover with: 0@0 lookingAt: #W.
	aMarsRover execute: aCommandSequence.
	
	self assert: #N = aMarsRover whereAreYouLookingAt.!

----SNAPSHOT----(24 October 2020 20:10:05) CuisUniversity-4384.image priorSource: 17837047!

!testRun: #MarsRoverTest #test01ForwardLookingAtNorthAdvanceOnYAxis stamp: 'DS 10/24/2020 20:10:09'!
PASSED!

!testRun: #MarsRoverTest #test02ForwardLookingAtEastAdvanceOnXAxis stamp: 'DS 10/24/2020 20:10:09'!
PASSED!

!testRun: #MarsRoverTest #test03ForwardLookingAtWestBackOnXAxis stamp: 'DS 10/24/2020 20:10:09'!
PASSED!

!testRun: #MarsRoverTest #test04ForwardLookingAtSouthBackOnYAxis stamp: 'DS 10/24/2020 20:10:09'!
PASSED!

!testRun: #MarsRoverTest #test05BackwardLookingAtNorthBackOnYAxis stamp: 'DS 10/24/2020 20:10:09'!
PASSED!

!testRun: #MarsRoverTest #test06BackwardLookingAtEastBackOnXAxis stamp: 'DS 10/24/2020 20:10:09'!
PASSED!

!testRun: #MarsRoverTest #test07BackwardLookingAtWestAdvanceOnXAxis stamp: 'DS 10/24/2020 20:10:09'!
PASSED!

!testRun: #MarsRoverTest #test08BackwardLookingAtSouthAdvanceOnYAxis stamp: 'DS 10/24/2020 20:10:09'!
PASSED!

!testRun: #MarsRoverTest #test09LeftRotationLookingAtNorthRotateToWest stamp: 'DS 10/24/2020 20:10:09'!
PASSED!

!testRun: #MarsRoverTest #test10LeftRotationLookingAtWestRotateToSouth stamp: 'DS 10/24/2020 20:10:09'!
PASSED!

!testRun: #MarsRoverTest #test11LeftRotationLookingAtSouthRotateToEast stamp: 'DS 10/24/2020 20:10:09'!
PASSED!

!testRun: #MarsRoverTest #test12LeftRotationLookingAtEastRotateToNorth stamp: 'DS 10/24/2020 20:10:09'!
PASSED!

!testRun: #MarsRoverTest #test13RightRotationLookingAtNorthRotateToEast stamp: 'DS 10/24/2020 20:10:09'!
PASSED!

!testRun: #MarsRoverTest #test14RightRotationLookingAtEastRotateToSouth stamp: 'DS 10/24/2020 20:10:09'!
PASSED!

!testRun: #MarsRoverTest #test15RightRotationLookingAtSouthRotateToWest stamp: 'DS 10/24/2020 20:10:09'!
PASSED!

!testRun: #MarsRoverTest #test16RightRotationLookingAtWestRotateToNorth stamp: 'DS 10/24/2020 20:10:09'!
PASSED!

!testRun: #MarsRoverTest #test18 stamp: 'DS 10/24/2020 20:10:09'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'DS 10/24/2020 20:10:09'!
PASSED!
!MarsRoverTest methodsFor: 'command sequences' stamp: 'DS 10/24/2020 20:15:38'!
test17TwoForwardsAndOneBackwardWorkAsOneForward

	| aMarsRover aCommandSequence |

	aCommandSequence := 'ffb'.
	aMarsRover := MarsRover with: 0@0 lookingAt: #N.
	aMarsRover execute: aCommandSequence.
	
	self assert: 0@1 = aMarsRover whereAreYou.! !

!methodRemoval: MarsRoverTest #test18 stamp: 'DS 10/24/2020 20:15:41'!
test18

	| aMarsRover aCommandSequence |

	aCommandSequence := 'ffb'.
	aMarsRover := MarsRover with: 0@0 lookingAt: #N.
	aMarsRover execute: aCommandSequence.
	
	self assert: 0@1 = aMarsRover whereAreYou.!
!MarsRoverTest methodsFor: 'command sequences' stamp: 'DS 10/24/2020 20:16:44'!
test18UnknownCommandStopExecution

	| aMarsRover aCommandSequence |

	aCommandSequence := 'faf'.
	aMarsRover := MarsRover with: 0@0 lookingAt: #N.
	aMarsRover execute: aCommandSequence.
	
	self assert: 0@1 = aMarsRover whereAreYou.! !

!methodRemoval: MarsRoverTest #test19 stamp: 'DS 10/24/2020 20:16:47'!
test19

	| aMarsRover aCommandSequence |

	aCommandSequence := 'faf'.
	aMarsRover := MarsRover with: 0@0 lookingAt: #N.
	aMarsRover execute: aCommandSequence.
	
	self assert: 0@1 = aMarsRover whereAreYou.!
!MarsRoverTest methodsFor: 'command sequences' stamp: 'DS 10/24/2020 20:17:25' prior: 50889224!
test18UnknownCommandStopExecution

	| aMarsRover aCommandSequence |

	aCommandSequence := 'faf'.
	aMarsRover := MarsRover with: 0@0 lookingAt: #N.
	aMarsRover execute: aCommandSequence.
	
	self assert: 0@1 = aMarsRover whereAreYou.
	self assert: #N = aMarsRover whereAreYouLookingAt.! !

!testRun: #MarsRoverTest #test18UnknownCommandStopExecution stamp: 'DS 10/24/2020 20:17:26'!
PASSED!

!testRun: #MarsRoverTest #test01ForwardLookingAtNorthAdvanceOnYAxis stamp: 'DS 10/24/2020 20:17:26'!
PASSED!

!testRun: #MarsRoverTest #test02ForwardLookingAtEastAdvanceOnXAxis stamp: 'DS 10/24/2020 20:17:26'!
PASSED!

!testRun: #MarsRoverTest #test03ForwardLookingAtWestBackOnXAxis stamp: 'DS 10/24/2020 20:17:26'!
PASSED!

!testRun: #MarsRoverTest #test04ForwardLookingAtSouthBackOnYAxis stamp: 'DS 10/24/2020 20:17:26'!
PASSED!

!testRun: #MarsRoverTest #test05BackwardLookingAtNorthBackOnYAxis stamp: 'DS 10/24/2020 20:17:26'!
PASSED!

!testRun: #MarsRoverTest #test06BackwardLookingAtEastBackOnXAxis stamp: 'DS 10/24/2020 20:17:26'!
PASSED!

!testRun: #MarsRoverTest #test07BackwardLookingAtWestAdvanceOnXAxis stamp: 'DS 10/24/2020 20:17:26'!
PASSED!

!testRun: #MarsRoverTest #test08BackwardLookingAtSouthAdvanceOnYAxis stamp: 'DS 10/24/2020 20:17:26'!
PASSED!

!testRun: #MarsRoverTest #test09LeftRotationLookingAtNorthRotateToWest stamp: 'DS 10/24/2020 20:17:26'!
PASSED!

!testRun: #MarsRoverTest #test10LeftRotationLookingAtWestRotateToSouth stamp: 'DS 10/24/2020 20:17:26'!
PASSED!

!testRun: #MarsRoverTest #test11LeftRotationLookingAtSouthRotateToEast stamp: 'DS 10/24/2020 20:17:26'!
PASSED!

!testRun: #MarsRoverTest #test12LeftRotationLookingAtEastRotateToNorth stamp: 'DS 10/24/2020 20:17:26'!
PASSED!

!testRun: #MarsRoverTest #test13RightRotationLookingAtNorthRotateToEast stamp: 'DS 10/24/2020 20:17:26'!
PASSED!

!testRun: #MarsRoverTest #test14RightRotationLookingAtEastRotateToSouth stamp: 'DS 10/24/2020 20:17:26'!
PASSED!

!testRun: #MarsRoverTest #test15RightRotationLookingAtSouthRotateToWest stamp: 'DS 10/24/2020 20:17:26'!
PASSED!

!testRun: #MarsRoverTest #test16RightRotationLookingAtWestRotateToNorth stamp: 'DS 10/24/2020 20:17:26'!
PASSED!

!testRun: #MarsRoverTest #test17TwoForwardsAndOneBackwardWorkAsOneForward stamp: 'DS 10/24/2020 20:17:26'!
PASSED!

!testRun: #MarsRoverTest #test18UnknownCommandStopExecution stamp: 'DS 10/24/2020 20:17:26'!
PASSED!

----SNAPSHOT----(24 October 2020 20:18:07) CuisUniversity-4384.image priorSource: 17839704!

!testRun: #MarsRoverTest #test01ForwardLookingAtNorthAdvanceOnYAxis stamp: 'DS 10/24/2020 20:18:09'!
PASSED!

!testRun: #MarsRoverTest #test02ForwardLookingAtEastAdvanceOnXAxis stamp: 'DS 10/24/2020 20:18:09'!
PASSED!

!testRun: #MarsRoverTest #test03ForwardLookingAtWestBackOnXAxis stamp: 'DS 10/24/2020 20:18:09'!
PASSED!

!testRun: #MarsRoverTest #test04ForwardLookingAtSouthBackOnYAxis stamp: 'DS 10/24/2020 20:18:09'!
PASSED!

!testRun: #MarsRoverTest #test05BackwardLookingAtNorthBackOnYAxis stamp: 'DS 10/24/2020 20:18:09'!
PASSED!

!testRun: #MarsRoverTest #test06BackwardLookingAtEastBackOnXAxis stamp: 'DS 10/24/2020 20:18:09'!
PASSED!

!testRun: #MarsRoverTest #test07BackwardLookingAtWestAdvanceOnXAxis stamp: 'DS 10/24/2020 20:18:09'!
PASSED!

!testRun: #MarsRoverTest #test08BackwardLookingAtSouthAdvanceOnYAxis stamp: 'DS 10/24/2020 20:18:09'!
PASSED!

!testRun: #MarsRoverTest #test09LeftRotationLookingAtNorthRotateToWest stamp: 'DS 10/24/2020 20:18:09'!
PASSED!

!testRun: #MarsRoverTest #test10LeftRotationLookingAtWestRotateToSouth stamp: 'DS 10/24/2020 20:18:09'!
PASSED!

!testRun: #MarsRoverTest #test11LeftRotationLookingAtSouthRotateToEast stamp: 'DS 10/24/2020 20:18:09'!
PASSED!

!testRun: #MarsRoverTest #test12LeftRotationLookingAtEastRotateToNorth stamp: 'DS 10/24/2020 20:18:09'!
PASSED!

!testRun: #MarsRoverTest #test13RightRotationLookingAtNorthRotateToEast stamp: 'DS 10/24/2020 20:18:09'!
PASSED!

!testRun: #MarsRoverTest #test14RightRotationLookingAtEastRotateToSouth stamp: 'DS 10/24/2020 20:18:09'!
PASSED!

!testRun: #MarsRoverTest #test15RightRotationLookingAtSouthRotateToWest stamp: 'DS 10/24/2020 20:18:09'!
PASSED!

!testRun: #MarsRoverTest #test16RightRotationLookingAtWestRotateToNorth stamp: 'DS 10/24/2020 20:18:09'!
PASSED!

!testRun: #MarsRoverTest #test17TwoForwardsAndOneBackwardWorkAsOneForward stamp: 'DS 10/24/2020 20:18:09'!
PASSED!

!testRun: #MarsRoverTest #test18UnknownCommandStopExecution stamp: 'DS 10/24/2020 20:18:09'!
PASSED!
!MarsRoverTest methodsFor: 'forward' stamp: 'DS 10/24/2020 20:18:55' overrides: 16927572!
setUp! !

TestCase subclass: #MarsRoverTest
	instanceVariableNames: 'north east west south'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Solution'!

!classDefinition: #MarsRoverTest category: 'MarsRover-Solution' stamp: 'DS 10/24/2020 20:19:24'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: 'north east west south'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Solution'!
!MarsRoverTest methodsFor: 'setUp' stamp: 'DS 10/24/2020 20:19:51' prior: 50889387 overrides: 16927572!
setUp

	north := #N.
	east := #E.
	west := #W.
	south := #S.! !
!MarsRoverTest methodsFor: 'setUp' stamp: 'DS 10/24/2020 20:20:02' prior: 50889404 overrides: 16927572!
setUp

	north := #N.
	south := #S.
	east := #E.
	west := #W.! !
!MarsRoverTest methodsFor: 'forward' stamp: 'DS 10/24/2020 20:20:12' prior: 50888781!
test01ForwardLookingAtNorthAdvanceOnYAxis

	| aMarsRover aCommandSequence |

	aCommandSequence := 'f'.
	aMarsRover := MarsRover with: 0@0 lookingAt: north.
	aMarsRover execute: aCommandSequence.
	
	self assert: 0@1 = aMarsRover whereAreYou.! !
!MarsRoverTest methodsFor: 'forward' stamp: 'DS 10/24/2020 20:20:18' prior: 50888800!
test02ForwardLookingAtEastAdvanceOnXAxis

	| aMarsRover aCommandSequence |

	aCommandSequence := 'f'.
	aMarsRover := MarsRover with: 0@0 lookingAt: east.
	aMarsRover execute: aCommandSequence.
	
	self assert: 1@0 = aMarsRover whereAreYou.! !
!MarsRoverTest methodsFor: 'forward' stamp: 'DS 10/24/2020 20:20:25' prior: 50888819!
test03ForwardLookingAtWestBackOnXAxis

	| aMarsRover aCommandSequence |

	aCommandSequence := 'f'.
	aMarsRover := MarsRover with: 0@0 lookingAt: west.
	aMarsRover execute: aCommandSequence.
	
	self assert: -1@0 = aMarsRover whereAreYou.! !
!MarsRoverTest methodsFor: 'forward' stamp: 'DS 10/24/2020 20:20:30' prior: 50888838!
test04ForwardLookingAtSouthBackOnYAxis

	| aMarsRover aCommandSequence |

	aCommandSequence := 'f'.
	aMarsRover := MarsRover with: 0@0 lookingAt: south.
	aMarsRover execute: aCommandSequence.
	
	self assert: 0@-1 = aMarsRover whereAreYou.! !
!MarsRoverTest methodsFor: 'backward' stamp: 'DS 10/24/2020 20:20:51' prior: 50888860!
test05BackwardLookingAtNorthBackOnYAxis

	| aMarsRover aCommandSequence |

	aCommandSequence := 'b'.
	aMarsRover := MarsRover with: 0@0 lookingAt: north.
	aMarsRover execute: aCommandSequence.
	
	self assert: 0@-1 = aMarsRover whereAreYou.! !
!MarsRoverTest methodsFor: 'backward' stamp: 'DS 10/24/2020 20:20:56' prior: 50888958!
test06BackwardLookingAtEastBackOnXAxis

	| aMarsRover aCommandSequence |

	aCommandSequence := 'b'.
	aMarsRover := MarsRover with: 0@0 lookingAt: east.
	aMarsRover execute: aCommandSequence.
	
	self assert: -1@0 = aMarsRover whereAreYou.! !
!MarsRoverTest methodsFor: 'backward' stamp: 'DS 10/24/2020 20:21:01' prior: 50888898!
test07BackwardLookingAtWestAdvanceOnXAxis

	| aMarsRover aCommandSequence |

	aCommandSequence := 'b'.
	aMarsRover := MarsRover with: 0@0 lookingAt: west.
	aMarsRover execute: aCommandSequence.
	
	self assert: 1@0 = aMarsRover whereAreYou.! !
!MarsRoverTest methodsFor: 'backward' stamp: 'DS 10/24/2020 20:21:07' prior: 50888936!
test08BackwardLookingAtSouthAdvanceOnYAxis

	| aMarsRover aCommandSequence |

	aCommandSequence := 'b'.
	aMarsRover := MarsRover with: 0@0 lookingAt: south.
	aMarsRover execute: aCommandSequence.
	
	self assert: 0@1 = aMarsRover whereAreYou.! !
!MarsRoverTest methodsFor: 'left rotation' stamp: 'DS 10/24/2020 20:21:15' prior: 50888979!
test09LeftRotationLookingAtNorthRotateToWest

	| aMarsRover aCommandSequence |

	aCommandSequence := 'l'.
	aMarsRover := MarsRover with: 0@0 lookingAt: north.
	aMarsRover execute: aCommandSequence.
	
	self assert: #W = aMarsRover whereAreYouLookingAt.! !
!MarsRoverTest methodsFor: 'left rotation' stamp: 'DS 10/24/2020 20:21:22' prior: 50888999!
test10LeftRotationLookingAtWestRotateToSouth

	| aMarsRover aCommandSequence |

	aCommandSequence := 'l'.
	aMarsRover := MarsRover with: 0@0 lookingAt: west.
	aMarsRover execute: aCommandSequence.
	
	self assert: #S = aMarsRover whereAreYouLookingAt.! !
!MarsRoverTest methodsFor: 'left rotation' stamp: 'DS 10/24/2020 20:21:27' prior: 50889019!
test11LeftRotationLookingAtSouthRotateToEast

	| aMarsRover aCommandSequence |

	aCommandSequence := 'l'.
	aMarsRover := MarsRover with: 0@0 lookingAt: south.
	aMarsRover execute: aCommandSequence.
	
	self assert: #E = aMarsRover whereAreYouLookingAt.! !
!MarsRoverTest methodsFor: 'left rotation' stamp: 'DS 10/24/2020 20:21:31' prior: 50889039!
test12LeftRotationLookingAtEastRotateToNorth

	| aMarsRover aCommandSequence |

	aCommandSequence := 'l'.
	aMarsRover := MarsRover with: 0@0 lookingAt: east.
	aMarsRover execute: aCommandSequence.
	
	self assert: #N = aMarsRover whereAreYouLookingAt.! !
!MarsRoverTest methodsFor: 'left rotation' stamp: 'DS 10/24/2020 20:21:41' prior: 50889536!
test12LeftRotationLookingAtEastRotateToNorth

	| aMarsRover aCommandSequence |

	aCommandSequence := 'l'.
	aMarsRover := MarsRover with: 0@0 lookingAt: east.
	aMarsRover execute: aCommandSequence.
	
	self assert: north = aMarsRover whereAreYouLookingAt.! !
!MarsRoverTest methodsFor: 'left rotation' stamp: 'DS 10/24/2020 20:21:47' prior: 50889525!
test11LeftRotationLookingAtSouthRotateToEast

	| aMarsRover aCommandSequence |

	aCommandSequence := 'l'.
	aMarsRover := MarsRover with: 0@0 lookingAt: south.
	aMarsRover execute: aCommandSequence.
	
	self assert: east = aMarsRover whereAreYouLookingAt.! !
!MarsRoverTest methodsFor: 'left rotation' stamp: 'DS 10/24/2020 20:21:53' prior: 50889514!
test10LeftRotationLookingAtWestRotateToSouth

	| aMarsRover aCommandSequence |

	aCommandSequence := 'l'.
	aMarsRover := MarsRover with: 0@0 lookingAt: west.
	aMarsRover execute: aCommandSequence.
	
	self assert: south = aMarsRover whereAreYouLookingAt.! !
!MarsRoverTest methodsFor: 'left rotation' stamp: 'DS 10/24/2020 20:21:58' prior: 50889503!
test09LeftRotationLookingAtNorthRotateToWest

	| aMarsRover aCommandSequence |

	aCommandSequence := 'l'.
	aMarsRover := MarsRover with: 0@0 lookingAt: north.
	aMarsRover execute: aCommandSequence.
	
	self assert: west = aMarsRover whereAreYouLookingAt.! !
!MarsRoverTest methodsFor: 'right rotation' stamp: 'DS 10/24/2020 20:22:10' prior: 50889062!
test13RightRotationLookingAtNorthRotateToEast

	| aMarsRover aCommandSequence |

	aCommandSequence := 'r'.
	aMarsRover := MarsRover with: 0@0 lookingAt: north.
	aMarsRover execute: aCommandSequence.
	
	self assert: east = aMarsRover whereAreYouLookingAt.! !
!MarsRoverTest methodsFor: 'right rotation' stamp: 'DS 10/24/2020 20:22:28' prior: 50889082!
test14RightRotationLookingAtEastRotateToSouth

	| aMarsRover aCommandSequence |

	aCommandSequence := 'r'.
	aMarsRover := MarsRover with: 0@0 lookingAt: east.
	aMarsRover execute: aCommandSequence.
	
	self assert: south = aMarsRover whereAreYouLookingAt.! !
!MarsRoverTest methodsFor: 'right rotation' stamp: 'DS 10/24/2020 20:22:39' prior: 50889102!
test15RightRotationLookingAtSouthRotateToWest

	| aMarsRover aCommandSequence |

	aCommandSequence := 'r'.
	aMarsRover := MarsRover with: 0@0 lookingAt: south.
	aMarsRover execute: aCommandSequence.
	
	self assert: west = aMarsRover whereAreYouLookingAt.! !
!MarsRoverTest methodsFor: 'right rotation' stamp: 'DS 10/24/2020 20:22:51' prior: 50889122!
test16RightRotationLookingAtWestRotateToNorth

	| aMarsRover aCommandSequence |

	aCommandSequence := 'r'.
	aMarsRover := MarsRover with: 0@0 lookingAt: west.
	aMarsRover execute: aCommandSequence.
	
	self assert: north = aMarsRover whereAreYouLookingAt.! !
!MarsRoverTest methodsFor: 'command sequences' stamp: 'DS 10/24/2020 20:22:58' prior: 50889205!
test17TwoForwardsAndOneBackwardWorkAsOneForward

	| aMarsRover aCommandSequence |

	aCommandSequence := 'ffb'.
	aMarsRover := MarsRover with: 0@0 lookingAt: north.
	aMarsRover execute: aCommandSequence.
	
	self assert: 0@1 = aMarsRover whereAreYou.! !
!MarsRoverTest methodsFor: 'command sequences' stamp: 'DS 10/24/2020 20:23:06' prior: 50889244!
test18UnknownCommandStopExecution

	| aMarsRover aCommandSequence |

	aCommandSequence := 'faf'.
	aMarsRover := MarsRover with: 0@0 lookingAt: north.
	aMarsRover execute: aCommandSequence.
	
	self assert: 0@1 = aMarsRover whereAreYou.
	self assert: north = aMarsRover whereAreYouLookingAt.! !
!MarsRoverTest methodsFor: 'command sequences' stamp: 'DS 10/24/2020 20:23:33' prior: 50889647!
test18UnknownCommandStopExecution

	| aMarsRover aCommandSequence |

	aCommandSequence := 'far'.
	aMarsRover := MarsRover with: 0@0 lookingAt: north.
	aMarsRover execute: aCommandSequence.
	
	self assert: 0@1 = aMarsRover whereAreYou.
	self assert: north = aMarsRover whereAreYouLookingAt.! !

!testRun: #MarsRoverTest #test01ForwardLookingAtNorthAdvanceOnYAxis stamp: 'DS 10/24/2020 20:23:35'!
PASSED!

!testRun: #MarsRoverTest #test02ForwardLookingAtEastAdvanceOnXAxis stamp: 'DS 10/24/2020 20:23:35'!
PASSED!

!testRun: #MarsRoverTest #test03ForwardLookingAtWestBackOnXAxis stamp: 'DS 10/24/2020 20:23:35'!
PASSED!

!testRun: #MarsRoverTest #test04ForwardLookingAtSouthBackOnYAxis stamp: 'DS 10/24/2020 20:23:35'!
PASSED!

!testRun: #MarsRoverTest #test05BackwardLookingAtNorthBackOnYAxis stamp: 'DS 10/24/2020 20:23:35'!
PASSED!

!testRun: #MarsRoverTest #test06BackwardLookingAtEastBackOnXAxis stamp: 'DS 10/24/2020 20:23:35'!
PASSED!

!testRun: #MarsRoverTest #test07BackwardLookingAtWestAdvanceOnXAxis stamp: 'DS 10/24/2020 20:23:35'!
PASSED!

!testRun: #MarsRoverTest #test08BackwardLookingAtSouthAdvanceOnYAxis stamp: 'DS 10/24/2020 20:23:35'!
PASSED!

!testRun: #MarsRoverTest #test09LeftRotationLookingAtNorthRotateToWest stamp: 'DS 10/24/2020 20:23:35'!
PASSED!

!testRun: #MarsRoverTest #test10LeftRotationLookingAtWestRotateToSouth stamp: 'DS 10/24/2020 20:23:35'!
PASSED!

!testRun: #MarsRoverTest #test11LeftRotationLookingAtSouthRotateToEast stamp: 'DS 10/24/2020 20:23:35'!
PASSED!

!testRun: #MarsRoverTest #test12LeftRotationLookingAtEastRotateToNorth stamp: 'DS 10/24/2020 20:23:35'!
PASSED!

!testRun: #MarsRoverTest #test13RightRotationLookingAtNorthRotateToEast stamp: 'DS 10/24/2020 20:23:35'!
PASSED!

!testRun: #MarsRoverTest #test14RightRotationLookingAtEastRotateToSouth stamp: 'DS 10/24/2020 20:23:35'!
PASSED!

!testRun: #MarsRoverTest #test15RightRotationLookingAtSouthRotateToWest stamp: 'DS 10/24/2020 20:23:35'!
PASSED!

!testRun: #MarsRoverTest #test16RightRotationLookingAtWestRotateToNorth stamp: 'DS 10/24/2020 20:23:35'!
PASSED!

!testRun: #MarsRoverTest #test17TwoForwardsAndOneBackwardWorkAsOneForward stamp: 'DS 10/24/2020 20:23:35'!
PASSED!

!testRun: #MarsRoverTest #test18UnknownCommandStopExecution stamp: 'DS 10/24/2020 20:23:35'!
PASSED!

----SNAPSHOT----(24 October 2020 20:23:38) CuisUniversity-4384.image priorSource: 17845454!

Object subclass: #MarsRover
	instanceVariableNames: 'point direction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Solution'!

!classDefinition: #MarsRover category: 'MarsRover-Solution' stamp: 'DS 10/24/2020 20:33:37'!
Object subclass: #MarsRover
	instanceVariableNames: 'point direction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Solution'!

Object subclass: #MarsRover
	instanceVariableNames: 'point cardinalPoint'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Solution'!

!classDefinition: #MarsRover category: 'MarsRover-Solution' stamp: 'DS 10/24/2020 20:34:20'!
Object subclass: #MarsRover
	instanceVariableNames: 'point cardinalPoint'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Solution'!

!classDefinition: #MarsRover category: 'MarsRover-Solution' stamp: 'DS 10/24/2020 20:34:41'!
Object subclass: #MarsRover
	instanceVariableNames: 'point direction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Solution'!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DS 10/24/2020 20:34:41' prior: 50888046!
leftRotation

	direction = #N ifTrue: [^direction := #W].
	direction = #W ifTrue: [^direction := #S].
	direction = #S ifTrue: [^direction := #E].
	direction = #E ifTrue: [^direction := #N].! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DS 10/24/2020 20:34:41' prior: 50888275!
rightRotation

	direction = #N ifTrue: [^direction := #E].
	direction = #E ifTrue: [^direction := #S].
	direction = #S ifTrue: [^direction := #W].
	direction = #W ifTrue: [^direction := #N].! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DS 10/24/2020 20:34:41' prior: 50887762!
backward

	direction = #N 			ifTrue: [point := point + (0@-1)].
	direction = #E 			ifTrue: [point := point + (-1@0)].
	direction = #W 			ifTrue: [point := point + (1@0)].
	direction = #S 			ifTrue: [point := point + (0@1)].! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DS 10/24/2020 20:34:41' prior: 50887515!
forward

	direction = #N 			ifTrue: [point := point + (0@1)].
	direction = #E 			ifTrue: [point := point + (1@0)].
	direction = #W 			ifTrue: [point := point + (-1@0)].
	direction = #S 			ifTrue: [point := point + (0@-1)].! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DS 10/24/2020 20:34:41' prior: 50887097!
whereAreYouLookingAt

	^direction.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DS 10/24/2020 20:34:41' prior: 50887074!
initializeWith: aPoint lookingAt: aCardinalPoint 

	point := aPoint.
	direction := aCardinalPoint.! !

!testRun: #MarsRoverTest #test01ForwardLookingAtNorthAdvanceOnYAxis stamp: 'DS 10/24/2020 20:34:46'!
PASSED!

!testRun: #MarsRoverTest #test02ForwardLookingAtEastAdvanceOnXAxis stamp: 'DS 10/24/2020 20:34:46'!
PASSED!

!testRun: #MarsRoverTest #test03ForwardLookingAtWestBackOnXAxis stamp: 'DS 10/24/2020 20:34:46'!
PASSED!

!testRun: #MarsRoverTest #test04ForwardLookingAtSouthBackOnYAxis stamp: 'DS 10/24/2020 20:34:46'!
PASSED!

!testRun: #MarsRoverTest #test05BackwardLookingAtNorthBackOnYAxis stamp: 'DS 10/24/2020 20:34:46'!
PASSED!

!testRun: #MarsRoverTest #test06BackwardLookingAtEastBackOnXAxis stamp: 'DS 10/24/2020 20:34:46'!
PASSED!

!testRun: #MarsRoverTest #test07BackwardLookingAtWestAdvanceOnXAxis stamp: 'DS 10/24/2020 20:34:46'!
PASSED!

!testRun: #MarsRoverTest #test08BackwardLookingAtSouthAdvanceOnYAxis stamp: 'DS 10/24/2020 20:34:46'!
PASSED!

!testRun: #MarsRoverTest #test09LeftRotationLookingAtNorthRotateToWest stamp: 'DS 10/24/2020 20:34:46'!
PASSED!

!testRun: #MarsRoverTest #test10LeftRotationLookingAtWestRotateToSouth stamp: 'DS 10/24/2020 20:34:46'!
PASSED!

!testRun: #MarsRoverTest #test11LeftRotationLookingAtSouthRotateToEast stamp: 'DS 10/24/2020 20:34:46'!
PASSED!

!testRun: #MarsRoverTest #test12LeftRotationLookingAtEastRotateToNorth stamp: 'DS 10/24/2020 20:34:46'!
PASSED!

!testRun: #MarsRoverTest #test13RightRotationLookingAtNorthRotateToEast stamp: 'DS 10/24/2020 20:34:46'!
PASSED!

!testRun: #MarsRoverTest #test14RightRotationLookingAtEastRotateToSouth stamp: 'DS 10/24/2020 20:34:46'!
PASSED!

!testRun: #MarsRoverTest #test15RightRotationLookingAtSouthRotateToWest stamp: 'DS 10/24/2020 20:34:46'!
PASSED!

!testRun: #MarsRoverTest #test16RightRotationLookingAtWestRotateToNorth stamp: 'DS 10/24/2020 20:34:46'!
PASSED!

!testRun: #MarsRoverTest #test17TwoForwardsAndOneBackwardWorkAsOneForward stamp: 'DS 10/24/2020 20:34:46'!
PASSED!

!testRun: #MarsRoverTest #test18UnknownCommandStopExecution stamp: 'DS 10/24/2020 20:34:46'!
PASSED!

Object subclass: #MarsRoverDirection
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Solution'!

!classDefinition: #MarsRoverDirection category: 'MarsRover-Solution' stamp: 'DS 10/24/2020 20:35:04'!
Object subclass: #MarsRoverDirection
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Solution'!

MarsRoverDirection subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Solution'!

!classDefinition: #North category: 'MarsRover-Solution' stamp: 'DS 10/24/2020 20:35:46'!
MarsRoverDirection subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Solution'!

MarsRoverDirection subclass: #South
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Solution'!

!classDefinition: #South category: 'MarsRover-Solution' stamp: 'DS 10/24/2020 20:35:49'!
MarsRoverDirection subclass: #South
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Solution'!

MarsRoverDirection subclass: #East
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Solution'!

!classDefinition: #East category: 'MarsRover-Solution' stamp: 'DS 10/24/2020 20:35:50'!
MarsRoverDirection subclass: #East
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Solution'!

MarsRoverDirection subclass: #West
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Solution'!

!classDefinition: #West category: 'MarsRover-Solution' stamp: 'DS 10/24/2020 20:35:52'!
MarsRoverDirection subclass: #West
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Solution'!
!MarsRover methodsFor: 'commands' stamp: 'DS 10/24/2020 20:44:48' prior: 50889799!
forward

	point := point + direction xxxforward.

"	direction = #N 			ifTrue: [point := point + (0@1)].
	direction = #E 			ifTrue: [point := point + (1@0)].
	direction = #W 			ifTrue: [point := point + (-1@0)].
	direction = #S 			ifTrue: [point := point + (0@-1)]."! !
!MarsRoverDirection methodsFor: 'no messages' stamp: 'DS 10/24/2020 20:46:53'!
xxxforward

	self subclassResponsibility.! !
!East methodsFor: 'no messages' stamp: 'DS 10/24/2020 20:47:34' overrides: 50889952!
xxxforward

	^1@0.! !
!North methodsFor: 'no messages' stamp: 'DS 10/24/2020 20:47:50' overrides: 50889952!
xxxforward

	^0@1.! !
!South methodsFor: 'no messages' stamp: 'DS 10/24/2020 20:48:08' overrides: 50889952!
xxxforward

	^0@-1.! !
!West methodsFor: 'no messages' stamp: 'DS 10/24/2020 20:48:27' overrides: 50889952!
xxxforward

	^-1@0! !
!West methodsFor: 'as yet unclassified' stamp: 'DS 10/24/2020 20:48:28' prior: 50889969 overrides: 50889952!
xxxforward

	^-1@0.! !
!MarsRover methodsFor: 'commands' stamp: 'DS 10/24/2020 20:49:44' prior: 50889788!
backward

	point := point + direction xxxbackward.

"	direction = #N 			ifTrue: [point := point + (0@-1)].
	direction = #E 			ifTrue: [point := point + (-1@0)].
	direction = #W 			ifTrue: [point := point + (1@0)].
	direction = #S 			ifTrue: [point := point + (0@1)]."! !
!MarsRoverDirection methodsFor: 'as yet unclassified' stamp: 'DS 10/24/2020 20:49:55'!
xxxbackward

	self subclassResponsibility.! !
!East methodsFor: 'as yet unclassified' stamp: 'DS 10/24/2020 20:50:24' overrides: 50889990!
xxxbackward

	^-1@0.! !
!North methodsFor: 'as yet unclassified' stamp: 'DS 10/24/2020 20:50:31' overrides: 50889990!
xxxbackward

	^0@-1.! !
!South methodsFor: 'as yet unclassified' stamp: 'DS 10/24/2020 20:50:39' overrides: 50889990!
xxxbackward

	^0@1.! !
!West methodsFor: 'as yet unclassified' stamp: 'DS 10/24/2020 20:50:50' overrides: 50889990!
xxxbackward

	^1@0.! !
!MarsRover methodsFor: 'commands' stamp: 'DS 10/24/2020 20:52:09' prior: 50889770!
leftRotation

	direction := direction resizeLeft.

"	direction = #N ifTrue: [^direction := #W].
	direction = #W ifTrue: [^direction := #S].
	direction = #S ifTrue: [^direction := #E].
	direction = #E ifTrue: [^direction := #N]."! !
!MarsRover methodsFor: 'commands' stamp: 'DS 10/24/2020 20:52:17' prior: 50890011!
leftRotation

	direction := direction rotateLeft.

"	direction = #N ifTrue: [^direction := #W].
	direction = #W ifTrue: [^direction := #S].
	direction = #S ifTrue: [^direction := #E].
	direction = #E ifTrue: [^direction := #N]."! !
!MarsRover methodsFor: 'commands' stamp: 'DS 10/24/2020 20:52:29' prior: 50890021!
leftRotation

	direction := direction rotateLeft.

"	direction = #N ifTrue: [^direction := #W].
	direction = #W ifTrue: [^direction := #S].
	direction = #S ifTrue: [^direction := #E].
	direction = #E ifTrue: [^direction := #N]."! !
!MarsRoverDirection methodsFor: 'as yet unclassified' stamp: 'DS 10/24/2020 20:53:24'!
rotateLeft

	self subclassResponsibility.! !
!East methodsFor: 'as yet unclassified' stamp: 'DS 10/24/2020 20:53:52' overrides: 50890041!
rotateLeft

	^North new.! !
!East methodsFor: 'as yet unclassified' stamp: 'DS 10/24/2020 20:54:54' prior: 50890046 overrides: 50890041!
rotateLeft

	^North new.! !
!North methodsFor: 'as yet unclassified' stamp: 'DS 10/24/2020 20:55:17' overrides: 50890041!
rotateLeft

	^West new.! !
!South methodsFor: 'as yet unclassified' stamp: 'DS 10/24/2020 20:55:39'!
rotateLet

	^East new.! !
!West methodsFor: 'as yet unclassified' stamp: 'DS 10/24/2020 20:55:51'!
rotateLet

	^South new.! !
!West methodsFor: 'as yet unclassified' stamp: 'DS 10/24/2020 20:55:54' overrides: 50890041!
rotateLeft

	^South new.! !

!methodRemoval: West #rotateLet stamp: 'DS 10/24/2020 20:55:56'!
rotateLet

	^South new.!
!South methodsFor: 'as yet unclassified' stamp: 'DS 10/24/2020 20:56:07' overrides: 50890041!
rotateLeft

	^East new.! !

!methodRemoval: South #rotateLet stamp: 'DS 10/24/2020 20:56:07'!
rotateLet

	^East new.!
!MarsRover methodsFor: 'commands' stamp: 'DS 10/24/2020 20:56:34' prior: 50889779!
rightRotation

	direction := direction rotateRight.

"	direction = #N ifTrue: [^direction := #E].
	direction = #E ifTrue: [^direction := #S].
	direction = #S ifTrue: [^direction := #W].
	direction = #W ifTrue: [^direction := #N]."! !
!MarsRoverDirection methodsFor: 'as yet unclassified' stamp: 'DS 10/24/2020 20:56:44'!
rotateRight

	self subclassResponsibility.! !
!East methodsFor: 'as yet unclassified' stamp: 'DS 10/24/2020 20:57:05' overrides: 50890092!
rotateRight

	^South new.! !
!North methodsFor: 'as yet unclassified' stamp: 'DS 10/24/2020 20:57:19' overrides: 50890092!
rotateRight

	^East new.! !
!South methodsFor: 'as yet unclassified' stamp: 'DS 10/24/2020 20:57:33' overrides: 50890092!
rotateRight

	^West new.! !
!West methodsFor: 'as yet unclassified' stamp: 'DS 10/24/2020 20:57:46' overrides: 50890092!
rotateRight

	^North new.! !

----SNAPSHOT----(24 October 2020 20:57:50) CuisUniversity-4384.image priorSource: 17858670!
!MarsRover class methodsFor: 'instance creation' stamp: 'DS 10/24/2020 20:58:43' prior: 50887044!
with: aPoint lookingAt: aMarsRoverDirection

	^self new initializeWith: aPoint lookingAt: aMarsRoverDirection.! !
!MarsRover methodsFor: 'initialize' stamp: 'DS 10/24/2020 20:58:59' prior: 50889814!
initializeWith: aPoint lookingAt: aMarsRoverDirection

	point := aPoint.
	direction := aMarsRoverDirection.! !
!MarsRoverTest methodsFor: 'setUp' stamp: 'DS 10/24/2020 20:59:26' prior: 50889410 overrides: 16927572!
setUp

	north := North new.
	south := South new.
	east := East new.
	west := West new.! !

!testRun: #MarsRoverTest #test01ForwardLookingAtNorthAdvanceOnYAxis stamp: 'DS 10/24/2020 20:59:33'!
PASSED!

!testRun: #MarsRoverTest #test02ForwardLookingAtEastAdvanceOnXAxis stamp: 'DS 10/24/2020 20:59:33'!
PASSED!

!testRun: #MarsRoverTest #test03ForwardLookingAtWestBackOnXAxis stamp: 'DS 10/24/2020 20:59:33'!
PASSED!

!testRun: #MarsRoverTest #test04ForwardLookingAtSouthBackOnYAxis stamp: 'DS 10/24/2020 20:59:33'!
PASSED!

!testRun: #MarsRoverTest #test05BackwardLookingAtNorthBackOnYAxis stamp: 'DS 10/24/2020 20:59:33'!
PASSED!

!testRun: #MarsRoverTest #test06BackwardLookingAtEastBackOnXAxis stamp: 'DS 10/24/2020 20:59:33'!
PASSED!

!testRun: #MarsRoverTest #test07BackwardLookingAtWestAdvanceOnXAxis stamp: 'DS 10/24/2020 20:59:33'!
PASSED!

!testRun: #MarsRoverTest #test08BackwardLookingAtSouthAdvanceOnYAxis stamp: 'DS 10/24/2020 20:59:33'!
PASSED!

!testRun: #MarsRoverTest #test09LeftRotationLookingAtNorthRotateToWest stamp: 'DS 10/24/2020 20:59:33'!
FAILURE!

!testRun: #MarsRoverTest #test10LeftRotationLookingAtWestRotateToSouth stamp: 'DS 10/24/2020 20:59:33'!
FAILURE!

!testRun: #MarsRoverTest #test11LeftRotationLookingAtSouthRotateToEast stamp: 'DS 10/24/2020 20:59:33'!
FAILURE!

!testRun: #MarsRoverTest #test12LeftRotationLookingAtEastRotateToNorth stamp: 'DS 10/24/2020 20:59:33'!
FAILURE!

!testRun: #MarsRoverTest #test13RightRotationLookingAtNorthRotateToEast stamp: 'DS 10/24/2020 20:59:33'!
FAILURE!

!testRun: #MarsRoverTest #test14RightRotationLookingAtEastRotateToSouth stamp: 'DS 10/24/2020 20:59:33'!
FAILURE!

!testRun: #MarsRoverTest #test15RightRotationLookingAtSouthRotateToWest stamp: 'DS 10/24/2020 20:59:33'!
FAILURE!

!testRun: #MarsRoverTest #test16RightRotationLookingAtWestRotateToNorth stamp: 'DS 10/24/2020 20:59:33'!
FAILURE!

!testRun: #MarsRoverTest #test17TwoForwardsAndOneBackwardWorkAsOneForward stamp: 'DS 10/24/2020 20:59:33'!
PASSED!

!testRun: #MarsRoverTest #test18UnknownCommandStopExecution stamp: 'DS 10/24/2020 20:59:33'!
PASSED!

!testRun: #MarsRoverTest #test01ForwardLookingAtNorthAdvanceOnYAxis stamp: 'DS 10/24/2020 21:00:13'!
PASSED!

!testRun: #MarsRoverTest #test02ForwardLookingAtEastAdvanceOnXAxis stamp: 'DS 10/24/2020 21:00:13'!
PASSED!

!testRun: #MarsRoverTest #test03ForwardLookingAtWestBackOnXAxis stamp: 'DS 10/24/2020 21:00:13'!
PASSED!

!testRun: #MarsRoverTest #test04ForwardLookingAtSouthBackOnYAxis stamp: 'DS 10/24/2020 21:00:13'!
PASSED!

!testRun: #MarsRoverTest #test05BackwardLookingAtNorthBackOnYAxis stamp: 'DS 10/24/2020 21:00:13'!
PASSED!

!testRun: #MarsRoverTest #test06BackwardLookingAtEastBackOnXAxis stamp: 'DS 10/24/2020 21:00:13'!
PASSED!

!testRun: #MarsRoverTest #test07BackwardLookingAtWestAdvanceOnXAxis stamp: 'DS 10/24/2020 21:00:13'!
PASSED!

!testRun: #MarsRoverTest #test08BackwardLookingAtSouthAdvanceOnYAxis stamp: 'DS 10/24/2020 21:00:13'!
PASSED!

!testRun: #MarsRoverTest #test09LeftRotationLookingAtNorthRotateToWest stamp: 'DS 10/24/2020 21:00:13'!
FAILURE!

!testRun: #MarsRoverTest #test10LeftRotationLookingAtWestRotateToSouth stamp: 'DS 10/24/2020 21:00:13'!
FAILURE!

!testRun: #MarsRoverTest #test11LeftRotationLookingAtSouthRotateToEast stamp: 'DS 10/24/2020 21:00:13'!
FAILURE!

!testRun: #MarsRoverTest #test12LeftRotationLookingAtEastRotateToNorth stamp: 'DS 10/24/2020 21:00:13'!
FAILURE!

!testRun: #MarsRoverTest #test13RightRotationLookingAtNorthRotateToEast stamp: 'DS 10/24/2020 21:00:13'!
FAILURE!

!testRun: #MarsRoverTest #test14RightRotationLookingAtEastRotateToSouth stamp: 'DS 10/24/2020 21:00:13'!
FAILURE!

!testRun: #MarsRoverTest #test15RightRotationLookingAtSouthRotateToWest stamp: 'DS 10/24/2020 21:00:13'!
FAILURE!

!testRun: #MarsRoverTest #test16RightRotationLookingAtWestRotateToNorth stamp: 'DS 10/24/2020 21:00:13'!
FAILURE!

!testRun: #MarsRoverTest #test17TwoForwardsAndOneBackwardWorkAsOneForward stamp: 'DS 10/24/2020 21:00:13'!
PASSED!

!testRun: #MarsRoverTest #test18UnknownCommandStopExecution stamp: 'DS 10/24/2020 21:00:13'!
PASSED!

!testRun: #MarsRoverTest #test09LeftRotationLookingAtNorthRotateToWest stamp: 'DS 10/24/2020 21:00:15'!
FAILURE!

!testRun: #MarsRoverTest #test09LeftRotationLookingAtNorthRotateToWest stamp: 'DS 10/24/2020 21:00:23'!
FAILURE!

!testRun: #MarsRoverTest #test09LeftRotationLookingAtNorthRotateToWest stamp: 'DS 10/24/2020 21:04:36'!
FAILURE!

!testRun: #MarsRoverTest #test10LeftRotationLookingAtWestRotateToSouth stamp: 'DS 10/24/2020 21:04:36'!
FAILURE!

!testRun: #MarsRoverTest #test11LeftRotationLookingAtSouthRotateToEast stamp: 'DS 10/24/2020 21:04:36'!
FAILURE!

!testRun: #MarsRoverTest #test12LeftRotationLookingAtEastRotateToNorth stamp: 'DS 10/24/2020 21:04:36'!
FAILURE!

!testRun: #MarsRoverTest #test09LeftRotationLookingAtNorthRotateToWest stamp: 'DS 10/24/2020 21:04:45'!
FAILURE!

aMarsRover whereAreYouLookingAt!

west!

west = aMarsRover whereAreYouLookingAt!

!testRun: #MarsRoverTest #test01ForwardLookingAtNorthAdvanceOnYAxis stamp: 'DS 10/24/2020 21:06:05'!
PASSED!

!testRun: #MarsRoverTest #test02ForwardLookingAtEastAdvanceOnXAxis stamp: 'DS 10/24/2020 21:06:05'!
PASSED!

!testRun: #MarsRoverTest #test03ForwardLookingAtWestBackOnXAxis stamp: 'DS 10/24/2020 21:06:05'!
PASSED!

!testRun: #MarsRoverTest #test04ForwardLookingAtSouthBackOnYAxis stamp: 'DS 10/24/2020 21:06:05'!
PASSED!

!testRun: #MarsRoverTest #test05BackwardLookingAtNorthBackOnYAxis stamp: 'DS 10/24/2020 21:06:05'!
PASSED!

!testRun: #MarsRoverTest #test06BackwardLookingAtEastBackOnXAxis stamp: 'DS 10/24/2020 21:06:05'!
PASSED!

!testRun: #MarsRoverTest #test07BackwardLookingAtWestAdvanceOnXAxis stamp: 'DS 10/24/2020 21:06:05'!
PASSED!

!testRun: #MarsRoverTest #test08BackwardLookingAtSouthAdvanceOnYAxis stamp: 'DS 10/24/2020 21:06:05'!
PASSED!

!testRun: #MarsRoverTest #test09LeftRotationLookingAtNorthRotateToWest stamp: 'DS 10/24/2020 21:06:05'!
FAILURE!

!testRun: #MarsRoverTest #test10LeftRotationLookingAtWestRotateToSouth stamp: 'DS 10/24/2020 21:06:05'!
FAILURE!

!testRun: #MarsRoverTest #test11LeftRotationLookingAtSouthRotateToEast stamp: 'DS 10/24/2020 21:06:05'!
FAILURE!

!testRun: #MarsRoverTest #test12LeftRotationLookingAtEastRotateToNorth stamp: 'DS 10/24/2020 21:06:05'!
FAILURE!

!testRun: #MarsRoverTest #test13RightRotationLookingAtNorthRotateToEast stamp: 'DS 10/24/2020 21:06:05'!
FAILURE!

!testRun: #MarsRoverTest #test14RightRotationLookingAtEastRotateToSouth stamp: 'DS 10/24/2020 21:06:05'!
FAILURE!

!testRun: #MarsRoverTest #test15RightRotationLookingAtSouthRotateToWest stamp: 'DS 10/24/2020 21:06:05'!
FAILURE!

!testRun: #MarsRoverTest #test16RightRotationLookingAtWestRotateToNorth stamp: 'DS 10/24/2020 21:06:05'!
FAILURE!

!testRun: #MarsRoverTest #test17TwoForwardsAndOneBackwardWorkAsOneForward stamp: 'DS 10/24/2020 21:06:05'!
PASSED!

!testRun: #MarsRoverTest #test18UnknownCommandStopExecution stamp: 'DS 10/24/2020 21:06:05'!
PASSED!

!testRun: #MarsRoverTest #test09LeftRotationLookingAtNorthRotateToWest stamp: 'DS 10/24/2020 21:06:07'!
FAILURE!

!testRun: #MarsRoverTest #test01ForwardLookingAtNorthAdvanceOnYAxis stamp: 'DS 10/24/2020 21:09:27'!
PASSED!

!testRun: #MarsRoverTest #test02ForwardLookingAtEastAdvanceOnXAxis stamp: 'DS 10/24/2020 21:09:27'!
PASSED!

!testRun: #MarsRoverTest #test03ForwardLookingAtWestBackOnXAxis stamp: 'DS 10/24/2020 21:09:27'!
PASSED!

!testRun: #MarsRoverTest #test04ForwardLookingAtSouthBackOnYAxis stamp: 'DS 10/24/2020 21:09:27'!
PASSED!

!testRun: #MarsRoverTest #test05BackwardLookingAtNorthBackOnYAxis stamp: 'DS 10/24/2020 21:09:27'!
PASSED!

!testRun: #MarsRoverTest #test06BackwardLookingAtEastBackOnXAxis stamp: 'DS 10/24/2020 21:09:27'!
PASSED!

!testRun: #MarsRoverTest #test07BackwardLookingAtWestAdvanceOnXAxis stamp: 'DS 10/24/2020 21:09:27'!
PASSED!

!testRun: #MarsRoverTest #test08BackwardLookingAtSouthAdvanceOnYAxis stamp: 'DS 10/24/2020 21:09:27'!
PASSED!

!testRun: #MarsRoverTest #test09LeftRotationLookingAtNorthRotateToWest stamp: 'DS 10/24/2020 21:09:27'!
FAILURE!

!testRun: #MarsRoverTest #test10LeftRotationLookingAtWestRotateToSouth stamp: 'DS 10/24/2020 21:09:27'!
FAILURE!

!testRun: #MarsRoverTest #test11LeftRotationLookingAtSouthRotateToEast stamp: 'DS 10/24/2020 21:09:27'!
FAILURE!

!testRun: #MarsRoverTest #test12LeftRotationLookingAtEastRotateToNorth stamp: 'DS 10/24/2020 21:09:27'!
FAILURE!

!testRun: #MarsRoverTest #test13RightRotationLookingAtNorthRotateToEast stamp: 'DS 10/24/2020 21:09:27'!
FAILURE!

!testRun: #MarsRoverTest #test14RightRotationLookingAtEastRotateToSouth stamp: 'DS 10/24/2020 21:09:27'!
FAILURE!

!testRun: #MarsRoverTest #test15RightRotationLookingAtSouthRotateToWest stamp: 'DS 10/24/2020 21:09:27'!
FAILURE!

!testRun: #MarsRoverTest #test16RightRotationLookingAtWestRotateToNorth stamp: 'DS 10/24/2020 21:09:27'!
FAILURE!

!testRun: #MarsRoverTest #test17TwoForwardsAndOneBackwardWorkAsOneForward stamp: 'DS 10/24/2020 21:09:27'!
PASSED!

!testRun: #MarsRoverTest #test18UnknownCommandStopExecution stamp: 'DS 10/24/2020 21:09:27'!
PASSED!

!testRun: #MarsRoverTest #test09LeftRotationLookingAtNorthRotateToWest stamp: 'DS 10/24/2020 21:09:29'!
FAILURE!

aMarsRover whereAreYouLookingAt!

west!

self = West new.!

self !

self.!

self.!

self rotateLeft !

----QUIT----(24 October 2020 21:11:45) CuisUniversity-4384.image priorSource: 17870780!

----STARTUP---- (24 October 2020 21:51:18) as /mnt/sdb5/Ingenieria1/CuisUniversity/CuisUniversity-4384.image!


west := West new.!

west2 := West new.!

west = west2.!
!MarsRoverDirection methodsFor: 'as yet unclassified' stamp: 'DS 10/24/2020 21:52:25' overrides: 16881029!
= aMarsRoverDirection

	^self class = aMarsRoverDirection class.! !

!testRun: #MarsRoverTest #test01ForwardLookingAtNorthAdvanceOnYAxis stamp: 'DS 10/24/2020 21:52:29'!
PASSED!

!testRun: #MarsRoverTest #test02ForwardLookingAtEastAdvanceOnXAxis stamp: 'DS 10/24/2020 21:52:29'!
PASSED!

!testRun: #MarsRoverTest #test03ForwardLookingAtWestBackOnXAxis stamp: 'DS 10/24/2020 21:52:29'!
PASSED!

!testRun: #MarsRoverTest #test04ForwardLookingAtSouthBackOnYAxis stamp: 'DS 10/24/2020 21:52:29'!
PASSED!

!testRun: #MarsRoverTest #test05BackwardLookingAtNorthBackOnYAxis stamp: 'DS 10/24/2020 21:52:29'!
PASSED!

!testRun: #MarsRoverTest #test06BackwardLookingAtEastBackOnXAxis stamp: 'DS 10/24/2020 21:52:29'!
PASSED!

!testRun: #MarsRoverTest #test07BackwardLookingAtWestAdvanceOnXAxis stamp: 'DS 10/24/2020 21:52:29'!
PASSED!

!testRun: #MarsRoverTest #test08BackwardLookingAtSouthAdvanceOnYAxis stamp: 'DS 10/24/2020 21:52:29'!
PASSED!

!testRun: #MarsRoverTest #test09LeftRotationLookingAtNorthRotateToWest stamp: 'DS 10/24/2020 21:52:29'!
PASSED!

!testRun: #MarsRoverTest #test10LeftRotationLookingAtWestRotateToSouth stamp: 'DS 10/24/2020 21:52:29'!
PASSED!

!testRun: #MarsRoverTest #test11LeftRotationLookingAtSouthRotateToEast stamp: 'DS 10/24/2020 21:52:29'!
PASSED!

!testRun: #MarsRoverTest #test12LeftRotationLookingAtEastRotateToNorth stamp: 'DS 10/24/2020 21:52:29'!
PASSED!

!testRun: #MarsRoverTest #test13RightRotationLookingAtNorthRotateToEast stamp: 'DS 10/24/2020 21:52:29'!
PASSED!

!testRun: #MarsRoverTest #test14RightRotationLookingAtEastRotateToSouth stamp: 'DS 10/24/2020 21:52:29'!
PASSED!

!testRun: #MarsRoverTest #test15RightRotationLookingAtSouthRotateToWest stamp: 'DS 10/24/2020 21:52:29'!
PASSED!

!testRun: #MarsRoverTest #test16RightRotationLookingAtWestRotateToNorth stamp: 'DS 10/24/2020 21:52:29'!
PASSED!

!testRun: #MarsRoverTest #test17TwoForwardsAndOneBackwardWorkAsOneForward stamp: 'DS 10/24/2020 21:52:29'!
PASSED!

!testRun: #MarsRoverTest #test18UnknownCommandStopExecution stamp: 'DS 10/24/2020 21:52:29'!
PASSED!

west = west2. !

east := East new.!

east = west.!

----SNAPSHOT----(24 October 2020 21:53:04) CuisUniversity-4384.image priorSource: 17880732!
!MarsRover methodsFor: 'commands' stamp: 'DS 10/24/2020 21:54:20' prior: 50889941!
forward

	point := point + direction asPointToAdvance.

"	direction = #N 			ifTrue: [point := point + (0@1)].
	direction = #E 			ifTrue: [point := point + (1@0)].
	direction = #W 			ifTrue: [point := point + (-1@0)].
	direction = #S 			ifTrue: [point := point + (0@-1)]."! !
!MarsRover methodsFor: 'commands' stamp: 'DS 10/24/2020 21:54:24' prior: 50890505!
forward

	point := point + direction asPointToAdvance.! !
!South methodsFor: 'as yet unclassified' stamp: 'DS 10/24/2020 21:54:39'!
asPointToAdvance

	^0@-1.! !
!East methodsFor: 'as yet unclassified' stamp: 'DS 10/24/2020 21:54:39'!
asPointToAdvance

	^1@0.! !
!West methodsFor: 'as yet unclassified' stamp: 'DS 10/24/2020 21:54:39'!
asPointToAdvance

	^-1@0.! !
!MarsRoverDirection methodsFor: 'as yet unclassified' stamp: 'DS 10/24/2020 21:54:39'!
asPointToAdvance

	self subclassResponsibility.! !
!North methodsFor: 'as yet unclassified' stamp: 'DS 10/24/2020 21:54:39' overrides: 50890534!
asPointToAdvance

	^0@1.! !

!methodRemoval: South #xxxforward stamp: 'DS 10/24/2020 21:54:39'!
xxxforward

	^0@-1.!

!methodRemoval: East #xxxforward stamp: 'DS 10/24/2020 21:54:39'!
xxxforward

	^1@0.!

!methodRemoval: West #xxxforward stamp: 'DS 10/24/2020 21:54:39'!
xxxforward

	^-1@0.!

!methodRemoval: MarsRoverDirection #xxxforward stamp: 'DS 10/24/2020 21:54:39'!
xxxforward

	self subclassResponsibility.!

!methodRemoval: North #xxxforward stamp: 'DS 10/24/2020 21:54:39'!
xxxforward

	^0@1.!
!MarsRover methodsFor: 'commands' stamp: 'DS 10/24/2020 21:54:55' prior: 50889978!
backward

	point := point + direction asPointToBack.! !
!West methodsFor: 'as yet unclassified' stamp: 'DS 10/24/2020 21:55:09'!
asPointToBack

	^1@0.! !
!East methodsFor: 'as yet unclassified' stamp: 'DS 10/24/2020 21:55:09'!
asPointToBack

	^-1@0.! !
!North methodsFor: 'as yet unclassified' stamp: 'DS 10/24/2020 21:55:09'!
asPointToBack

	^0@-1.! !
!MarsRoverDirection methodsFor: 'as yet unclassified' stamp: 'DS 10/24/2020 21:55:09'!
asPointToBack

	self subclassResponsibility.! !
!South methodsFor: 'as yet unclassified' stamp: 'DS 10/24/2020 21:55:09' overrides: 50890575!
asPointToBack

	^0@1.! !

!methodRemoval: West #xxxbackward stamp: 'DS 10/24/2020 21:55:09'!
xxxbackward

	^1@0.!

!methodRemoval: East #xxxbackward stamp: 'DS 10/24/2020 21:55:09'!
xxxbackward

	^-1@0.!

!methodRemoval: North #xxxbackward stamp: 'DS 10/24/2020 21:55:09'!
xxxbackward

	^0@-1.!

!methodRemoval: MarsRoverDirection #xxxbackward stamp: 'DS 10/24/2020 21:55:09'!
xxxbackward

	self subclassResponsibility.!

!methodRemoval: South #xxxbackward stamp: 'DS 10/24/2020 21:55:09'!
xxxbackward

	^0@1.!

----SNAPSHOT----(24 October 2020 21:59:46) CuisUniversity-4384.image priorSource: 17883233!

!testRun: #MarsRoverTest #test01ForwardLookingAtNorthAdvanceOnYAxis stamp: 'DS 10/24/2020 21:59:48'!
PASSED!

!testRun: #MarsRoverTest #test02ForwardLookingAtEastAdvanceOnXAxis stamp: 'DS 10/24/2020 21:59:48'!
PASSED!

!testRun: #MarsRoverTest #test03ForwardLookingAtWestBackOnXAxis stamp: 'DS 10/24/2020 21:59:48'!
PASSED!

!testRun: #MarsRoverTest #test04ForwardLookingAtSouthBackOnYAxis stamp: 'DS 10/24/2020 21:59:48'!
PASSED!

!testRun: #MarsRoverTest #test05BackwardLookingAtNorthBackOnYAxis stamp: 'DS 10/24/2020 21:59:48'!
PASSED!

!testRun: #MarsRoverTest #test06BackwardLookingAtEastBackOnXAxis stamp: 'DS 10/24/2020 21:59:48'!
PASSED!

!testRun: #MarsRoverTest #test07BackwardLookingAtWestAdvanceOnXAxis stamp: 'DS 10/24/2020 21:59:48'!
PASSED!

!testRun: #MarsRoverTest #test08BackwardLookingAtSouthAdvanceOnYAxis stamp: 'DS 10/24/2020 21:59:48'!
PASSED!

!testRun: #MarsRoverTest #test09LeftRotationLookingAtNorthRotateToWest stamp: 'DS 10/24/2020 21:59:48'!
PASSED!

!testRun: #MarsRoverTest #test10LeftRotationLookingAtWestRotateToSouth stamp: 'DS 10/24/2020 21:59:48'!
PASSED!

!testRun: #MarsRoverTest #test11LeftRotationLookingAtSouthRotateToEast stamp: 'DS 10/24/2020 21:59:48'!
PASSED!

!testRun: #MarsRoverTest #test12LeftRotationLookingAtEastRotateToNorth stamp: 'DS 10/24/2020 21:59:48'!
PASSED!

!testRun: #MarsRoverTest #test13RightRotationLookingAtNorthRotateToEast stamp: 'DS 10/24/2020 21:59:48'!
PASSED!

!testRun: #MarsRoverTest #test14RightRotationLookingAtEastRotateToSouth stamp: 'DS 10/24/2020 21:59:48'!
PASSED!

!testRun: #MarsRoverTest #test15RightRotationLookingAtSouthRotateToWest stamp: 'DS 10/24/2020 21:59:48'!
PASSED!

!testRun: #MarsRoverTest #test16RightRotationLookingAtWestRotateToNorth stamp: 'DS 10/24/2020 21:59:48'!
PASSED!

!testRun: #MarsRoverTest #test17TwoForwardsAndOneBackwardWorkAsOneForward stamp: 'DS 10/24/2020 21:59:48'!
PASSED!

!testRun: #MarsRoverTest #test18UnknownCommandStopExecution stamp: 'DS 10/24/2020 21:59:48'!
PASSED!
!MarsRover methodsFor: 'commands' stamp: 'DS 10/24/2020 22:00:00' prior: 50890031!
leftRotation

	direction := direction rotateLeft.! !
!MarsRover methodsFor: 'commands' stamp: 'DS 10/24/2020 22:00:05' prior: 50890081!
rightRotation

	direction := direction rotateRight.! !

----SNAPSHOT----(24 October 2020 22:00:12) CuisUniversity-4384.image priorSource: 17886334!
!MarsRoverTest methodsFor: 'forward' stamp: 'DS 10/24/2020 22:26:46' prior: 50889415!
test01ForwardLookingAtNorthAdvanceOnYAxis

	| aMarsRover aCommandSequence |

	aCommandSequence := 'f'.
	aMarsRover := MarsRover with: 0@0 lookingAt: north.
	aMarsRover execute: aCommandSequence.
	
	self assert: 0@1 equals: aMarsRover whereAreYou.! !
!MarsRoverTest methodsFor: 'forward' stamp: 'DS 10/24/2020 22:26:55' prior: 50889426!
test02ForwardLookingAtEastAdvanceOnXAxis

	| aMarsRover aCommandSequence |

	aCommandSequence := 'f'.
	aMarsRover := MarsRover with: 0@0 lookingAt: east.
	aMarsRover execute: aCommandSequence.
	
	self assert: 1@0 equals: aMarsRover whereAreYou.! !

!testRun: #MarsRoverTest #test02ForwardLookingAtEastAdvanceOnXAxis stamp: 'DS 10/24/2020 22:26:57'!
PASSED!

!testRun: #MarsRoverTest #test01ForwardLookingAtNorthAdvanceOnYAxis stamp: 'DS 10/24/2020 22:26:57'!
PASSED!

!testRun: #MarsRoverTest #test02ForwardLookingAtEastAdvanceOnXAxis stamp: 'DS 10/24/2020 22:26:57'!
PASSED!

!testRun: #MarsRoverTest #test03ForwardLookingAtWestBackOnXAxis stamp: 'DS 10/24/2020 22:26:57'!
PASSED!

!testRun: #MarsRoverTest #test04ForwardLookingAtSouthBackOnYAxis stamp: 'DS 10/24/2020 22:26:57'!
PASSED!

!testRun: #MarsRoverTest #test05BackwardLookingAtNorthBackOnYAxis stamp: 'DS 10/24/2020 22:26:57'!
PASSED!

!testRun: #MarsRoverTest #test06BackwardLookingAtEastBackOnXAxis stamp: 'DS 10/24/2020 22:26:57'!
PASSED!

!testRun: #MarsRoverTest #test07BackwardLookingAtWestAdvanceOnXAxis stamp: 'DS 10/24/2020 22:26:57'!
PASSED!

!testRun: #MarsRoverTest #test08BackwardLookingAtSouthAdvanceOnYAxis stamp: 'DS 10/24/2020 22:26:57'!
PASSED!

!testRun: #MarsRoverTest #test09LeftRotationLookingAtNorthRotateToWest stamp: 'DS 10/24/2020 22:26:57'!
PASSED!

!testRun: #MarsRoverTest #test10LeftRotationLookingAtWestRotateToSouth stamp: 'DS 10/24/2020 22:26:57'!
PASSED!

!testRun: #MarsRoverTest #test11LeftRotationLookingAtSouthRotateToEast stamp: 'DS 10/24/2020 22:26:57'!
PASSED!

!testRun: #MarsRoverTest #test12LeftRotationLookingAtEastRotateToNorth stamp: 'DS 10/24/2020 22:26:57'!
PASSED!

!testRun: #MarsRoverTest #test13RightRotationLookingAtNorthRotateToEast stamp: 'DS 10/24/2020 22:26:57'!
PASSED!

!testRun: #MarsRoverTest #test14RightRotationLookingAtEastRotateToSouth stamp: 'DS 10/24/2020 22:26:57'!
PASSED!

!testRun: #MarsRoverTest #test15RightRotationLookingAtSouthRotateToWest stamp: 'DS 10/24/2020 22:26:57'!
PASSED!

!testRun: #MarsRoverTest #test16RightRotationLookingAtWestRotateToNorth stamp: 'DS 10/24/2020 22:26:57'!
PASSED!

!testRun: #MarsRoverTest #test17TwoForwardsAndOneBackwardWorkAsOneForward stamp: 'DS 10/24/2020 22:26:57'!
PASSED!

!testRun: #MarsRoverTest #test18UnknownCommandStopExecution stamp: 'DS 10/24/2020 22:26:57'!
PASSED!

!testRun: #MarsRoverTest #test02ForwardLookingAtEastAdvanceOnXAxis stamp: 'DS 10/24/2020 22:27:02'!
PASSED!

!testRun: #MarsRoverTest #test01ForwardLookingAtNorthAdvanceOnYAxis stamp: 'DS 10/24/2020 22:27:02'!
PASSED!

!testRun: #MarsRoverTest #test02ForwardLookingAtEastAdvanceOnXAxis stamp: 'DS 10/24/2020 22:27:02'!
PASSED!

!testRun: #MarsRoverTest #test03ForwardLookingAtWestBackOnXAxis stamp: 'DS 10/24/2020 22:27:02'!
PASSED!

!testRun: #MarsRoverTest #test04ForwardLookingAtSouthBackOnYAxis stamp: 'DS 10/24/2020 22:27:02'!
PASSED!

!testRun: #MarsRoverTest #test05BackwardLookingAtNorthBackOnYAxis stamp: 'DS 10/24/2020 22:27:02'!
PASSED!

!testRun: #MarsRoverTest #test06BackwardLookingAtEastBackOnXAxis stamp: 'DS 10/24/2020 22:27:02'!
PASSED!

!testRun: #MarsRoverTest #test07BackwardLookingAtWestAdvanceOnXAxis stamp: 'DS 10/24/2020 22:27:02'!
PASSED!

!testRun: #MarsRoverTest #test08BackwardLookingAtSouthAdvanceOnYAxis stamp: 'DS 10/24/2020 22:27:02'!
PASSED!

!testRun: #MarsRoverTest #test09LeftRotationLookingAtNorthRotateToWest stamp: 'DS 10/24/2020 22:27:02'!
PASSED!

!testRun: #MarsRoverTest #test10LeftRotationLookingAtWestRotateToSouth stamp: 'DS 10/24/2020 22:27:02'!
PASSED!

!testRun: #MarsRoverTest #test11LeftRotationLookingAtSouthRotateToEast stamp: 'DS 10/24/2020 22:27:02'!
PASSED!

!testRun: #MarsRoverTest #test12LeftRotationLookingAtEastRotateToNorth stamp: 'DS 10/24/2020 22:27:02'!
PASSED!

!testRun: #MarsRoverTest #test13RightRotationLookingAtNorthRotateToEast stamp: 'DS 10/24/2020 22:27:02'!
PASSED!

!testRun: #MarsRoverTest #test14RightRotationLookingAtEastRotateToSouth stamp: 'DS 10/24/2020 22:27:02'!
PASSED!

!testRun: #MarsRoverTest #test15RightRotationLookingAtSouthRotateToWest stamp: 'DS 10/24/2020 22:27:02'!
PASSED!

!testRun: #MarsRoverTest #test16RightRotationLookingAtWestRotateToNorth stamp: 'DS 10/24/2020 22:27:02'!
PASSED!

!testRun: #MarsRoverTest #test17TwoForwardsAndOneBackwardWorkAsOneForward stamp: 'DS 10/24/2020 22:27:02'!
PASSED!

!testRun: #MarsRoverTest #test18UnknownCommandStopExecution stamp: 'DS 10/24/2020 22:27:02'!
PASSED!
!MarsRoverTest methodsFor: 'forward' stamp: 'DS 10/24/2020 22:27:12' prior: 50889437!
test03ForwardLookingAtWestBackOnXAxis

	| aMarsRover aCommandSequence |

	aCommandSequence := 'f'.
	aMarsRover := MarsRover with: 0@0 lookingAt: west.
	aMarsRover execute: aCommandSequence.
	
	self assert: -1@0 equals: aMarsRover whereAreYou.! !
!MarsRoverTest methodsFor: 'forward' stamp: 'DS 10/24/2020 22:27:21' prior: 50889448!
test04ForwardLookingAtSouthBackOnYAxis

	| aMarsRover aCommandSequence |

	aCommandSequence := 'f'.
	aMarsRover := MarsRover with: 0@0 lookingAt: south.
	aMarsRover execute: aCommandSequence.
	
	self assert: 0@-1 equals: aMarsRover whereAreYou.! !
!MarsRoverTest methodsFor: 'backward' stamp: 'DS 10/24/2020 22:27:29' prior: 50889459!
test05BackwardLookingAtNorthBackOnYAxis

	| aMarsRover aCommandSequence |

	aCommandSequence := 'b'.
	aMarsRover := MarsRover with: 0@0 lookingAt: north.
	aMarsRover execute: aCommandSequence.
	
	self assert: 0@-1 equals: aMarsRover whereAreYou.! !
!MarsRoverTest methodsFor: 'backward' stamp: 'DS 10/24/2020 22:27:36' prior: 50889470!
test06BackwardLookingAtEastBackOnXAxis

	| aMarsRover aCommandSequence |

	aCommandSequence := 'b'.
	aMarsRover := MarsRover with: 0@0 lookingAt: east.
	aMarsRover execute: aCommandSequence.
	
	self assert: -1@0 equals: aMarsRover whereAreYou.! !
!MarsRoverTest methodsFor: 'backward' stamp: 'DS 10/24/2020 22:27:42' prior: 50889481!
test07BackwardLookingAtWestAdvanceOnXAxis

	| aMarsRover aCommandSequence |

	aCommandSequence := 'b'.
	aMarsRover := MarsRover with: 0@0 lookingAt: west.
	aMarsRover execute: aCommandSequence.
	
	self assert: 1@0 equals: aMarsRover whereAreYou.! !
!MarsRoverTest methodsFor: 'backward' stamp: 'DS 10/24/2020 22:27:46' prior: 50889492!
test08BackwardLookingAtSouthAdvanceOnYAxis

	| aMarsRover aCommandSequence |

	aCommandSequence := 'b'.
	aMarsRover := MarsRover with: 0@0 lookingAt: south.
	aMarsRover execute: aCommandSequence.
	
	self assert: 0@1 equals: aMarsRover whereAreYou.! !
!MarsRoverTest methodsFor: 'left rotation' stamp: 'DS 10/24/2020 22:27:54' prior: 50889580!
test09LeftRotationLookingAtNorthRotateToWest

	| aMarsRover aCommandSequence |

	aCommandSequence := 'l'.
	aMarsRover := MarsRover with: 0@0 lookingAt: north.
	aMarsRover execute: aCommandSequence.
	
	self assert: west equals: aMarsRover whereAreYouLookingAt.! !
!MarsRoverTest methodsFor: 'left rotation' stamp: 'DS 10/24/2020 22:28:00' prior: 50889569!
test10LeftRotationLookingAtWestRotateToSouth

	| aMarsRover aCommandSequence |

	aCommandSequence := 'l'.
	aMarsRover := MarsRover with: 0@0 lookingAt: west.
	aMarsRover execute: aCommandSequence.
	
	self assert: south equals: aMarsRover whereAreYouLookingAt.! !
!MarsRoverTest methodsFor: 'left rotation' stamp: 'DS 10/24/2020 22:28:04' prior: 50889558!
test11LeftRotationLookingAtSouthRotateToEast

	| aMarsRover aCommandSequence |

	aCommandSequence := 'l'.
	aMarsRover := MarsRover with: 0@0 lookingAt: south.
	aMarsRover execute: aCommandSequence.
	
	self assert: east equals: aMarsRover whereAreYouLookingAt.! !
!MarsRoverTest methodsFor: 'left rotation' stamp: 'DS 10/24/2020 22:28:09' prior: 50889547!
test12LeftRotationLookingAtEastRotateToNorth

	| aMarsRover aCommandSequence |

	aCommandSequence := 'l'.
	aMarsRover := MarsRover with: 0@0 lookingAt: east.
	aMarsRover execute: aCommandSequence.
	
	self assert: north equals: aMarsRover whereAreYouLookingAt.! !
!MarsRoverTest methodsFor: 'right rotation' stamp: 'DS 10/24/2020 22:28:15' prior: 50889591!
test13RightRotationLookingAtNorthRotateToEast

	| aMarsRover aCommandSequence |

	aCommandSequence := 'r'.
	aMarsRover := MarsRover with: 0@0 lookingAt: north.
	aMarsRover execute: aCommandSequence.
	
	self assert: east equals: aMarsRover whereAreYouLookingAt.! !
!MarsRoverTest methodsFor: 'right rotation' stamp: 'DS 10/24/2020 22:28:20' prior: 50889602!
test14RightRotationLookingAtEastRotateToSouth

	| aMarsRover aCommandSequence |

	aCommandSequence := 'r'.
	aMarsRover := MarsRover with: 0@0 lookingAt: east.
	aMarsRover execute: aCommandSequence.
	
	self assert: south equals: aMarsRover whereAreYouLookingAt.! !
!MarsRoverTest methodsFor: 'right rotation' stamp: 'DS 10/24/2020 22:28:25' prior: 50889613!
test15RightRotationLookingAtSouthRotateToWest

	| aMarsRover aCommandSequence |

	aCommandSequence := 'r'.
	aMarsRover := MarsRover with: 0@0 lookingAt: south.
	aMarsRover execute: aCommandSequence.
	
	self assert: west equals: aMarsRover whereAreYouLookingAt.! !
!MarsRoverTest methodsFor: 'right rotation' stamp: 'DS 10/24/2020 22:28:32' prior: 50889624!
test16RightRotationLookingAtWestRotateToNorth

	| aMarsRover aCommandSequence |

	aCommandSequence := 'r'.
	aMarsRover := MarsRover with: 0@0 lookingAt: west.
	aMarsRover execute: aCommandSequence.
	
	self assert: north equals: aMarsRover whereAreYouLookingAt.! !
!MarsRoverTest methodsFor: 'command sequences' stamp: 'DS 10/24/2020 22:28:39' prior: 50889636!
test17TwoForwardsAndOneBackwardWorkAsOneForward

	| aMarsRover aCommandSequence |

	aCommandSequence := 'ffb'.
	aMarsRover := MarsRover with: 0@0 lookingAt: north.
	aMarsRover execute: aCommandSequence.
	
	self assert: 0@1 equals: aMarsRover whereAreYou.! !
!MarsRoverTest methodsFor: 'command sequences' stamp: 'DS 10/24/2020 22:28:48' prior: 50889660!
test18UnknownCommandStopExecution

	| aMarsRover aCommandSequence |

	aCommandSequence := 'far'.
	aMarsRover := MarsRover with: 0@0 lookingAt: north.
	aMarsRover execute: aCommandSequence.
	
	self assert: 0@1 equals: aMarsRover whereAreYou.
	self assert: north equals: aMarsRover whereAreYouLookingAt.! !

!testRun: #MarsRoverTest #test01ForwardLookingAtNorthAdvanceOnYAxis stamp: 'DS 10/24/2020 22:28:54'!
PASSED!

!testRun: #MarsRoverTest #test02ForwardLookingAtEastAdvanceOnXAxis stamp: 'DS 10/24/2020 22:28:54'!
PASSED!

!testRun: #MarsRoverTest #test03ForwardLookingAtWestBackOnXAxis stamp: 'DS 10/24/2020 22:28:54'!
PASSED!

!testRun: #MarsRoverTest #test04ForwardLookingAtSouthBackOnYAxis stamp: 'DS 10/24/2020 22:28:54'!
PASSED!

!testRun: #MarsRoverTest #test05BackwardLookingAtNorthBackOnYAxis stamp: 'DS 10/24/2020 22:28:54'!
PASSED!

!testRun: #MarsRoverTest #test06BackwardLookingAtEastBackOnXAxis stamp: 'DS 10/24/2020 22:28:54'!
PASSED!

!testRun: #MarsRoverTest #test07BackwardLookingAtWestAdvanceOnXAxis stamp: 'DS 10/24/2020 22:28:54'!
PASSED!

!testRun: #MarsRoverTest #test08BackwardLookingAtSouthAdvanceOnYAxis stamp: 'DS 10/24/2020 22:28:54'!
PASSED!

!testRun: #MarsRoverTest #test09LeftRotationLookingAtNorthRotateToWest stamp: 'DS 10/24/2020 22:28:54'!
PASSED!

!testRun: #MarsRoverTest #test10LeftRotationLookingAtWestRotateToSouth stamp: 'DS 10/24/2020 22:28:54'!
PASSED!

!testRun: #MarsRoverTest #test11LeftRotationLookingAtSouthRotateToEast stamp: 'DS 10/24/2020 22:28:54'!
PASSED!

!testRun: #MarsRoverTest #test12LeftRotationLookingAtEastRotateToNorth stamp: 'DS 10/24/2020 22:28:54'!
PASSED!

!testRun: #MarsRoverTest #test13RightRotationLookingAtNorthRotateToEast stamp: 'DS 10/24/2020 22:28:54'!
PASSED!

!testRun: #MarsRoverTest #test14RightRotationLookingAtEastRotateToSouth stamp: 'DS 10/24/2020 22:28:54'!
PASSED!

!testRun: #MarsRoverTest #test15RightRotationLookingAtSouthRotateToWest stamp: 'DS 10/24/2020 22:28:54'!
PASSED!

!testRun: #MarsRoverTest #test16RightRotationLookingAtWestRotateToNorth stamp: 'DS 10/24/2020 22:28:54'!
PASSED!

!testRun: #MarsRoverTest #test17TwoForwardsAndOneBackwardWorkAsOneForward stamp: 'DS 10/24/2020 22:28:54'!
PASSED!

!testRun: #MarsRoverTest #test18UnknownCommandStopExecution stamp: 'DS 10/24/2020 22:28:54'!
PASSED!

----SNAPSHOT----(24 October 2020 22:29:06) CuisUniversity-4384.image priorSource: 17888726!
!MarsRover methodsFor: 'executing' stamp: 'DS 10/24/2020 22:33:57' prior: 50888679!
execute: aCommandSequence

	aCommandSequence do: [ :aCommand |	 self executeCommand: aCommand ].! !
!MarsRover methodsFor: 'executing' stamp: 'DS 10/24/2020 22:34:19'!
executeCommand: aCommand

	({$f. $b. $l. $r} includes: aCommand)
		ifTrue: [
			aCommand = $f ifTrue: [ self forward ].
			aCommand = $b ifTrue: [ self backward ].
			aCommand = $l ifTrue: [self leftRotation].
			aCommand = $r ifTrue: [self rightRotation].
		] ifFalse: [^nil].! !

!testRun: #MarsRoverTest #test01ForwardLookingAtNorthAdvanceOnYAxis stamp: 'DS 10/24/2020 22:34:24'!
PASSED!

!testRun: #MarsRoverTest #test02ForwardLookingAtEastAdvanceOnXAxis stamp: 'DS 10/24/2020 22:34:24'!
PASSED!

!testRun: #MarsRoverTest #test03ForwardLookingAtWestBackOnXAxis stamp: 'DS 10/24/2020 22:34:24'!
PASSED!

!testRun: #MarsRoverTest #test04ForwardLookingAtSouthBackOnYAxis stamp: 'DS 10/24/2020 22:34:24'!
PASSED!

!testRun: #MarsRoverTest #test05BackwardLookingAtNorthBackOnYAxis stamp: 'DS 10/24/2020 22:34:24'!
PASSED!

!testRun: #MarsRoverTest #test06BackwardLookingAtEastBackOnXAxis stamp: 'DS 10/24/2020 22:34:24'!
PASSED!

!testRun: #MarsRoverTest #test07BackwardLookingAtWestAdvanceOnXAxis stamp: 'DS 10/24/2020 22:34:24'!
PASSED!

!testRun: #MarsRoverTest #test08BackwardLookingAtSouthAdvanceOnYAxis stamp: 'DS 10/24/2020 22:34:24'!
PASSED!

!testRun: #MarsRoverTest #test09LeftRotationLookingAtNorthRotateToWest stamp: 'DS 10/24/2020 22:34:24'!
PASSED!

!testRun: #MarsRoverTest #test10LeftRotationLookingAtWestRotateToSouth stamp: 'DS 10/24/2020 22:34:24'!
PASSED!

!testRun: #MarsRoverTest #test11LeftRotationLookingAtSouthRotateToEast stamp: 'DS 10/24/2020 22:34:24'!
PASSED!

!testRun: #MarsRoverTest #test12LeftRotationLookingAtEastRotateToNorth stamp: 'DS 10/24/2020 22:34:24'!
PASSED!

!testRun: #MarsRoverTest #test13RightRotationLookingAtNorthRotateToEast stamp: 'DS 10/24/2020 22:34:24'!
PASSED!

!testRun: #MarsRoverTest #test14RightRotationLookingAtEastRotateToSouth stamp: 'DS 10/24/2020 22:34:24'!
PASSED!

!testRun: #MarsRoverTest #test15RightRotationLookingAtSouthRotateToWest stamp: 'DS 10/24/2020 22:34:24'!
PASSED!

!testRun: #MarsRoverTest #test16RightRotationLookingAtWestRotateToNorth stamp: 'DS 10/24/2020 22:34:24'!
PASSED!

!testRun: #MarsRoverTest #test17TwoForwardsAndOneBackwardWorkAsOneForward stamp: 'DS 10/24/2020 22:34:24'!
PASSED!

!testRun: #MarsRoverTest #test18UnknownCommandStopExecution stamp: 'DS 10/24/2020 22:34:24'!
FAILURE!

!testRun: #MarsRoverTest #test18UnknownCommandStopExecution stamp: 'DS 10/24/2020 22:34:24'!
FAILURE!
!MarsRover methodsFor: 'executing' stamp: 'DS 10/24/2020 22:34:59' prior: 50891082!
execute: aCommandSequence

	aCommandSequence do: [ :aCommand |	 self executeCommand: aCommand ifNone: [^nil.] ].! !
!MarsRover methodsFor: 'executing' stamp: 'DS 10/24/2020 22:35:30'!
executeCommand: aCommand ifNone: aNoneBlock

	({$f. $b. $l. $r} includes: aCommand)
		ifTrue: [
			aCommand = $f ifTrue: [ self forward ].
			aCommand = $b ifTrue: [ self backward ].
			aCommand = $l ifTrue: [self leftRotation].
			aCommand = $r ifTrue: [self rightRotation].
		] ifFalse: [aNoneBlock value].! !

!testRun: #MarsRoverTest #test01ForwardLookingAtNorthAdvanceOnYAxis stamp: 'DS 10/24/2020 22:35:41'!
PASSED!

!testRun: #MarsRoverTest #test02ForwardLookingAtEastAdvanceOnXAxis stamp: 'DS 10/24/2020 22:35:41'!
PASSED!

!testRun: #MarsRoverTest #test03ForwardLookingAtWestBackOnXAxis stamp: 'DS 10/24/2020 22:35:41'!
PASSED!

!testRun: #MarsRoverTest #test04ForwardLookingAtSouthBackOnYAxis stamp: 'DS 10/24/2020 22:35:41'!
PASSED!

!testRun: #MarsRoverTest #test05BackwardLookingAtNorthBackOnYAxis stamp: 'DS 10/24/2020 22:35:41'!
PASSED!

!testRun: #MarsRoverTest #test06BackwardLookingAtEastBackOnXAxis stamp: 'DS 10/24/2020 22:35:41'!
PASSED!

!testRun: #MarsRoverTest #test07BackwardLookingAtWestAdvanceOnXAxis stamp: 'DS 10/24/2020 22:35:41'!
PASSED!

!testRun: #MarsRoverTest #test08BackwardLookingAtSouthAdvanceOnYAxis stamp: 'DS 10/24/2020 22:35:41'!
PASSED!

!testRun: #MarsRoverTest #test09LeftRotationLookingAtNorthRotateToWest stamp: 'DS 10/24/2020 22:35:41'!
PASSED!

!testRun: #MarsRoverTest #test10LeftRotationLookingAtWestRotateToSouth stamp: 'DS 10/24/2020 22:35:41'!
PASSED!

!testRun: #MarsRoverTest #test11LeftRotationLookingAtSouthRotateToEast stamp: 'DS 10/24/2020 22:35:41'!
PASSED!

!testRun: #MarsRoverTest #test12LeftRotationLookingAtEastRotateToNorth stamp: 'DS 10/24/2020 22:35:41'!
PASSED!

!testRun: #MarsRoverTest #test13RightRotationLookingAtNorthRotateToEast stamp: 'DS 10/24/2020 22:35:41'!
PASSED!

!testRun: #MarsRoverTest #test14RightRotationLookingAtEastRotateToSouth stamp: 'DS 10/24/2020 22:35:41'!
PASSED!

!testRun: #MarsRoverTest #test15RightRotationLookingAtSouthRotateToWest stamp: 'DS 10/24/2020 22:35:41'!
PASSED!

!testRun: #MarsRoverTest #test16RightRotationLookingAtWestRotateToNorth stamp: 'DS 10/24/2020 22:35:41'!
PASSED!

!testRun: #MarsRoverTest #test17TwoForwardsAndOneBackwardWorkAsOneForward stamp: 'DS 10/24/2020 22:35:41'!
PASSED!

!testRun: #MarsRoverTest #test18UnknownCommandStopExecution stamp: 'DS 10/24/2020 22:35:41'!
PASSED!

!methodRemoval: MarsRover #executeCommand: stamp: 'DS 10/24/2020 22:35:45'!
executeCommand: aCommand

	({$f. $b. $l. $r} includes: aCommand)
		ifTrue: [
			aCommand = $f ifTrue: [ self forward ].
			aCommand = $b ifTrue: [ self backward ].
			aCommand = $l ifTrue: [self leftRotation].
			aCommand = $r ifTrue: [self rightRotation].
		] ifFalse: [^nil].!
!MarsRover methodsFor: 'executing' stamp: 'DS 10/24/2020 22:39:20' prior: 50891171!
executeCommand: aCommand ifNone: aNoneBlock

	(self isValidCommand: aCommand) ifFalse: [aNoneBlock value].

	({$f. $b. $l. $r} includes: aCommand)
		ifTrue: [
			aCommand = $f ifTrue: [ self forward ].
			aCommand = $b ifTrue: [ self backward ].
			aCommand = $l ifTrue: [self leftRotation].
			aCommand = $r ifTrue: [self rightRotation].
		] ifFalse: [aNoneBlock value].! !
!MarsRover methodsFor: 'executing' stamp: 'DS 10/24/2020 22:39:58' prior: 50891257!
executeCommand: aCommand ifNone: aNoneBlock

	(self isValidCommand: aCommand) ifFalse: [aNoneBlock value].
	
	aCommand = $f ifTrue: [ self forward ].
	aCommand = $b ifTrue: [ self backward ].
	aCommand = $l ifTrue: [self leftRotation].
	aCommand = $r ifTrue: [self rightRotation].! !
!MarsRover methodsFor: 'executing' stamp: 'DS 10/24/2020 22:40:46'!
isValidCommand: aCommand

	^ {$f. $b. $l. $r} includes: aCommand! !

!testRun: #MarsRoverTest #test01ForwardLookingAtNorthAdvanceOnYAxis stamp: 'DS 10/24/2020 22:41:06'!
PASSED!

!testRun: #MarsRoverTest #test02ForwardLookingAtEastAdvanceOnXAxis stamp: 'DS 10/24/2020 22:41:06'!
PASSED!

!testRun: #MarsRoverTest #test03ForwardLookingAtWestBackOnXAxis stamp: 'DS 10/24/2020 22:41:06'!
PASSED!

!testRun: #MarsRoverTest #test04ForwardLookingAtSouthBackOnYAxis stamp: 'DS 10/24/2020 22:41:06'!
PASSED!

!testRun: #MarsRoverTest #test05BackwardLookingAtNorthBackOnYAxis stamp: 'DS 10/24/2020 22:41:06'!
PASSED!

!testRun: #MarsRoverTest #test06BackwardLookingAtEastBackOnXAxis stamp: 'DS 10/24/2020 22:41:06'!
PASSED!

!testRun: #MarsRoverTest #test07BackwardLookingAtWestAdvanceOnXAxis stamp: 'DS 10/24/2020 22:41:06'!
PASSED!

!testRun: #MarsRoverTest #test08BackwardLookingAtSouthAdvanceOnYAxis stamp: 'DS 10/24/2020 22:41:06'!
PASSED!

!testRun: #MarsRoverTest #test09LeftRotationLookingAtNorthRotateToWest stamp: 'DS 10/24/2020 22:41:06'!
PASSED!

!testRun: #MarsRoverTest #test10LeftRotationLookingAtWestRotateToSouth stamp: 'DS 10/24/2020 22:41:06'!
PASSED!

!testRun: #MarsRoverTest #test11LeftRotationLookingAtSouthRotateToEast stamp: 'DS 10/24/2020 22:41:06'!
PASSED!

!testRun: #MarsRoverTest #test12LeftRotationLookingAtEastRotateToNorth stamp: 'DS 10/24/2020 22:41:06'!
PASSED!

!testRun: #MarsRoverTest #test13RightRotationLookingAtNorthRotateToEast stamp: 'DS 10/24/2020 22:41:06'!
PASSED!

!testRun: #MarsRoverTest #test14RightRotationLookingAtEastRotateToSouth stamp: 'DS 10/24/2020 22:41:06'!
PASSED!

!testRun: #MarsRoverTest #test15RightRotationLookingAtSouthRotateToWest stamp: 'DS 10/24/2020 22:41:06'!
PASSED!

!testRun: #MarsRoverTest #test16RightRotationLookingAtWestRotateToNorth stamp: 'DS 10/24/2020 22:41:06'!
PASSED!

!testRun: #MarsRoverTest #test17TwoForwardsAndOneBackwardWorkAsOneForward stamp: 'DS 10/24/2020 22:41:06'!
PASSED!

!testRun: #MarsRoverTest #test18UnknownCommandStopExecution stamp: 'DS 10/24/2020 22:41:06'!
PASSED!

----QUIT----(24 October 2020 23:26:16) CuisUniversity-4384.image priorSource: 17901690!

----STARTUP---- (24 October 2020 23:31:07) as /mnt/sdb5/Ingenieria1/CuisUniversity/CuisUniversity-4384.image!


!classRemoval: #West stamp: 'DS 10/24/2020 23:31:19'!
MarsRoverDirection subclass: #West
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Solution'!

!classRemoval: #South stamp: 'DS 10/24/2020 23:31:19'!
MarsRoverDirection subclass: #South
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Solution'!

!classRemoval: #North stamp: 'DS 10/24/2020 23:31:20'!
MarsRoverDirection subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Solution'!

!classRemoval: #East stamp: 'DS 10/24/2020 23:31:20'!
MarsRoverDirection subclass: #East
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Solution'!

!classRemoval: #MarsRoverDirection stamp: 'DS 10/24/2020 23:31:20'!
Object subclass: #MarsRoverDirection
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Solution'!

!classRemoval: #MarsRover stamp: 'DS 10/24/2020 23:31:21'!
Object subclass: #MarsRover
	instanceVariableNames: 'point direction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Solution'!

!classRemoval: #MarsRoverTest stamp: 'DS 10/24/2020 23:31:21'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: 'north east west south'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Solution'!

----End fileIn of /mnt/sdb5/Ingenieria1/ingenieria1-exactas/16-MarsRover/MarsRover-Solution.st----!

!testRun: #MarsRoverTest #test01ForwardLookingAtNorthAdvanceOnYAxis stamp: 'DS 10/24/2020 23:31:50'!
PASSED!

!testRun: #MarsRoverTest #test02ForwardLookingAtEastAdvanceOnXAxis stamp: 'DS 10/24/2020 23:31:50'!
PASSED!

!testRun: #MarsRoverTest #test03ForwardLookingAtWestBackOnXAxis stamp: 'DS 10/24/2020 23:31:50'!
PASSED!

!testRun: #MarsRoverTest #test04ForwardLookingAtSouthBackOnYAxis stamp: 'DS 10/24/2020 23:31:50'!
PASSED!

!testRun: #MarsRoverTest #test05BackwardLookingAtNorthBackOnYAxis stamp: 'DS 10/24/2020 23:31:50'!
PASSED!

!testRun: #MarsRoverTest #test06BackwardLookingAtEastBackOnXAxis stamp: 'DS 10/24/2020 23:31:50'!
PASSED!

!testRun: #MarsRoverTest #test07BackwardLookingAtWestAdvanceOnXAxis stamp: 'DS 10/24/2020 23:31:50'!
PASSED!

!testRun: #MarsRoverTest #test08BackwardLookingAtSouthAdvanceOnYAxis stamp: 'DS 10/24/2020 23:31:50'!
PASSED!

!testRun: #MarsRoverTest #test09LeftRotationLookingAtNorthRotateToWest stamp: 'DS 10/24/2020 23:31:50'!
PASSED!

!testRun: #MarsRoverTest #test10LeftRotationLookingAtWestRotateToSouth stamp: 'DS 10/24/2020 23:31:50'!
PASSED!

!testRun: #MarsRoverTest #test11LeftRotationLookingAtSouthRotateToEast stamp: 'DS 10/24/2020 23:31:50'!
PASSED!

!testRun: #MarsRoverTest #test12LeftRotationLookingAtEastRotateToNorth stamp: 'DS 10/24/2020 23:31:50'!
PASSED!

!testRun: #MarsRoverTest #test13RightRotationLookingAtNorthRotateToEast stamp: 'DS 10/24/2020 23:31:50'!
PASSED!

!testRun: #MarsRoverTest #test14RightRotationLookingAtEastRotateToSouth stamp: 'DS 10/24/2020 23:31:50'!
PASSED!

!testRun: #MarsRoverTest #test15RightRotationLookingAtSouthRotateToWest stamp: 'DS 10/24/2020 23:31:50'!
PASSED!

!testRun: #MarsRoverTest #test16RightRotationLookingAtWestRotateToNorth stamp: 'DS 10/24/2020 23:31:50'!
PASSED!

!testRun: #MarsRoverTest #test17TwoForwardAndOneBackwardWorkAsOneForward stamp: 'DS 10/24/2020 23:31:50'!
PASSED!

!testRun: #MarsRoverTest #test18UnkonwnCommandStopsExecution stamp: 'DS 10/24/2020 23:31:50'!
PASSED!

east = west.!

west := West new.
west2 := West new.
east := East new.
!

east = west.!
!MarsRover methodsFor: 'executing' stamp: 'DS 10/24/2020 23:42:36'!
executeCommand: aCommand ifNone: aNoneBlock

	(self isValidCommand: aCommand)  ifFalse: [^aNoneBlock value].

	(self isAForwardCommand: aCommand) ifTrue: [self forward].
	(self isABackwardCommand: aCommand) ifTrue: [self backward].
	(self isALeftRotationCommand: aCommand) ifTrue: [self leftRotation].
	(self isARightRotationCommand: aCommand) ifTrue: [self right].! !
!MarsRover methodsFor: 'executing' stamp: 'DS 10/24/2020 23:43:19' prior: 50891666!
execute: aCommandSequence

	aCommandSequence do: [ :aCommand | self executeCommand: aCommand ifNone: [^nil] 	].
	
	! !
!MarsRover methodsFor: 'executing' stamp: 'DS 10/24/2020 23:43:47'!
isAForwardCommand: aCommand

	^aCommand = $f.! !
!MarsRover methodsFor: 'executing' stamp: 'DS 10/24/2020 23:44:24'!
isABackwardCommand: aCommand

	^aCommand = $b.! !
!MarsRover methodsFor: 'executing' stamp: 'DS 10/24/2020 23:44:40'!
isALeftRotationCommand: aCommand

	^aCommand = $l.! !
!MarsRover methodsFor: 'executing' stamp: 'DS 10/24/2020 23:45:03'!
isARightRotationCommand: aCommand

	^aCommand = $r.! !

!testRun: #MarsRoverTest #test01ForwardLookingAtNorthAdvanceOnYAxis stamp: 'DS 10/24/2020 23:45:47'!
PASSED!

!testRun: #MarsRoverTest #test02ForwardLookingAtEastAdvanceOnXAxis stamp: 'DS 10/24/2020 23:45:47'!
PASSED!

!testRun: #MarsRoverTest #test03ForwardLookingAtWestBackOnXAxis stamp: 'DS 10/24/2020 23:45:47'!
PASSED!

!testRun: #MarsRoverTest #test04ForwardLookingAtSouthBackOnYAxis stamp: 'DS 10/24/2020 23:45:47'!
PASSED!

!testRun: #MarsRoverTest #test05BackwardLookingAtNorthBackOnYAxis stamp: 'DS 10/24/2020 23:45:47'!
PASSED!

!testRun: #MarsRoverTest #test06BackwardLookingAtEastBackOnXAxis stamp: 'DS 10/24/2020 23:45:47'!
PASSED!

!testRun: #MarsRoverTest #test07BackwardLookingAtWestAdvanceOnXAxis stamp: 'DS 10/24/2020 23:45:47'!
PASSED!

!testRun: #MarsRoverTest #test08BackwardLookingAtSouthAdvanceOnYAxis stamp: 'DS 10/24/2020 23:45:47'!
PASSED!

!testRun: #MarsRoverTest #test09LeftRotationLookingAtNorthRotateToWest stamp: 'DS 10/24/2020 23:45:47'!
PASSED!

!testRun: #MarsRoverTest #test10LeftRotationLookingAtWestRotateToSouth stamp: 'DS 10/24/2020 23:45:47'!
PASSED!

!testRun: #MarsRoverTest #test11LeftRotationLookingAtSouthRotateToEast stamp: 'DS 10/24/2020 23:45:47'!
PASSED!

!testRun: #MarsRoverTest #test12LeftRotationLookingAtEastRotateToNorth stamp: 'DS 10/24/2020 23:45:47'!
PASSED!

!testRun: #MarsRoverTest #test13RightRotationLookingAtNorthRotateToEast stamp: 'DS 10/24/2020 23:45:47'!
ERROR!

!testRun: #MarsRoverTest #test14RightRotationLookingAtEastRotateToSouth stamp: 'DS 10/24/2020 23:45:47'!
ERROR!

!testRun: #MarsRoverTest #test15RightRotationLookingAtSouthRotateToWest stamp: 'DS 10/24/2020 23:45:47'!
ERROR!

!testRun: #MarsRoverTest #test16RightRotationLookingAtWestRotateToNorth stamp: 'DS 10/24/2020 23:45:47'!
ERROR!

!testRun: #MarsRoverTest #test17TwoForwardAndOneBackwardWorkAsOneForward stamp: 'DS 10/24/2020 23:45:47'!
PASSED!

!testRun: #MarsRoverTest #test18UnkonwnCommandStopsExecution stamp: 'DS 10/24/2020 23:45:47'!
PASSED!

!testRun: #MarsRoverTest #test01ForwardLookingAtNorthAdvanceOnYAxis stamp: 'DS 10/24/2020 23:46:15'!
PASSED!

!testRun: #MarsRoverTest #test02ForwardLookingAtEastAdvanceOnXAxis stamp: 'DS 10/24/2020 23:46:15'!
PASSED!

!testRun: #MarsRoverTest #test03ForwardLookingAtWestBackOnXAxis stamp: 'DS 10/24/2020 23:46:15'!
PASSED!

!testRun: #MarsRoverTest #test04ForwardLookingAtSouthBackOnYAxis stamp: 'DS 10/24/2020 23:46:15'!
PASSED!

!testRun: #MarsRoverTest #test05BackwardLookingAtNorthBackOnYAxis stamp: 'DS 10/24/2020 23:46:15'!
PASSED!

!testRun: #MarsRoverTest #test06BackwardLookingAtEastBackOnXAxis stamp: 'DS 10/24/2020 23:46:15'!
PASSED!

!testRun: #MarsRoverTest #test07BackwardLookingAtWestAdvanceOnXAxis stamp: 'DS 10/24/2020 23:46:15'!
PASSED!

!testRun: #MarsRoverTest #test08BackwardLookingAtSouthAdvanceOnYAxis stamp: 'DS 10/24/2020 23:46:15'!
PASSED!

!testRun: #MarsRoverTest #test09LeftRotationLookingAtNorthRotateToWest stamp: 'DS 10/24/2020 23:46:15'!
PASSED!

!testRun: #MarsRoverTest #test10LeftRotationLookingAtWestRotateToSouth stamp: 'DS 10/24/2020 23:46:15'!
PASSED!

!testRun: #MarsRoverTest #test11LeftRotationLookingAtSouthRotateToEast stamp: 'DS 10/24/2020 23:46:15'!
PASSED!

!testRun: #MarsRoverTest #test12LeftRotationLookingAtEastRotateToNorth stamp: 'DS 10/24/2020 23:46:15'!
PASSED!

!testRun: #MarsRoverTest #test13RightRotationLookingAtNorthRotateToEast stamp: 'DS 10/24/2020 23:46:15'!
ERROR!

!testRun: #MarsRoverTest #test14RightRotationLookingAtEastRotateToSouth stamp: 'DS 10/24/2020 23:46:15'!
ERROR!

!testRun: #MarsRoverTest #test15RightRotationLookingAtSouthRotateToWest stamp: 'DS 10/24/2020 23:46:15'!
ERROR!

!testRun: #MarsRoverTest #test16RightRotationLookingAtWestRotateToNorth stamp: 'DS 10/24/2020 23:46:15'!
ERROR!

!testRun: #MarsRoverTest #test17TwoForwardAndOneBackwardWorkAsOneForward stamp: 'DS 10/24/2020 23:46:15'!
PASSED!

!testRun: #MarsRoverTest #test18UnkonwnCommandStopsExecution stamp: 'DS 10/24/2020 23:46:15'!
PASSED!
!MarsRover methodsFor: 'executing' stamp: 'DS 10/24/2020 23:46:38' prior: 50891918!
executeCommand: aCommand ifNone: aNoneBlock

	(self isValidCommand: aCommand)  ifFalse: [^aNoneBlock value].

	(self isAForwardCommand: aCommand) ifTrue: [self forward].
	(self isABackwardCommand: aCommand) ifTrue: [self backward].
	(self isALeftRotationCommand: aCommand) ifTrue: [self leftRotation].
	(self isARightRotationCommand: aCommand) ifTrue: [self rightRotation].! !

!testRun: #MarsRoverTest #test01ForwardLookingAtNorthAdvanceOnYAxis stamp: 'DS 10/24/2020 23:46:39'!
PASSED!

!testRun: #MarsRoverTest #test02ForwardLookingAtEastAdvanceOnXAxis stamp: 'DS 10/24/2020 23:46:39'!
PASSED!

!testRun: #MarsRoverTest #test03ForwardLookingAtWestBackOnXAxis stamp: 'DS 10/24/2020 23:46:39'!
PASSED!

!testRun: #MarsRoverTest #test04ForwardLookingAtSouthBackOnYAxis stamp: 'DS 10/24/2020 23:46:39'!
PASSED!

!testRun: #MarsRoverTest #test05BackwardLookingAtNorthBackOnYAxis stamp: 'DS 10/24/2020 23:46:39'!
PASSED!

!testRun: #MarsRoverTest #test06BackwardLookingAtEastBackOnXAxis stamp: 'DS 10/24/2020 23:46:39'!
PASSED!

!testRun: #MarsRoverTest #test07BackwardLookingAtWestAdvanceOnXAxis stamp: 'DS 10/24/2020 23:46:39'!
PASSED!

!testRun: #MarsRoverTest #test08BackwardLookingAtSouthAdvanceOnYAxis stamp: 'DS 10/24/2020 23:46:39'!
PASSED!

!testRun: #MarsRoverTest #test09LeftRotationLookingAtNorthRotateToWest stamp: 'DS 10/24/2020 23:46:39'!
PASSED!

!testRun: #MarsRoverTest #test10LeftRotationLookingAtWestRotateToSouth stamp: 'DS 10/24/2020 23:46:39'!
PASSED!

!testRun: #MarsRoverTest #test11LeftRotationLookingAtSouthRotateToEast stamp: 'DS 10/24/2020 23:46:39'!
PASSED!

!testRun: #MarsRoverTest #test12LeftRotationLookingAtEastRotateToNorth stamp: 'DS 10/24/2020 23:46:39'!
PASSED!

!testRun: #MarsRoverTest #test13RightRotationLookingAtNorthRotateToEast stamp: 'DS 10/24/2020 23:46:39'!
PASSED!

!testRun: #MarsRoverTest #test14RightRotationLookingAtEastRotateToSouth stamp: 'DS 10/24/2020 23:46:39'!
PASSED!

!testRun: #MarsRoverTest #test15RightRotationLookingAtSouthRotateToWest stamp: 'DS 10/24/2020 23:46:39'!
PASSED!

!testRun: #MarsRoverTest #test16RightRotationLookingAtWestRotateToNorth stamp: 'DS 10/24/2020 23:46:39'!
PASSED!

!testRun: #MarsRoverTest #test17TwoForwardAndOneBackwardWorkAsOneForward stamp: 'DS 10/24/2020 23:46:39'!
PASSED!

!testRun: #MarsRoverTest #test18UnkonwnCommandStopsExecution stamp: 'DS 10/24/2020 23:46:39'!
PASSED!

----QUIT----(24 October 2020 23:46:47) CuisUniversity-4384.image priorSource: 17910381!

----STARTUP---- (24 October 2020 23:50:18) as /mnt/sdb5/Ingenieria1/CuisUniversity/CuisUniversity-4384.image!


!classRemoval: #West stamp: 'DS 10/24/2020 23:50:33'!
MarsRoverDirection subclass: #West
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Solution'!

!classRemoval: #South stamp: 'DS 10/24/2020 23:50:33'!
MarsRoverDirection subclass: #South
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Solution'!

!classRemoval: #North stamp: 'DS 10/24/2020 23:50:33'!
MarsRoverDirection subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Solution'!

!classRemoval: #East stamp: 'DS 10/24/2020 23:50:34'!
MarsRoverDirection subclass: #East
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Solution'!

!classRemoval: #MarsRoverDirection stamp: 'DS 10/24/2020 23:50:34'!
Object subclass: #MarsRoverDirection
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Solution'!

!classRemoval: #MarsRover stamp: 'DS 10/24/2020 23:50:34'!
Object subclass: #MarsRover
	instanceVariableNames: 'point direction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Solution'!

!classRemoval: #MarsRoverTest stamp: 'DS 10/24/2020 23:50:35'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: 'north east west south'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Solution'!

----End fileIn of /mnt/sdb5/Ingenieria1/CuisUniversity/MarsRover-Solution.st----!

----QUIT----(24 October 2020 23:51:55) CuisUniversity-4384.image priorSource: 17936194!

----STARTUP---- (25 October 2020 22:28:03) as /mnt/sdb5/Ingenieria1/CuisUniversity/CuisUniversity-4384.image!


!classRemoval: #West stamp: 'DS 10/25/2020 22:28:07'!
MarsRoverDirection subclass: #West
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Solution'!

!classRemoval: #South stamp: 'DS 10/25/2020 22:28:07'!
MarsRoverDirection subclass: #South
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Solution'!

!classRemoval: #North stamp: 'DS 10/25/2020 22:28:08'!
MarsRoverDirection subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Solution'!

!classRemoval: #East stamp: 'DS 10/25/2020 22:28:08'!
MarsRoverDirection subclass: #East
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Solution'!

!classRemoval: #MarsRoverDirection stamp: 'DS 10/25/2020 22:28:08'!
Object subclass: #MarsRoverDirection
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Solution'!

!classRemoval: #MarsRover stamp: 'DS 10/25/2020 22:28:09'!
Object subclass: #MarsRover
	instanceVariableNames: 'point direction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Solution'!

!classRemoval: #MarsRoverTest stamp: 'DS 10/25/2020 22:28:09'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: 'north east west south'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Solution'!

----End fileIn of /mnt/sdb5/Ingenieria1/ingenieria1-exactas/16-MarsRover/MarsRover-Solution.st----!

!testRun: #MarsRoverTest #test01ForwardLookingAtNorthAdvanceOnYAxis stamp: 'DS 10/25/2020 22:29:26'!
PASSED!

!testRun: #MarsRoverTest #test02ForwardLookingAtEastAdvanceOnXAxis stamp: 'DS 10/25/2020 22:29:26'!
PASSED!

!testRun: #MarsRoverTest #test03ForwardLookingAtWestBackOnXAxis stamp: 'DS 10/25/2020 22:29:26'!
PASSED!

!testRun: #MarsRoverTest #test04ForwardLookingAtSouthBackOnYAxis stamp: 'DS 10/25/2020 22:29:26'!
PASSED!

!testRun: #MarsRoverTest #test05BackwardLookingAtNorthBackOnYAxis stamp: 'DS 10/25/2020 22:29:26'!
PASSED!

!testRun: #MarsRoverTest #test06BackwardLookingAtEastBackOnXAxis stamp: 'DS 10/25/2020 22:29:26'!
PASSED!

!testRun: #MarsRoverTest #test07BackwardLookingAtWestAdvanceOnXAxis stamp: 'DS 10/25/2020 22:29:26'!
PASSED!

!testRun: #MarsRoverTest #test08BackwardLookingAtSouthAdvanceOnYAxis stamp: 'DS 10/25/2020 22:29:26'!
PASSED!

!testRun: #MarsRoverTest #test09LeftRotationLookingAtNorthRotateToWest stamp: 'DS 10/25/2020 22:29:26'!
PASSED!

!testRun: #MarsRoverTest #test10LeftRotationLookingAtWestRotateToSouth stamp: 'DS 10/25/2020 22:29:26'!
PASSED!

!testRun: #MarsRoverTest #test11LeftRotationLookingAtSouthRotateToEast stamp: 'DS 10/25/2020 22:29:26'!
PASSED!

!testRun: #MarsRoverTest #test12LeftRotationLookingAtEastRotateToNorth stamp: 'DS 10/25/2020 22:29:26'!
PASSED!

!testRun: #MarsRoverTest #test13RightRotationLookingAtNorthRotateToEast stamp: 'DS 10/25/2020 22:29:26'!
PASSED!

!testRun: #MarsRoverTest #test14RightRotationLookingAtEastRotateToSouth stamp: 'DS 10/25/2020 22:29:26'!
PASSED!

!testRun: #MarsRoverTest #test15RightRotationLookingAtSouthRotateToWest stamp: 'DS 10/25/2020 22:29:26'!
PASSED!

!testRun: #MarsRoverTest #test16RightRotationLookingAtWestRotateToNorth stamp: 'DS 10/25/2020 22:29:26'!
PASSED!

!testRun: #MarsRoverTest #test17TwoForwardAndOneBackwardWorkAsOneForward stamp: 'DS 10/25/2020 22:29:26'!
PASSED!

!testRun: #MarsRoverTest #test18UnkonwnCommandSendsMessageErrorAndStopsExecution stamp: 'DS 10/25/2020 22:29:26'!
PASSED!

----QUIT----(25 October 2020 23:44:22) CuisUniversity-4384.image priorSource: 17951919!

----STARTUP---- (26 October 2020 18:00:02) as /mnt/sdb5/Ingenieria1/CuisUniversity/CuisUniversity-4384.image!


----QUIT----(27 October 2020 00:15:20) CuisUniversity-4384.image priorSource: 17971134!

----STARTUP---- (29 October 2020 17:07:55) as /mnt/sdb5/Ingenieria1/CuisUniversity/CuisUniversity-4384.image!


TestCase subclass: #TerniLapilliTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapippiSolution'!

!classDefinition: #TerniLapilliTest category: 'TerniLapippiSolution' stamp: 'DS 10/29/2020 17:22:31'!
TestCase subclass: #TerniLapilliTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapippiSolution'!
!TerniLapilliTest methodsFor: 'no messages' stamp: 'DS 10/29/2020 17:22:40'!
test01! !

!classDefinition: #TerniLapilli category: 'TerniLapippiSolution' stamp: 'DS 10/29/2020 17:34:42'!
Object subclass: #TerniLapilli
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapippiSolution'!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 17:34:35' prior: 50893274!
test01
	
	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	
	self assert: aTerniLapilli isPlayingX.
	self deny: aTerniLapilli isOver.! !

!testRun: #TerniLapilliTest #test01 stamp: 'DS 10/29/2020 17:34:46'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 17:35:10'!
isPlayingX
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 17:35:16' prior: 50893295!
isPlayingX

	^true.! !

!testRun: #TerniLapilliTest #test01 stamp: 'DS 10/29/2020 17:35:18'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 17:35:28'!
isOver
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 17:35:39' prior: 50893306!
isOver

	^false.! !

!testRun: #TerniLapilliTest #test01 stamp: 'DS 10/29/2020 17:35:41'!
PASSED!

!testRun: #TerniLapilliTest #test01 stamp: 'DS 10/29/2020 17:35:41'!
PASSED!

!testRun: #TerniLapilliTest #test01 stamp: 'DS 10/29/2020 17:35:45'!
PASSED!

!testRun: #TerniLapilliTest #test01 stamp: 'DS 10/29/2020 17:35:45'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 17:37:27'!
test01GameStartWithXPlayer
	
	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	
	self assert: aTerniLapilli isPlayingX.! !

!methodRemoval: TerniLapilliTest #test01 stamp: 'DS 10/29/2020 17:37:30'!
test01
	
	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	
	self assert: aTerniLapilli isPlayingX.
	self deny: aTerniLapilli isOver.!

!methodRemoval: TerniLapilli #isOver stamp: 'DS 10/29/2020 17:37:32'!
isOver

	^false.!

!testRun: #TerniLapilliTest #test01GameStartWithXPlayer stamp: 'DS 10/29/2020 17:37:34'!
PASSED!

----SNAPSHOT----(29 October 2020 17:37:38) CuisUniversity-4384.image priorSource: 17971335!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 17:38:36'!
test02
	
	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@0.
	
	self deny: aTerniLapilli isPlayingX.
	self assert: aTerniLapilli isPlayingO.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 17:39:05'!
test02AfterXTurnIsOTurn
	
	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@0.
	
	self deny: aTerniLapilli isPlayingX.
	self assert: aTerniLapilli isPlayingO.! !

!methodRemoval: TerniLapilliTest #test02 stamp: 'DS 10/29/2020 17:39:08'!
test02
	
	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@0.
	
	self deny: aTerniLapilli isPlayingX.
	self assert: aTerniLapilli isPlayingO.!

!testRun: #TerniLapilliTest #test02AfterXTurnIsOTurn stamp: 'DS 10/29/2020 17:39:09'!
ERROR!

!testRun: #TerniLapilliTest #test02AfterXTurnIsOTurn stamp: 'DS 10/29/2020 17:39:09'!
ERROR!

!testRun: #TerniLapilliTest #test02AfterXTurnIsOTurn stamp: 'DS 10/29/2020 17:39:27'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 17:39:35'!
putXAt: aPoint 
	self shouldBeImplemented.! !

!classDefinition: #TerniLapilli category: 'TerniLapippiSolution' stamp: 'DS 10/29/2020 17:40:58'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'currentPlayer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapippiSolution'!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 17:40:55' prior: 50893383!
putXAt: aPosition

	currentPlayer := #O.! !

!testRun: #TerniLapilliTest #test02AfterXTurnIsOTurn stamp: 'DS 10/29/2020 17:41:04'!
FAILURE!

!testRun: #TerniLapilliTest #test02AfterXTurnIsOTurn stamp: 'DS 10/29/2020 17:41:40'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 17:41:58'!
isPlayingO
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 17:42:14' prior: 50893406!
isPlayingO

	^currentPlayer == #O.! !

!testRun: #TerniLapilliTest #test02AfterXTurnIsOTurn stamp: 'DS 10/29/2020 17:42:16'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterXTurnIsOTurn stamp: 'DS 10/29/2020 17:42:17'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 17:42:29' prior: 50893300!
isPlayingX

	^currentPlayer  == #O.! !

!testRun: #TerniLapilliTest #test01GameStartWithXPlayer stamp: 'DS 10/29/2020 17:42:30'!
FAILURE!

!testRun: #TerniLapilliTest #test02AfterXTurnIsOTurn stamp: 'DS 10/29/2020 17:42:30'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 17:42:54' overrides: 16896425!
initialize

	currentPlayer := #X.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 17:43:02' prior: 50893411!
isPlayingO

	^currentPlayer = #O.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 17:43:07' prior: 50893422!
isPlayingX

	^currentPlayer  = #O.! !

!testRun: #TerniLapilliTest #test01GameStartWithXPlayer stamp: 'DS 10/29/2020 17:43:08'!
FAILURE!

!testRun: #TerniLapilliTest #test02AfterXTurnIsOTurn stamp: 'DS 10/29/2020 17:43:08'!
FAILURE!

!testRun: #TerniLapilliTest #test01GameStartWithXPlayer stamp: 'DS 10/29/2020 17:43:14'!
FAILURE!

!testRun: #TerniLapilliTest #test02AfterXTurnIsOTurn stamp: 'DS 10/29/2020 17:43:14'!
FAILURE!

!testRun: #TerniLapilliTest #test01GameStartWithXPlayer stamp: 'DS 10/29/2020 17:43:16'!
FAILURE!

!testRun: #TerniLapilliTest #test02AfterXTurnIsOTurn stamp: 'DS 10/29/2020 17:44:04'!
FAILURE!

!testRun: #TerniLapilliTest #test02AfterXTurnIsOTurn stamp: 'DS 10/29/2020 17:44:04'!
FAILURE!

!testRun: #TerniLapilliTest #test01GameStartWithXPlayer stamp: 'DS 10/29/2020 17:44:11'!
FAILURE!

!testRun: #TerniLapilliTest #test02AfterXTurnIsOTurn stamp: 'DS 10/29/2020 17:44:11'!
FAILURE!

!testRun: #TerniLapilliTest #test01GameStartWithXPlayer stamp: 'DS 10/29/2020 17:44:13'!
FAILURE!

aTerniLapilli!

currentPlayer !

!testRun: #TerniLapilliTest #test01GameStartWithXPlayer stamp: 'DS 10/29/2020 17:44:39'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 17:44:47' prior: 50893443!
isPlayingX

	^currentPlayer  = #X.! !

!testRun: #TerniLapilliTest #test01GameStartWithXPlayer stamp: 'DS 10/29/2020 17:44:49'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterXTurnIsOTurn stamp: 'DS 10/29/2020 17:44:50'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartWithXPlayer stamp: 'DS 10/29/2020 17:44:53'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterXTurnIsOTurn stamp: 'DS 10/29/2020 17:44:53'!
PASSED!

----SNAPSHOT----(29 October 2020 17:44:56) CuisUniversity-4384.image priorSource: 17974199!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 18:14:20'!
test01GameStartWithXPlayerTurn
	
	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	
	self assert: aTerniLapilli isPlayingX.! !

!methodRemoval: TerniLapilliTest #test01GameStartWithXPlayer stamp: 'DS 10/29/2020 18:14:20'!
test01GameStartWithXPlayer
	
	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	
	self assert: aTerniLapilli isPlayingX.!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 18:14:29'!
test02AfterFirstTurnIsOTurn
	
	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@0.
	
	self deny: aTerniLapilli isPlayingX.
	self assert: aTerniLapilli isPlayingO.! !

!methodRemoval: TerniLapilliTest #test02AfterXTurnIsOTurn stamp: 'DS 10/29/2020 18:14:29'!
test02AfterXTurnIsOTurn
	
	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@0.
	
	self deny: aTerniLapilli isPlayingX.
	self assert: aTerniLapilli isPlayingO.!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 18:14:47'!
test02AfterFirstTurnIsOPlayerTurn
	
	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@0.
	
	self deny: aTerniLapilli isPlayingX.
	self assert: aTerniLapilli isPlayingO.! !

!methodRemoval: TerniLapilliTest #test02AfterFirstTurnIsOTurn stamp: 'DS 10/29/2020 18:14:47'!
test02AfterFirstTurnIsOTurn
	
	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@0.
	
	self deny: aTerniLapilli isPlayingX.
	self assert: aTerniLapilli isPlayingO.!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 18:15:30'!
test03AfterOPlayerTurnIsXPlayerTurn
	
	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@0.
	aTerniLapilli putXAt: 0@1.
	
	self assert: aTerniLapilli isPlayingX.
	self deny: aTerniLapilli isPlayingO.! !

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/29/2020 18:15:31'!
FAILURE!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 18:15:58' prior: 50893552!
test03AfterOPlayerTurnIsXPlayerTurn
	
	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@0.
	aTerniLapilli putYAt: 0@1.
	
	self assert: aTerniLapilli isPlayingX.
	self deny: aTerniLapilli isPlayingO.! !

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/29/2020 18:16:03'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 18:16:23'!
putYAt: aPoint 
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 18:16:40' prior: 50893580!
putYAt: aPosition

	currentPlayer := #O.! !

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/29/2020 18:16:41'!
FAILURE!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 18:17:03' prior: 50893566!
test03AfterOPlayerTurnIsXPlayerTurn
	
	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@0.
	aTerniLapilli putOAt: 0@1.
	
	self assert: aTerniLapilli isPlayingX.
	self deny: aTerniLapilli isPlayingO.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 18:17:16'!
putOAt: aPosition

	currentPlayer := #O.! !

!methodRemoval: TerniLapilli #putYAt: stamp: 'DS 10/29/2020 18:17:16'!
putYAt: aPosition

	currentPlayer := #O.!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 18:17:20' prior: 50893603!
putOAt: aPosition

	currentPlayer := #X.! !

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 10/29/2020 18:17:26'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/29/2020 18:17:26'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/29/2020 18:17:26'!
PASSED!

----SNAPSHOT----(29 October 2020 18:17:30) CuisUniversity-4384.image priorSource: 17979111!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 18:22:03'!
test04XPlayerCanNotPlayOnOPlayerTurn
	
	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@0.
	aTerniLapilli putXAt: 0@1.
	
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 18:23:53' prior: 50893628!
test04XPlayerCanNotPlayOnOPlayerTurn
	
	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@0.

	self 
		should: [ aTerniLapilli putXAt: 0@1.. ]
		raise: Error
		withMessageText: TerniLapilli canNotPlayTwiceInARowErrorDescription.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 18:23:58' prior: 50893637!
test04XPlayerCanNotPlayOnOPlayerTurn
	
	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@0.

	self 
		should: [ aTerniLapilli putXAt: 0@1.]
		raise: Error
		withMessageText: TerniLapilli canNotPlayTwiceInARowErrorDescription.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 18:23:59' prior: 50893649!
test04XPlayerCanNotPlayOnOPlayerTurn
	
	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@0.

	self 
		should: [ aTerniLapilli putXAt: 0@1. ]
		raise: Error
		withMessageText: TerniLapilli canNotPlayTwiceInARowErrorDescription.! !

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/29/2020 18:24:00'!
ERROR!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 18:24:33' prior: 50893661!
test04XPlayerCanNotPlayOnOPlayerTurn
	
	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@0.

	self 
		should: [ aTerniLapilli putXAt: 0@1. ]
		raise: Error
		withMessageText: TerniLapilli attemptNotPlayTwiceInARowErrorDescription.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 18:24:55' prior: 50893676!
test04XPlayerCanNotPlayOnOPlayerTurn
	
	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@0.

	self 
		should: [ aTerniLapilli putXAt: 0@1. ]
		raise: Error
		withMessageText: TerniLapilli attemptToPlayTwiceInARowErrorDescription.! !

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/29/2020 18:24:57'!
ERROR!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/29/2020 18:25:13'!
ERROR!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/29/2020 18:25:24'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 18:26:23' prior: 50893396!
putXAt: aPosition

	currentPlayer = #X ifTrue: [ self error: self class attemptToPlayTwiceInARowErrorDescription ].

	currentPlayer := #O.! !

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/29/2020 18:26:27'!
ERROR!
!TerniLapilli class methodsFor: 'error descriptions' stamp: 'DS 10/29/2020 18:26:41'!
attemptToPlayTwiceInARowErrorDescription
	self shouldBeImplemented.! !
!TerniLapilli class methodsFor: 'error descriptions' stamp: 'DS 10/29/2020 18:26:56' prior: 50893721!
attemptToPlayTwiceInARowErrorDescription

	^'Can not play twice in a row'.! !

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/29/2020 18:26:57'!
ERROR!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/29/2020 18:27:06'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 18:27:45' prior: 50893710!
putXAt: aPosition

	currentPlayer = #O ifTrue: [ self error: (self class attemptToPlayTwiceInARowErrorDescription) ].

	currentPlayer := #O.! !

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/29/2020 18:27:47'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 10/29/2020 18:27:47'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/29/2020 18:27:47'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/29/2020 18:27:47'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/29/2020 18:27:47'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 10/29/2020 18:27:52'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/29/2020 18:27:52'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/29/2020 18:27:52'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/29/2020 18:27:52'!
PASSED!

----SNAPSHOT----(29 October 2020 18:27:55) CuisUniversity-4384.image priorSource: 17983173!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 18:28:28'!
test05OPlayerCanNotPlayOnXPlayerTurn
	
	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putOAt: 0@0.

	self 
		should: [ aTerniLapilli putOAt: 0@1. ]
		raise: Error
		withMessageText: TerniLapilli attemptToPlayTwiceInARowErrorDescription.! !

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/29/2020 18:28:30'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 18:34:55' prior: 50893611!
putOAt: aPosition

	currentPlayer = #X ifTrue: [ self error: (self class attemptToPlayTwiceInARowErrorDescription) ].

	currentPlayer := #X.! !

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 10/29/2020 18:34:56'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/29/2020 18:34:56'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/29/2020 18:34:56'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/29/2020 18:34:56'!
PASSED!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/29/2020 18:34:56'!
ERROR!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/29/2020 18:34:56'!
ERROR!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/29/2020 18:38:03'!
ERROR!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/29/2020 18:38:03'!
ERROR!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/29/2020 18:40:18'!
ERROR!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/29/2020 18:40:18'!
ERROR!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 18:41:13' prior: 50893780!
test05OPlayerCanNotPlayOnXPlayerTurn
	
	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.

	self 
		should: [ aTerniLapilli putOAt: 0@1. ]
		raise: Error
		withMessageText: TerniLapilli attemptToPlayTwiceInARowErrorDescription.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 18:41:30' prior: 50893836!
test05OPlayerCanNotPlayOnXPlayerTurn
	
	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.

	self 
		should: [ aTerniLapilli putOAt: 0@1. ]
		raise: Error
		withMessageText: TerniLapilli attemptToPlayTwiceInARowErrorDescription.! !

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/29/2020 18:41:30'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 10/29/2020 18:41:30'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/29/2020 18:41:30'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/29/2020 18:41:30'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/29/2020 18:41:30'!
PASSED!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/29/2020 18:41:30'!
PASSED!

----SNAPSHOT----(29 October 2020 18:41:34) CuisUniversity-4384.image priorSource: 17988039!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 18:41:54' prior: 50893847!
test05OPlayerCanNotPlayOnXPlayerTurn
	
	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.

	self 
		should: [ aTerniLapilli putOAt: 0@1. ]
		raise: Error
		withMessageText: TerniLapilli attemptToPlayTwiceInARowErrorDescription.! !

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/29/2020 18:41:55'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 10/29/2020 18:41:55'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/29/2020 18:41:55'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/29/2020 18:41:55'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/29/2020 18:41:55'!
PASSED!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/29/2020 18:41:55'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 18:50:38'!
test06
	
	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@0.
	aTerniLapilli putOAt: 0@1.
	
	aTerniLapilli putXAt: -1@1.
	aTerniLapilli putOAt: 1@-1.
	
	aTerniLapilli putXAt: 1@1.
	aTerniLapilli putOAt: 0@-1.

	self
		should: [ aTerniLapilli putXAt: -1@-1. ]
		raise: Error
		withMessageText: TerniLapilli attemptPutMoreThan3Token.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 18:51:44' prior: 50893911!
test06
	
	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@0.
	aTerniLapilli putOAt: 0@1.
	
	aTerniLapilli putXAt: -1@1.
	aTerniLapilli putOAt: 1@-1.
	
	aTerniLapilli putXAt: 1@1.
	aTerniLapilli putOAt: 0@-1.

	self
		should: [ aTerniLapilli putXAt: -1@-1. ]
		raise: Error
		withMessageText: TerniLapilli noRemainedTokens! !

!classDefinition: #TerniLapilli category: 'TerniLapippiSolution' stamp: 'DS 10/29/2020 18:52:14'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'currentPlayer tokensXRemained'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapippiSolution'!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 18:52:11' prior: 50893740!
putXAt: aPosition

	currentPlayer = #O ifTrue: [ self error: (self class attemptToPlayTwiceInARowErrorDescription) ].

	currentPlayer := #O.

	tokensXRemained := tokensXRemained - 1.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 18:53:20' prior: 50893949!
putXAt: aPosition

	currentPlayer = #O ifTrue: [ self error: (self class attemptToPlayTwiceInARowErrorDescription) ].
	tokensXRemained  = 0 ifTrue: [ self error: (self class noRemainedTokensErrorDescription )].

	currentPlayer := #O.

	tokensXRemained := tokensXRemained - 1.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 18:53:28' prior: 50893926!
test06
	
	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@0.
	aTerniLapilli putOAt: 0@1.
	
	aTerniLapilli putXAt: -1@1.
	aTerniLapilli putOAt: 1@-1.
	
	aTerniLapilli putXAt: 1@1.
	aTerniLapilli putOAt: 0@-1.

	self
		should: [ aTerniLapilli putXAt: -1@-1. ]
		raise: Error
		withMessageText: TerniLapilli noRemainedTokensErrorDescription.! !

!testRun: #TerniLapilliTest #test06 stamp: 'DS 10/29/2020 18:53:33'!
ERROR!

!testRun: #TerniLapilliTest #test06 stamp: 'DS 10/29/2020 18:53:43'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 18:54:03' prior: 50893433 overrides: 16896425!
initialize

	currentPlayer := #X.
	tokensXRemained := 3.! !

!testRun: #TerniLapilliTest #test06 stamp: 'DS 10/29/2020 18:54:08'!
ERROR!
!TerniLapilli class methodsFor: 'class variables' stamp: 'DS 10/29/2020 18:54:15'!
noRemainedTokensErrorDescription
	self shouldBeImplemented.! !
!TerniLapilli class methodsFor: 'class variables' stamp: 'DS 10/29/2020 18:54:32' prior: 50893998!
noRemainedTokensErrorDescription

	^'No Remained Tokens'.! !

!testRun: #TerniLapilliTest #test06 stamp: 'DS 10/29/2020 18:54:33'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 10/29/2020 18:54:33'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/29/2020 18:54:33'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/29/2020 18:54:33'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/29/2020 18:54:33'!
PASSED!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/29/2020 18:54:33'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'DS 10/29/2020 18:54:33'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'DS 10/29/2020 18:54:46'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 19:01:10'!
test07
	
	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@0.

	self
		should: [ aTerniLapilli putOAt: 0@0. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.! !
!TerniLapilli class methodsFor: 'error descriptions' stamp: 'DS 10/29/2020 19:01:36'!
ilegalMovementErrorDescription

	^'Ilegal Movement'.! !

!testRun: #TerniLapilliTest #test07 stamp: 'DS 10/29/2020 19:01:48'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 19:02:11' prior: 50893958!
putXAt: aPosition

	currentPlayer = #O ifTrue: [ self error: (self class attemptToPlayTwiceInARowErrorDescription) ].
	tokensXRemained  = 0 ifTrue: [ self error: (self class noRemainedTokensErrorDescription )].

	currentPlayer := #O.
	tokensXRemained := tokensXRemained - 1.! !

!classDefinition: #TerniLapilli category: 'TerniLapippiSolution' stamp: 'DS 10/29/2020 19:05:12'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'currentPlayer tokensXRemained positionsOccupied'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapippiSolution'!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 19:05:10' prior: 50894051!
putXAt: aPosition

	currentPlayer = #O ifTrue: [ self error: (self class attemptToPlayTwiceInARowErrorDescription) ].
	tokensXRemained  = 0 ifTrue: [ self error: (self class noRemainedTokensErrorDescription )].

	(positionsOccupied contains: aPosition) ifTrue: [ self error: self class ilegalMovementErrorDescription ].

	currentPlayer := #O.
	tokensXRemained := tokensXRemained - 1.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 19:05:34' prior: 50894072!
putXAt: aPosition

	currentPlayer = #O ifTrue: [ self error: (self class attemptToPlayTwiceInARowErrorDescription) ].
	tokensXRemained  = 0 ifTrue: [ self error: (self class noRemainedTokensErrorDescription )].

	(positionsOccupied contains: aPosition) ifTrue: [ self error: self class ilegalMovementErrorDescription ].

	positionsOccupied add: aPosition.
	currentPlayer := #O.
	tokensXRemained := tokensXRemained - 1.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 19:05:50' prior: 50893991 overrides: 16896425!
initialize

	currentPlayer := #X.
	tokensXRemained := 3.
	positionsOccupied := OrderedCollection new.! !

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 10/29/2020 19:06:03'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/29/2020 19:06:03'!
ERROR!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/29/2020 19:06:03'!
ERROR!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/29/2020 19:06:03'!
ERROR!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/29/2020 19:06:03'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'DS 10/29/2020 19:06:03'!
ERROR!

!testRun: #TerniLapilliTest #test07 stamp: 'DS 10/29/2020 19:06:03'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 19:06:20' prior: 50894088!
putXAt: aPosition

	currentPlayer = #O ifTrue: [ self error: (self class attemptToPlayTwiceInARowErrorDescription) ].
	tokensXRemained  = 0 ifTrue: [ self error: (self class noRemainedTokensErrorDescription )].

	(positionsOccupied includes: aPosition) ifTrue: [ self error: self class ilegalMovementErrorDescription ].

	positionsOccupied add: aPosition.
	currentPlayer := #O.
	tokensXRemained := tokensXRemained - 1.! !

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 10/29/2020 19:06:23'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/29/2020 19:06:23'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/29/2020 19:06:23'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/29/2020 19:06:23'!
PASSED!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/29/2020 19:06:23'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'DS 10/29/2020 19:06:23'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'DS 10/29/2020 19:06:23'!
FAILURE!

!testRun: #TerniLapilliTest #test07 stamp: 'DS 10/29/2020 19:06:23'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 19:06:44' prior: 50894133!
putXAt: aPosition

	currentPlayer = #O ifTrue: [ self error: (self class attemptToPlayTwiceInARowErrorDescription) ].
	tokensXRemained  = 0 ifTrue: [ self error: (self class noRemainedTokensErrorDescription )].

	currentPlayer := #O.
	tokensXRemained := tokensXRemained - 1.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 19:06:51' prior: 50893795!
putOAt: aPosition

	currentPlayer = #X ifTrue: [ self error: (self class attemptToPlayTwiceInARowErrorDescription) ].
	(positionsOccupied includes: aPosition) ifTrue: [ self error: self class ilegalMovementErrorDescription ].

	positionsOccupied add: aPosition.
	currentPlayer := #X.! !

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 10/29/2020 19:06:53'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/29/2020 19:06:53'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/29/2020 19:06:53'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/29/2020 19:06:53'!
PASSED!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/29/2020 19:06:53'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'DS 10/29/2020 19:06:53'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'DS 10/29/2020 19:06:53'!
FAILURE!

!testRun: #TerniLapilliTest #test07 stamp: 'DS 10/29/2020 19:06:53'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 19:07:13' prior: 50894186!
putOAt: aPosition

	currentPlayer = #X ifTrue: [ self error: (self class attemptToPlayTwiceInARowErrorDescription) ].
	(positionsOccupied includes: aPosition) ifTrue: [ self error: self class ilegalMovementErrorDescription ].

	currentPlayer := #X.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 19:07:18' prior: 50894174!
putXAt: aPosition

	currentPlayer = #O ifTrue: [ self error: (self class attemptToPlayTwiceInARowErrorDescription) ].
	tokensXRemained  = 0 ifTrue: [ self error: (self class noRemainedTokensErrorDescription )].

	positionsOccupied add: aPosition.
	currentPlayer := #O.
	tokensXRemained := tokensXRemained - 1.! !

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 10/29/2020 19:07:19'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/29/2020 19:07:19'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/29/2020 19:07:19'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/29/2020 19:07:19'!
PASSED!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/29/2020 19:07:19'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'DS 10/29/2020 19:07:19'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'DS 10/29/2020 19:07:19'!
PASSED!

----SNAPSHOT----(29 October 2020 19:07:26) CuisUniversity-4384.image priorSource: 17991242!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 19:07:51'!
test08
	
	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@0.
	aTerniLapilli putOAt: 0@1.

	self
		should: [ aTerniLapilli putXAt: 0@1. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.! !

!testRun: #TerniLapilliTest #test08 stamp: 'DS 10/29/2020 19:07:53'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 19:08:15' prior: 50894222!
putOAt: aPosition

	currentPlayer = #X ifTrue: [ self error: (self class attemptToPlayTwiceInARowErrorDescription) ].
	(positionsOccupied includes: aPosition) ifTrue: [ self error: self class ilegalMovementErrorDescription ].

	positionsOccupied add: aPosition.
	currentPlayer := #X.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 19:08:21' prior: 50894233!
putXAt: aPosition

	currentPlayer = #O ifTrue: [ self error: (self class attemptToPlayTwiceInARowErrorDescription) ].
	tokensXRemained  = 0 ifTrue: [ self error: (self class noRemainedTokensErrorDescription )].
	(positionsOccupied includes: aPosition) ifTrue: [ self error: self class ilegalMovementErrorDescription ].

	positionsOccupied add: aPosition.
	currentPlayer := #O.
	tokensXRemained := tokensXRemained - 1.! !

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 10/29/2020 19:08:23'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/29/2020 19:08:23'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/29/2020 19:08:23'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/29/2020 19:08:23'!
PASSED!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/29/2020 19:08:23'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'DS 10/29/2020 19:08:23'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'DS 10/29/2020 19:08:23'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'DS 10/29/2020 19:08:23'!
PASSED!

----SNAPSHOT----(29 October 2020 19:08:25) CuisUniversity-4384.image priorSource: 18003718!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 19:16:40'!
test09
	
	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@0.
	aTerniLapilli putOAt: 0@1.
	
	aTerniLapilli putXAt: -1@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: 1@-1.

	self assert: aTerniLapilli isOver.
	self assert: aTerniLapilli hasPlayerXWon.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 19:19:39' prior: 50894296!
putXAt: aPosition

	currentPlayer = #O ifTrue: [ self error: (self class attemptToPlayTwiceInARowErrorDescription) ].
	tokensXRemained  = 0 ifTrue: [ self error: (self class noRemainedTokensErrorDescription )].
	(positionsOccupied includes: aPosition) ifTrue: [ self error: self class ilegalMovementErrorDescription ].

	positionsOccupied add: #(#X, aPosition).
	currentPlayer := #O.
	tokensXRemained := tokensXRemained - 1.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 19:20:09' prior: 50894284!
putOAt: aPosition

	currentPlayer = #X ifTrue: [ self error: (self class attemptToPlayTwiceInARowErrorDescription) ].
	(positionsOccupied includes: aPosition) ifTrue: [ self error: self class ilegalMovementErrorDescription ].

	positionsOccupied add: #(#O, aPosition).
	currentPlayer := #X.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 19:25:24' prior: 50894033!
test07
	
	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@0.

	self
		should: [ aTerniLapilli putOAt: 0@0. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 19:25:30'!
test07OPlayerCanNotPutOnOccupiedPosition
	
	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@0.

	self
		should: [ aTerniLapilli putOAt: 0@0. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.! !

!methodRemoval: TerniLapilliTest #test07 stamp: 'DS 10/29/2020 19:25:30'!
test07
	
	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@0.

	self
		should: [ aTerniLapilli putOAt: 0@0. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 19:25:45'!
test08XPlayerCanNotPutOnOccupiedPosition
	
	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@0.
	aTerniLapilli putOAt: 0@1.

	self
		should: [ aTerniLapilli putXAt: 0@1. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.! !

!methodRemoval: TerniLapilliTest #test08 stamp: 'DS 10/29/2020 19:25:45'!
test08
	
	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@0.
	aTerniLapilli putOAt: 0@1.

	self
		should: [ aTerniLapilli putXAt: 0@1. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 19:27:22' prior: 50894352!
putXAt: aPosition

	currentPlayer = #O ifTrue: [ self error: (self class attemptToPlayTwiceInARowErrorDescription) ].
	(positionsOccupied includes: aPosition) ifTrue: [ self error: self class ilegalMovementErrorDescription ].

	positionsOccupied add: #(#X, aPosition).
	currentPlayer := #O.
	tokensXRemained := tokensXRemained - 1.! !

!methodRemoval: TerniLapilliTest #test06 stamp: 'DS 10/29/2020 19:28:07'!
test06
	
	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@0.
	aTerniLapilli putOAt: 0@1.
	
	aTerniLapilli putXAt: -1@1.
	aTerniLapilli putOAt: 1@-1.
	
	aTerniLapilli putXAt: 1@1.
	aTerniLapilli putOAt: 0@-1.

	self
		should: [ aTerniLapilli putXAt: -1@-1. ]
		raise: Error
		withMessageText: TerniLapilli noRemainedTokensErrorDescription.!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 19:28:22' prior: 50894435!
putXAt: aPosition

	currentPlayer = #O ifTrue: [ self error: (self class attemptToPlayTwiceInARowErrorDescription) ].
	(positionsOccupied includes: aPosition) ifTrue: [ self error: self class ilegalMovementErrorDescription ].

	positionsOccupied add: #(#X, aPosition).
	currentPlayer := #O.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 19:30:28'!
put: aPlayer at: aPosition


	(self isNotTurnOf: aPlayer) ifTrue: [ self error: (self class attemptToPlayTwiceInARowErrorDescription) ].
	(positionsOccupied includes: aPosition) ifTrue: [ self error: self class ilegalMovementErrorDescription ].

	positionsOccupied add: #(aPlayer, aPosition).
	currentPlayer := self oppositePlayerOf: aPlayer.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 19:31:32' prior: 50894475!
put: aPlayer at: aPosition


	(currentPlayer = aPlayer ) not ifTrue: [ self error: (self class attemptToPlayTwiceInARowErrorDescription) ].
	(positionsOccupied includes: aPosition) ifTrue: [ self error: self class ilegalMovementErrorDescription ].

	positionsOccupied add: #(aPlayer, aPosition).
	currentPlayer := self oppositePlayerOf: aPlayer.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 19:31:53' prior: 50894489!
put: aPlayer at: aPosition


	(currentPlayer = aPlayer) not ifTrue: [ self error: (self class attemptToPlayTwiceInARowErrorDescription) ].
	(positionsOccupied includes: aPosition) ifTrue: [ self error: self class ilegalMovementErrorDescription ].

	positionsOccupied add: #(aPlayer, aPosition).
	currentPlayer := self oppositePlayerOf: aPlayer.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 19:32:43' prior: 50894503!
put: aPlayer at: aPosition


	(currentPlayer = aPlayer) not ifTrue: [ self error: (self class attemptToPlayTwiceInARowErrorDescription) ].
	(positionsOccupied includes: aPosition) ifTrue: [ self error: self class ilegalMovementErrorDescription ].

	positionsOccupied add: #(aPlayer, aPosition).
	currentPlayer := (aPlayer = #X) ifTrue: [#O] ifFalse: [#X].! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 19:33:08' prior: 50894463!
putXAt: aPosition

	self put: #X at: aPosition.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 19:33:25' prior: 50894369!
putOAt: aPosition

	self put: #O at: aPosition.! !

!methodRemoval: TerniLapilliTest #test09 stamp: 'DS 10/29/2020 19:33:33'!
test09
	
	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@0.
	aTerniLapilli putOAt: 0@1.
	
	aTerniLapilli putXAt: -1@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: 1@-1.

	self assert: aTerniLapilli isOver.
	self assert: aTerniLapilli hasPlayerXWon.!

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 10/29/2020 19:33:36'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/29/2020 19:33:36'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/29/2020 19:33:36'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/29/2020 19:33:36'!
PASSED!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/29/2020 19:33:36'!
PASSED!

!testRun: #TerniLapilliTest #test07OPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/29/2020 19:33:36'!
FAILURE!

!testRun: #TerniLapilliTest #test08XPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/29/2020 19:33:36'!
FAILURE!

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 10/29/2020 19:34:23'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/29/2020 19:34:23'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/29/2020 19:34:23'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/29/2020 19:34:23'!
PASSED!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/29/2020 19:34:23'!
PASSED!

!testRun: #TerniLapilliTest #test07OPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/29/2020 19:34:23'!
FAILURE!

!testRun: #TerniLapilliTest #test08XPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/29/2020 19:34:23'!
FAILURE!

!testRun: #TerniLapilliTest #test07OPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/29/2020 19:34:25'!
FAILURE!

(currentPlayer = aPlayer) not!

positionsOccupied!

positionsOccupied!

self!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 19:36:29' prior: 50894517!
put: aPlayer at: aPosition


	(currentPlayer = aPlayer) not ifTrue: [ self error: (self class attemptToPlayTwiceInARowErrorDescription) ].
	(positionsOccupied includes: aPosition) ifTrue: [ self error: self class ilegalMovementErrorDescription ].

	positionsOccupied add: (aPlayer, aPosition).
	currentPlayer := (aPlayer = #X) ifTrue: [#O] ifFalse: [#X].! !

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 10/29/2020 19:36:32'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/29/2020 19:36:32'!
ERROR!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/29/2020 19:36:32'!
ERROR!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/29/2020 19:36:32'!
ERROR!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/29/2020 19:36:32'!
PASSED!

!testRun: #TerniLapilliTest #test07OPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/29/2020 19:36:32'!
ERROR!

!testRun: #TerniLapilliTest #test08XPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/29/2020 19:36:32'!
ERROR!

#(#X, 0@0)!

{#X. 0@0}!

{#X. 0@0} first!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 19:37:37' prior: 50894607!
put: aPlayer at: aPosition


	(currentPlayer = aPlayer) not ifTrue: [ self error: (self class attemptToPlayTwiceInARowErrorDescription) ].
	(positionsOccupied includes: aPosition) ifTrue: [ self error: self class ilegalMovementErrorDescription ].

	positionsOccupied add: {aPlayer. aPosition}.
	currentPlayer := (aPlayer = #X) ifTrue: [#O] ifFalse: [#X].! !

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 10/29/2020 19:37:39'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/29/2020 19:37:39'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/29/2020 19:37:39'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/29/2020 19:37:39'!
PASSED!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/29/2020 19:37:39'!
PASSED!

!testRun: #TerniLapilliTest #test07OPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/29/2020 19:37:39'!
FAILURE!

!testRun: #TerniLapilliTest #test08XPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/29/2020 19:37:39'!
FAILURE!

!testRun: #TerniLapilliTest #test07OPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/29/2020 19:37:41'!
FAILURE!

!testRun: #TerniLapilliTest #test07OPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/29/2020 19:37:58'!
FAILURE!

{aPlayer. aPosition}!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 19:40:49' prior: 50894646!
put: aPlayer at: aPosition


	(currentPlayer = aPlayer) not ifTrue: [ self error: (self class attemptToPlayTwiceInARowErrorDescription) ].
	((positionsOccupied do: [ :aOccupiedPosition | aOccupiedPosition first] ) includes: aPosition) 		ifTrue: [ self error: self class ilegalMovementErrorDescription ].

	positionsOccupied add: {aPlayer. aPosition}.
	currentPlayer := (aPlayer = #X) ifTrue: [#O] ifFalse: [#X].! !

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 10/29/2020 19:40:53'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/29/2020 19:40:53'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/29/2020 19:40:53'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/29/2020 19:40:53'!
PASSED!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/29/2020 19:40:53'!
PASSED!

!testRun: #TerniLapilliTest #test07OPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/29/2020 19:40:53'!
FAILURE!

!testRun: #TerniLapilliTest #test08XPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/29/2020 19:40:53'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 19:41:12' prior: 50894692!
put: aPlayer at: aPosition


	(currentPlayer = aPlayer) not ifTrue: [ self error: (self class attemptToPlayTwiceInARowErrorDescription) ].
	((positionsOccupied do: [ :aOccupiedPosition | aOccupiedPosition second] ) includes: aPosition) 		ifTrue: [ self error: self class ilegalMovementErrorDescription ].

	positionsOccupied add: {aPlayer. aPosition}.
	currentPlayer := (aPlayer = #X) ifTrue: [#O] ifFalse: [#X].! !

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 10/29/2020 19:41:13'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/29/2020 19:41:13'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/29/2020 19:41:13'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/29/2020 19:41:13'!
PASSED!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/29/2020 19:41:13'!
PASSED!

!testRun: #TerniLapilliTest #test07OPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/29/2020 19:41:13'!
FAILURE!

!testRun: #TerniLapilliTest #test08XPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/29/2020 19:41:13'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 19:41:41' prior: 50894732!
put: aPlayer at: aPosition


	(currentPlayer = aPlayer) not ifTrue: [ self error: (self class attemptToPlayTwiceInARowErrorDescription) ].
	((positionsOccupied select:[ :aOccupiedPosition | aOccupiedPosition second] ) includes: aPosition) 		ifTrue: [ self error: self class ilegalMovementErrorDescription ].

	positionsOccupied add: {aPlayer. aPosition}.
	currentPlayer := (aPlayer = #X) ifTrue: [#O] ifFalse: [#X].! !

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 10/29/2020 19:41:43'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/29/2020 19:41:43'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/29/2020 19:41:43'!
ERROR!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/29/2020 19:41:43'!
PASSED!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/29/2020 19:41:43'!
PASSED!

!testRun: #TerniLapilliTest #test07OPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/29/2020 19:41:43'!
FAILURE!

!testRun: #TerniLapilliTest #test08XPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/29/2020 19:41:43'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 19:41:52' prior: 50894772!
put: aPlayer at: aPosition


	(currentPlayer = aPlayer) not ifTrue: [ self error: (self class attemptToPlayTwiceInARowErrorDescription) ].
	((positionsOccupied select: [ :aOccupiedPosition | aOccupiedPosition second] ) includes: aPosition) 		ifTrue: [ self error: self class ilegalMovementErrorDescription ].

	positionsOccupied add: {aPlayer. aPosition}.
	currentPlayer := (aPlayer = #X) ifTrue: [#O] ifFalse: [#X].! !

collection := OrderedCollection new.!

collection add: {#X. 0@0}.
collection add: {#O. 1@0}.!

collection!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 19:46:46'!
test06OPlayerCanNotPutOnOccupiedPosition
	
	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@0.

	self
		should: [ aTerniLapilli putOAt: 0@0. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.! !

!methodRemoval: TerniLapilliTest #test07OPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/29/2020 19:46:46'!
test07OPlayerCanNotPutOnOccupiedPosition
	
	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@0.

	self
		should: [ aTerniLapilli putOAt: 0@0. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 19:46:52'!
test07XPlayerCanNotPutOnOccupiedPosition
	
	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@0.
	aTerniLapilli putOAt: 0@1.

	self
		should: [ aTerniLapilli putXAt: 0@1. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.! !

!methodRemoval: TerniLapilliTest #test08XPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/29/2020 19:46:52'!
test08XPlayerCanNotPutOnOccupiedPosition
	
	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@0.
	aTerniLapilli putOAt: 0@1.

	self
		should: [ aTerniLapilli putXAt: 0@1. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.!

collection do: [ :a | a second]!

collection collect: [ :a | a second]!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 19:47:36' prior: 50894812!
put: aPlayer at: aPosition


	(currentPlayer = aPlayer) not ifTrue: [ self error: (self class attemptToPlayTwiceInARowErrorDescription) ].
	((positionsOccupied collect: [ :aOccupiedPosition | aOccupiedPosition second] ) includes: aPosition) 		ifTrue: [ self error: self class ilegalMovementErrorDescription ].

	positionsOccupied add: {aPlayer. aPosition}.
	currentPlayer := (aPlayer = #X) ifTrue: [#O] ifFalse: [#X].! !

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 10/29/2020 19:47:37'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/29/2020 19:47:37'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/29/2020 19:47:37'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/29/2020 19:47:37'!
PASSED!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/29/2020 19:47:37'!
PASSED!

!testRun: #TerniLapilliTest #test06OPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/29/2020 19:47:37'!
PASSED!

!testRun: #TerniLapilliTest #test07XPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/29/2020 19:47:37'!
PASSED!

----SNAPSHOT----(29 October 2020 19:47:42) CuisUniversity-4384.image priorSource: 18005920!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 20:17:26'!
test08
	
	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@0.
	aTerniLapilli putOAt: 0@1.
	
	aTerniLapilli putXAt: -1@0.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: 1@0.

	self assert: aTerniLapilli isOver.
	self assert: aTerniLapilli hasPlayerXWon.! !

----SNAPSHOT----(29 October 2020 20:17:42) CuisUniversity-4384.image priorSource: 18024662!

!testRun: #TerniLapilliTest #test08 stamp: 'DS 10/29/2020 20:18:47'!
ERROR!
!TerniLapilli methodsFor: 'wins' stamp: 'DS 10/29/2020 20:19:01'!
isOver
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'wins' stamp: 'DS 10/29/2020 20:19:18' prior: 50894942!
isOver

	^self hasPlayerXWon.! !

!testRun: #TerniLapilliTest #test08 stamp: 'DS 10/29/2020 20:19:19'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 20:19:30'!
hasPlayerXWon
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 20:20:18' prior: 50894105 overrides: 16896425!
initialize

	currentPlayer := #X.
	positionsOccupied := OrderedCollection new.! !

!testRun: #TerniLapilliTest #test08 stamp: 'DS 10/29/2020 20:20:24'!
ERROR!
!TerniLapilli methodsFor: 'error handling' stamp: 'DS 10/29/2020 20:20:29' overrides: 16881409!
error: aString 
	self shouldBeImplemented.! !

!methodRemoval: TerniLapilli #isOver stamp: 'DS 10/29/2020 20:21:44'!
isOver

	^self hasPlayerXWon.!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 20:22:20' prior: 50894925!
test08
	
	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@0.
	aTerniLapilli putOAt: 0@1.
	
	aTerniLapilli putXAt: -1@0.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: 1@0.

	self assert: aTerniLapilli hasPlayerXWon.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 20:23:03' prior: 50894952!
hasPlayerXWon

	! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 20:24:25' prior: 50894986!
hasPlayerXWon

	| positionsOccupiedByXPlayer |

	positionsOccupiedByXPlayer := positionsOccupied select: [ :aOccupiedPosition | aOccupiedPosition first = #X ].
	
	
	! !

collection := OrderedCollection new.!

collection add: {0@0}.
collection add: {1@0}.
collection add: {-1@0}.!

collection add: {0@0}.
collection add: {1@0}.
collection add: {-1@0}.!

collection!

collection := OrderedCollection new.!

collection add: {0@0}.
collection add: {1@0}.
collection add: {-1@0}.!

collection!

collection sort!

collection !

collection := OrderedCollection new.!


collection add: 0@0.
collection add: 1@0.
collection add: -1@0.
!

collection!

collection sort!

0@0 + 1!

0@0 + 1@0!

(0@0) + (1@0)!

collection !

(-1@0) + (1@0)!

(-1@1) + (1@0)!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 20:41:30' prior: 50894990!
hasPlayerXWon

	| positionsOccupiedByXPlayer i isWinner |

	positionsOccupiedByXPlayer := (positionsOccupied select: [ :aOccupiedPosition | aOccupiedPosition first = #X ]) sort.
	
	i := 1.
	isWinner := false.
	(i < positionsOccupiedByXPlayer - 1 size)	 whileTrue: [
		isWinner := ((positionsOccupiedByXPlayer at: i)	 + 1@	0) = (positionsOccupiedByXPlayer at: i+1)	.
		i := i+1.
	].

	^isWinner.! !

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 10/29/2020 20:41:35'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/29/2020 20:41:35'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/29/2020 20:41:35'!
PASSED!

!methodRemoval: TerniLapilli #error: stamp: 'DS 10/29/2020 20:41:50'!
error: aString 
	self shouldBeImplemented.!

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 10/29/2020 20:41:52'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/29/2020 20:41:52'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/29/2020 20:41:52'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/29/2020 20:41:52'!
PASSED!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/29/2020 20:41:52'!
PASSED!

!testRun: #TerniLapilliTest #test06OPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/29/2020 20:41:52'!
PASSED!

!testRun: #TerniLapilliTest #test07XPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/29/2020 20:41:52'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'DS 10/29/2020 20:41:52'!
ERROR!

!testRun: #TerniLapilliTest #test08 stamp: 'DS 10/29/2020 20:41:52'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 20:44:05' prior: 50895017!
hasPlayerXWon

	| positionsOccupiedByXPlayer i isWinner |

	positionsOccupiedByXPlayer := (positionsOccupied select: [ :aOccupiedPosition | aOccupiedPosition first = #X ] ) 
							  	collect: [ :aOccupiedPositionByX | aOccupiedPositionByX second] sort.
	
	i := 1.
	isWinner := false.
	(i < positionsOccupiedByXPlayer - 1 size)	 whileTrue: [
		isWinner := ((positionsOccupiedByXPlayer at: i)	 + 1@	0) = (positionsOccupiedByXPlayer at: i+1)	.
		i := i+1.
	].

	^isWinner.! !

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 10/29/2020 20:44:08'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/29/2020 20:44:08'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/29/2020 20:44:08'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/29/2020 20:44:08'!
PASSED!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/29/2020 20:44:08'!
PASSED!

!testRun: #TerniLapilliTest #test06OPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/29/2020 20:44:08'!
PASSED!

!testRun: #TerniLapilliTest #test07XPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/29/2020 20:44:08'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'DS 10/29/2020 20:44:08'!
ERROR!

!testRun: #TerniLapilliTest #test08 stamp: 'DS 10/29/2020 20:44:08'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 20:44:25' prior: 50895075!
hasPlayerXWon

	| positionsOccupiedByXPlayer i isWinner |

	positionsOccupiedByXPlayer := ( ( positionsOccupied select: [ :aOccupiedPosition | aOccupiedPosition first = #X ] ) 
							  	collect: [ :aOccupiedPositionByX | aOccupiedPositionByX second] ) sort.
	
	i := 1.
	isWinner := false.
	(i < positionsOccupiedByXPlayer - 1 size)	 whileTrue: [
		isWinner := ((positionsOccupiedByXPlayer at: i)	 + 1@	0) = (positionsOccupiedByXPlayer at: i+1)	.
		i := i+1.
	].

	^isWinner.! !

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 10/29/2020 20:44:27'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/29/2020 20:44:27'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/29/2020 20:44:27'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/29/2020 20:44:27'!
PASSED!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/29/2020 20:44:27'!
PASSED!

!testRun: #TerniLapilliTest #test06OPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/29/2020 20:44:27'!
PASSED!

!testRun: #TerniLapilliTest #test07XPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/29/2020 20:44:27'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'DS 10/29/2020 20:44:27'!
ERROR!

!testRun: #TerniLapilliTest #test08 stamp: 'DS 10/29/2020 20:44:27'!
ERROR!

 ( positionsOccupied select: [ :aOccupiedPosition | aOccupiedPosition first = #X ] ) !

( ( positionsOccupied select: [ :aOccupiedPosition | aOccupiedPosition first = #X ] ) 
							  	collect: [ :aOccupiedPositionByX | aOccupiedPositionByX second] )!

( ( positionsOccupied select: [ :aOccupiedPosition | aOccupiedPosition first = #X ] ) 
							  	collect: [ :aOccupiedPositionByX | aOccupiedPositionByX second] ) sort.!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 20:45:39' prior: 50895122!
hasPlayerXWon

	| positionsOccupiedByXPlayer i isWinner |

	positionsOccupiedByXPlayer := ( ( positionsOccupied select: [ :aOccupiedPosition | aOccupiedPosition first = #X ] ) 
							  	collect: [ :aOccupiedPositionByX | aOccupiedPositionByX second] ) sort.
	
	i := 1.
	isWinner := false.
	(i < (positionsOccupiedByXPlayer size ) -1 )	 whileTrue: [
		isWinner := ((positionsOccupiedByXPlayer at: i)	 + 1@	0) = (positionsOccupiedByXPlayer at: i+1)	.
		i := i+1.
	].

	^isWinner.! !

!testRun: #TerniLapilliTest #test08 stamp: 'DS 10/29/2020 20:45:42'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 20:45:58' prior: 50895182!
hasPlayerXWon

	| positionsOccupiedByXPlayer i isWinner |

	positionsOccupiedByXPlayer := ( ( positionsOccupied select: [ :aOccupiedPosition | aOccupiedPosition first = #X ] ) 
							  	collect: [ :aOccupiedPositionByX | aOccupiedPositionByX second] ) sort.
	
	i := 1.
	isWinner := false.
	(i < (positionsOccupiedByXPlayer size - 1) )	 whileTrue: [
		isWinner := ((positionsOccupiedByXPlayer at: i)	 + 1@	0) = (positionsOccupiedByXPlayer at: i+1)	.
		i := i+1.
	].

	^isWinner.! !

!testRun: #TerniLapilliTest #test08 stamp: 'DS 10/29/2020 20:46:00'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 20:46:33' prior: 50895203!
hasPlayerXWon

	| positionsOccupiedByXPlayer i isWinner |

	positionsOccupiedByXPlayer := ( ( positionsOccupied select: [ :aOccupiedPosition | aOccupiedPosition first = #X ] ) 
							  	collect: [ :aOccupiedPositionByX | aOccupiedPositionByX second] ) sort.
	
	i := 1.
	isWinner := false.
	(i < (positionsOccupiedByXPlayer size - 1) )	 do: [
		isWinner := ((positionsOccupiedByXPlayer at: i)	 + 1@	0) = (positionsOccupiedByXPlayer at: i+1)	.
		i := i+1.
	].

	^isWinner.! !

!testRun: #TerniLapilliTest #test08 stamp: 'DS 10/29/2020 20:46:34'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 20:46:46' prior: 50895224!
hasPlayerXWon

	| positionsOccupiedByXPlayer i isWinner |

	positionsOccupiedByXPlayer := ( ( positionsOccupied select: [ :aOccupiedPosition | aOccupiedPosition first = #X ] ) 
							  	collect: [ :aOccupiedPositionByX | aOccupiedPositionByX second] ) sort.
	
	i := 1.
	isWinner := false.
	(i < (positionsOccupiedByXPlayer size - 1) )	 ifTrue: [
		isWinner := ((positionsOccupiedByXPlayer at: i)	 + 1@	0) = (positionsOccupiedByXPlayer at: i+1)	.
		i := i+1.
	].

	^isWinner.! !

false whileTrue: ['a']!

----SNAPSHOT----(29 October 2020 20:48:41) CuisUniversity-4384.image priorSource: 18025157!

true whileTrue: [ ]!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 20:52:11' prior: 50895245!
hasPlayerXWon

	| positionsOccupiedByXPlayer i isWinner |

	positionsOccupiedByXPlayer := ( ( positionsOccupied select: [ :aOccupiedPosition | aOccupiedPosition first = #X ] ) 
							  	collect: [ :aOccupiedPositionByX | aOccupiedPositionByX second] ) sort.
	
	i := 1.
	isWinner := false.
	[i < (positionsOccupiedByXPlayer size - 1) ]	 whileTrue: [
		isWinner := ((positionsOccupiedByXPlayer at: i)	 + 1@	0) = (positionsOccupiedByXPlayer at: i+1)	.
		i := i+1.
	].

	^isWinner.! !

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 10/29/2020 20:52:13'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/29/2020 20:52:13'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/29/2020 20:52:13'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/29/2020 20:52:13'!
PASSED!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/29/2020 20:52:13'!
PASSED!

!testRun: #TerniLapilliTest #test06OPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/29/2020 20:52:13'!
PASSED!

!testRun: #TerniLapilliTest #test07XPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/29/2020 20:52:13'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'DS 10/29/2020 20:52:13'!
ERROR!

!testRun: #TerniLapilliTest #test08 stamp: 'DS 10/29/2020 20:52:13'!
ERROR!

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 10/29/2020 20:52:43'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/29/2020 20:52:43'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/29/2020 20:52:43'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/29/2020 20:52:43'!
PASSED!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/29/2020 20:52:43'!
PASSED!

!testRun: #TerniLapilliTest #test06OPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/29/2020 20:52:43'!
PASSED!

!testRun: #TerniLapilliTest #test07XPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/29/2020 20:52:43'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'DS 10/29/2020 20:52:43'!
ERROR!

!testRun: #TerniLapilliTest #test08 stamp: 'DS 10/29/2020 20:52:43'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 20:52:56' prior: 50895268!
hasPlayerXWon

	| positionsOccupiedByXPlayer i isWinner |

	positionsOccupiedByXPlayer := ( ( positionsOccupied select: [ :aOccupiedPosition | aOccupiedPosition first = #X ] ) 
							  	collect: [ :aOccupiedPositionByX | aOccupiedPositionByX second] ) sort.
	
	i := 1.
	isWinner := false.
	[i < (positionsOccupiedByXPlayer size - 1) ]	 whileTrue: [
		isWinner := ((positionsOccupiedByXPlayer at: i)	 + (1@	0)) = (positionsOccupiedByXPlayer at: i+1)	.
		i := i+1.
	].

	^isWinner.! !

!testRun: #TerniLapilliTest #test08 stamp: 'DS 10/29/2020 20:52:57'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 10/29/2020 20:52:59'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/29/2020 20:52:59'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/29/2020 20:52:59'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/29/2020 20:52:59'!
PASSED!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/29/2020 20:52:59'!
PASSED!

!testRun: #TerniLapilliTest #test06OPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/29/2020 20:52:59'!
PASSED!

!testRun: #TerniLapilliTest #test07XPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/29/2020 20:52:59'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'DS 10/29/2020 20:52:59'!
PASSED!

----SNAPSHOT----(29 October 2020 20:53:01) CuisUniversity-4384.image priorSource: 18035607!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 20:54:34'!
test09
	
	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@0.
	aTerniLapilli putOAt: -1@1.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: 0@-1.

	self assert: aTerniLapilli hasPlayerXWon.! !

!testRun: #TerniLapilliTest #test09 stamp: 'DS 10/29/2020 20:54:40'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 20:56:29' prior: 50895343!
hasPlayerXWon

	| positionsOccupiedByXPlayer i isHorizontalWinner isVerticalWinner|

	positionsOccupiedByXPlayer := ( ( positionsOccupied select: [ :aOccupiedPosition | aOccupiedPosition first = #X ] ) 
							  	collect: [ :aOccupiedPositionByX | aOccupiedPositionByX second] ) sort.
	
	i := 1.
	isHorizontalWinner := false.
	[i < (positionsOccupiedByXPlayer size - 1) ]	 whileTrue: [
		isHorizontalWinner := ((positionsOccupiedByXPlayer at: i)	 + (1@	0)) = (positionsOccupiedByXPlayer at: i+1)	.
		i := i+1.
	].

	i := 1.
	isVerticalWinner := false.
	[i < (positionsOccupiedByXPlayer size - 1) ]	 whileTrue: [
		isVerticalWinner := ((isVerticalWinner  at: i)	 + (0@	1)) = (isVerticalWinner  at: i+1)	.
		i := i+1.
	].

	^isHorizontalWinner or: isVerticalWinner.! !

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 10/29/2020 20:56:33'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/29/2020 20:56:33'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/29/2020 20:56:33'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/29/2020 20:56:33'!
PASSED!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/29/2020 20:56:33'!
PASSED!

!testRun: #TerniLapilliTest #test06OPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/29/2020 20:56:33'!
PASSED!

!testRun: #TerniLapilliTest #test07XPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/29/2020 20:56:33'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'DS 10/29/2020 20:56:33'!
ERROR!

!testRun: #TerniLapilliTest #test09 stamp: 'DS 10/29/2020 20:56:33'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 20:57:12' prior: 50895407!
hasPlayerXWon

	| positionsOccupiedByXPlayer i isHorizontalWinner isVerticalWinner|

	positionsOccupiedByXPlayer := ( ( positionsOccupied select: [ :aOccupiedPosition | aOccupiedPosition first = #X ] ) 
							  	collect: [ :aOccupiedPositionByX | aOccupiedPositionByX second] ) sort.
	
	i := 1.
	isHorizontalWinner := false.
	[i < (positionsOccupiedByXPlayer size - 1) ]	 whileTrue: [
		isHorizontalWinner := ((positionsOccupiedByXPlayer at: i)	 + (1@	0)) = (positionsOccupiedByXPlayer at: i+1)	.
		i := i+1.
	].

	i := 1.
	isVerticalWinner := false.
	[i < (positionsOccupiedByXPlayer size - 1) ]	 whileTrue: [
		isVerticalWinner := ((positionsOccupiedByXPlayer  at: i)	 + (0@	1)) = (positionsOccupiedByXPlayer  at: i+1)	.
		i := i+1.
	].

	^isHorizontalWinner or: isVerticalWinner.! !

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 10/29/2020 20:57:17'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/29/2020 20:57:17'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/29/2020 20:57:17'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/29/2020 20:57:17'!
PASSED!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/29/2020 20:57:17'!
PASSED!

!testRun: #TerniLapilliTest #test06OPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/29/2020 20:57:17'!
PASSED!

!testRun: #TerniLapilliTest #test07XPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/29/2020 20:57:17'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'DS 10/29/2020 20:57:17'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'DS 10/29/2020 20:57:17'!
PASSED!

----SNAPSHOT----(29 October 2020 20:57:20) CuisUniversity-4384.image priorSource: 18039633!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 20:57:59'!
test10
	
	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@0.
	aTerniLapilli putOAt: 0@1.
	
	aTerniLapilli putXAt: -1@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: 1@-1.

	self assert: aTerniLapilli hasPlayerXWon.! !

!testRun: #TerniLapilliTest #test10 stamp: 'DS 10/29/2020 20:58:01'!
FAILURE!

collection := OrderedCollection new.!

collection add: 0@1.
collection add: -1@1.
collection add: 1@-1.!

collection sort!

collection := OrderedCollection new.!

collection add: 1@-1.
collection add: 0@0.
collection add: -1@1.
!

collection sort!

collection includes: {-1@1. 0@0. 1@-1}.!

collection includesAll: {-1@1. 0@0. 1@-1}.!

collection includesAllOf: {-1@1. 0@0. 1@-1}!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 21:01:30' prior: 50895463!
hasPlayerXWon

	| positionsOccupiedByXPlayer i isHorizontalWinner isVerticalWinner isDiagonalWinner |

	positionsOccupiedByXPlayer := ( ( positionsOccupied select: [ :aOccupiedPosition | aOccupiedPosition first = #X ] ) 
							  	collect: [ :aOccupiedPositionByX | aOccupiedPositionByX second] ) sort.
	
	i := 1.
	isHorizontalWinner := false.
	[i < (positionsOccupiedByXPlayer size - 1) ]	 whileTrue: [
		isHorizontalWinner := ((positionsOccupiedByXPlayer at: i)	 + (1@	0)) = (positionsOccupiedByXPlayer at: i+1)	.
		i := i+1.
	].

	i := 1.
	isVerticalWinner := false.
	[i < (positionsOccupiedByXPlayer size - 1) ]	 whileTrue: [
		isVerticalWinner := ((positionsOccupiedByXPlayer  at: i)	 + (0@	1)) = (positionsOccupiedByXPlayer  at: i+1)	.
		i := i+1.
	].

	isDiagonalWinner := positionsOccupiedByXPlayer includesAllOf: {-1@1. 0@0. 1@-1}.

	^isHorizontalWinner or: isVerticalWinner.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 21:01:41' prior: 50895548!
hasPlayerXWon

	| positionsOccupiedByXPlayer i isHorizontalWinner isVerticalWinner isDiagonalWinner |

	positionsOccupiedByXPlayer := ( ( positionsOccupied select: [ :aOccupiedPosition | aOccupiedPosition first = #X ] ) 
							  	collect: [ :aOccupiedPositionByX | aOccupiedPositionByX second] ) sort.
	
	i := 1.
	isHorizontalWinner := false.
	[i < (positionsOccupiedByXPlayer size - 1) ]	 whileTrue: [
		isHorizontalWinner := ((positionsOccupiedByXPlayer at: i)	 + (1@	0)) = (positionsOccupiedByXPlayer at: i+1)	.
		i := i+1.
	].

	i := 1.
	isVerticalWinner := false.
	[i < (positionsOccupiedByXPlayer size - 1) ]	 whileTrue: [
		isVerticalWinner := ((positionsOccupiedByXPlayer  at: i)	 + (0@	1)) = (positionsOccupiedByXPlayer  at: i+1)	.
		i := i+1.
	].

	isDiagonalWinner := positionsOccupiedByXPlayer includesAllOf: {-1@1. 0@0. 1@-1}.

	^isHorizontalWinner or: isVerticalWinner or: isDiagonalWinner.! !

!testRun: #TerniLapilliTest #test10 stamp: 'DS 10/29/2020 21:01:52'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 10/29/2020 21:01:52'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/29/2020 21:01:52'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/29/2020 21:01:52'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/29/2020 21:01:52'!
PASSED!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/29/2020 21:01:52'!
PASSED!

!testRun: #TerniLapilliTest #test06OPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/29/2020 21:01:52'!
PASSED!

!testRun: #TerniLapilliTest #test07XPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/29/2020 21:01:52'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'DS 10/29/2020 21:01:52'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'DS 10/29/2020 21:01:52'!
PASSED!

!testRun: #TerniLapilliTest #test10 stamp: 'DS 10/29/2020 21:01:52'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 21:02:40'!
test11

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@0.
	aTerniLapilli putOAt: 0@1.
	
	aTerniLapilli putXAt: 1@1.
	aTerniLapilli putOAt: -1@1.
	
	aTerniLapilli putXAt: -1@-1.

	self assert: aTerniLapilli hasPlayerXWon.! !

!testRun: #TerniLapilliTest #test11 stamp: 'DS 10/29/2020 21:02:43'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 21:03:53' prior: 50895579!
hasPlayerXWon

	| positionsOccupiedByXPlayer i isHorizontalWinner isVerticalWinner isInvertedDiagonalWinner isDiagonalWinner |

	positionsOccupiedByXPlayer := ( ( positionsOccupied select: [ :aOccupiedPosition | aOccupiedPosition first = #X ] ) 
							  	collect: [ :aOccupiedPositionByX | aOccupiedPositionByX second] ) sort.
	
	i := 1.
	isHorizontalWinner := false.
	[i < (positionsOccupiedByXPlayer size - 1) ]	 whileTrue: [
		isHorizontalWinner := ((positionsOccupiedByXPlayer at: i)	 + (1@	0)) = (positionsOccupiedByXPlayer at: i+1)	.
		i := i+1.
	].

	i := 1.
	isVerticalWinner := false.
	[i < (positionsOccupiedByXPlayer size - 1) ]	 whileTrue: [
		isVerticalWinner := ((positionsOccupiedByXPlayer  at: i)	 + (0@	1)) = (positionsOccupiedByXPlayer  at: i+1)	.
		i := i+1.
	].

	isInvertedDiagonalWinner := positionsOccupiedByXPlayer includesAllOf: {-1@1. 0@0. 1@-1}.
	isDiagonalWinner := positionsOccupiedByXPlayer includesAllOf: {-1@-1. 0@0. 1@1}.

	^isHorizontalWinner or: isVerticalWinner or: isInvertedDiagonalWinner or: isDiagonalWinner.! !

!testRun: #TerniLapilliTest #test11 stamp: 'DS 10/29/2020 21:03:55'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 10/29/2020 21:03:55'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/29/2020 21:03:55'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/29/2020 21:03:55'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/29/2020 21:03:55'!
PASSED!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/29/2020 21:03:55'!
PASSED!

!testRun: #TerniLapilliTest #test06OPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/29/2020 21:03:55'!
PASSED!

!testRun: #TerniLapilliTest #test07XPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/29/2020 21:03:55'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'DS 10/29/2020 21:03:55'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'DS 10/29/2020 21:03:55'!
PASSED!

!testRun: #TerniLapilliTest #test10 stamp: 'DS 10/29/2020 21:03:55'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'DS 10/29/2020 21:03:55'!
PASSED!

----SNAPSHOT----(29 October 2020 21:03:58) CuisUniversity-4384.image priorSource: 18043776!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 21:06:00'!
test08XPlayerWonWithHorizontalPlay
	
	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@0.
	aTerniLapilli putOAt: 0@1.
	
	aTerniLapilli putXAt: -1@0.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: 1@0.

	self assert: aTerniLapilli hasPlayerXWon.! !

!methodRemoval: TerniLapilliTest #test08 stamp: 'DS 10/29/2020 21:06:00'!
test08
	
	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@0.
	aTerniLapilli putOAt: 0@1.
	
	aTerniLapilli putXAt: -1@0.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: 1@0.

	self assert: aTerniLapilli hasPlayerXWon.!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 21:06:15'!
test09PlayerWonWithVerticalPlay
	
	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@0.
	aTerniLapilli putOAt: -1@1.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: 0@-1.

	self assert: aTerniLapilli hasPlayerXWon.! !

!methodRemoval: TerniLapilliTest #test09 stamp: 'DS 10/29/2020 21:06:15'!
test09
	
	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@0.
	aTerniLapilli putOAt: -1@1.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: 0@-1.

	self assert: aTerniLapilli hasPlayerXWon.!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 21:06:21'!
test08PlayerWonWithHorizontalPlay
	
	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@0.
	aTerniLapilli putOAt: 0@1.
	
	aTerniLapilli putXAt: -1@0.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: 1@0.

	self assert: aTerniLapilli hasPlayerXWon.! !

!methodRemoval: TerniLapilliTest #test08XPlayerWonWithHorizontalPlay stamp: 'DS 10/29/2020 21:06:21'!
test08XPlayerWonWithHorizontalPlay
	
	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@0.
	aTerniLapilli putOAt: 0@1.
	
	aTerniLapilli putXAt: -1@0.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: 1@0.

	self assert: aTerniLapilli hasPlayerXWon.!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 21:06:44'!
test10PlayerWonWithInvertedDiagonalPlay
	
	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@0.
	aTerniLapilli putOAt: 0@1.
	
	aTerniLapilli putXAt: -1@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: 1@-1.

	self assert: aTerniLapilli hasPlayerXWon.! !

!methodRemoval: TerniLapilliTest #test10 stamp: 'DS 10/29/2020 21:06:44'!
test10
	
	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@0.
	aTerniLapilli putOAt: 0@1.
	
	aTerniLapilli putXAt: -1@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: 1@-1.

	self assert: aTerniLapilli hasPlayerXWon.!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 21:06:56'!
test11PlayerWonWithDiagonalPlay

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@0.
	aTerniLapilli putOAt: 0@1.
	
	aTerniLapilli putXAt: 1@1.
	aTerniLapilli putOAt: -1@1.
	
	aTerniLapilli putXAt: -1@-1.

	self assert: aTerniLapilli hasPlayerXWon.! !

!methodRemoval: TerniLapilliTest #test11 stamp: 'DS 10/29/2020 21:06:56'!
test11

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@0.
	aTerniLapilli putOAt: 0@1.
	
	aTerniLapilli putXAt: 1@1.
	aTerniLapilli putOAt: -1@1.
	
	aTerniLapilli putXAt: -1@-1.

	self assert: aTerniLapilli hasPlayerXWon.!

----SNAPSHOT----(29 October 2020 21:07:05) CuisUniversity-4384.image priorSource: 18050516!

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 10/29/2020 21:07:07'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/29/2020 21:07:07'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/29/2020 21:07:07'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/29/2020 21:07:07'!
PASSED!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/29/2020 21:07:07'!
PASSED!

!testRun: #TerniLapilliTest #test06OPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/29/2020 21:07:07'!
PASSED!

!testRun: #TerniLapilliTest #test07XPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/29/2020 21:07:07'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerWonWithHorizontalPlay stamp: 'DS 10/29/2020 21:07:07'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerWonWithVerticalPlay stamp: 'DS 10/29/2020 21:07:07'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerWonWithInvertedDiagonalPlay stamp: 'DS 10/29/2020 21:07:07'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerWonWithDiagonalPlay stamp: 'DS 10/29/2020 21:07:07'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 21:09:14'!
test12

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@0.
	aTerniLapilli putOAt: 0@1.
	
	aTerniLapilli putXAt: 1@1.
	aTerniLapilli putOAt: -1@1.
	
	aTerniLapilli putXAt: -1@-1.
	aTerniLapilli putOAt: -1@0.

	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 21:11:07' prior: 50895886!
test12

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@0.
	aTerniLapilli putOAt: 0@1.
	
	aTerniLapilli putXAt: 1@1.
	aTerniLapilli putOAt: -1@1.
	
	aTerniLapilli putXAt: -1@-1.
	self
		should: [ aTerniLapilli putOAt: -1@0. ]
		raise: Error
		withMessageText: TerniLapilli gameOverErrorDescription.
	! !

!testRun: #TerniLapilliTest #test12 stamp: 'DS 10/29/2020 21:11:13'!
ERROR!
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 21:11:22'!
gameOverErrorDescription
	self shouldBeImplemented.! !
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 21:11:33' prior: 50895913!
gameOverErrorDescription

	^'Game Over'.! !

!testRun: #TerniLapilliTest #test12 stamp: 'DS 10/29/2020 21:11:34'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 21:12:38' prior: 50894882!
put: aPlayer at: aPosition

	(self isOver) ifTrue: [ self error: self class gameOverErrorDescription ].
	(currentPlayer = aPlayer) not ifTrue: [ self error: (self class attemptToPlayTwiceInARowErrorDescription) ].
	((positionsOccupied collect: [ :aOccupiedPosition | aOccupiedPosition second] ) includes: aPosition) 		ifTrue: [ self error: self class ilegalMovementErrorDescription ].

	positionsOccupied add: {aPlayer. aPosition}.
	currentPlayer := (aPlayer = #X) ifTrue: [#O] ifFalse: [#X].! !

!testRun: #TerniLapilliTest #test12 stamp: 'DS 10/29/2020 21:12:41'!
FAILURE!
!TerniLapilliTest methodsFor: 'assertions' stamp: 'DS 10/29/2020 21:12:55' overrides: 16927375!
assert: aFalse description: aString 
	self shouldBeImplemented.! !

!testRun: #TerniLapilliTest #test12 stamp: 'DS 10/29/2020 21:13:01'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 21:13:08'!
isOver
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 21:13:40' prior: 50895954!
isOver

	^self hasPlayerXWon or: self hasPlayerOWon! !

!testRun: #TerniLapilliTest #test12 stamp: 'DS 10/29/2020 21:13:43'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 21:14:21' prior: 50895959!
isOver

	^self hasPlayerXWon or: self hasPlayerOWon.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 21:14:55'!
hasPlayerOWon

	| positionsOccupiedByOPlayer i isHorizontalWinner isVerticalWinner isInvertedDiagonalWinner isDiagonalWinner |

	positionsOccupiedByOPlayer := ( ( positionsOccupied select: [ :aOccupiedPosition | aOccupiedPosition first = #X ] ) 
							  	collect: [ :aOccupiedPositionByOPlayer | aOccupiedPositionByOPlayer second] ) sort.
	
	i := 1.
	isHorizontalWinner := false.
	[i < (positionsOccupiedByOPlayer size - 1) ]	 whileTrue: [
		isHorizontalWinner := ((positionsOccupiedByOPlayer at: i)	 + (1@	0)) = (positionsOccupiedByOPlayer at: i+1)	.
		i := i+1.
	].

	i := 1.
	isVerticalWinner := false.
	[i < (positionsOccupiedByOPlayer size - 1) ]	 whileTrue: [
		isVerticalWinner := ((positionsOccupiedByOPlayer  at: i)	 + (0@	1)) = (positionsOccupiedByOPlayer  at: i+1)	.
		i := i+1.
	].

	isInvertedDiagonalWinner := positionsOccupiedByOPlayer includesAllOf: {-1@1. 0@0. 1@-1}.
	isDiagonalWinner := positionsOccupiedByOPlayer includesAllOf: {-1@-1. 0@0. 1@1}.

	^isHorizontalWinner or: isVerticalWinner or: isInvertedDiagonalWinner or: isDiagonalWinner.! !

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 10/29/2020 21:15:27'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/29/2020 21:15:27'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/29/2020 21:15:27'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/29/2020 21:15:27'!
ERROR!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/29/2020 21:15:27'!
ERROR!

!testRun: #TerniLapilliTest #test06OPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/29/2020 21:15:27'!
ERROR!

!testRun: #TerniLapilliTest #test07XPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/29/2020 21:15:27'!
ERROR!

!testRun: #TerniLapilliTest #test08PlayerWonWithHorizontalPlay stamp: 'DS 10/29/2020 21:15:27'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerWonWithVerticalPlay stamp: 'DS 10/29/2020 21:15:27'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerWonWithInvertedDiagonalPlay stamp: 'DS 10/29/2020 21:15:27'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerWonWithDiagonalPlay stamp: 'DS 10/29/2020 21:15:27'!
PASSED!

!testRun: #TerniLapilliTest #test12 stamp: 'DS 10/29/2020 21:15:27'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 21:16:07' prior: 50895967!
isOver

	^(self hasPlayerXWon) or: (self hasPlayerOWon).! !

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 10/29/2020 21:16:08'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/29/2020 21:16:08'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/29/2020 21:16:08'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/29/2020 21:16:08'!
ERROR!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/29/2020 21:16:08'!
ERROR!

!testRun: #TerniLapilliTest #test06OPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/29/2020 21:16:08'!
ERROR!

!testRun: #TerniLapilliTest #test07XPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/29/2020 21:16:08'!
ERROR!

!testRun: #TerniLapilliTest #test08PlayerWonWithHorizontalPlay stamp: 'DS 10/29/2020 21:16:08'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerWonWithVerticalPlay stamp: 'DS 10/29/2020 21:16:08'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerWonWithInvertedDiagonalPlay stamp: 'DS 10/29/2020 21:16:08'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerWonWithDiagonalPlay stamp: 'DS 10/29/2020 21:16:08'!
PASSED!

!testRun: #TerniLapilliTest #test12 stamp: 'DS 10/29/2020 21:16:08'!
ERROR!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/29/2020 21:16:11'!
ERROR!

!testRun: #TerniLapilliTest #test12 stamp: 'DS 10/29/2020 21:17:07'!
ERROR!

!testRun: #TerniLapilliTest #test12 stamp: 'DS 10/29/2020 21:17:07'!
ERROR!

!methodRemoval: TerniLapilliTest #assert:description: stamp: 'DS 10/29/2020 21:17:20'!
assert: aFalse description: aString 
	self shouldBeImplemented.!

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 10/29/2020 21:17:29'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/29/2020 21:17:29'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/29/2020 21:17:29'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/29/2020 21:17:29'!
PASSED!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/29/2020 21:17:29'!
PASSED!

!testRun: #TerniLapilliTest #test06OPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/29/2020 21:17:29'!
PASSED!

!testRun: #TerniLapilliTest #test07XPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/29/2020 21:17:29'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerWonWithHorizontalPlay stamp: 'DS 10/29/2020 21:17:29'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerWonWithVerticalPlay stamp: 'DS 10/29/2020 21:17:29'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerWonWithInvertedDiagonalPlay stamp: 'DS 10/29/2020 21:17:29'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerWonWithDiagonalPlay stamp: 'DS 10/29/2020 21:17:29'!
PASSED!

!testRun: #TerniLapilliTest #test12 stamp: 'DS 10/29/2020 21:17:29'!
PASSED!

----SNAPSHOT----(29 October 2020 21:17:32) CuisUniversity-4384.image priorSource: 18054247!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 21:18:34' prior: 50895897!
test12

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: -1@1.
	aTerniLapilli putOAt: -1@-1.
	self
		should: [ aTerniLapilli putXAt: -1@0. ]
		raise: Error
		withMessageText: TerniLapilli gameOverErrorDescription.
	! !

!testRun: #TerniLapilliTest #test12 stamp: 'DS 10/29/2020 21:18:35'!
FAILURE!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 21:18:54' prior: 50896148!
test12

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: -1@1.
	aTerniLapilli putOAt: -1@-1.

	self
		should: [ aTerniLapilli putXAt: -1@0. ]
		raise: Error
		withMessageText: TerniLapilli gameOverErrorDescription.
	! !

!testRun: #TerniLapilliTest #test12 stamp: 'DS 10/29/2020 21:18:55'!
FAILURE!

!testRun: #TerniLapilliTest #test12 stamp: 'DS 10/29/2020 21:19:45'!
FAILURE!

self hasPlayerXWon!

self hasPlayerOWon!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DS 10/29/2020 21:20:47' prior: 50895972!
hasPlayerOWon

	| positionsOccupiedByOPlayer i isHorizontalWinner isVerticalWinner isInvertedDiagonalWinner isDiagonalWinner |

	positionsOccupiedByOPlayer := ( ( positionsOccupied select: [ :aOccupiedPosition | aOccupiedPosition first = #O ] ) 
							  	collect: [ :aOccupiedPositionByOPlayer | aOccupiedPositionByOPlayer second] ) sort.
	
	i := 1.
	isHorizontalWinner := false.
	[i < (positionsOccupiedByOPlayer size - 1) ]	 whileTrue: [
		isHorizontalWinner := ((positionsOccupiedByOPlayer at: i)	 + (1@	0)) = (positionsOccupiedByOPlayer at: i+1)	.
		i := i+1.
	].

	i := 1.
	isVerticalWinner := false.
	[i < (positionsOccupiedByOPlayer size - 1) ]	 whileTrue: [
		isVerticalWinner := ((positionsOccupiedByOPlayer  at: i)	 + (0@	1)) = (positionsOccupiedByOPlayer  at: i+1)	.
		i := i+1.
	].

	isInvertedDiagonalWinner := positionsOccupiedByOPlayer includesAllOf: {-1@1. 0@0. 1@-1}.
	isDiagonalWinner := positionsOccupiedByOPlayer includesAllOf: {-1@-1. 0@0. 1@1}.

	^isHorizontalWinner or: isVerticalWinner or: isInvertedDiagonalWinner or: isDiagonalWinner.! !

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 10/29/2020 21:20:49'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/29/2020 21:20:49'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/29/2020 21:20:49'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/29/2020 21:20:49'!
PASSED!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/29/2020 21:20:49'!
PASSED!

!testRun: #TerniLapilliTest #test06OPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/29/2020 21:20:49'!
PASSED!

!testRun: #TerniLapilliTest #test07XPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/29/2020 21:20:49'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerWonWithHorizontalPlay stamp: 'DS 10/29/2020 21:20:49'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerWonWithVerticalPlay stamp: 'DS 10/29/2020 21:20:49'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerWonWithInvertedDiagonalPlay stamp: 'DS 10/29/2020 21:20:49'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerWonWithDiagonalPlay stamp: 'DS 10/29/2020 21:20:49'!
PASSED!

!testRun: #TerniLapilliTest #test12 stamp: 'DS 10/29/2020 21:20:49'!
PASSED!

----SNAPSHOT----(29 October 2020 21:20:51) CuisUniversity-4384.image priorSource: 18063776!

----QUIT----(29 October 2020 22:08:05) CuisUniversity-4384.image priorSource: 18067566!

----STARTUP---- (29 October 2020 23:54:13) as /mnt/sdb5/Ingenieria1/CuisUniversity/CuisUniversity-4384.image!


----QUIT----(29 October 2020 23:58:29) CuisUniversity-4384.image priorSource: 18067659!

----STARTUP---- (31 October 2020 16:15:47) as /mnt/sdb5/Ingenieria1/CuisUniversity/CuisUniversity-4384.image!

!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DS 10/31/2020 16:25:27'!
test12gameIsOverWhenAPlayerWins

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: -1@1.
	aTerniLapilli putOAt: -1@-1.

	self
		should: [ aTerniLapilli putXAt: -1@0. ]
		raise: Error
		withMessageText: TerniLapilli gameOverErrorDescription.
	! !

!methodRemoval: TerniLapilliTest #test12 stamp: 'DS 10/31/2020 16:25:27'!
test12

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: -1@1.
	aTerniLapilli putOAt: -1@-1.

	self
		should: [ aTerniLapilli putXAt: -1@0. ]
		raise: Error
		withMessageText: TerniLapilli gameOverErrorDescription.
	!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DS 10/31/2020 16:25:38'!
test12GameIsOverWhenAPlayerWins

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: -1@1.
	aTerniLapilli putOAt: -1@-1.

	self
		should: [ aTerniLapilli putXAt: -1@0. ]
		raise: Error
		withMessageText: TerniLapilli gameOverErrorDescription.
	! !

!methodRemoval: TerniLapilliTest #test12gameIsOverWhenAPlayerWins stamp: 'DS 10/31/2020 16:25:38'!
test12gameIsOverWhenAPlayerWins

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: -1@1.
	aTerniLapilli putOAt: -1@-1.

	self
		should: [ aTerniLapilli putXAt: -1@0. ]
		raise: Error
		withMessageText: TerniLapilli gameOverErrorDescription.
	!

----SNAPSHOT----(31 October 2020 16:32:22) CuisUniversity-4384.image priorSource: 18067860!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DS 10/31/2020 16:43:25'!
test13

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: -1@1.
	aTerniLapilli putOAt: 1@-1.

	self
		should: [ aTerniLapilli moveXFrom: 0@-1 to: 0@0. ]
		raise: Error
		withMessageText: TerniLapilli ErrorDescription.
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DS 10/31/2020 16:43:50' prior: 50896341!
test13

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: -1@1.
	aTerniLapilli putOAt: 1@-1.

	self
		should: [ aTerniLapilli moveXFrom: 0@-1 to: 0@0. ]
		raise: Error
		withMessageText: TerniLapilli ErrorDescription.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DS 10/31/2020 16:44:15' prior: 50896356!
test13

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: -1@1.
	aTerniLapilli putOAt: 1@-1.

	self
		should: [ aTerniLapilli moveXFrom: 0@-1 to: 0@0. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.! !

!testRun: #TerniLapilliTest #test13 stamp: 'DS 10/31/2020 16:44:18'!
FAILURE!

!testRun: #TerniLapilliTest #test13 stamp: 'DS 10/31/2020 16:44:58'!
FAILURE!

!testRun: #TerniLapilliTest #test13 stamp: 'DS 10/31/2020 16:45:12'!
FAILURE!
!TerniLapilli methodsFor: 'player actions' stamp: 'DS 10/31/2020 16:45:33'!
moveXFrom: aPoint to: aPoint2 
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'DS 10/31/2020 16:45:57' prior: 50896393!
moveXFrom: aFromPosition to: aToPosition

	! !

collection!
!TerniLapilli methodsFor: 'player actions' stamp: 'DS 10/31/2020 16:49:03' prior: 50896398!
moveXFrom: aFromPosition to: aToPosition

	( positionsOccupied select: [ :aOccupiedPosition | aOccupiedPosition second = aToPosition ] ) empty 
		ifTrue: [ self error: self class ilegalMovementErrorDescription ].! !

!testRun: #TerniLapilliTest #test13 stamp: 'DS 10/31/2020 16:49:07'!
FAILURE!

collection empty!

collection isEmpty !
!TerniLapilli methodsFor: 'player actions' stamp: 'DS 10/31/2020 16:49:50' prior: 50896403!
moveXFrom: aFromPosition to: aToPosition

	( positionsOccupied select: [ :aOccupiedPosition | aOccupiedPosition second = aToPosition ] ) isEmpty 
		ifTrue: [ self error: self class ilegalMovementErrorDescription ].! !

!testRun: #TerniLapilliTest #test13 stamp: 'DS 10/31/2020 16:49:52'!
FAILURE!

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 10/31/2020 16:55:14'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/31/2020 16:55:14'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/31/2020 16:55:14'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/31/2020 16:55:14'!
PASSED!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/31/2020 16:55:14'!
PASSED!

!testRun: #TerniLapilliTest #test06OPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 16:55:15'!
PASSED!

!testRun: #TerniLapilliTest #test07XPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 16:55:15'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerWonWithHorizontalPlay stamp: 'DS 10/31/2020 16:55:15'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerWonWithVerticalPlay stamp: 'DS 10/31/2020 16:55:15'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerWonWithInvertedDiagonalPlay stamp: 'DS 10/31/2020 16:55:15'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerWonWithDiagonalPlay stamp: 'DS 10/31/2020 16:55:15'!
PASSED!

!testRun: #TerniLapilliTest #test12GameIsOverWhenAPlayerWins stamp: 'DS 10/31/2020 16:55:15'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'DS 10/31/2020 16:55:15'!
FAILURE!

!testRun: #TerniLapilliTest #test13 stamp: 'DS 10/31/2020 16:55:15'!
FAILURE!

positionsOccupied select: [ :aOccupiedPosition | aOccupiedPosition second = aToPosition ]!

positionsOccupied select: [ :aOccupiedPosition | (aOccupiedPosition second) = aToPosition ]!

positionsOccupied!

self select: [ :aOccupiedPosition | (aOccupiedPosition second) = 0@0 ]!

self select: [ :aOccupiedPosition | (aOccupiedPosition second) = (0@0) ]!
!TerniLapilli methodsFor: 'player actions' stamp: 'DS 10/31/2020 16:57:18' prior: 50896417!
moveXFrom: aFromPosition to: aToPosition

	( positionsOccupied select: [ :aOccupiedPosition | aOccupiedPosition second = aToPosition ] ) isEmpty
		ifFalse: [ self error: self class ilegalMovementErrorDescription ].! !
!TerniLapilli methodsFor: 'player actions' stamp: 'DS 10/31/2020 16:57:20' prior: 50896486!
moveXFrom: aFromPosition to: aToPosition

	( positionsOccupied select: [ :aOccupiedPosition | aOccupiedPosition second = aToPosition ] ) isEmpty
		ifFalse: [ self error: self class ilegalMovementErrorDescription ].! !

!testRun: #TerniLapilliTest #test13 stamp: 'DS 10/31/2020 16:57:20'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 10/31/2020 16:57:22'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/31/2020 16:57:22'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/31/2020 16:57:22'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/31/2020 16:57:22'!
PASSED!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/31/2020 16:57:22'!
PASSED!

!testRun: #TerniLapilliTest #test06OPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 16:57:22'!
PASSED!

!testRun: #TerniLapilliTest #test07XPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 16:57:22'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerWonWithHorizontalPlay stamp: 'DS 10/31/2020 16:57:22'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerWonWithVerticalPlay stamp: 'DS 10/31/2020 16:57:22'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerWonWithInvertedDiagonalPlay stamp: 'DS 10/31/2020 16:57:22'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerWonWithDiagonalPlay stamp: 'DS 10/31/2020 16:57:22'!
PASSED!

!testRun: #TerniLapilliTest #test12GameIsOverWhenAPlayerWins stamp: 'DS 10/31/2020 16:57:22'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'DS 10/31/2020 16:57:22'!
PASSED!

----SNAPSHOT----(31 October 2020 16:57:25) CuisUniversity-4384.image priorSource: 18069971!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DS 10/31/2020 17:02:28' prior: 50896371!
test13

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: -1@1.
	aTerniLapilli putOAt: 1@-1.

	self
		should: [ aTerniLapilli moveXFrom: 0@0 to: -1@-1. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.! !

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 10/31/2020 17:02:47'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/31/2020 17:02:47'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/31/2020 17:02:47'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/31/2020 17:02:47'!
PASSED!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/31/2020 17:02:47'!
PASSED!

!testRun: #TerniLapilliTest #test06OPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 17:02:47'!
PASSED!

!testRun: #TerniLapilliTest #test07XPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 17:02:47'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerWonWithHorizontalPlay stamp: 'DS 10/31/2020 17:02:47'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerWonWithVerticalPlay stamp: 'DS 10/31/2020 17:02:47'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerWonWithInvertedDiagonalPlay stamp: 'DS 10/31/2020 17:02:47'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerWonWithDiagonalPlay stamp: 'DS 10/31/2020 17:02:47'!
PASSED!

!testRun: #TerniLapilliTest #test12GameIsOverWhenAPlayerWins stamp: 'DS 10/31/2020 17:02:47'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'DS 10/31/2020 17:02:47'!
FAILURE!

!testRun: #TerniLapilliTest #test13 stamp: 'DS 10/31/2020 17:02:47'!
FAILURE!

!testRun: #TerniLapilliTest #test13 stamp: 'DS 10/31/2020 17:03:08'!
FAILURE!

collection contents !

collection includes: 0@0!
!TerniLapilli methodsFor: 'player actions' stamp: 'DS 10/31/2020 17:04:50' prior: 50896496!
moveXFrom: aFromPosition to: aToPosition

	(positionsOccupied includes: {#X. aFromPosition} ) ifFalse: [ self error: self class ilegalMovementErrorDescription ].		! !

!testRun: #TerniLapilliTest #test13 stamp: 'DS 10/31/2020 17:05:01'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 10/31/2020 17:05:01'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/31/2020 17:05:01'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/31/2020 17:05:01'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/31/2020 17:05:01'!
PASSED!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/31/2020 17:05:01'!
PASSED!

!testRun: #TerniLapilliTest #test06OPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 17:05:01'!
PASSED!

!testRun: #TerniLapilliTest #test07XPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 17:05:01'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerWonWithHorizontalPlay stamp: 'DS 10/31/2020 17:05:01'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerWonWithVerticalPlay stamp: 'DS 10/31/2020 17:05:01'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerWonWithInvertedDiagonalPlay stamp: 'DS 10/31/2020 17:05:01'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerWonWithDiagonalPlay stamp: 'DS 10/31/2020 17:05:01'!
PASSED!

!testRun: #TerniLapilliTest #test12GameIsOverWhenAPlayerWins stamp: 'DS 10/31/2020 17:05:01'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'DS 10/31/2020 17:05:01'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'DS 10/31/2020 17:05:08'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 10/31/2020 17:05:08'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/31/2020 17:05:08'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/31/2020 17:05:08'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/31/2020 17:05:08'!
PASSED!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/31/2020 17:05:08'!
PASSED!

!testRun: #TerniLapilliTest #test06OPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 17:05:08'!
PASSED!

!testRun: #TerniLapilliTest #test07XPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 17:05:08'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerWonWithHorizontalPlay stamp: 'DS 10/31/2020 17:05:08'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerWonWithVerticalPlay stamp: 'DS 10/31/2020 17:05:08'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerWonWithInvertedDiagonalPlay stamp: 'DS 10/31/2020 17:05:08'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerWonWithDiagonalPlay stamp: 'DS 10/31/2020 17:05:08'!
PASSED!

!testRun: #TerniLapilliTest #test12GameIsOverWhenAPlayerWins stamp: 'DS 10/31/2020 17:05:08'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'DS 10/31/2020 17:05:08'!
PASSED!

----SNAPSHOT----(31 October 2020 17:05:11) CuisUniversity-4384.image priorSource: 18076788!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DS 10/31/2020 17:08:51'!
test14

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: -1@1.
	aTerniLapilli putOAt: 1@-1.
	
	aTerniLapilli moveXFrom: -1@1 to: -1@0.

	self
		should: [ aTerniLapilli moveXFrom: 0@0 to: -1@-1. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DS 10/31/2020 17:10:56' prior: 50896719!
test14

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: -1@1.
	aTerniLapilli putOAt: 1@-1.
	
	aTerniLapilli moveXFrom: -1@1 to: -1@0.

	self
		should: [ aTerniLapilli moveOFrom: 0@0 to: 0@-1. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DS 10/31/2020 17:11:39' prior: 50896736!
test14

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: -1@1.
	aTerniLapilli putOAt: 1@-1.
	
	aTerniLapilli moveXFrom: -1@1 to: -1@0.

	self
		should: [ aTerniLapilli moveOFrom: -1@-1 to: 0@-1. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DS 10/31/2020 17:12:23' prior: 50896753!
test14

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: -1@1.
	aTerniLapilli putOAt: 1@-1.
	
	aTerniLapilli moveXFrom: -1@1 to: -1@0.

	self
		should: [ aTerniLapilli moveOFrom: -1@0 to: -1@1. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.! !

!testRun: #TerniLapilliTest #test14 stamp: 'DS 10/31/2020 17:12:33'!
FAILURE!

!testRun: #TerniLapilliTest #test14 stamp: 'DS 10/31/2020 17:12:39'!
FAILURE!

!testRun: #TerniLapilliTest #test14 stamp: 'DS 10/31/2020 17:12:53'!
FAILURE!
!TerniLapilliTest methodsFor: 'assertions' stamp: 'DS 10/31/2020 17:13:13' overrides: 16927375!
assert: aFalse description: aString 
	self shouldBeImplemented.! !

!methodRemoval: TerniLapilliTest #assert:description: stamp: 'DS 10/31/2020 17:13:20'!
assert: aFalse description: aString 
	self shouldBeImplemented.!

!testRun: #TerniLapilliTest #test14 stamp: 'DS 10/31/2020 17:13:25'!
FAILURE!

!testRun: #TerniLapilliTest #test14 stamp: 'DS 10/31/2020 17:13:34'!
FAILURE!

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 10/31/2020 17:14:01'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/31/2020 17:14:01'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/31/2020 17:14:01'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/31/2020 17:14:01'!
PASSED!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/31/2020 17:14:01'!
PASSED!

!testRun: #TerniLapilliTest #test06OPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 17:14:01'!
PASSED!

!testRun: #TerniLapilliTest #test07XPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 17:14:01'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerWonWithHorizontalPlay stamp: 'DS 10/31/2020 17:14:01'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerWonWithVerticalPlay stamp: 'DS 10/31/2020 17:14:01'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerWonWithInvertedDiagonalPlay stamp: 'DS 10/31/2020 17:14:01'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerWonWithDiagonalPlay stamp: 'DS 10/31/2020 17:14:01'!
PASSED!

!testRun: #TerniLapilliTest #test12GameIsOverWhenAPlayerWins stamp: 'DS 10/31/2020 17:14:01'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'DS 10/31/2020 17:14:01'!
PASSED!

!testRun: #TerniLapilliTest #test14 stamp: 'DS 10/31/2020 17:14:01'!
FAILURE!

!testRun: #TerniLapilliTest #test14 stamp: 'DS 10/31/2020 17:14:01'!
FAILURE!
!TerniLapilli methodsFor: 'player actions' stamp: 'DS 10/31/2020 17:14:23'!
moveOFrom: aPoint to: aPoint2 
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'DS 10/31/2020 17:14:40' prior: 50896856!
moveOFrom: aFromPosition to: aToPosition

	! !
!TerniLapilli methodsFor: 'player actions' stamp: 'DS 10/31/2020 17:14:57' prior: 50896861!
moveOFrom: aFromPosition to: aToPosition

	(positionsOccupied includes: {#O. aFromPosition} ) ifFalse: [ self error: self class ilegalMovementErrorDescription ].		! !

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 10/31/2020 17:15:08'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/31/2020 17:15:08'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/31/2020 17:15:08'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/31/2020 17:15:08'!
PASSED!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/31/2020 17:15:08'!
PASSED!

!testRun: #TerniLapilliTest #test06OPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 17:15:08'!
PASSED!

!testRun: #TerniLapilliTest #test07XPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 17:15:08'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerWonWithHorizontalPlay stamp: 'DS 10/31/2020 17:15:08'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerWonWithVerticalPlay stamp: 'DS 10/31/2020 17:15:08'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerWonWithInvertedDiagonalPlay stamp: 'DS 10/31/2020 17:15:08'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerWonWithDiagonalPlay stamp: 'DS 10/31/2020 17:15:08'!
PASSED!

!testRun: #TerniLapilliTest #test12GameIsOverWhenAPlayerWins stamp: 'DS 10/31/2020 17:15:08'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'DS 10/31/2020 17:15:08'!
PASSED!

!testRun: #TerniLapilliTest #test14 stamp: 'DS 10/31/2020 17:15:08'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DS 10/31/2020 17:16:36' prior: 50896554!
test13

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: -1@1.
	aTerniLapilli putOAt: 1@-1.
	
	aTerniLapilli moveXFrom: -1@1 to: -1@0.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DS 10/31/2020 17:17:14'!
test15

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: -1@1.
	aTerniLapilli putOAt: 1@-1.
	
	aTerniLapilli moveXFrom: -1@1 to: -1@0.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DS 10/31/2020 17:02:28' prior: 50896920!
test13

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: -1@1.
	aTerniLapilli putOAt: 1@-1.

	self
		should: [ aTerniLapilli moveXFrom: 0@0 to: -1@-1. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.! !

!testRun: #TerniLapilliTest #test13 stamp: 'DS 10/31/2020 17:17:40'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 10/31/2020 17:17:40'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/31/2020 17:17:40'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/31/2020 17:17:40'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/31/2020 17:17:40'!
PASSED!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/31/2020 17:17:40'!
PASSED!

!testRun: #TerniLapilliTest #test06OPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 17:17:40'!
PASSED!

!testRun: #TerniLapilliTest #test07XPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 17:17:40'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerWonWithHorizontalPlay stamp: 'DS 10/31/2020 17:17:40'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerWonWithVerticalPlay stamp: 'DS 10/31/2020 17:17:40'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerWonWithInvertedDiagonalPlay stamp: 'DS 10/31/2020 17:17:40'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerWonWithDiagonalPlay stamp: 'DS 10/31/2020 17:17:40'!
PASSED!

!testRun: #TerniLapilliTest #test12GameIsOverWhenAPlayerWins stamp: 'DS 10/31/2020 17:17:40'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'DS 10/31/2020 17:17:40'!
PASSED!

!testRun: #TerniLapilliTest #test14 stamp: 'DS 10/31/2020 17:17:40'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'DS 10/31/2020 17:17:40'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DS 10/31/2020 17:19:25' prior: 50896932!
test15

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: -1@1.
	aTerniLapilli putOAt: 1@-1.
	
	aTerniLapilli moveXFrom: -1@1 to: -1@0.
	aTerniLapilli moveOFrom: 0@0 to: 1@0.! !

!testRun: #TerniLapilliTest #test15 stamp: 'DS 10/31/2020 17:19:33'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 10/31/2020 17:19:33'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/31/2020 17:19:33'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/31/2020 17:19:33'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/31/2020 17:19:33'!
PASSED!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/31/2020 17:19:33'!
PASSED!

!testRun: #TerniLapilliTest #test06OPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 17:19:33'!
PASSED!

!testRun: #TerniLapilliTest #test07XPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 17:19:33'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerWonWithHorizontalPlay stamp: 'DS 10/31/2020 17:19:33'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerWonWithVerticalPlay stamp: 'DS 10/31/2020 17:19:33'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerWonWithInvertedDiagonalPlay stamp: 'DS 10/31/2020 17:19:33'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerWonWithDiagonalPlay stamp: 'DS 10/31/2020 17:19:33'!
PASSED!

!testRun: #TerniLapilliTest #test12GameIsOverWhenAPlayerWins stamp: 'DS 10/31/2020 17:19:33'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'DS 10/31/2020 17:19:33'!
PASSED!

!testRun: #TerniLapilliTest #test14 stamp: 'DS 10/31/2020 17:19:33'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'DS 10/31/2020 17:19:33'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DS 10/31/2020 17:19:48' prior: 50897010!
test15

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: -1@1.
	aTerniLapilli putOAt: 1@-1.
	
	aTerniLapilli moveXFrom: -1@1 to: -1@0.
	aTerniLapilli moveOFrom: 0@0 to: 1@0.
	
	self assert: aTerniLapilli isOver.! !

!testRun: #TerniLapilliTest #test15 stamp: 'DS 10/31/2020 17:19:49'!
FAILURE!
!TerniLapilli methodsFor: 'player actions' stamp: 'DS 10/31/2020 17:21:14' prior: 50896618!
moveXFrom: aFromPosition to: aToPosition

	(positionsOccupied includes: {#X. aFromPosition} ) ifFalse: [ self error: self class ilegalMovementErrorDescription ].	! !
!TerniLapilli methodsFor: 'player actions' stamp: 'DS 10/31/2020 17:24:18' prior: 50897091!
moveXFrom: aFromPosition to: aToPosition

	(positionsOccupied includes: {#X. aFromPosition} ) ifFalse: [ self error: self class ilegalMovementErrorDescription ].	
	
	self putXAt: aToPosition.

	positionsOccupied remove: {#X. aToPosition}.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'DS 10/31/2020 17:24:24' prior: 50897100!
moveXFrom: aFromPosition to: aToPosition

	(positionsOccupied includes: {#X. aFromPosition} ) ifFalse: [ self error: self class ilegalMovementErrorDescription ].	
	
	self putXAt: aToPosition.

	positionsOccupied remove: {#X. aFromPosition}.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'DS 10/31/2020 17:24:32' prior: 50897111!
moveXFrom: aFromPosition to: aToPosition

	(positionsOccupied includes: {#X. aFromPosition} ) ifFalse: [ self error: self class ilegalMovementErrorDescription ].	
	
	self putXAt: aToPosition.
	positionsOccupied remove: {#X. aFromPosition}.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'DS 10/31/2020 17:24:47' prior: 50896866!
moveOFrom: aFromPosition to: aToPosition

	(positionsOccupied includes: {#O. aFromPosition} ) ifFalse: [ self error: self class ilegalMovementErrorDescription ].		
	
	self putOAt: aToPosition.
	positionsOccupied remove: {#O. aFromPosition}.! !

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 10/31/2020 17:24:48'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/31/2020 17:24:48'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/31/2020 17:24:48'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/31/2020 17:24:48'!
PASSED!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/31/2020 17:24:48'!
PASSED!

!testRun: #TerniLapilliTest #test06OPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 17:24:48'!
PASSED!

!testRun: #TerniLapilliTest #test07XPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 17:24:48'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerWonWithHorizontalPlay stamp: 'DS 10/31/2020 17:24:48'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerWonWithVerticalPlay stamp: 'DS 10/31/2020 17:24:48'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerWonWithInvertedDiagonalPlay stamp: 'DS 10/31/2020 17:24:48'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerWonWithDiagonalPlay stamp: 'DS 10/31/2020 17:24:48'!
PASSED!

!testRun: #TerniLapilliTest #test12GameIsOverWhenAPlayerWins stamp: 'DS 10/31/2020 17:24:48'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'DS 10/31/2020 17:24:48'!
PASSED!

!testRun: #TerniLapilliTest #test14 stamp: 'DS 10/31/2020 17:24:48'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'DS 10/31/2020 17:24:48'!
PASSED!

----SNAPSHOT----(31 October 2020 17:24:51) CuisUniversity-4384.image priorSource: 18082076!
!TerniLapilli methodsFor: 'player actions' stamp: 'DS 10/31/2020 17:25:53'!
movePlayer: aPlayer from: aFromPosition to: aToPosition

	(positionsOccupied includes: {aPlayer. aFromPosition} ) ifFalse: [ self error: self class ilegalMovementErrorDescription ].	
	
	self put: aPlayer at: aToPosition.
	positionsOccupied remove: {aPlayer. aFromPosition}.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'DS 10/31/2020 17:26:20' prior: 50897122!
moveXFrom: aFromPosition to: aToPosition

	self movePlayer: #X from: aFromPosition to: aToPosition.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'DS 10/31/2020 17:26:39'!
move: aPlayer from: aFromPosition to: aToPosition

	(positionsOccupied includes: {aPlayer. aFromPosition} ) ifFalse: [ self error: self class ilegalMovementErrorDescription ].	
	
	self put: aPlayer at: aToPosition.
	positionsOccupied remove: {aPlayer. aFromPosition}.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DS 10/31/2020 17:26:39' prior: 50897206!
moveXFrom: aFromPosition to: aToPosition

	self move: #X from: aFromPosition to: aToPosition.! !

!methodRemoval: TerniLapilli #movePlayer:from:to: stamp: 'DS 10/31/2020 17:26:39'!
movePlayer: aPlayer from: aFromPosition to: aToPosition

	(positionsOccupied includes: {aPlayer. aFromPosition} ) ifFalse: [ self error: self class ilegalMovementErrorDescription ].	
	
	self put: aPlayer at: aToPosition.
	positionsOccupied remove: {aPlayer. aFromPosition}.!
!TerniLapilli methodsFor: 'player actions' stamp: 'DS 10/31/2020 17:27:02' prior: 50897133!
moveOFrom: aFromPosition to: aToPosition

	self move: #O from: aFromPosition to: aToPosition.! !

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 10/31/2020 17:27:03'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/31/2020 17:27:03'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/31/2020 17:27:03'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/31/2020 17:27:03'!
PASSED!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/31/2020 17:27:03'!
PASSED!

!testRun: #TerniLapilliTest #test06OPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 17:27:03'!
PASSED!

!testRun: #TerniLapilliTest #test07XPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 17:27:03'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerWonWithHorizontalPlay stamp: 'DS 10/31/2020 17:27:03'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerWonWithVerticalPlay stamp: 'DS 10/31/2020 17:27:03'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerWonWithInvertedDiagonalPlay stamp: 'DS 10/31/2020 17:27:03'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerWonWithDiagonalPlay stamp: 'DS 10/31/2020 17:27:03'!
PASSED!

!testRun: #TerniLapilliTest #test12GameIsOverWhenAPlayerWins stamp: 'DS 10/31/2020 17:27:03'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'DS 10/31/2020 17:27:03'!
PASSED!

!testRun: #TerniLapilliTest #test14 stamp: 'DS 10/31/2020 17:27:03'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'DS 10/31/2020 17:27:03'!
PASSED!

----SNAPSHOT----(31 October 2020 17:27:07) CuisUniversity-4384.image priorSource: 18097276!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DS 10/31/2020 17:28:51'!
test13XPlayerCanNotMoveFromInvalidPosition

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: -1@1.
	aTerniLapilli putOAt: 1@-1.

	self
		should: [ aTerniLapilli moveXFrom: 0@0 to: -1@-1. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.! !

!methodRemoval: TerniLapilliTest #test13 stamp: 'DS 10/31/2020 17:28:54'!
test13

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: -1@1.
	aTerniLapilli putOAt: 1@-1.

	self
		should: [ aTerniLapilli moveXFrom: 0@0 to: -1@-1. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DS 10/31/2020 17:30:43'!
test13XPlayerCanNotMoveFromNotOwnPosition

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: -1@1.
	aTerniLapilli putOAt: 1@-1.

	self
		should: [ aTerniLapilli moveXFrom: 0@0 to: -1@-1. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.! !

!methodRemoval: TerniLapilliTest #test13XPlayerCanNotMoveFromInvalidPosition stamp: 'DS 10/31/2020 17:30:45'!
test13XPlayerCanNotMoveFromInvalidPosition

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: -1@1.
	aTerniLapilli putOAt: 1@-1.

	self
		should: [ aTerniLapilli moveXFrom: 0@0 to: -1@-1. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DS 10/31/2020 17:31:04'!
test14OPlayerCanNotMoveFromNotOwnPosition

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: -1@1.
	aTerniLapilli putOAt: 1@-1.
	
	aTerniLapilli moveXFrom: -1@1 to: -1@0.

	self
		should: [ aTerniLapilli moveOFrom: -1@0 to: -1@1. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.! !

!methodRemoval: TerniLapilliTest #test14 stamp: 'DS 10/31/2020 17:31:04'!
test14

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: -1@1.
	aTerniLapilli putOAt: 1@-1.
	
	aTerniLapilli moveXFrom: -1@1 to: -1@0.

	self
		should: [ aTerniLapilli moveOFrom: -1@0 to: -1@1. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DS 10/31/2020 17:31:56'!
test15GameIsOverWhenAPlayerMovesToWin

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: -1@1.
	aTerniLapilli putOAt: 1@-1.
	
	aTerniLapilli moveXFrom: -1@1 to: -1@0.
	aTerniLapilli moveOFrom: 0@0 to: 1@0.
	
	self assert: aTerniLapilli isOver.! !

!methodRemoval: TerniLapilliTest #test15 stamp: 'DS 10/31/2020 17:31:56'!
test15

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: -1@1.
	aTerniLapilli putOAt: 1@-1.
	
	aTerniLapilli moveXFrom: -1@1 to: -1@0.
	aTerniLapilli moveOFrom: 0@0 to: 1@0.
	
	self assert: aTerniLapilli isOver.!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DS 10/31/2020 17:33:05'!
test15DoAWinnerMovementOverTheGame

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: -1@1.
	aTerniLapilli putOAt: 1@-1.
	
	aTerniLapilli moveXFrom: -1@1 to: -1@0.
	aTerniLapilli moveOFrom: 0@0 to: 1@0.
	
	self assert: aTerniLapilli isOver.! !

!methodRemoval: TerniLapilliTest #test15GameIsOverWhenAPlayerMovesToWin stamp: 'DS 10/31/2020 17:33:05'!
test15GameIsOverWhenAPlayerMovesToWin

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: -1@1.
	aTerniLapilli putOAt: 1@-1.
	
	aTerniLapilli moveXFrom: -1@1 to: -1@0.
	aTerniLapilli moveOFrom: 0@0 to: 1@0.
	
	self assert: aTerniLapilli isOver.!

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 10/31/2020 17:33:46'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/31/2020 17:33:46'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/31/2020 17:33:46'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/31/2020 17:33:46'!
PASSED!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/31/2020 17:33:46'!
PASSED!

!testRun: #TerniLapilliTest #test06OPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 17:33:46'!
PASSED!

!testRun: #TerniLapilliTest #test07XPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 17:33:46'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerWonWithHorizontalPlay stamp: 'DS 10/31/2020 17:33:46'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerWonWithVerticalPlay stamp: 'DS 10/31/2020 17:33:46'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerWonWithInvertedDiagonalPlay stamp: 'DS 10/31/2020 17:33:46'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerWonWithDiagonalPlay stamp: 'DS 10/31/2020 17:33:46'!
PASSED!

!testRun: #TerniLapilliTest #test12GameIsOverWhenAPlayerWins stamp: 'DS 10/31/2020 17:33:46'!
PASSED!

!testRun: #TerniLapilliTest #test13XPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 17:33:46'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 17:33:46'!
PASSED!

!testRun: #TerniLapilliTest #test15DoAWinnerMovementOverTheGame stamp: 'DS 10/31/2020 17:33:46'!
PASSED!

----SNAPSHOT----(31 October 2020 17:33:49) CuisUniversity-4384.image priorSource: 18100617!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DS 10/31/2020 17:44:26'!
test16

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: -1@1.
	aTerniLapilli putOAt: 1@-1.

	
	
	self assert: aTerniLapilli isOver.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DS 10/31/2020 17:45:14' prior: 50897507!
test16

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: -1@1.
	aTerniLapilli putOAt: 1@-1.

	self
		should: [ 	aTerniLapilli putXAt: -1@-1. ]
		raise: Error
		withMessageText: TerniLapilli noRemainedTokensErrorDescription.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'DS 10/31/2020 17:47:27' prior: 50897212!
move: aPlayer from: aFromPosition to: aToPosition

	(positionsOccupied includes: {aPlayer. aFromPosition} ) ifFalse: [ self error: self class ilegalMovementErrorDescription ].	

	self put: aPlayer at: aToPosition.
	positionsOccupied remove: {aPlayer. aFromPosition}.! !

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 10/31/2020 17:49:00'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/31/2020 17:49:00'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/31/2020 17:49:00'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/31/2020 17:49:00'!
PASSED!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/31/2020 17:49:00'!
PASSED!

!testRun: #TerniLapilliTest #test06OPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 17:49:00'!
PASSED!

!testRun: #TerniLapilliTest #test07XPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 17:49:00'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerWonWithHorizontalPlay stamp: 'DS 10/31/2020 17:49:00'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerWonWithVerticalPlay stamp: 'DS 10/31/2020 17:49:00'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerWonWithInvertedDiagonalPlay stamp: 'DS 10/31/2020 17:49:00'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerWonWithDiagonalPlay stamp: 'DS 10/31/2020 17:49:00'!
PASSED!

!testRun: #TerniLapilliTest #test12GameIsOverWhenAPlayerWins stamp: 'DS 10/31/2020 17:49:00'!
PASSED!

!testRun: #TerniLapilliTest #test13XPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 17:49:00'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 17:49:00'!
PASSED!

!testRun: #TerniLapilliTest #test15DoAWinnerMovementOverTheGame stamp: 'DS 10/31/2020 17:49:00'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'DS 10/31/2020 17:49:00'!
FAILURE!

!testRun: #TerniLapilliTest #test16 stamp: 'DS 10/31/2020 17:49:00'!
FAILURE!
!TerniLapilli methodsFor: 'player actions' stamp: 'DS 10/31/2020 17:51:00' prior: 50894532!
putXAt: aPosition

	((positionsOccupied select: [ :aOccupiedPosition | aOccupiedPosition first = #X ] ) size = 3 ) 
		ifTrue: [ self error: self class noRemainedTokensErrorDescription].

	self put: #X at: aPosition.! !

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 10/31/2020 17:51:03'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/31/2020 17:51:03'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/31/2020 17:51:03'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/31/2020 17:51:03'!
PASSED!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/31/2020 17:51:03'!
PASSED!

!testRun: #TerniLapilliTest #test06OPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 17:51:03'!
PASSED!

!testRun: #TerniLapilliTest #test07XPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 17:51:03'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerWonWithHorizontalPlay stamp: 'DS 10/31/2020 17:51:03'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerWonWithVerticalPlay stamp: 'DS 10/31/2020 17:51:03'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerWonWithInvertedDiagonalPlay stamp: 'DS 10/31/2020 17:51:03'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerWonWithDiagonalPlay stamp: 'DS 10/31/2020 17:51:03'!
PASSED!

!testRun: #TerniLapilliTest #test12GameIsOverWhenAPlayerWins stamp: 'DS 10/31/2020 17:51:03'!
FAILURE!

!testRun: #TerniLapilliTest #test13XPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 17:51:03'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 17:51:03'!
PASSED!

!testRun: #TerniLapilliTest #test15DoAWinnerMovementOverTheGame stamp: 'DS 10/31/2020 17:51:03'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'DS 10/31/2020 17:51:03'!
PASSED!

!testRun: #TerniLapilliTest #test12GameIsOverWhenAPlayerWins stamp: 'DS 10/31/2020 17:51:03'!
FAILURE!
!TerniLapilli methodsFor: 'player actions' stamp: 'DS 10/31/2020 17:51:43' prior: 50897602!
putXAt: aPosition

	self put: #X at: aPosition.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'DS 10/31/2020 17:52:14' prior: 50895925!
put: aPlayer at: aPosition

	(self isOver) ifTrue: [ self error: self class gameOverErrorDescription ].
	(currentPlayer = aPlayer) not ifTrue: [ self error: (self class attemptToPlayTwiceInARowErrorDescription) ].
	((positionsOccupied select: [ :aOccupiedPosition | aOccupiedPosition first = aPlayer ] ) size = 3 ) 
		ifTrue: [ self error: self class noRemainedTokensErrorDescription].

	((positionsOccupied collect: [ :aOccupiedPosition | aOccupiedPosition second] ) includes: aPosition) 		ifTrue: [ self error: self class ilegalMovementErrorDescription ].

	positionsOccupied add: {aPlayer. aPosition}.
	currentPlayer := (aPlayer = #X) ifTrue: [#O] ifFalse: [#X].! !

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 10/31/2020 17:52:18'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/31/2020 17:52:18'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/31/2020 17:52:18'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/31/2020 17:52:18'!
PASSED!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/31/2020 17:52:18'!
PASSED!

!testRun: #TerniLapilliTest #test06OPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 17:52:18'!
PASSED!

!testRun: #TerniLapilliTest #test07XPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 17:52:18'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerWonWithHorizontalPlay stamp: 'DS 10/31/2020 17:52:18'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerWonWithVerticalPlay stamp: 'DS 10/31/2020 17:52:18'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerWonWithInvertedDiagonalPlay stamp: 'DS 10/31/2020 17:52:18'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerWonWithDiagonalPlay stamp: 'DS 10/31/2020 17:52:18'!
PASSED!

!testRun: #TerniLapilliTest #test12GameIsOverWhenAPlayerWins stamp: 'DS 10/31/2020 17:52:18'!
PASSED!

!testRun: #TerniLapilliTest #test13XPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 17:52:18'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 17:52:18'!
ERROR!

!testRun: #TerniLapilliTest #test15DoAWinnerMovementOverTheGame stamp: 'DS 10/31/2020 17:52:18'!
ERROR!

!testRun: #TerniLapilliTest #test16 stamp: 'DS 10/31/2020 17:52:18'!
PASSED!
!TerniLapilli methodsFor: 'player actions' stamp: 'DS 10/29/2020 21:12:38' prior: 50897673!
put: aPlayer at: aPosition

	(self isOver) ifTrue: [ self error: self class gameOverErrorDescription ].
	(currentPlayer = aPlayer) not ifTrue: [ self error: (self class attemptToPlayTwiceInARowErrorDescription) ].
	((positionsOccupied collect: [ :aOccupiedPosition | aOccupiedPosition second] ) includes: aPosition) 		ifTrue: [ self error: self class ilegalMovementErrorDescription ].

	positionsOccupied add: {aPlayer. aPosition}.
	currentPlayer := (aPlayer = #X) ifTrue: [#O] ifFalse: [#X].! !

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 10/31/2020 17:53:15'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/31/2020 17:53:15'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/31/2020 17:53:15'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/31/2020 17:53:15'!
PASSED!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/31/2020 17:53:15'!
PASSED!

!testRun: #TerniLapilliTest #test06OPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 17:53:15'!
PASSED!

!testRun: #TerniLapilliTest #test07XPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 17:53:15'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerWonWithHorizontalPlay stamp: 'DS 10/31/2020 17:53:15'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerWonWithVerticalPlay stamp: 'DS 10/31/2020 17:53:15'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerWonWithInvertedDiagonalPlay stamp: 'DS 10/31/2020 17:53:15'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerWonWithDiagonalPlay stamp: 'DS 10/31/2020 17:53:15'!
PASSED!

!testRun: #TerniLapilliTest #test12GameIsOverWhenAPlayerWins stamp: 'DS 10/31/2020 17:53:15'!
PASSED!

!testRun: #TerniLapilliTest #test13XPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 17:53:15'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 17:53:15'!
PASSED!

!testRun: #TerniLapilliTest #test15DoAWinnerMovementOverTheGame stamp: 'DS 10/31/2020 17:53:15'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'DS 10/31/2020 17:53:15'!
FAILURE!

!testRun: #TerniLapilliTest #test16 stamp: 'DS 10/31/2020 17:53:15'!
FAILURE!
!TerniLapilli methodsFor: 'player actions' stamp: 'DS 10/31/2020 17:53:32' prior: 50897668!
putXAt: aPosition

	((positionsOccupied select: [ :aOccupiedPosition | aOccupiedPosition first = #X ] ) size = 3 ) 
		ifTrue: [ self error: self class noRemainedTokensErrorDescription].

	self put: #X at: aPosition.! !

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 10/31/2020 17:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/31/2020 17:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/31/2020 17:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/31/2020 17:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/31/2020 17:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test06OPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 17:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test07XPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 17:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerWonWithHorizontalPlay stamp: 'DS 10/31/2020 17:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerWonWithVerticalPlay stamp: 'DS 10/31/2020 17:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerWonWithInvertedDiagonalPlay stamp: 'DS 10/31/2020 17:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerWonWithDiagonalPlay stamp: 'DS 10/31/2020 17:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test12GameIsOverWhenAPlayerWins stamp: 'DS 10/31/2020 17:53:33'!
FAILURE!

!testRun: #TerniLapilliTest #test13XPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 17:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 17:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test15DoAWinnerMovementOverTheGame stamp: 'DS 10/31/2020 17:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'DS 10/31/2020 17:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test12GameIsOverWhenAPlayerWins stamp: 'DS 10/31/2020 17:53:33'!
FAILURE!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DS 10/31/2020 17:55:14' prior: 50896307!
test12GameIsOverWhenAPlayerWins

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: -1@1.
	aTerniLapilli putOAt: -1@-1.

	self
		should: [ aTerniLapilli putXAt: -1@0. ]
		raise: Error
		withMessageText: TerniLapilli noRemainedTokensErrorDescription.
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DS 10/31/2020 17:56:21'!
test16PlayerCanNotPutWhenHasNotTokenRemained

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: -1@1.
	aTerniLapilli putOAt: -1@-1.

	self
		should: [ aTerniLapilli putXAt: -1@0. ]
		raise: Error
		withMessageText: TerniLapilli noRemainedTokensErrorDescription.
	! !

!methodRemoval: TerniLapilliTest #test16 stamp: 'DS 10/31/2020 17:56:26'!
test16

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: -1@1.
	aTerniLapilli putOAt: 1@-1.

	self
		should: [ 	aTerniLapilli putXAt: -1@-1. ]
		raise: Error
		withMessageText: TerniLapilli noRemainedTokensErrorDescription.!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DS 10/31/2020 17:58:31' prior: 50897891!
test12GameIsOverWhenAPlayerWins

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: -1@1.
	aTerniLapilli putOAt: -1@-1.

	self
		should: [ aTerniLapilli moveXFrom: -1@1 to: -1@1 ]
		raise: Error
		withMessageText: TerniLapilli gameOverErrorDescription.
	! !

!testRun: #TerniLapilliTest #test12GameIsOverWhenAPlayerWins stamp: 'DS 10/31/2020 17:58:34'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 10/31/2020 17:58:34'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/31/2020 17:58:34'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/31/2020 17:58:34'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/31/2020 17:58:34'!
PASSED!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/31/2020 17:58:34'!
PASSED!

!testRun: #TerniLapilliTest #test06OPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 17:58:34'!
PASSED!

!testRun: #TerniLapilliTest #test07XPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 17:58:34'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerWonWithHorizontalPlay stamp: 'DS 10/31/2020 17:58:34'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerWonWithVerticalPlay stamp: 'DS 10/31/2020 17:58:34'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerWonWithInvertedDiagonalPlay stamp: 'DS 10/31/2020 17:58:34'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerWonWithDiagonalPlay stamp: 'DS 10/31/2020 17:58:34'!
PASSED!

!testRun: #TerniLapilliTest #test12GameIsOverWhenAPlayerWins stamp: 'DS 10/31/2020 17:58:34'!
PASSED!

!testRun: #TerniLapilliTest #test13XPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 17:58:34'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 17:58:34'!
PASSED!

!testRun: #TerniLapilliTest #test15DoAWinnerMovementOverTheGame stamp: 'DS 10/31/2020 17:58:34'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 10/31/2020 17:58:34'!
PASSED!

----SNAPSHOT----(31 October 2020 17:58:38) CuisUniversity-4384.image priorSource: 18107299!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DS 10/31/2020 18:00:33'!
test16XPlayerCanNotPutWhenHasNotTokenRemained

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: -1@1.
	aTerniLapilli putOAt: -1@-1.

	self
		should: [ aTerniLapilli putXAt: -1@0. ]
		raise: Error
		withMessageText: TerniLapilli noRemainedTokensErrorDescription.
	! !

!methodRemoval: TerniLapilliTest #test16PlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 10/31/2020 18:00:33'!
test16PlayerCanNotPutWhenHasNotTokenRemained

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: -1@1.
	aTerniLapilli putOAt: -1@-1.

	self
		should: [ aTerniLapilli putXAt: -1@0. ]
		raise: Error
		withMessageText: TerniLapilli noRemainedTokensErrorDescription.
	!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DS 10/31/2020 18:03:19'!
test17OPlayerCanNotPutWhenHasNotTokenRemained

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: -1@1.
	aTerniLapilli putOAt: 1@-1.
	
	aTerniLapilli moveXFrom: -1@1 to: -1@0.

	self
		should: [ aTerniLapilli putOAt: -1@-1. ]
		raise: Error
		withMessageText: TerniLapilli noRemainedTokensErrorDescription.
	! !

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 10/31/2020 18:03:21'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/31/2020 18:03:21'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/31/2020 18:03:21'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/31/2020 18:03:21'!
PASSED!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/31/2020 18:03:21'!
PASSED!

!testRun: #TerniLapilliTest #test06OPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 18:03:21'!
PASSED!

!testRun: #TerniLapilliTest #test07XPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 18:03:21'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerWonWithHorizontalPlay stamp: 'DS 10/31/2020 18:03:21'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerWonWithVerticalPlay stamp: 'DS 10/31/2020 18:03:21'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerWonWithInvertedDiagonalPlay stamp: 'DS 10/31/2020 18:03:21'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerWonWithDiagonalPlay stamp: 'DS 10/31/2020 18:03:21'!
PASSED!

!testRun: #TerniLapilliTest #test12GameIsOverWhenAPlayerWins stamp: 'DS 10/31/2020 18:03:21'!
PASSED!

!testRun: #TerniLapilliTest #test13XPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 18:03:21'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 18:03:21'!
PASSED!

!testRun: #TerniLapilliTest #test15DoAWinnerMovementOverTheGame stamp: 'DS 10/31/2020 18:03:21'!
PASSED!

!testRun: #TerniLapilliTest #test16XPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 10/31/2020 18:03:21'!
PASSED!

!testRun: #TerniLapilliTest #test17OPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 10/31/2020 18:03:21'!
FAILURE!

!testRun: #TerniLapilliTest #test17OPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 10/31/2020 18:03:21'!
FAILURE!
!TerniLapilli methodsFor: 'player actions' stamp: 'DS 10/31/2020 18:03:39' prior: 50894537!
putOAt: aPosition

	((positionsOccupied select: [ :aOccupiedPosition | aOccupiedPosition first = #O ] ) size = 3 ) 
		ifTrue: [ self error: self class noRemainedTokensErrorDescription].

	self put: #O at: aPosition.! !

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 10/31/2020 18:03:40'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/31/2020 18:03:40'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/31/2020 18:03:40'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/31/2020 18:03:40'!
PASSED!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/31/2020 18:03:40'!
PASSED!

!testRun: #TerniLapilliTest #test06OPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 18:03:40'!
PASSED!

!testRun: #TerniLapilliTest #test07XPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 18:03:40'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerWonWithHorizontalPlay stamp: 'DS 10/31/2020 18:03:40'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerWonWithVerticalPlay stamp: 'DS 10/31/2020 18:03:40'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerWonWithInvertedDiagonalPlay stamp: 'DS 10/31/2020 18:03:40'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerWonWithDiagonalPlay stamp: 'DS 10/31/2020 18:03:40'!
PASSED!

!testRun: #TerniLapilliTest #test12GameIsOverWhenAPlayerWins stamp: 'DS 10/31/2020 18:03:40'!
PASSED!

!testRun: #TerniLapilliTest #test13XPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 18:03:40'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 18:03:40'!
PASSED!

!testRun: #TerniLapilliTest #test15DoAWinnerMovementOverTheGame stamp: 'DS 10/31/2020 18:03:40'!
PASSED!

!testRun: #TerniLapilliTest #test16XPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 10/31/2020 18:03:40'!
PASSED!

!testRun: #TerniLapilliTest #test17OPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 10/31/2020 18:03:40'!
PASSED!

----SNAPSHOT----(31 October 2020 18:03:42) CuisUniversity-4384.image priorSource: 18123513!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DS 10/31/2020 18:11:36'!
test18

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.

	self
		should: [ aTerniLapilli putXAt: 0@2. ]
		raise: Error
		withMessageText: TerniLapilli positionOutOfBoardErrorDescription.
	! !

!testRun: #TerniLapilliTest #test18 stamp: 'DS 10/31/2020 18:11:48'!
ERROR!

!testRun: #TerniLapilliTest #test18 stamp: 'DS 10/31/2020 18:11:54'!
ERROR!

!testRun: #TerniLapilliTest #test18 stamp: 'DS 10/31/2020 18:12:00'!
ERROR!

!testRun: #TerniLapilliTest #test18 stamp: 'DS 10/31/2020 18:12:32'!
ERROR!

!testRun: #TerniLapilliTest #test18 stamp: 'DS 10/31/2020 18:12:34'!
ERROR!

!testRun: #TerniLapilliTest #test18 stamp: 'DS 10/31/2020 18:12:35'!
ERROR!

!testRun: #TerniLapilliTest #test18 stamp: 'DS 10/31/2020 18:12:36'!
ERROR!
!TerniLapilli class methodsFor: 'error descriptions' stamp: 'DS 10/31/2020 18:12:52'!
positionOutOfBoardErrorDescription
	self shouldBeImplemented.! !
!TerniLapilli class methodsFor: 'error descriptions' stamp: 'DS 10/31/2020 18:13:13' prior: 50898223!
positionOutOfBoardErrorDescription

	^'Position out of board'.! !

!testRun: #TerniLapilliTest #test18 stamp: 'DS 10/31/2020 18:13:14'!
FAILURE!

!testRun: #TerniLapilliTest #test18 stamp: 'DS 10/31/2020 18:13:33'!
FAILURE!

!testRun: #TerniLapilliTest #test18 stamp: 'DS 10/31/2020 18:13:52'!
FAILURE!
!TerniLapilli methodsFor: 'player actions' stamp: 'DS 10/31/2020 18:17:20' prior: 50897750!
put: aPlayer at: aPosition

	(aPosition between: (-1@-1) and: (1@1)) ifFalse: [ self error: self class positionOutOfBoardErrorDescription ].
	(self isOver) ifTrue: [ self error: self class gameOverErrorDescription ].
	(currentPlayer = aPlayer) ifFalse: [ self error: (self class attemptToPlayTwiceInARowErrorDescription) ].
	((positionsOccupied collect: [ :aOccupiedPosition | aOccupiedPosition second] ) includes: aPosition) 		ifTrue: [ self error: self class ilegalMovementErrorDescription ].

	positionsOccupied add: {aPlayer. aPosition}.
	currentPlayer := (aPlayer = #X) ifTrue: [#O] ifFalse: [#X].! !

!testRun: #TerniLapilliTest #test18 stamp: 'DS 10/31/2020 18:17:23'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 10/31/2020 18:17:23'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/31/2020 18:17:23'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/31/2020 18:17:23'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/31/2020 18:17:23'!
PASSED!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/31/2020 18:17:23'!
PASSED!

!testRun: #TerniLapilliTest #test06OPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 18:17:23'!
PASSED!

!testRun: #TerniLapilliTest #test07XPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 18:17:23'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerWonWithHorizontalPlay stamp: 'DS 10/31/2020 18:17:23'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerWonWithVerticalPlay stamp: 'DS 10/31/2020 18:17:23'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerWonWithInvertedDiagonalPlay stamp: 'DS 10/31/2020 18:17:23'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerWonWithDiagonalPlay stamp: 'DS 10/31/2020 18:17:23'!
PASSED!

!testRun: #TerniLapilliTest #test12GameIsOverWhenAPlayerWins stamp: 'DS 10/31/2020 18:17:23'!
PASSED!

!testRun: #TerniLapilliTest #test13XPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 18:17:23'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 18:17:23'!
PASSED!

!testRun: #TerniLapilliTest #test15DoAWinnerMovementOverTheGame stamp: 'DS 10/31/2020 18:17:23'!
PASSED!

!testRun: #TerniLapilliTest #test16XPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 10/31/2020 18:17:23'!
PASSED!

!testRun: #TerniLapilliTest #test17OPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 10/31/2020 18:17:23'!
PASSED!

!testRun: #TerniLapilliTest #test18 stamp: 'DS 10/31/2020 18:17:23'!
PASSED!

----SNAPSHOT----(31 October 2020 18:17:26) CuisUniversity-4384.image priorSource: 18129359!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DS 10/31/2020 18:17:44'!
test18PlayerCanNotPutOutOfBoard

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.

	self
		should: [ aTerniLapilli putXAt: 0@2. ]
		raise: Error
		withMessageText: TerniLapilli positionOutOfBoardErrorDescription.
	! !

!methodRemoval: TerniLapilliTest #test18 stamp: 'DS 10/31/2020 18:17:47'!
test18

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.

	self
		should: [ aTerniLapilli putXAt: 0@2. ]
		raise: Error
		withMessageText: TerniLapilli positionOutOfBoardErrorDescription.
	!

----SNAPSHOT----(31 October 2020 18:33:03) CuisUniversity-4384.image priorSource: 18133614!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DS 10/31/2020 21:52:25'!
test19

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: -1@1.
	aTerniLapilli putOAt: 1@-1.

	self
		should: [ aTerniLapilli moveXFrom: 0@1 to: -1@0. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.	! !

!testRun: #TerniLapilliTest #test19 stamp: 'DS 10/31/2020 21:52:55'!
FAILURE!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DS 10/31/2020 22:08:35' prior: 50898352!
test19

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: -1@1.
	aTerniLapilli putOAt: 1@-1.

	self
		should: [ aTerniLapilli moveUpXFrom: 0@-1. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.	! !

!testRun: #TerniLapilliTest #test19 stamp: 'DS 10/31/2020 22:08:38'!
FAILURE!

!testRun: #TerniLapilliTest #test19 stamp: 'DS 10/31/2020 22:08:55'!
FAILURE!
!TerniLapilli methodsFor: 'movements' stamp: 'DS 10/31/2020 22:10:34'!
moveUpXFrom: aPoint 
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'movements' stamp: 'DS 10/31/2020 22:10:46' prior: 50898389!
moveUpXFrom: aPosition

	! !
!TerniLapilli methodsFor: 'movements' stamp: 'DS 10/31/2020 22:13:03' prior: 50898394!
moveUpXFrom: aPosition

	| direction |
	direction := 0@1.

	self put: #X at: aPosition + direction.
	positionsOccupied remove: {#X. aPosition}.

	! !

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 10/31/2020 22:13:06'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/31/2020 22:13:06'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/31/2020 22:13:06'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/31/2020 22:13:06'!
PASSED!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/31/2020 22:13:06'!
PASSED!

!testRun: #TerniLapilliTest #test06OPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 22:13:06'!
PASSED!

!testRun: #TerniLapilliTest #test07XPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 22:13:06'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerWonWithHorizontalPlay stamp: 'DS 10/31/2020 22:13:06'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerWonWithVerticalPlay stamp: 'DS 10/31/2020 22:13:06'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerWonWithInvertedDiagonalPlay stamp: 'DS 10/31/2020 22:13:06'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerWonWithDiagonalPlay stamp: 'DS 10/31/2020 22:13:06'!
PASSED!

!testRun: #TerniLapilliTest #test12GameIsOverWhenAPlayerWins stamp: 'DS 10/31/2020 22:13:06'!
PASSED!

!testRun: #TerniLapilliTest #test13XPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 22:13:06'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 22:13:06'!
PASSED!

!testRun: #TerniLapilliTest #test15DoAWinnerMovementOverTheGame stamp: 'DS 10/31/2020 22:13:06'!
PASSED!

!testRun: #TerniLapilliTest #test16XPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 10/31/2020 22:13:06'!
PASSED!

!testRun: #TerniLapilliTest #test17OPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 10/31/2020 22:13:06'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerCanNotPutOutOfBoard stamp: 'DS 10/31/2020 22:13:06'!
PASSED!

!testRun: #TerniLapilliTest #test19 stamp: 'DS 10/31/2020 22:13:06'!
PASSED!

----SNAPSHOT----(31 October 2020 22:13:09) CuisUniversity-4384.image priorSource: 18134323!
!TerniLapilliTest methodsFor: 'movements' stamp: 'DS 10/31/2020 22:14:46'!
test20

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: -1@1.
	aTerniLapilli putOAt: 1@-1.

	self
		should: [ aTerniLapilli moveRightUpXFrom: 0@-1. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.	! !

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 10/31/2020 22:14:51'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/31/2020 22:14:51'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/31/2020 22:14:51'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/31/2020 22:14:51'!
PASSED!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/31/2020 22:14:51'!
PASSED!

!testRun: #TerniLapilliTest #test06OPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 22:14:51'!
PASSED!

!testRun: #TerniLapilliTest #test07XPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 22:14:51'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerWonWithHorizontalPlay stamp: 'DS 10/31/2020 22:14:51'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerWonWithVerticalPlay stamp: 'DS 10/31/2020 22:14:51'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerWonWithInvertedDiagonalPlay stamp: 'DS 10/31/2020 22:14:51'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerWonWithDiagonalPlay stamp: 'DS 10/31/2020 22:14:51'!
PASSED!

!testRun: #TerniLapilliTest #test12GameIsOverWhenAPlayerWins stamp: 'DS 10/31/2020 22:14:51'!
PASSED!

!testRun: #TerniLapilliTest #test13XPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 22:14:51'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 22:14:51'!
PASSED!

!testRun: #TerniLapilliTest #test15DoAWinnerMovementOverTheGame stamp: 'DS 10/31/2020 22:14:51'!
PASSED!

!testRun: #TerniLapilliTest #test16XPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 10/31/2020 22:14:51'!
PASSED!

!testRun: #TerniLapilliTest #test17OPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 10/31/2020 22:14:51'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerCanNotPutOutOfBoard stamp: 'DS 10/31/2020 22:14:51'!
PASSED!

!testRun: #TerniLapilliTest #test19 stamp: 'DS 10/31/2020 22:14:51'!
PASSED!

!testRun: #TerniLapilliTest #test20 stamp: 'DS 10/31/2020 22:14:51'!
FAILURE!

!testRun: #TerniLapilliTest #test20 stamp: 'DS 10/31/2020 22:14:51'!
FAILURE!
!TerniLapilli methodsFor: 'movements' stamp: 'DS 10/31/2020 22:15:06'!
moveRightUpXFrom: aPosition

	| direction |
	direction := 1@1.

	self put: #X at: aPosition + direction.
	positionsOccupied remove: {#X. aPosition}.

	! !

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 10/31/2020 22:15:09'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/31/2020 22:15:09'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/31/2020 22:15:09'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/31/2020 22:15:09'!
PASSED!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/31/2020 22:15:09'!
PASSED!

!testRun: #TerniLapilliTest #test06OPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 22:15:09'!
PASSED!

!testRun: #TerniLapilliTest #test07XPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 22:15:09'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerWonWithHorizontalPlay stamp: 'DS 10/31/2020 22:15:09'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerWonWithVerticalPlay stamp: 'DS 10/31/2020 22:15:09'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerWonWithInvertedDiagonalPlay stamp: 'DS 10/31/2020 22:15:09'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerWonWithDiagonalPlay stamp: 'DS 10/31/2020 22:15:09'!
PASSED!

!testRun: #TerniLapilliTest #test12GameIsOverWhenAPlayerWins stamp: 'DS 10/31/2020 22:15:09'!
PASSED!

!testRun: #TerniLapilliTest #test13XPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 22:15:09'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 22:15:09'!
PASSED!

!testRun: #TerniLapilliTest #test15DoAWinnerMovementOverTheGame stamp: 'DS 10/31/2020 22:15:09'!
PASSED!

!testRun: #TerniLapilliTest #test16XPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 10/31/2020 22:15:09'!
PASSED!

!testRun: #TerniLapilliTest #test17OPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 10/31/2020 22:15:09'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerCanNotPutOutOfBoard stamp: 'DS 10/31/2020 22:15:09'!
PASSED!

!testRun: #TerniLapilliTest #test19 stamp: 'DS 10/31/2020 22:15:09'!
PASSED!

!testRun: #TerniLapilliTest #test20 stamp: 'DS 10/31/2020 22:15:09'!
FAILURE!

!testRun: #TerniLapilliTest #test20 stamp: 'DS 10/31/2020 22:15:09'!
FAILURE!

!testRun: #TerniLapilliTest #test20 stamp: 'DS 10/31/2020 22:15:22'!
FAILURE!
!TerniLapilliTest methodsFor: 'movements' stamp: 'DS 10/31/2020 22:15:56' prior: 50898472!
test20

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: -1@1.
	aTerniLapilli putOAt: 1@-1.

	self
		should: [ aTerniLapilli moveRightXFrom: 0@1. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.	! !

!methodRemoval: TerniLapilli #moveRightUpXFrom: stamp: 'DS 10/31/2020 22:16:01'!
moveRightUpXFrom: aPosition

	| direction |
	direction := 1@1.

	self put: #X at: aPosition + direction.
	positionsOccupied remove: {#X. aPosition}.

	!

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 10/31/2020 22:16:03'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/31/2020 22:16:03'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/31/2020 22:16:03'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/31/2020 22:16:03'!
PASSED!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/31/2020 22:16:03'!
PASSED!

!testRun: #TerniLapilliTest #test06OPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 22:16:03'!
PASSED!

!testRun: #TerniLapilliTest #test07XPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 22:16:03'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerWonWithHorizontalPlay stamp: 'DS 10/31/2020 22:16:03'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerWonWithVerticalPlay stamp: 'DS 10/31/2020 22:16:03'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerWonWithInvertedDiagonalPlay stamp: 'DS 10/31/2020 22:16:03'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerWonWithDiagonalPlay stamp: 'DS 10/31/2020 22:16:03'!
PASSED!

!testRun: #TerniLapilliTest #test12GameIsOverWhenAPlayerWins stamp: 'DS 10/31/2020 22:16:03'!
PASSED!

!testRun: #TerniLapilliTest #test13XPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 22:16:03'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 22:16:03'!
PASSED!

!testRun: #TerniLapilliTest #test15DoAWinnerMovementOverTheGame stamp: 'DS 10/31/2020 22:16:03'!
PASSED!

!testRun: #TerniLapilliTest #test16XPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 10/31/2020 22:16:03'!
PASSED!

!testRun: #TerniLapilliTest #test17OPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 10/31/2020 22:16:03'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerCanNotPutOutOfBoard stamp: 'DS 10/31/2020 22:16:03'!
PASSED!

!testRun: #TerniLapilliTest #test19 stamp: 'DS 10/31/2020 22:16:03'!
PASSED!

!testRun: #TerniLapilliTest #test20 stamp: 'DS 10/31/2020 22:16:03'!
FAILURE!

!testRun: #TerniLapilliTest #test20 stamp: 'DS 10/31/2020 22:16:03'!
FAILURE!
!TerniLapilli methodsFor: 'movements' stamp: 'DS 10/31/2020 22:16:14'!
moveRightXFrom: aPosition

	| direction |
	direction := 1@0.

	self put: #X at: aPosition + direction.
	positionsOccupied remove: {#X. aPosition}.

	! !

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 10/31/2020 22:16:15'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/31/2020 22:16:15'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/31/2020 22:16:15'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/31/2020 22:16:15'!
PASSED!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/31/2020 22:16:15'!
PASSED!

!testRun: #TerniLapilliTest #test06OPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 22:16:15'!
PASSED!

!testRun: #TerniLapilliTest #test07XPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 22:16:15'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerWonWithHorizontalPlay stamp: 'DS 10/31/2020 22:16:15'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerWonWithVerticalPlay stamp: 'DS 10/31/2020 22:16:15'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerWonWithInvertedDiagonalPlay stamp: 'DS 10/31/2020 22:16:15'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerWonWithDiagonalPlay stamp: 'DS 10/31/2020 22:16:15'!
PASSED!

!testRun: #TerniLapilliTest #test12GameIsOverWhenAPlayerWins stamp: 'DS 10/31/2020 22:16:15'!
PASSED!

!testRun: #TerniLapilliTest #test13XPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 22:16:15'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 22:16:15'!
PASSED!

!testRun: #TerniLapilliTest #test15DoAWinnerMovementOverTheGame stamp: 'DS 10/31/2020 22:16:15'!
PASSED!

!testRun: #TerniLapilliTest #test16XPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 10/31/2020 22:16:15'!
PASSED!

!testRun: #TerniLapilliTest #test17OPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 10/31/2020 22:16:15'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerCanNotPutOutOfBoard stamp: 'DS 10/31/2020 22:16:15'!
PASSED!

!testRun: #TerniLapilliTest #test19 stamp: 'DS 10/31/2020 22:16:15'!
PASSED!

!testRun: #TerniLapilliTest #test20 stamp: 'DS 10/31/2020 22:16:15'!
PASSED!
!TerniLapilliTest methodsFor: 'movements' stamp: 'DS 10/31/2020 22:16:35'!
test21

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: -1@1.
	aTerniLapilli putOAt: 1@-1.

	self
		should: [ aTerniLapilli moveDownXFrom: 0@1. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.	! !

!testRun: #TerniLapilliTest #test21 stamp: 'DS 10/31/2020 22:16:38'!
FAILURE!
!TerniLapilli methodsFor: 'movements' stamp: 'DS 10/31/2020 22:16:53'!
moveDownXFrom: aPosition

	| direction |
	direction := 0@-1.

	self put: #X at: aPosition + direction.
	positionsOccupied remove: {#X. aPosition}.

	! !

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 10/31/2020 22:16:55'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/31/2020 22:16:55'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/31/2020 22:16:55'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/31/2020 22:16:55'!
PASSED!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/31/2020 22:16:55'!
PASSED!

!testRun: #TerniLapilliTest #test06OPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 22:16:55'!
PASSED!

!testRun: #TerniLapilliTest #test07XPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 22:16:55'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerWonWithHorizontalPlay stamp: 'DS 10/31/2020 22:16:55'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerWonWithVerticalPlay stamp: 'DS 10/31/2020 22:16:55'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerWonWithInvertedDiagonalPlay stamp: 'DS 10/31/2020 22:16:55'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerWonWithDiagonalPlay stamp: 'DS 10/31/2020 22:16:55'!
PASSED!

!testRun: #TerniLapilliTest #test12GameIsOverWhenAPlayerWins stamp: 'DS 10/31/2020 22:16:55'!
PASSED!

!testRun: #TerniLapilliTest #test13XPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 22:16:55'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 22:16:55'!
PASSED!

!testRun: #TerniLapilliTest #test15DoAWinnerMovementOverTheGame stamp: 'DS 10/31/2020 22:16:55'!
PASSED!

!testRun: #TerniLapilliTest #test16XPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 10/31/2020 22:16:55'!
PASSED!

!testRun: #TerniLapilliTest #test17OPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 10/31/2020 22:16:55'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerCanNotPutOutOfBoard stamp: 'DS 10/31/2020 22:16:55'!
PASSED!

!testRun: #TerniLapilliTest #test19 stamp: 'DS 10/31/2020 22:16:55'!
PASSED!

!testRun: #TerniLapilliTest #test20 stamp: 'DS 10/31/2020 22:16:55'!
PASSED!

!testRun: #TerniLapilliTest #test21 stamp: 'DS 10/31/2020 22:16:55'!
PASSED!
!TerniLapilliTest methodsFor: 'movements' stamp: 'DS 10/31/2020 22:17:12'!
test22

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: -1@1.
	aTerniLapilli putOAt: 1@-1.

	self
		should: [ aTerniLapilli moveLeftXFrom: 0@1. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.	! !

!testRun: #TerniLapilliTest #test22 stamp: 'DS 10/31/2020 22:17:17'!
FAILURE!
!TerniLapilli methodsFor: 'movements' stamp: 'DS 10/31/2020 22:17:29'!
moveLeftXFrom: aPosition

	| direction |
	direction := -1@0.

	self put: #X at: aPosition + direction.
	positionsOccupied remove: {#X. aPosition}.

	! !

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 10/31/2020 22:17:30'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/31/2020 22:17:30'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/31/2020 22:17:30'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/31/2020 22:17:30'!
PASSED!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/31/2020 22:17:30'!
PASSED!

!testRun: #TerniLapilliTest #test06OPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 22:17:30'!
PASSED!

!testRun: #TerniLapilliTest #test07XPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 22:17:30'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerWonWithHorizontalPlay stamp: 'DS 10/31/2020 22:17:30'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerWonWithVerticalPlay stamp: 'DS 10/31/2020 22:17:30'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerWonWithInvertedDiagonalPlay stamp: 'DS 10/31/2020 22:17:30'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerWonWithDiagonalPlay stamp: 'DS 10/31/2020 22:17:30'!
PASSED!

!testRun: #TerniLapilliTest #test12GameIsOverWhenAPlayerWins stamp: 'DS 10/31/2020 22:17:30'!
PASSED!

!testRun: #TerniLapilliTest #test13XPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 22:17:30'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 22:17:30'!
PASSED!

!testRun: #TerniLapilliTest #test15DoAWinnerMovementOverTheGame stamp: 'DS 10/31/2020 22:17:30'!
PASSED!

!testRun: #TerniLapilliTest #test16XPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 10/31/2020 22:17:30'!
PASSED!

!testRun: #TerniLapilliTest #test17OPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 10/31/2020 22:17:30'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerCanNotPutOutOfBoard stamp: 'DS 10/31/2020 22:17:30'!
PASSED!

!testRun: #TerniLapilliTest #test19 stamp: 'DS 10/31/2020 22:17:30'!
PASSED!

!testRun: #TerniLapilliTest #test20 stamp: 'DS 10/31/2020 22:17:30'!
PASSED!

!testRun: #TerniLapilliTest #test21 stamp: 'DS 10/31/2020 22:17:30'!
PASSED!

!testRun: #TerniLapilliTest #test22 stamp: 'DS 10/31/2020 22:17:30'!
PASSED!

----SNAPSHOT----(31 October 2020 22:17:33) CuisUniversity-4384.image priorSource: 18138175!
!TerniLapilliTest methodsFor: 'movements' stamp: 'DS 10/31/2020 22:18:10'!
test23

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: -1@1.
	aTerniLapilli putOAt: 1@-1.

	self
		should: [ aTerniLapilli moveLeftDownXFrom: 0@1. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.	! !
!TerniLapilli methodsFor: 'movements' stamp: 'DS 10/31/2020 22:18:43'!
moveLeftDownXFrom: aPosition

	| direction |
	direction := -1@-1.

	self put: #X at: aPosition + direction.
	positionsOccupied remove: {#X. aPosition}.

	! !

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 10/31/2020 22:18:45'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/31/2020 22:18:45'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/31/2020 22:18:45'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/31/2020 22:18:45'!
PASSED!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/31/2020 22:18:45'!
PASSED!

!testRun: #TerniLapilliTest #test06OPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 22:18:45'!
PASSED!

!testRun: #TerniLapilliTest #test07XPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 22:18:45'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerWonWithHorizontalPlay stamp: 'DS 10/31/2020 22:18:45'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerWonWithVerticalPlay stamp: 'DS 10/31/2020 22:18:45'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerWonWithInvertedDiagonalPlay stamp: 'DS 10/31/2020 22:18:45'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerWonWithDiagonalPlay stamp: 'DS 10/31/2020 22:18:45'!
PASSED!

!testRun: #TerniLapilliTest #test12GameIsOverWhenAPlayerWins stamp: 'DS 10/31/2020 22:18:45'!
PASSED!

!testRun: #TerniLapilliTest #test13XPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 22:18:45'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 22:18:45'!
PASSED!

!testRun: #TerniLapilliTest #test15DoAWinnerMovementOverTheGame stamp: 'DS 10/31/2020 22:18:45'!
PASSED!

!testRun: #TerniLapilliTest #test16XPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 10/31/2020 22:18:45'!
PASSED!

!testRun: #TerniLapilliTest #test17OPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 10/31/2020 22:18:45'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerCanNotPutOutOfBoard stamp: 'DS 10/31/2020 22:18:45'!
PASSED!

!testRun: #TerniLapilliTest #test19 stamp: 'DS 10/31/2020 22:18:45'!
PASSED!

!testRun: #TerniLapilliTest #test20 stamp: 'DS 10/31/2020 22:18:45'!
PASSED!

!testRun: #TerniLapilliTest #test21 stamp: 'DS 10/31/2020 22:18:45'!
PASSED!

!testRun: #TerniLapilliTest #test22 stamp: 'DS 10/31/2020 22:18:45'!
PASSED!

!testRun: #TerniLapilliTest #test23 stamp: 'DS 10/31/2020 22:18:45'!
FAILURE!

!testRun: #TerniLapilliTest #test23 stamp: 'DS 10/31/2020 22:18:45'!
FAILURE!

!testRun: #TerniLapilliTest #test23 stamp: 'DS 10/31/2020 22:19:11'!
FAILURE!
!TerniLapilli methodsFor: 'movements' stamp: 'DS 10/31/2020 22:20:52' prior: 50899003!
moveLeftDownXFrom: aPosition

	| direction |

	({0@1. 1@0} includes: aPosition) ifTrue: [ self error: self class ilegalMovementErrorDescription ].

	direction := -1@-1.

	self put: #X at: aPosition + direction.
	positionsOccupied remove: {#X. aPosition}.

	! !

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 10/31/2020 22:20:54'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/31/2020 22:20:54'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/31/2020 22:20:54'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/31/2020 22:20:54'!
PASSED!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/31/2020 22:20:54'!
PASSED!

!testRun: #TerniLapilliTest #test06OPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 22:20:54'!
PASSED!

!testRun: #TerniLapilliTest #test07XPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 22:20:54'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerWonWithHorizontalPlay stamp: 'DS 10/31/2020 22:20:54'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerWonWithVerticalPlay stamp: 'DS 10/31/2020 22:20:54'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerWonWithInvertedDiagonalPlay stamp: 'DS 10/31/2020 22:20:54'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerWonWithDiagonalPlay stamp: 'DS 10/31/2020 22:20:54'!
PASSED!

!testRun: #TerniLapilliTest #test12GameIsOverWhenAPlayerWins stamp: 'DS 10/31/2020 22:20:54'!
PASSED!

!testRun: #TerniLapilliTest #test13XPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 22:20:54'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 22:20:54'!
PASSED!

!testRun: #TerniLapilliTest #test15DoAWinnerMovementOverTheGame stamp: 'DS 10/31/2020 22:20:54'!
PASSED!

!testRun: #TerniLapilliTest #test16XPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 10/31/2020 22:20:54'!
PASSED!

!testRun: #TerniLapilliTest #test17OPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 10/31/2020 22:20:54'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerCanNotPutOutOfBoard stamp: 'DS 10/31/2020 22:20:54'!
PASSED!

!testRun: #TerniLapilliTest #test19 stamp: 'DS 10/31/2020 22:20:54'!
PASSED!

!testRun: #TerniLapilliTest #test20 stamp: 'DS 10/31/2020 22:20:54'!
PASSED!

!testRun: #TerniLapilliTest #test21 stamp: 'DS 10/31/2020 22:20:54'!
PASSED!

!testRun: #TerniLapilliTest #test22 stamp: 'DS 10/31/2020 22:20:54'!
PASSED!

!testRun: #TerniLapilliTest #test23 stamp: 'DS 10/31/2020 22:20:54'!
PASSED!

----SNAPSHOT----(31 October 2020 22:20:57) CuisUniversity-4384.image priorSource: 18154700!
!TerniLapilliTest methodsFor: 'movements' stamp: 'DS 10/31/2020 22:21:45'!
test24

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: -1@1.
	aTerniLapilli putOAt: 1@-1.

	self
		should: [ aTerniLapilli moveRightDownXFrom: 0@1. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.	! !

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 10/31/2020 22:21:48'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/31/2020 22:21:48'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/31/2020 22:21:48'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/31/2020 22:21:48'!
PASSED!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/31/2020 22:21:48'!
PASSED!

!testRun: #TerniLapilliTest #test06OPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 22:21:48'!
PASSED!

!testRun: #TerniLapilliTest #test07XPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 22:21:48'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerWonWithHorizontalPlay stamp: 'DS 10/31/2020 22:21:48'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerWonWithVerticalPlay stamp: 'DS 10/31/2020 22:21:48'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerWonWithInvertedDiagonalPlay stamp: 'DS 10/31/2020 22:21:48'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerWonWithDiagonalPlay stamp: 'DS 10/31/2020 22:21:48'!
PASSED!

!testRun: #TerniLapilliTest #test12GameIsOverWhenAPlayerWins stamp: 'DS 10/31/2020 22:21:48'!
PASSED!

!testRun: #TerniLapilliTest #test13XPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 22:21:48'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 22:21:48'!
PASSED!

!testRun: #TerniLapilliTest #test15DoAWinnerMovementOverTheGame stamp: 'DS 10/31/2020 22:21:48'!
PASSED!

!testRun: #TerniLapilliTest #test16XPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 10/31/2020 22:21:48'!
PASSED!

!testRun: #TerniLapilliTest #test17OPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 10/31/2020 22:21:48'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerCanNotPutOutOfBoard stamp: 'DS 10/31/2020 22:21:48'!
PASSED!

!testRun: #TerniLapilliTest #test19 stamp: 'DS 10/31/2020 22:21:48'!
PASSED!

!testRun: #TerniLapilliTest #test20 stamp: 'DS 10/31/2020 22:21:48'!
PASSED!

!testRun: #TerniLapilliTest #test21 stamp: 'DS 10/31/2020 22:21:48'!
PASSED!

!testRun: #TerniLapilliTest #test22 stamp: 'DS 10/31/2020 22:21:48'!
PASSED!

!testRun: #TerniLapilliTest #test23 stamp: 'DS 10/31/2020 22:21:48'!
PASSED!

!testRun: #TerniLapilliTest #test24 stamp: 'DS 10/31/2020 22:21:48'!
FAILURE!

!testRun: #TerniLapilliTest #test24 stamp: 'DS 10/31/2020 22:21:48'!
FAILURE!
!TerniLapilli methodsFor: 'movements' stamp: 'DS 10/31/2020 22:22:30'!
moveRightDownXFrom: aPosition

	| direction |

	({1@0. -1@0} includes: aPosition) ifTrue: [ self error: self class ilegalMovementErrorDescription ].

	direction := -1@-1.

	self put: #X at: aPosition + direction.
	positionsOccupied remove: {#X. aPosition}.

	! !

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 10/31/2020 22:22:32'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/31/2020 22:22:32'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/31/2020 22:22:32'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/31/2020 22:22:32'!
PASSED!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/31/2020 22:22:32'!
PASSED!

!testRun: #TerniLapilliTest #test06OPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 22:22:32'!
PASSED!

!testRun: #TerniLapilliTest #test07XPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 22:22:32'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerWonWithHorizontalPlay stamp: 'DS 10/31/2020 22:22:32'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerWonWithVerticalPlay stamp: 'DS 10/31/2020 22:22:32'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerWonWithInvertedDiagonalPlay stamp: 'DS 10/31/2020 22:22:32'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerWonWithDiagonalPlay stamp: 'DS 10/31/2020 22:22:32'!
PASSED!

!testRun: #TerniLapilliTest #test12GameIsOverWhenAPlayerWins stamp: 'DS 10/31/2020 22:22:32'!
PASSED!

!testRun: #TerniLapilliTest #test13XPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 22:22:32'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 22:22:32'!
PASSED!

!testRun: #TerniLapilliTest #test15DoAWinnerMovementOverTheGame stamp: 'DS 10/31/2020 22:22:32'!
PASSED!

!testRun: #TerniLapilliTest #test16XPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 10/31/2020 22:22:32'!
PASSED!

!testRun: #TerniLapilliTest #test17OPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 10/31/2020 22:22:32'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerCanNotPutOutOfBoard stamp: 'DS 10/31/2020 22:22:32'!
PASSED!

!testRun: #TerniLapilliTest #test19 stamp: 'DS 10/31/2020 22:22:32'!
PASSED!

!testRun: #TerniLapilliTest #test20 stamp: 'DS 10/31/2020 22:22:32'!
PASSED!

!testRun: #TerniLapilliTest #test21 stamp: 'DS 10/31/2020 22:22:32'!
PASSED!

!testRun: #TerniLapilliTest #test22 stamp: 'DS 10/31/2020 22:22:32'!
PASSED!

!testRun: #TerniLapilliTest #test23 stamp: 'DS 10/31/2020 22:22:32'!
PASSED!

!testRun: #TerniLapilliTest #test24 stamp: 'DS 10/31/2020 22:22:32'!
FAILURE!

!testRun: #TerniLapilliTest #test24 stamp: 'DS 10/31/2020 22:22:32'!
FAILURE!
!TerniLapilli methodsFor: 'movements' stamp: 'DS 10/31/2020 22:24:25' prior: 50899269!
moveRightDownXFrom: aPosition

	| direction |

	({0@1. -1@0} includes: aPosition) ifTrue: [ self error: self class ilegalMovementErrorDescription ].

	direction := -1@-1.

	self put: #X at: aPosition + direction.
	positionsOccupied remove: {#X. aPosition}.

	! !

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 10/31/2020 22:24:26'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/31/2020 22:24:26'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/31/2020 22:24:26'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/31/2020 22:24:26'!
PASSED!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/31/2020 22:24:26'!
PASSED!

!testRun: #TerniLapilliTest #test06OPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 22:24:26'!
PASSED!

!testRun: #TerniLapilliTest #test07XPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 22:24:26'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerWonWithHorizontalPlay stamp: 'DS 10/31/2020 22:24:26'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerWonWithVerticalPlay stamp: 'DS 10/31/2020 22:24:26'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerWonWithInvertedDiagonalPlay stamp: 'DS 10/31/2020 22:24:26'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerWonWithDiagonalPlay stamp: 'DS 10/31/2020 22:24:26'!
PASSED!

!testRun: #TerniLapilliTest #test12GameIsOverWhenAPlayerWins stamp: 'DS 10/31/2020 22:24:26'!
PASSED!

!testRun: #TerniLapilliTest #test13XPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 22:24:26'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 22:24:26'!
PASSED!

!testRun: #TerniLapilliTest #test15DoAWinnerMovementOverTheGame stamp: 'DS 10/31/2020 22:24:26'!
PASSED!

!testRun: #TerniLapilliTest #test16XPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 10/31/2020 22:24:26'!
PASSED!

!testRun: #TerniLapilliTest #test17OPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 10/31/2020 22:24:26'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerCanNotPutOutOfBoard stamp: 'DS 10/31/2020 22:24:26'!
PASSED!

!testRun: #TerniLapilliTest #test19 stamp: 'DS 10/31/2020 22:24:26'!
PASSED!

!testRun: #TerniLapilliTest #test20 stamp: 'DS 10/31/2020 22:24:26'!
PASSED!

!testRun: #TerniLapilliTest #test21 stamp: 'DS 10/31/2020 22:24:26'!
PASSED!

!testRun: #TerniLapilliTest #test22 stamp: 'DS 10/31/2020 22:24:26'!
PASSED!

!testRun: #TerniLapilliTest #test23 stamp: 'DS 10/31/2020 22:24:26'!
PASSED!

!testRun: #TerniLapilliTest #test24 stamp: 'DS 10/31/2020 22:24:26'!
PASSED!

----SNAPSHOT----(31 October 2020 22:24:29) CuisUniversity-4384.image priorSource: 18160710!
!TerniLapilliTest methodsFor: 'movements' stamp: 'DS 10/31/2020 22:27:07' prior: 50898988!
test23

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: -1@1.
	aTerniLapilli putOAt: 1@-1.

	self
		should: [ aTerniLapilli moveRightUpXFrom: 0@-1. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.	! !
!TerniLapilliTest methodsFor: 'movements' stamp: 'DS 10/31/2020 22:18:10' prior: 50899448!
test23

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: -1@1.
	aTerniLapilli putOAt: 1@-1.

	self
		should: [ aTerniLapilli moveLeftDownXFrom: 0@1. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.	! !

!testRun: #TerniLapilliTest #test24 stamp: 'DS 10/31/2020 22:28:20'!
PASSED!

!testRun: #TerniLapilliTest #test19 stamp: 'DS 10/31/2020 22:28:22'!
PASSED!

!testRun: #TerniLapilliTest #test20 stamp: 'DS 10/31/2020 22:28:22'!
PASSED!

!testRun: #TerniLapilliTest #test21 stamp: 'DS 10/31/2020 22:28:22'!
PASSED!

!testRun: #TerniLapilliTest #test22 stamp: 'DS 10/31/2020 22:28:22'!
PASSED!

!testRun: #TerniLapilliTest #test23 stamp: 'DS 10/31/2020 22:28:22'!
PASSED!

!testRun: #TerniLapilliTest #test24 stamp: 'DS 10/31/2020 22:28:22'!
PASSED!
!TerniLapilliTest methodsFor: 'movements' stamp: 'DS 10/31/2020 22:29:13'!
test25

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: -1@1.
	aTerniLapilli putOAt: 1@-1.

	self
		should: [ aTerniLapilli moveRightUpXFrom: 0@-1. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.	! !

!testRun: #TerniLapilliTest #test25 stamp: 'DS 10/31/2020 22:29:16'!
FAILURE!
!TerniLapilli methodsFor: 'movements' stamp: 'DS 10/31/2020 22:31:06'!
moveRightUpXFrom: aPosition

	| direction |



	direction := -1@-1.

	self put: #X at: aPosition + direction.
	positionsOccupied remove: {#X. aPosition}.

	! !
!TerniLapilli methodsFor: 'movements' stamp: 'DS 10/31/2020 22:31:14' prior: 50899512!
moveRightUpXFrom: aPosition

	| direction |



	direction := 1@1.

	self put: #X at: aPosition + direction.
	positionsOccupied remove: {#X. aPosition}.

	! !

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 10/31/2020 22:31:16'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/31/2020 22:31:16'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/31/2020 22:31:16'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/31/2020 22:31:16'!
PASSED!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/31/2020 22:31:16'!
PASSED!

!testRun: #TerniLapilliTest #test06OPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 22:31:16'!
PASSED!

!testRun: #TerniLapilliTest #test07XPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 22:31:16'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerWonWithHorizontalPlay stamp: 'DS 10/31/2020 22:31:16'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerWonWithVerticalPlay stamp: 'DS 10/31/2020 22:31:16'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerWonWithInvertedDiagonalPlay stamp: 'DS 10/31/2020 22:31:16'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerWonWithDiagonalPlay stamp: 'DS 10/31/2020 22:31:16'!
PASSED!

!testRun: #TerniLapilliTest #test12GameIsOverWhenAPlayerWins stamp: 'DS 10/31/2020 22:31:16'!
PASSED!

!testRun: #TerniLapilliTest #test13XPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 22:31:16'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 22:31:16'!
PASSED!

!testRun: #TerniLapilliTest #test15DoAWinnerMovementOverTheGame stamp: 'DS 10/31/2020 22:31:16'!
PASSED!

!testRun: #TerniLapilliTest #test16XPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 10/31/2020 22:31:16'!
PASSED!

!testRun: #TerniLapilliTest #test17OPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 10/31/2020 22:31:16'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerCanNotPutOutOfBoard stamp: 'DS 10/31/2020 22:31:16'!
PASSED!

!testRun: #TerniLapilliTest #test19 stamp: 'DS 10/31/2020 22:31:16'!
PASSED!

!testRun: #TerniLapilliTest #test20 stamp: 'DS 10/31/2020 22:31:16'!
PASSED!

!testRun: #TerniLapilliTest #test21 stamp: 'DS 10/31/2020 22:31:16'!
PASSED!

!testRun: #TerniLapilliTest #test22 stamp: 'DS 10/31/2020 22:31:16'!
PASSED!

!testRun: #TerniLapilliTest #test23 stamp: 'DS 10/31/2020 22:31:16'!
PASSED!

!testRun: #TerniLapilliTest #test24 stamp: 'DS 10/31/2020 22:31:16'!
PASSED!

!testRun: #TerniLapilliTest #test25 stamp: 'DS 10/31/2020 22:31:16'!
FAILURE!

!testRun: #TerniLapilliTest #test25 stamp: 'DS 10/31/2020 22:31:16'!
FAILURE!
!TerniLapilli methodsFor: 'movements' stamp: 'DS 10/31/2020 22:31:34' prior: 50899520!
moveRightUpXFrom: aPosition

	| direction |

	({0@-1. -1@0} includes: aPosition) ifTrue: [ self error: self class ilegalMovementErrorDescription ].

	direction := 1@1.

	self put: #X at: aPosition + direction.
	positionsOccupied remove: {#X. aPosition}.

	! !

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 10/31/2020 22:31:36'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/31/2020 22:31:36'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/31/2020 22:31:36'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/31/2020 22:31:36'!
PASSED!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/31/2020 22:31:36'!
PASSED!

!testRun: #TerniLapilliTest #test06OPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 22:31:36'!
PASSED!

!testRun: #TerniLapilliTest #test07XPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 22:31:36'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerWonWithHorizontalPlay stamp: 'DS 10/31/2020 22:31:36'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerWonWithVerticalPlay stamp: 'DS 10/31/2020 22:31:36'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerWonWithInvertedDiagonalPlay stamp: 'DS 10/31/2020 22:31:36'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerWonWithDiagonalPlay stamp: 'DS 10/31/2020 22:31:36'!
PASSED!

!testRun: #TerniLapilliTest #test12GameIsOverWhenAPlayerWins stamp: 'DS 10/31/2020 22:31:36'!
PASSED!

!testRun: #TerniLapilliTest #test13XPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 22:31:36'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 22:31:36'!
PASSED!

!testRun: #TerniLapilliTest #test15DoAWinnerMovementOverTheGame stamp: 'DS 10/31/2020 22:31:36'!
PASSED!

!testRun: #TerniLapilliTest #test16XPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 10/31/2020 22:31:36'!
PASSED!

!testRun: #TerniLapilliTest #test17OPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 10/31/2020 22:31:36'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerCanNotPutOutOfBoard stamp: 'DS 10/31/2020 22:31:36'!
PASSED!

!testRun: #TerniLapilliTest #test19 stamp: 'DS 10/31/2020 22:31:36'!
PASSED!

!testRun: #TerniLapilliTest #test20 stamp: 'DS 10/31/2020 22:31:36'!
PASSED!

!testRun: #TerniLapilliTest #test21 stamp: 'DS 10/31/2020 22:31:36'!
PASSED!

!testRun: #TerniLapilliTest #test22 stamp: 'DS 10/31/2020 22:31:36'!
PASSED!

!testRun: #TerniLapilliTest #test23 stamp: 'DS 10/31/2020 22:31:36'!
PASSED!

!testRun: #TerniLapilliTest #test24 stamp: 'DS 10/31/2020 22:31:36'!
PASSED!

!testRun: #TerniLapilliTest #test25 stamp: 'DS 10/31/2020 22:31:36'!
PASSED!
!TerniLapilliTest methodsFor: 'movements' stamp: 'DS 10/31/2020 22:32:44' prior: 50899495!
test25

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: -1@1.
	aTerniLapilli putOAt: 1@-1.

	self
		should: [ aTerniLapilli moveLeftUpXFrom: 0@-1. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.	! !
!TerniLapilli methodsFor: 'movements' stamp: 'DS 10/31/2020 22:33:18'!
moveLeftUpXFrom: aPosition

	| direction |

	({0@-1. 1@0} includes: aPosition) ifTrue: [ self error: self class ilegalMovementErrorDescription ].

	direction := -1@-1.

	self put: #X at: aPosition + direction.
	positionsOccupied remove: {#X. aPosition}.

	! !

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 10/31/2020 22:33:20'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/31/2020 22:33:20'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/31/2020 22:33:20'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/31/2020 22:33:20'!
PASSED!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/31/2020 22:33:20'!
PASSED!

!testRun: #TerniLapilliTest #test06OPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 22:33:20'!
PASSED!

!testRun: #TerniLapilliTest #test07XPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 22:33:20'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerWonWithHorizontalPlay stamp: 'DS 10/31/2020 22:33:20'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerWonWithVerticalPlay stamp: 'DS 10/31/2020 22:33:20'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerWonWithInvertedDiagonalPlay stamp: 'DS 10/31/2020 22:33:20'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerWonWithDiagonalPlay stamp: 'DS 10/31/2020 22:33:20'!
PASSED!

!testRun: #TerniLapilliTest #test12GameIsOverWhenAPlayerWins stamp: 'DS 10/31/2020 22:33:20'!
PASSED!

!testRun: #TerniLapilliTest #test13XPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 22:33:20'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 22:33:20'!
PASSED!

!testRun: #TerniLapilliTest #test15DoAWinnerMovementOverTheGame stamp: 'DS 10/31/2020 22:33:20'!
PASSED!

!testRun: #TerniLapilliTest #test16XPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 10/31/2020 22:33:20'!
PASSED!

!testRun: #TerniLapilliTest #test17OPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 10/31/2020 22:33:20'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerCanNotPutOutOfBoard stamp: 'DS 10/31/2020 22:33:20'!
PASSED!

!testRun: #TerniLapilliTest #test19 stamp: 'DS 10/31/2020 22:33:20'!
PASSED!

!testRun: #TerniLapilliTest #test20 stamp: 'DS 10/31/2020 22:33:20'!
PASSED!

!testRun: #TerniLapilliTest #test21 stamp: 'DS 10/31/2020 22:33:20'!
PASSED!

!testRun: #TerniLapilliTest #test22 stamp: 'DS 10/31/2020 22:33:20'!
PASSED!

!testRun: #TerniLapilliTest #test23 stamp: 'DS 10/31/2020 22:33:20'!
PASSED!

!testRun: #TerniLapilliTest #test24 stamp: 'DS 10/31/2020 22:33:20'!
PASSED!

!testRun: #TerniLapilliTest #test25 stamp: 'DS 10/31/2020 22:33:20'!
PASSED!
!TerniLapilli methodsFor: 'movements' stamp: 'DS 10/31/2020 22:33:55' prior: 50899089!
moveLeftDownXFrom: aPosition

	| direction |

	(0@1 = aPosition) ifTrue: [ self error: self class ilegalMovementErrorDescription ].

	direction := -1@-1.

	self put: #X at: aPosition + direction.
	positionsOccupied remove: {#X. aPosition}.

	! !
!TerniLapilli methodsFor: 'movements' stamp: 'DS 10/31/2020 22:34:12' prior: 50899358!
moveRightDownXFrom: aPosition

	| direction |

	(0@1 = aPosition) ifTrue: [ self error: self class ilegalMovementErrorDescription ].

	direction := -1@-1.

	self put: #X at: aPosition + direction.
	positionsOccupied remove: {#X. aPosition}.

	! !
!TerniLapilli methodsFor: 'movements' stamp: 'DS 10/31/2020 22:34:29' prior: 50899609!
moveRightUpXFrom: aPosition

	| direction |

	(0@-1 = aPosition) ifTrue: [ self error: self class ilegalMovementErrorDescription ].

	direction := 1@1.

	self put: #X at: aPosition + direction.
	positionsOccupied remove: {#X. aPosition}.

	! !
!TerniLapilli methodsFor: 'movements' stamp: 'DS 10/31/2020 22:34:48' prior: 50899713!
moveLeftUpXFrom: aPosition

	| direction |

	(0@-1 = aPosition) ifTrue: [ self error: self class ilegalMovementErrorDescription ].

	direction := -1@-1.

	self put: #X at: aPosition + direction.
	positionsOccupied remove: {#X. aPosition}.

	! !

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 10/31/2020 22:34:50'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/31/2020 22:34:50'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/31/2020 22:34:50'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/31/2020 22:34:50'!
PASSED!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/31/2020 22:34:50'!
PASSED!

!testRun: #TerniLapilliTest #test06OPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 22:34:50'!
PASSED!

!testRun: #TerniLapilliTest #test07XPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 22:34:50'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerWonWithHorizontalPlay stamp: 'DS 10/31/2020 22:34:50'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerWonWithVerticalPlay stamp: 'DS 10/31/2020 22:34:50'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerWonWithInvertedDiagonalPlay stamp: 'DS 10/31/2020 22:34:50'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerWonWithDiagonalPlay stamp: 'DS 10/31/2020 22:34:50'!
PASSED!

!testRun: #TerniLapilliTest #test12GameIsOverWhenAPlayerWins stamp: 'DS 10/31/2020 22:34:50'!
PASSED!

!testRun: #TerniLapilliTest #test13XPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 22:34:50'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 22:34:50'!
PASSED!

!testRun: #TerniLapilliTest #test15DoAWinnerMovementOverTheGame stamp: 'DS 10/31/2020 22:34:50'!
PASSED!

!testRun: #TerniLapilliTest #test16XPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 10/31/2020 22:34:50'!
PASSED!

!testRun: #TerniLapilliTest #test17OPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 10/31/2020 22:34:50'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerCanNotPutOutOfBoard stamp: 'DS 10/31/2020 22:34:50'!
PASSED!

!testRun: #TerniLapilliTest #test19 stamp: 'DS 10/31/2020 22:34:50'!
PASSED!

!testRun: #TerniLapilliTest #test20 stamp: 'DS 10/31/2020 22:34:50'!
PASSED!

!testRun: #TerniLapilliTest #test21 stamp: 'DS 10/31/2020 22:34:50'!
PASSED!

!testRun: #TerniLapilliTest #test22 stamp: 'DS 10/31/2020 22:34:50'!
PASSED!

!testRun: #TerniLapilliTest #test23 stamp: 'DS 10/31/2020 22:34:50'!
PASSED!

!testRun: #TerniLapilliTest #test24 stamp: 'DS 10/31/2020 22:34:50'!
PASSED!

!testRun: #TerniLapilliTest #test25 stamp: 'DS 10/31/2020 22:34:50'!
PASSED!

----SNAPSHOT----(31 October 2020 22:34:52) CuisUniversity-4384.image priorSource: 18169398!
!TerniLapilliTest methodsFor: 'movements' stamp: 'DS 10/31/2020 22:36:18'!
test26

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: 1@0.
	aTerniLapilli putOAt: 1@-1.

	self
		should: [ aTerniLapilli moveLeftDownXFrom: 1@0. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.	! !

!testRun: #TerniLapilliTest #test26 stamp: 'DS 10/31/2020 22:36:20'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 10/31/2020 22:36:20'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/31/2020 22:36:20'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/31/2020 22:36:20'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/31/2020 22:36:20'!
PASSED!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/31/2020 22:36:20'!
PASSED!

!testRun: #TerniLapilliTest #test06OPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 22:36:20'!
PASSED!

!testRun: #TerniLapilliTest #test07XPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 22:36:20'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerWonWithHorizontalPlay stamp: 'DS 10/31/2020 22:36:20'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerWonWithVerticalPlay stamp: 'DS 10/31/2020 22:36:20'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerWonWithInvertedDiagonalPlay stamp: 'DS 10/31/2020 22:36:20'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerWonWithDiagonalPlay stamp: 'DS 10/31/2020 22:36:20'!
PASSED!

!testRun: #TerniLapilliTest #test12GameIsOverWhenAPlayerWins stamp: 'DS 10/31/2020 22:36:20'!
PASSED!

!testRun: #TerniLapilliTest #test13XPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 22:36:20'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 22:36:20'!
PASSED!

!testRun: #TerniLapilliTest #test15DoAWinnerMovementOverTheGame stamp: 'DS 10/31/2020 22:36:20'!
PASSED!

!testRun: #TerniLapilliTest #test16XPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 10/31/2020 22:36:20'!
PASSED!

!testRun: #TerniLapilliTest #test17OPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 10/31/2020 22:36:20'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerCanNotPutOutOfBoard stamp: 'DS 10/31/2020 22:36:20'!
PASSED!

!testRun: #TerniLapilliTest #test19 stamp: 'DS 10/31/2020 22:36:20'!
PASSED!

!testRun: #TerniLapilliTest #test20 stamp: 'DS 10/31/2020 22:36:20'!
PASSED!

!testRun: #TerniLapilliTest #test21 stamp: 'DS 10/31/2020 22:36:20'!
PASSED!

!testRun: #TerniLapilliTest #test22 stamp: 'DS 10/31/2020 22:36:20'!
PASSED!

!testRun: #TerniLapilliTest #test23 stamp: 'DS 10/31/2020 22:36:20'!
PASSED!

!testRun: #TerniLapilliTest #test24 stamp: 'DS 10/31/2020 22:36:20'!
PASSED!

!testRun: #TerniLapilliTest #test25 stamp: 'DS 10/31/2020 22:36:20'!
PASSED!

!testRun: #TerniLapilliTest #test26 stamp: 'DS 10/31/2020 22:36:20'!
PASSED!
!TerniLapilliTest methodsFor: 'movements' stamp: 'DS 10/31/2020 22:36:50' prior: 50899926!
test26

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: 1@0.
	aTerniLapilli putOAt: 1@-1.

	self
		should: [ aTerniLapilli moveLeftDownXFrom: 1@0. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.	! !

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 10/31/2020 22:36:53'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/31/2020 22:36:53'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/31/2020 22:36:53'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/31/2020 22:36:53'!
PASSED!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/31/2020 22:36:53'!
PASSED!

!testRun: #TerniLapilliTest #test06OPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 22:36:53'!
PASSED!

!testRun: #TerniLapilliTest #test07XPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 22:36:53'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerWonWithHorizontalPlay stamp: 'DS 10/31/2020 22:36:53'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerWonWithVerticalPlay stamp: 'DS 10/31/2020 22:36:53'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerWonWithInvertedDiagonalPlay stamp: 'DS 10/31/2020 22:36:53'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerWonWithDiagonalPlay stamp: 'DS 10/31/2020 22:36:53'!
PASSED!

!testRun: #TerniLapilliTest #test12GameIsOverWhenAPlayerWins stamp: 'DS 10/31/2020 22:36:53'!
PASSED!

!testRun: #TerniLapilliTest #test13XPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 22:36:53'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 22:36:53'!
PASSED!

!testRun: #TerniLapilliTest #test15DoAWinnerMovementOverTheGame stamp: 'DS 10/31/2020 22:36:53'!
PASSED!

!testRun: #TerniLapilliTest #test16XPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 10/31/2020 22:36:53'!
PASSED!

!testRun: #TerniLapilliTest #test17OPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 10/31/2020 22:36:53'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerCanNotPutOutOfBoard stamp: 'DS 10/31/2020 22:36:53'!
PASSED!

!testRun: #TerniLapilliTest #test19 stamp: 'DS 10/31/2020 22:36:53'!
PASSED!

!testRun: #TerniLapilliTest #test20 stamp: 'DS 10/31/2020 22:36:53'!
PASSED!

!testRun: #TerniLapilliTest #test21 stamp: 'DS 10/31/2020 22:36:53'!
PASSED!

!testRun: #TerniLapilliTest #test22 stamp: 'DS 10/31/2020 22:36:53'!
PASSED!

!testRun: #TerniLapilliTest #test23 stamp: 'DS 10/31/2020 22:36:53'!
PASSED!

!testRun: #TerniLapilliTest #test24 stamp: 'DS 10/31/2020 22:36:53'!
PASSED!

!testRun: #TerniLapilliTest #test25 stamp: 'DS 10/31/2020 22:36:53'!
PASSED!

!testRun: #TerniLapilliTest #test26 stamp: 'DS 10/31/2020 22:36:53'!
ERROR!

!testRun: #TerniLapilliTest #test26 stamp: 'DS 10/31/2020 22:36:53'!
ERROR!
!TerniLapilli methodsFor: 'movements' stamp: 'DS 10/31/2020 22:37:42' prior: 50899802!
moveLeftDownXFrom: aPosition

	| direction |

	({0@1. 1@0} includes: aPosition) ifTrue: [ self error: self class ilegalMovementErrorDescription ].

	direction := -1@-1.

	self put: #X at: aPosition + direction.
	positionsOccupied remove: {#X. aPosition}.

	! !

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 10/31/2020 22:37:43'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/31/2020 22:37:43'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/31/2020 22:37:43'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/31/2020 22:37:43'!
PASSED!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/31/2020 22:37:43'!
PASSED!

!testRun: #TerniLapilliTest #test06OPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 22:37:43'!
PASSED!

!testRun: #TerniLapilliTest #test07XPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 22:37:43'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerWonWithHorizontalPlay stamp: 'DS 10/31/2020 22:37:43'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerWonWithVerticalPlay stamp: 'DS 10/31/2020 22:37:43'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerWonWithInvertedDiagonalPlay stamp: 'DS 10/31/2020 22:37:43'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerWonWithDiagonalPlay stamp: 'DS 10/31/2020 22:37:43'!
PASSED!

!testRun: #TerniLapilliTest #test12GameIsOverWhenAPlayerWins stamp: 'DS 10/31/2020 22:37:43'!
PASSED!

!testRun: #TerniLapilliTest #test13XPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 22:37:43'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 22:37:43'!
PASSED!

!testRun: #TerniLapilliTest #test15DoAWinnerMovementOverTheGame stamp: 'DS 10/31/2020 22:37:43'!
PASSED!

!testRun: #TerniLapilliTest #test16XPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 10/31/2020 22:37:43'!
PASSED!

!testRun: #TerniLapilliTest #test17OPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 10/31/2020 22:37:43'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerCanNotPutOutOfBoard stamp: 'DS 10/31/2020 22:37:43'!
PASSED!

!testRun: #TerniLapilliTest #test19 stamp: 'DS 10/31/2020 22:37:43'!
PASSED!

!testRun: #TerniLapilliTest #test20 stamp: 'DS 10/31/2020 22:37:43'!
PASSED!

!testRun: #TerniLapilliTest #test21 stamp: 'DS 10/31/2020 22:37:43'!
PASSED!

!testRun: #TerniLapilliTest #test22 stamp: 'DS 10/31/2020 22:37:43'!
PASSED!

!testRun: #TerniLapilliTest #test23 stamp: 'DS 10/31/2020 22:37:43'!
PASSED!

!testRun: #TerniLapilliTest #test24 stamp: 'DS 10/31/2020 22:37:43'!
PASSED!

!testRun: #TerniLapilliTest #test25 stamp: 'DS 10/31/2020 22:37:43'!
PASSED!

!testRun: #TerniLapilliTest #test26 stamp: 'DS 10/31/2020 22:37:43'!
ERROR!

!testRun: #TerniLapilliTest #test26 stamp: 'DS 10/31/2020 22:37:43'!
ERROR!

!testRun: #TerniLapilliTest #test26 stamp: 'DS 10/31/2020 22:38:12'!
ERROR!

!testRun: #TerniLapilliTest #test26 stamp: 'DS 10/31/2020 22:38:12'!
ERROR!

aPosition!
!TerniLapilliTest methodsFor: 'movements' stamp: 'DS 10/31/2020 22:39:18' prior: 50900024!
test26

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: 1@0.
	aTerniLapilli putOAt: 1@-1.

	self
		should: [ aTerniLapilli moveLeftDownXFrom: 1@0. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.	! !

!testRun: #TerniLapilliTest #test26 stamp: 'DS 10/31/2020 22:39:19'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 10/31/2020 22:39:19'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/31/2020 22:39:19'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/31/2020 22:39:19'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/31/2020 22:39:19'!
PASSED!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/31/2020 22:39:19'!
PASSED!

!testRun: #TerniLapilliTest #test06OPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 22:39:19'!
PASSED!

!testRun: #TerniLapilliTest #test07XPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 22:39:19'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerWonWithHorizontalPlay stamp: 'DS 10/31/2020 22:39:19'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerWonWithVerticalPlay stamp: 'DS 10/31/2020 22:39:19'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerWonWithInvertedDiagonalPlay stamp: 'DS 10/31/2020 22:39:19'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerWonWithDiagonalPlay stamp: 'DS 10/31/2020 22:39:19'!
PASSED!

!testRun: #TerniLapilliTest #test12GameIsOverWhenAPlayerWins stamp: 'DS 10/31/2020 22:39:19'!
PASSED!

!testRun: #TerniLapilliTest #test13XPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 22:39:19'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 22:39:19'!
PASSED!

!testRun: #TerniLapilliTest #test15DoAWinnerMovementOverTheGame stamp: 'DS 10/31/2020 22:39:19'!
PASSED!

!testRun: #TerniLapilliTest #test16XPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 10/31/2020 22:39:19'!
PASSED!

!testRun: #TerniLapilliTest #test17OPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 10/31/2020 22:39:19'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerCanNotPutOutOfBoard stamp: 'DS 10/31/2020 22:39:19'!
PASSED!

!testRun: #TerniLapilliTest #test19 stamp: 'DS 10/31/2020 22:39:19'!
PASSED!

!testRun: #TerniLapilliTest #test20 stamp: 'DS 10/31/2020 22:39:19'!
PASSED!

!testRun: #TerniLapilliTest #test21 stamp: 'DS 10/31/2020 22:39:19'!
PASSED!

!testRun: #TerniLapilliTest #test22 stamp: 'DS 10/31/2020 22:39:19'!
PASSED!

!testRun: #TerniLapilliTest #test23 stamp: 'DS 10/31/2020 22:39:19'!
PASSED!

!testRun: #TerniLapilliTest #test24 stamp: 'DS 10/31/2020 22:39:19'!
PASSED!

!testRun: #TerniLapilliTest #test25 stamp: 'DS 10/31/2020 22:39:19'!
PASSED!

!testRun: #TerniLapilliTest #test26 stamp: 'DS 10/31/2020 22:39:19'!
PASSED!

----SNAPSHOT----(31 October 2020 22:39:22) CuisUniversity-4384.image priorSource: 18184722!
!TerniLapilliTest methodsFor: 'movements' stamp: 'DS 10/31/2020 22:40:28'!
test27

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: -1@0.
	aTerniLapilli putOAt: 1@-1.

	self
		should: [ aTerniLapilli moveRightDownXFrom: -1@0. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.	! !

!testRun: #TerniLapilliTest #test27 stamp: 'DS 10/31/2020 22:40:29'!
FAILURE!
!TerniLapilli methodsFor: 'movements' stamp: 'DS 10/31/2020 22:40:55' prior: 50899813!
moveRightDownXFrom: aPosition

	| direction |

	({0@1. -1@0} includes: aPosition) ifTrue: [ self error: self class ilegalMovementErrorDescription ].

	direction := -1@-1.

	self put: #X at: aPosition + direction.
	positionsOccupied remove: {#X. aPosition}.

	! !

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 10/31/2020 22:40:57'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/31/2020 22:40:57'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/31/2020 22:40:57'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/31/2020 22:40:57'!
PASSED!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/31/2020 22:40:57'!
PASSED!

!testRun: #TerniLapilliTest #test06OPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 22:40:57'!
PASSED!

!testRun: #TerniLapilliTest #test07XPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 22:40:57'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerWonWithHorizontalPlay stamp: 'DS 10/31/2020 22:40:57'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerWonWithVerticalPlay stamp: 'DS 10/31/2020 22:40:57'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerWonWithInvertedDiagonalPlay stamp: 'DS 10/31/2020 22:40:57'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerWonWithDiagonalPlay stamp: 'DS 10/31/2020 22:40:57'!
PASSED!

!testRun: #TerniLapilliTest #test12GameIsOverWhenAPlayerWins stamp: 'DS 10/31/2020 22:40:57'!
PASSED!

!testRun: #TerniLapilliTest #test13XPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 22:40:57'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 22:40:57'!
PASSED!

!testRun: #TerniLapilliTest #test15DoAWinnerMovementOverTheGame stamp: 'DS 10/31/2020 22:40:57'!
PASSED!

!testRun: #TerniLapilliTest #test16XPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 10/31/2020 22:40:57'!
PASSED!

!testRun: #TerniLapilliTest #test17OPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 10/31/2020 22:40:57'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerCanNotPutOutOfBoard stamp: 'DS 10/31/2020 22:40:57'!
PASSED!

!testRun: #TerniLapilliTest #test19 stamp: 'DS 10/31/2020 22:40:57'!
PASSED!

!testRun: #TerniLapilliTest #test20 stamp: 'DS 10/31/2020 22:40:57'!
PASSED!

!testRun: #TerniLapilliTest #test21 stamp: 'DS 10/31/2020 22:40:57'!
PASSED!

!testRun: #TerniLapilliTest #test22 stamp: 'DS 10/31/2020 22:40:57'!
PASSED!

!testRun: #TerniLapilliTest #test23 stamp: 'DS 10/31/2020 22:40:57'!
PASSED!

!testRun: #TerniLapilliTest #test24 stamp: 'DS 10/31/2020 22:40:57'!
PASSED!

!testRun: #TerniLapilliTest #test25 stamp: 'DS 10/31/2020 22:40:57'!
PASSED!

!testRun: #TerniLapilliTest #test26 stamp: 'DS 10/31/2020 22:40:57'!
PASSED!

!testRun: #TerniLapilliTest #test27 stamp: 'DS 10/31/2020 22:40:57'!
PASSED!
!TerniLapilliTest methodsFor: 'movements' stamp: 'DS 10/31/2020 22:41:48'!
test28

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: -1@0.
	aTerniLapilli putOAt: 1@-1.

	self
		should: [ aTerniLapilli moveLeftUpXFrom: -1@0. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.	! !

!testRun: #TerniLapilliTest #test28 stamp: 'DS 10/31/2020 22:41:49'!
FAILURE!
!TerniLapilli methodsFor: 'movements' stamp: 'DS 10/31/2020 22:42:42' prior: 50899824!
moveRightUpXFrom: aPosition

	| direction |

	({0@-1. -1@0} includes: aPosition) ifTrue: [ self error: self class ilegalMovementErrorDescription ].

	direction := 1@1.

	self put: #X at: aPosition + direction.
	positionsOccupied remove: {#X. aPosition}.

	! !

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 10/31/2020 22:42:43'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/31/2020 22:42:43'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/31/2020 22:42:43'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/31/2020 22:42:43'!
PASSED!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/31/2020 22:42:43'!
PASSED!

!testRun: #TerniLapilliTest #test06OPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 22:42:43'!
PASSED!

!testRun: #TerniLapilliTest #test07XPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 22:42:43'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerWonWithHorizontalPlay stamp: 'DS 10/31/2020 22:42:43'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerWonWithVerticalPlay stamp: 'DS 10/31/2020 22:42:43'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerWonWithInvertedDiagonalPlay stamp: 'DS 10/31/2020 22:42:43'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerWonWithDiagonalPlay stamp: 'DS 10/31/2020 22:42:43'!
PASSED!

!testRun: #TerniLapilliTest #test12GameIsOverWhenAPlayerWins stamp: 'DS 10/31/2020 22:42:43'!
PASSED!

!testRun: #TerniLapilliTest #test13XPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 22:42:43'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 22:42:43'!
PASSED!

!testRun: #TerniLapilliTest #test15DoAWinnerMovementOverTheGame stamp: 'DS 10/31/2020 22:42:43'!
PASSED!

!testRun: #TerniLapilliTest #test16XPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 10/31/2020 22:42:43'!
PASSED!

!testRun: #TerniLapilliTest #test17OPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 10/31/2020 22:42:43'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerCanNotPutOutOfBoard stamp: 'DS 10/31/2020 22:42:43'!
PASSED!

!testRun: #TerniLapilliTest #test19 stamp: 'DS 10/31/2020 22:42:43'!
PASSED!

!testRun: #TerniLapilliTest #test20 stamp: 'DS 10/31/2020 22:42:43'!
PASSED!

!testRun: #TerniLapilliTest #test21 stamp: 'DS 10/31/2020 22:42:43'!
PASSED!

!testRun: #TerniLapilliTest #test22 stamp: 'DS 10/31/2020 22:42:43'!
PASSED!

!testRun: #TerniLapilliTest #test23 stamp: 'DS 10/31/2020 22:42:43'!
PASSED!

!testRun: #TerniLapilliTest #test24 stamp: 'DS 10/31/2020 22:42:43'!
PASSED!

!testRun: #TerniLapilliTest #test25 stamp: 'DS 10/31/2020 22:42:43'!
PASSED!

!testRun: #TerniLapilliTest #test26 stamp: 'DS 10/31/2020 22:42:43'!
PASSED!

!testRun: #TerniLapilliTest #test27 stamp: 'DS 10/31/2020 22:42:43'!
PASSED!

!testRun: #TerniLapilliTest #test28 stamp: 'DS 10/31/2020 22:42:43'!
FAILURE!

!testRun: #TerniLapilliTest #test28 stamp: 'DS 10/31/2020 22:42:43'!
FAILURE!
!TerniLapilliTest methodsFor: 'movements' stamp: 'DS 10/31/2020 22:43:57' prior: 50900433!
test28

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: -1@1.
	aTerniLapilli putOAt: 1@-1.

	self
		should: [ aTerniLapilli moveLeftUpXFrom: -1@0. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.	! !

!testRun: #TerniLapilliTest #test28 stamp: 'DS 10/31/2020 22:43:57'!
FAILURE!

!methodRemoval: TerniLapilliTest #test28 stamp: 'DS 10/31/2020 22:44:03'!
test28

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: -1@1.
	aTerniLapilli putOAt: 1@-1.

	self
		should: [ aTerniLapilli moveLeftUpXFrom: -1@0. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.	!

!testRun: #TerniLapilliTest #test19 stamp: 'DS 10/31/2020 22:44:54'!
PASSED!

!testRun: #TerniLapilliTest #test20 stamp: 'DS 10/31/2020 22:44:54'!
PASSED!

!testRun: #TerniLapilliTest #test21 stamp: 'DS 10/31/2020 22:44:54'!
PASSED!

!testRun: #TerniLapilliTest #test22 stamp: 'DS 10/31/2020 22:44:54'!
PASSED!

!testRun: #TerniLapilliTest #test23 stamp: 'DS 10/31/2020 22:44:54'!
PASSED!

!testRun: #TerniLapilliTest #test24 stamp: 'DS 10/31/2020 22:44:54'!
PASSED!

!testRun: #TerniLapilliTest #test25 stamp: 'DS 10/31/2020 22:44:54'!
PASSED!

!testRun: #TerniLapilliTest #test26 stamp: 'DS 10/31/2020 22:44:54'!
PASSED!

!testRun: #TerniLapilliTest #test27 stamp: 'DS 10/31/2020 22:44:54'!
PASSED!
!TerniLapilliTest methodsFor: 'movements' stamp: 'DS 10/31/2020 22:45:58'!
test28

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: 1@0.
	aTerniLapilli putOAt: 1@-1.

	self
		should: [ aTerniLapilli moveLeftUpXFrom: 1@0. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.	! !

!testRun: #TerniLapilliTest #test28 stamp: 'DS 10/31/2020 22:45:59'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 10/31/2020 22:45:59'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/31/2020 22:45:59'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/31/2020 22:45:59'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/31/2020 22:45:59'!
PASSED!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/31/2020 22:45:59'!
PASSED!

!testRun: #TerniLapilliTest #test06OPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 22:45:59'!
PASSED!

!testRun: #TerniLapilliTest #test07XPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 22:45:59'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerWonWithHorizontalPlay stamp: 'DS 10/31/2020 22:45:59'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerWonWithVerticalPlay stamp: 'DS 10/31/2020 22:45:59'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerWonWithInvertedDiagonalPlay stamp: 'DS 10/31/2020 22:45:59'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerWonWithDiagonalPlay stamp: 'DS 10/31/2020 22:45:59'!
PASSED!

!testRun: #TerniLapilliTest #test12GameIsOverWhenAPlayerWins stamp: 'DS 10/31/2020 22:45:59'!
PASSED!

!testRun: #TerniLapilliTest #test13XPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 22:45:59'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 22:45:59'!
PASSED!

!testRun: #TerniLapilliTest #test15DoAWinnerMovementOverTheGame stamp: 'DS 10/31/2020 22:45:59'!
PASSED!

!testRun: #TerniLapilliTest #test16XPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 10/31/2020 22:45:59'!
PASSED!

!testRun: #TerniLapilliTest #test17OPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 10/31/2020 22:45:59'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerCanNotPutOutOfBoard stamp: 'DS 10/31/2020 22:45:59'!
PASSED!

!testRun: #TerniLapilliTest #test19 stamp: 'DS 10/31/2020 22:45:59'!
PASSED!

!testRun: #TerniLapilliTest #test20 stamp: 'DS 10/31/2020 22:45:59'!
PASSED!

!testRun: #TerniLapilliTest #test21 stamp: 'DS 10/31/2020 22:45:59'!
PASSED!

!testRun: #TerniLapilliTest #test22 stamp: 'DS 10/31/2020 22:45:59'!
PASSED!

!testRun: #TerniLapilliTest #test23 stamp: 'DS 10/31/2020 22:45:59'!
PASSED!

!testRun: #TerniLapilliTest #test24 stamp: 'DS 10/31/2020 22:45:59'!
PASSED!

!testRun: #TerniLapilliTest #test25 stamp: 'DS 10/31/2020 22:45:59'!
PASSED!

!testRun: #TerniLapilliTest #test26 stamp: 'DS 10/31/2020 22:45:59'!
PASSED!

!testRun: #TerniLapilliTest #test27 stamp: 'DS 10/31/2020 22:45:59'!
PASSED!

!testRun: #TerniLapilliTest #test28 stamp: 'DS 10/31/2020 22:45:59'!
PASSED!

!methodRemoval: TerniLapilli #moveRightUpXFrom: stamp: 'DS 10/31/2020 22:47:35'!
moveRightUpXFrom: aPosition

	| direction |

	({0@-1. -1@0} includes: aPosition) ifTrue: [ self error: self class ilegalMovementErrorDescription ].

	direction := 1@1.

	self put: #X at: aPosition + direction.
	positionsOccupied remove: {#X. aPosition}.

	!
!TerniLapilliTest methodsFor: 'movements' stamp: 'DS 10/31/2020 22:48:10' prior: 50900603!
test28

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: -1@0.
	aTerniLapilli putOAt: 1@-1.

	self
		should: [ aTerniLapilli moveRightUpXFrom: -1@0. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.	! !

!testRun: #TerniLapilliTest #test28 stamp: 'DS 10/31/2020 22:48:12'!
FAILURE!
!TerniLapilli methodsFor: 'movements' stamp: 'DS 10/31/2020 22:48:37'!
moveRightUpXFrom: aPosition

	| direction |

	(0@-1 = aPosition) ifTrue: [ self error: self class ilegalMovementErrorDescription ].

	direction := -1@-1.

	self put: #X at: aPosition + direction.
	positionsOccupied remove: {#X. aPosition}.

	! !

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 10/31/2020 22:48:38'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/31/2020 22:48:38'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/31/2020 22:48:38'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/31/2020 22:48:38'!
PASSED!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/31/2020 22:48:38'!
PASSED!

!testRun: #TerniLapilliTest #test06OPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 22:48:38'!
PASSED!

!testRun: #TerniLapilliTest #test07XPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 22:48:38'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerWonWithHorizontalPlay stamp: 'DS 10/31/2020 22:48:38'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerWonWithVerticalPlay stamp: 'DS 10/31/2020 22:48:38'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerWonWithInvertedDiagonalPlay stamp: 'DS 10/31/2020 22:48:38'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerWonWithDiagonalPlay stamp: 'DS 10/31/2020 22:48:38'!
PASSED!

!testRun: #TerniLapilliTest #test12GameIsOverWhenAPlayerWins stamp: 'DS 10/31/2020 22:48:38'!
PASSED!

!testRun: #TerniLapilliTest #test13XPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 22:48:38'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 22:48:38'!
PASSED!

!testRun: #TerniLapilliTest #test15DoAWinnerMovementOverTheGame stamp: 'DS 10/31/2020 22:48:38'!
PASSED!

!testRun: #TerniLapilliTest #test16XPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 10/31/2020 22:48:38'!
PASSED!

!testRun: #TerniLapilliTest #test17OPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 10/31/2020 22:48:38'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerCanNotPutOutOfBoard stamp: 'DS 10/31/2020 22:48:38'!
PASSED!

!testRun: #TerniLapilliTest #test19 stamp: 'DS 10/31/2020 22:48:38'!
PASSED!

!testRun: #TerniLapilliTest #test20 stamp: 'DS 10/31/2020 22:48:38'!
PASSED!

!testRun: #TerniLapilliTest #test21 stamp: 'DS 10/31/2020 22:48:38'!
PASSED!

!testRun: #TerniLapilliTest #test22 stamp: 'DS 10/31/2020 22:48:38'!
PASSED!

!testRun: #TerniLapilliTest #test23 stamp: 'DS 10/31/2020 22:48:38'!
PASSED!

!testRun: #TerniLapilliTest #test24 stamp: 'DS 10/31/2020 22:48:38'!
PASSED!

!testRun: #TerniLapilliTest #test25 stamp: 'DS 10/31/2020 22:48:38'!
PASSED!

!testRun: #TerniLapilliTest #test26 stamp: 'DS 10/31/2020 22:48:38'!
PASSED!

!testRun: #TerniLapilliTest #test27 stamp: 'DS 10/31/2020 22:48:38'!
PASSED!

!testRun: #TerniLapilliTest #test28 stamp: 'DS 10/31/2020 22:48:38'!
FAILURE!

!testRun: #TerniLapilliTest #test28 stamp: 'DS 10/31/2020 22:48:38'!
FAILURE!
!TerniLapilli methodsFor: 'movements' stamp: 'DS 10/31/2020 22:49:06' prior: 50900733!
moveRightUpXFrom: aPosition

	| direction |

	(-1@0 = aPosition) ifTrue: [ self error: self class ilegalMovementErrorDescription ].

	direction := -1@-1.

	self put: #X at: aPosition + direction.
	positionsOccupied remove: {#X. aPosition}.

	! !

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 10/31/2020 22:49:07'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/31/2020 22:49:07'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/31/2020 22:49:07'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/31/2020 22:49:07'!
PASSED!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/31/2020 22:49:07'!
PASSED!

!testRun: #TerniLapilliTest #test06OPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 22:49:07'!
PASSED!

!testRun: #TerniLapilliTest #test07XPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 22:49:07'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerWonWithHorizontalPlay stamp: 'DS 10/31/2020 22:49:07'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerWonWithVerticalPlay stamp: 'DS 10/31/2020 22:49:07'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerWonWithInvertedDiagonalPlay stamp: 'DS 10/31/2020 22:49:07'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerWonWithDiagonalPlay stamp: 'DS 10/31/2020 22:49:07'!
PASSED!

!testRun: #TerniLapilliTest #test12GameIsOverWhenAPlayerWins stamp: 'DS 10/31/2020 22:49:07'!
PASSED!

!testRun: #TerniLapilliTest #test13XPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 22:49:07'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 22:49:07'!
PASSED!

!testRun: #TerniLapilliTest #test15DoAWinnerMovementOverTheGame stamp: 'DS 10/31/2020 22:49:07'!
PASSED!

!testRun: #TerniLapilliTest #test16XPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 10/31/2020 22:49:07'!
PASSED!

!testRun: #TerniLapilliTest #test17OPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 10/31/2020 22:49:07'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerCanNotPutOutOfBoard stamp: 'DS 10/31/2020 22:49:07'!
PASSED!

!testRun: #TerniLapilliTest #test19 stamp: 'DS 10/31/2020 22:49:07'!
PASSED!

!testRun: #TerniLapilliTest #test20 stamp: 'DS 10/31/2020 22:49:07'!
PASSED!

!testRun: #TerniLapilliTest #test21 stamp: 'DS 10/31/2020 22:49:07'!
PASSED!

!testRun: #TerniLapilliTest #test22 stamp: 'DS 10/31/2020 22:49:07'!
PASSED!

!testRun: #TerniLapilliTest #test23 stamp: 'DS 10/31/2020 22:49:07'!
PASSED!

!testRun: #TerniLapilliTest #test24 stamp: 'DS 10/31/2020 22:49:07'!
PASSED!

!testRun: #TerniLapilliTest #test25 stamp: 'DS 10/31/2020 22:49:07'!
PASSED!

!testRun: #TerniLapilliTest #test26 stamp: 'DS 10/31/2020 22:49:07'!
PASSED!

!testRun: #TerniLapilliTest #test27 stamp: 'DS 10/31/2020 22:49:07'!
PASSED!

!testRun: #TerniLapilliTest #test28 stamp: 'DS 10/31/2020 22:49:07'!
PASSED!
!TerniLapilliTest methodsFor: 'movements' stamp: 'DS 10/31/2020 22:49:28' prior: 50900716!
test28

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: -1@0.
	aTerniLapilli putOAt: 1@-1.

	self
		should: [ aTerniLapilli moveRightUpXFrom: 0@-1. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.	! !

!testRun: #TerniLapilliTest #test28 stamp: 'DS 10/31/2020 22:49:30'!
FAILURE!
!TerniLapilli methodsFor: 'movements' stamp: 'DS 10/31/2020 22:49:47' prior: 50900832!
moveRightUpXFrom: aPosition

	| direction |

	({-1@0. 0@-1} includes: aPosition) ifTrue: [ self error: self class ilegalMovementErrorDescription ].

	direction := -1@-1.

	self put: #X at: aPosition + direction.
	positionsOccupied remove: {#X. aPosition}.

	! !

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 10/31/2020 22:49:48'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/31/2020 22:49:48'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/31/2020 22:49:48'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/31/2020 22:49:48'!
PASSED!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/31/2020 22:49:48'!
PASSED!

!testRun: #TerniLapilliTest #test06OPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 22:49:48'!
PASSED!

!testRun: #TerniLapilliTest #test07XPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 22:49:48'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerWonWithHorizontalPlay stamp: 'DS 10/31/2020 22:49:48'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerWonWithVerticalPlay stamp: 'DS 10/31/2020 22:49:48'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerWonWithInvertedDiagonalPlay stamp: 'DS 10/31/2020 22:49:48'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerWonWithDiagonalPlay stamp: 'DS 10/31/2020 22:49:48'!
PASSED!

!testRun: #TerniLapilliTest #test12GameIsOverWhenAPlayerWins stamp: 'DS 10/31/2020 22:49:48'!
PASSED!

!testRun: #TerniLapilliTest #test13XPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 22:49:48'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 22:49:48'!
PASSED!

!testRun: #TerniLapilliTest #test15DoAWinnerMovementOverTheGame stamp: 'DS 10/31/2020 22:49:48'!
PASSED!

!testRun: #TerniLapilliTest #test16XPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 10/31/2020 22:49:48'!
PASSED!

!testRun: #TerniLapilliTest #test17OPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 10/31/2020 22:49:48'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerCanNotPutOutOfBoard stamp: 'DS 10/31/2020 22:49:48'!
PASSED!

!testRun: #TerniLapilliTest #test19 stamp: 'DS 10/31/2020 22:49:48'!
PASSED!

!testRun: #TerniLapilliTest #test20 stamp: 'DS 10/31/2020 22:49:48'!
PASSED!

!testRun: #TerniLapilliTest #test21 stamp: 'DS 10/31/2020 22:49:48'!
PASSED!

!testRun: #TerniLapilliTest #test22 stamp: 'DS 10/31/2020 22:49:48'!
PASSED!

!testRun: #TerniLapilliTest #test23 stamp: 'DS 10/31/2020 22:49:48'!
PASSED!

!testRun: #TerniLapilliTest #test24 stamp: 'DS 10/31/2020 22:49:48'!
PASSED!

!testRun: #TerniLapilliTest #test25 stamp: 'DS 10/31/2020 22:49:48'!
PASSED!

!testRun: #TerniLapilliTest #test26 stamp: 'DS 10/31/2020 22:49:48'!
PASSED!

!testRun: #TerniLapilliTest #test27 stamp: 'DS 10/31/2020 22:49:48'!
PASSED!

!testRun: #TerniLapilliTest #test28 stamp: 'DS 10/31/2020 22:49:48'!
PASSED!

----SNAPSHOT----(31 October 2020 22:49:51) CuisUniversity-4384.image priorSource: 18197366!
!TerniLapilliTest methodsFor: 'movements' stamp: 'DS 10/31/2020 22:53:45' prior: 50898370!
test19

	| aTerniLapilli |

	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: -1@1.
	aTerniLapilli putOAt: 1@-1.

	self
		should: [ aTerniLapilli moveUpXFrom: 0@-1. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.	! !
!TerniLapilliTest methodsFor: 'movements' stamp: 'DS 10/31/2020 22:55:31'!
test19XPlayerCanNotMoveUpToNotOwnPosition

	| aTerniLapilli |

	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: -1@1.
	aTerniLapilli putOAt: 1@-1.

	self
		should: [ aTerniLapilli moveUpXFrom: 0@-1. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.	! !

!methodRemoval: TerniLapilliTest #test19 stamp: 'DS 10/31/2020 22:55:35'!
test19

	| aTerniLapilli |

	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: -1@1.
	aTerniLapilli putOAt: 1@-1.

	self
		should: [ aTerniLapilli moveUpXFrom: 0@-1. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.	!
!TerniLapilliTest methodsFor: 'movements' stamp: 'DS 10/31/2020 22:55:50'!
test19XPlayerCanNotMoveUpToEmptyPosition

	| aTerniLapilli |

	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: -1@1.
	aTerniLapilli putOAt: 1@-1.

	self
		should: [ aTerniLapilli moveUpXFrom: 0@-1. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.	! !

!methodRemoval: TerniLapilliTest #test19XPlayerCanNotMoveUpToNotOwnPosition stamp: 'DS 10/31/2020 22:55:50'!
test19XPlayerCanNotMoveUpToNotOwnPosition

	| aTerniLapilli |

	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: -1@1.
	aTerniLapilli putOAt: 1@-1.

	self
		should: [ aTerniLapilli moveUpXFrom: 0@-1. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.	!
!TerniLapilliTest methodsFor: 'movements' stamp: 'DS 10/31/2020 22:56:09'!
test20XPlayerCanNotMoveRightToEmptyPosition

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: -1@1.
	aTerniLapilli putOAt: 1@-1.

	self
		should: [ aTerniLapilli moveRightXFrom: 0@1. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.	! !

!methodRemoval: TerniLapilliTest #test20 stamp: 'DS 10/31/2020 22:56:09'!
test20

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: -1@1.
	aTerniLapilli putOAt: 1@-1.

	self
		should: [ aTerniLapilli moveRightXFrom: 0@1. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.	!
!TerniLapilliTest methodsFor: 'movements' stamp: 'DS 10/31/2020 22:56:22'!
test21XPlayerCanNotMoveDownToEmptyPosition

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: -1@1.
	aTerniLapilli putOAt: 1@-1.

	self
		should: [ aTerniLapilli moveDownXFrom: 0@1. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.	! !

!methodRemoval: TerniLapilliTest #test21 stamp: 'DS 10/31/2020 22:56:22'!
test21

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: -1@1.
	aTerniLapilli putOAt: 1@-1.

	self
		should: [ aTerniLapilli moveDownXFrom: 0@1. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.	!
!TerniLapilliTest methodsFor: 'movements' stamp: 'DS 10/31/2020 22:56:33'!
test19XPlayerCanNotMoveUpToNotEmptyPosition

	| aTerniLapilli |

	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: -1@1.
	aTerniLapilli putOAt: 1@-1.

	self
		should: [ aTerniLapilli moveUpXFrom: 0@-1. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.	! !

!methodRemoval: TerniLapilliTest #test19XPlayerCanNotMoveUpToEmptyPosition stamp: 'DS 10/31/2020 22:56:33'!
test19XPlayerCanNotMoveUpToEmptyPosition

	| aTerniLapilli |

	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: -1@1.
	aTerniLapilli putOAt: 1@-1.

	self
		should: [ aTerniLapilli moveUpXFrom: 0@-1. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.	!
!TerniLapilliTest methodsFor: 'movements' stamp: 'DS 10/31/2020 22:56:40'!
test20XPlayerCanNotMoveRightToNotEmptyPosition

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: -1@1.
	aTerniLapilli putOAt: 1@-1.

	self
		should: [ aTerniLapilli moveRightXFrom: 0@1. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.	! !

!methodRemoval: TerniLapilliTest #test20XPlayerCanNotMoveRightToEmptyPosition stamp: 'DS 10/31/2020 22:56:40'!
test20XPlayerCanNotMoveRightToEmptyPosition

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: -1@1.
	aTerniLapilli putOAt: 1@-1.

	self
		should: [ aTerniLapilli moveRightXFrom: 0@1. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.	!
!TerniLapilliTest methodsFor: 'movements' stamp: 'DS 10/31/2020 22:56:47'!
test21XPlayerCanNotMoveDownToNotEmptyPosition

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: -1@1.
	aTerniLapilli putOAt: 1@-1.

	self
		should: [ aTerniLapilli moveDownXFrom: 0@1. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.	! !

!methodRemoval: TerniLapilliTest #test21XPlayerCanNotMoveDownToEmptyPosition stamp: 'DS 10/31/2020 22:56:47'!
test21XPlayerCanNotMoveDownToEmptyPosition

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: -1@1.
	aTerniLapilli putOAt: 1@-1.

	self
		should: [ aTerniLapilli moveDownXFrom: 0@1. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.	!
!TerniLapilliTest methodsFor: 'movements' stamp: 'DS 10/31/2020 22:57:08'!
test22XPlayerCanNotMoveLeftToNotEmptyPosition

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: -1@1.
	aTerniLapilli putOAt: 1@-1.

	self
		should: [ aTerniLapilli moveLeftXFrom: 0@1. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.	! !

!methodRemoval: TerniLapilliTest #test22 stamp: 'DS 10/31/2020 22:57:08'!
test22

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: -1@1.
	aTerniLapilli putOAt: 1@-1.

	self
		should: [ aTerniLapilli moveLeftXFrom: 0@1. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.	!
!TerniLapilliTest methodsFor: 'movements' stamp: 'DS 10/31/2020 23:00:56'!
test23XPlayerCanNotMoveLeftDownToNotEmptyPosition

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: -1@-1.
	
	aTerniLapilli putXAt: 1@1.
	aTerniLapilli putOAt: 1@-1.

	self
		should: [ aTerniLapilli moveLeftDownXFrom: 1@1. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.	! !

!testRun: #TerniLapilliTest #test23XPlayerCanNotMoveLeftDownToNotEmptyPosition stamp: 'DS 10/31/2020 23:00:58'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 10/31/2020 23:00:58'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/31/2020 23:00:58'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/31/2020 23:00:58'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/31/2020 23:00:58'!
PASSED!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/31/2020 23:00:58'!
PASSED!

!testRun: #TerniLapilliTest #test06OPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 23:00:58'!
PASSED!

!testRun: #TerniLapilliTest #test07XPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 23:00:58'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerWonWithHorizontalPlay stamp: 'DS 10/31/2020 23:00:58'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerWonWithVerticalPlay stamp: 'DS 10/31/2020 23:00:58'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerWonWithInvertedDiagonalPlay stamp: 'DS 10/31/2020 23:00:58'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerWonWithDiagonalPlay stamp: 'DS 10/31/2020 23:00:58'!
PASSED!

!testRun: #TerniLapilliTest #test12GameIsOverWhenAPlayerWins stamp: 'DS 10/31/2020 23:00:58'!
PASSED!

!testRun: #TerniLapilliTest #test13XPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 23:00:58'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 23:00:58'!
PASSED!

!testRun: #TerniLapilliTest #test15DoAWinnerMovementOverTheGame stamp: 'DS 10/31/2020 23:00:58'!
PASSED!

!testRun: #TerniLapilliTest #test16XPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 10/31/2020 23:00:58'!
PASSED!

!testRun: #TerniLapilliTest #test17OPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 10/31/2020 23:00:58'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerCanNotPutOutOfBoard stamp: 'DS 10/31/2020 23:00:58'!
PASSED!

!testRun: #TerniLapilliTest #test19XPlayerCanNotMoveUpToNotEmptyPosition stamp: 'DS 10/31/2020 23:00:58'!
PASSED!

!testRun: #TerniLapilliTest #test20XPlayerCanNotMoveRightToNotEmptyPosition stamp: 'DS 10/31/2020 23:00:58'!
PASSED!

!testRun: #TerniLapilliTest #test21XPlayerCanNotMoveDownToNotEmptyPosition stamp: 'DS 10/31/2020 23:00:58'!
PASSED!

!testRun: #TerniLapilliTest #test22XPlayerCanNotMoveLeftToNotEmptyPosition stamp: 'DS 10/31/2020 23:00:58'!
PASSED!

!testRun: #TerniLapilliTest #test23 stamp: 'DS 10/31/2020 23:00:58'!
PASSED!

!testRun: #TerniLapilliTest #test23XPlayerCanNotMoveLeftDownToNotEmptyPosition stamp: 'DS 10/31/2020 23:00:58'!
PASSED!

!testRun: #TerniLapilliTest #test24 stamp: 'DS 10/31/2020 23:00:58'!
PASSED!

!testRun: #TerniLapilliTest #test25 stamp: 'DS 10/31/2020 23:00:58'!
PASSED!

!testRun: #TerniLapilliTest #test26 stamp: 'DS 10/31/2020 23:00:58'!
PASSED!

!testRun: #TerniLapilliTest #test27 stamp: 'DS 10/31/2020 23:00:58'!
PASSED!

!testRun: #TerniLapilliTest #test28 stamp: 'DS 10/31/2020 23:00:58'!
PASSED!
!TerniLapilliTest methodsFor: 'movements' stamp: 'DS 10/31/2020 23:01:38'!
test24XPlayerCanNotMoveRightDownToNotEmptyPosition

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: -1@1.
	aTerniLapilli putOAt: 1@-1.

	self
		should: [ aTerniLapilli moveRightDownXFrom: -1@1. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.	! !

!testRun: #TerniLapilliTest #test24XPlayerCanNotMoveRightDownToNotEmptyPosition stamp: 'DS 10/31/2020 23:01:39'!
FAILURE!

!testRun: #TerniLapilliTest #test24XPlayerCanNotMoveRightDownToNotEmptyPosition stamp: 'DS 10/31/2020 23:02:02'!
FAILURE!

!methodRemoval: TerniLapilliTest #test24XPlayerCanNotMoveRightDownToNotEmptyPosition stamp: 'DS 10/31/2020 23:02:11'!
test24XPlayerCanNotMoveRightDownToNotEmptyPosition

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: -1@1.
	aTerniLapilli putOAt: 1@-1.

	self
		should: [ aTerniLapilli moveRightDownXFrom: -1@1. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.	!

!testRun: #TerniLapilliTest #test19XPlayerCanNotMoveUpToNotEmptyPosition stamp: 'DS 10/31/2020 23:02:13'!
PASSED!

!testRun: #TerniLapilliTest #test20XPlayerCanNotMoveRightToNotEmptyPosition stamp: 'DS 10/31/2020 23:02:13'!
PASSED!

!testRun: #TerniLapilliTest #test21XPlayerCanNotMoveDownToNotEmptyPosition stamp: 'DS 10/31/2020 23:02:13'!
PASSED!

!testRun: #TerniLapilliTest #test22XPlayerCanNotMoveLeftToNotEmptyPosition stamp: 'DS 10/31/2020 23:02:13'!
PASSED!

!testRun: #TerniLapilliTest #test23 stamp: 'DS 10/31/2020 23:02:13'!
PASSED!

!testRun: #TerniLapilliTest #test23XPlayerCanNotMoveLeftDownToNotEmptyPosition stamp: 'DS 10/31/2020 23:02:13'!
PASSED!

!testRun: #TerniLapilliTest #test24 stamp: 'DS 10/31/2020 23:02:13'!
PASSED!

!testRun: #TerniLapilliTest #test25 stamp: 'DS 10/31/2020 23:02:13'!
PASSED!

!testRun: #TerniLapilliTest #test26 stamp: 'DS 10/31/2020 23:02:13'!
PASSED!

!testRun: #TerniLapilliTest #test27 stamp: 'DS 10/31/2020 23:02:13'!
PASSED!

!testRun: #TerniLapilliTest #test28 stamp: 'DS 10/31/2020 23:02:13'!
PASSED!
!TerniLapilliTest methodsFor: 'movements' stamp: 'DS 10/31/2020 23:02:29'!
test24XPlayerCanNotMoveRightDownToNotEmptyPosition

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: -1@1.
	aTerniLapilli putOAt: 1@-1.

	self
		should: [ aTerniLapilli moveRightDownXFrom: -1@1. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.	! !

!testRun: #TerniLapilliTest #test24XPlayerCanNotMoveRightDownToNotEmptyPosition stamp: 'DS 10/31/2020 23:02:31'!
FAILURE!
!TerniLapilli methodsFor: 'movements' stamp: 'DS 10/31/2020 23:02:47' prior: 50900339!
moveRightDownXFrom: aPosition

	| direction |

	({0@1. -1@0} includes: aPosition) ifTrue: [ self error: self class ilegalMovementErrorDescription ].

	direction := 1@1.

	self put: #X at: aPosition + direction.
	positionsOccupied remove: {#X. aPosition}.

	! !

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 10/31/2020 23:02:48'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/31/2020 23:02:48'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/31/2020 23:02:48'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/31/2020 23:02:48'!
PASSED!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/31/2020 23:02:48'!
PASSED!

!testRun: #TerniLapilliTest #test06OPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 23:02:48'!
PASSED!

!testRun: #TerniLapilliTest #test07XPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 23:02:48'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerWonWithHorizontalPlay stamp: 'DS 10/31/2020 23:02:48'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerWonWithVerticalPlay stamp: 'DS 10/31/2020 23:02:48'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerWonWithInvertedDiagonalPlay stamp: 'DS 10/31/2020 23:02:48'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerWonWithDiagonalPlay stamp: 'DS 10/31/2020 23:02:48'!
PASSED!

!testRun: #TerniLapilliTest #test12GameIsOverWhenAPlayerWins stamp: 'DS 10/31/2020 23:02:48'!
PASSED!

!testRun: #TerniLapilliTest #test13XPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 23:02:48'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 23:02:48'!
PASSED!

!testRun: #TerniLapilliTest #test15DoAWinnerMovementOverTheGame stamp: 'DS 10/31/2020 23:02:48'!
PASSED!

!testRun: #TerniLapilliTest #test16XPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 10/31/2020 23:02:48'!
PASSED!

!testRun: #TerniLapilliTest #test17OPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 10/31/2020 23:02:48'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerCanNotPutOutOfBoard stamp: 'DS 10/31/2020 23:02:48'!
PASSED!

!testRun: #TerniLapilliTest #test19XPlayerCanNotMoveUpToNotEmptyPosition stamp: 'DS 10/31/2020 23:02:48'!
PASSED!

!testRun: #TerniLapilliTest #test20XPlayerCanNotMoveRightToNotEmptyPosition stamp: 'DS 10/31/2020 23:02:48'!
PASSED!

!testRun: #TerniLapilliTest #test21XPlayerCanNotMoveDownToNotEmptyPosition stamp: 'DS 10/31/2020 23:02:48'!
PASSED!

!testRun: #TerniLapilliTest #test22XPlayerCanNotMoveLeftToNotEmptyPosition stamp: 'DS 10/31/2020 23:02:48'!
PASSED!

!testRun: #TerniLapilliTest #test23 stamp: 'DS 10/31/2020 23:02:48'!
PASSED!

!testRun: #TerniLapilliTest #test23XPlayerCanNotMoveLeftDownToNotEmptyPosition stamp: 'DS 10/31/2020 23:02:48'!
PASSED!

!testRun: #TerniLapilliTest #test24 stamp: 'DS 10/31/2020 23:02:48'!
PASSED!

!testRun: #TerniLapilliTest #test24XPlayerCanNotMoveRightDownToNotEmptyPosition stamp: 'DS 10/31/2020 23:02:48'!
FAILURE!

!testRun: #TerniLapilliTest #test25 stamp: 'DS 10/31/2020 23:02:48'!
PASSED!

!testRun: #TerniLapilliTest #test26 stamp: 'DS 10/31/2020 23:02:48'!
PASSED!

!testRun: #TerniLapilliTest #test27 stamp: 'DS 10/31/2020 23:02:48'!
PASSED!

!testRun: #TerniLapilliTest #test28 stamp: 'DS 10/31/2020 23:02:48'!
PASSED!

!testRun: #TerniLapilliTest #test24XPlayerCanNotMoveRightDownToNotEmptyPosition stamp: 'DS 10/31/2020 23:02:48'!
FAILURE!

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 10/31/2020 23:02:53'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/31/2020 23:02:53'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/31/2020 23:02:53'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/31/2020 23:02:53'!
PASSED!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/31/2020 23:02:53'!
PASSED!

!testRun: #TerniLapilliTest #test06OPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 23:02:53'!
PASSED!

!testRun: #TerniLapilliTest #test07XPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 23:02:53'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerWonWithHorizontalPlay stamp: 'DS 10/31/2020 23:02:53'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerWonWithVerticalPlay stamp: 'DS 10/31/2020 23:02:53'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerWonWithInvertedDiagonalPlay stamp: 'DS 10/31/2020 23:02:53'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerWonWithDiagonalPlay stamp: 'DS 10/31/2020 23:02:53'!
PASSED!

!testRun: #TerniLapilliTest #test12GameIsOverWhenAPlayerWins stamp: 'DS 10/31/2020 23:02:53'!
PASSED!

!testRun: #TerniLapilliTest #test13XPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 23:02:53'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 23:02:53'!
PASSED!

!testRun: #TerniLapilliTest #test15DoAWinnerMovementOverTheGame stamp: 'DS 10/31/2020 23:02:53'!
PASSED!

!testRun: #TerniLapilliTest #test16XPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 10/31/2020 23:02:53'!
PASSED!

!testRun: #TerniLapilliTest #test17OPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 10/31/2020 23:02:53'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerCanNotPutOutOfBoard stamp: 'DS 10/31/2020 23:02:53'!
PASSED!

!testRun: #TerniLapilliTest #test19XPlayerCanNotMoveUpToNotEmptyPosition stamp: 'DS 10/31/2020 23:02:53'!
PASSED!

!testRun: #TerniLapilliTest #test20XPlayerCanNotMoveRightToNotEmptyPosition stamp: 'DS 10/31/2020 23:02:53'!
PASSED!

!testRun: #TerniLapilliTest #test21XPlayerCanNotMoveDownToNotEmptyPosition stamp: 'DS 10/31/2020 23:02:53'!
PASSED!

!testRun: #TerniLapilliTest #test22XPlayerCanNotMoveLeftToNotEmptyPosition stamp: 'DS 10/31/2020 23:02:53'!
PASSED!

!testRun: #TerniLapilliTest #test23 stamp: 'DS 10/31/2020 23:02:53'!
PASSED!

!testRun: #TerniLapilliTest #test23XPlayerCanNotMoveLeftDownToNotEmptyPosition stamp: 'DS 10/31/2020 23:02:53'!
PASSED!

!testRun: #TerniLapilliTest #test24 stamp: 'DS 10/31/2020 23:02:53'!
PASSED!

!testRun: #TerniLapilliTest #test24XPlayerCanNotMoveRightDownToNotEmptyPosition stamp: 'DS 10/31/2020 23:02:53'!
FAILURE!

!testRun: #TerniLapilliTest #test25 stamp: 'DS 10/31/2020 23:02:53'!
PASSED!

!testRun: #TerniLapilliTest #test26 stamp: 'DS 10/31/2020 23:02:53'!
PASSED!

!testRun: #TerniLapilliTest #test27 stamp: 'DS 10/31/2020 23:02:53'!
PASSED!

!testRun: #TerniLapilliTest #test28 stamp: 'DS 10/31/2020 23:02:53'!
PASSED!

!testRun: #TerniLapilliTest #test24XPlayerCanNotMoveRightDownToNotEmptyPosition stamp: 'DS 10/31/2020 23:02:53'!
FAILURE!
!TerniLapilli methodsFor: 'movements' stamp: 'DS 10/31/2020 23:03:26' prior: 50901517!
moveRightDownXFrom: aPosition

	| direction |

	({0@1. -1@0} includes: aPosition) ifTrue: [ self error: self class ilegalMovementErrorDescription ].

	direction := 1@-1.

	self put: #X at: aPosition + direction.
	positionsOccupied remove: {#X. aPosition}.

	! !

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 10/31/2020 23:03:27'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/31/2020 23:03:27'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/31/2020 23:03:27'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/31/2020 23:03:27'!
PASSED!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/31/2020 23:03:27'!
PASSED!

!testRun: #TerniLapilliTest #test06OPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 23:03:27'!
PASSED!

!testRun: #TerniLapilliTest #test07XPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 23:03:27'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerWonWithHorizontalPlay stamp: 'DS 10/31/2020 23:03:27'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerWonWithVerticalPlay stamp: 'DS 10/31/2020 23:03:27'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerWonWithInvertedDiagonalPlay stamp: 'DS 10/31/2020 23:03:27'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerWonWithDiagonalPlay stamp: 'DS 10/31/2020 23:03:27'!
PASSED!

!testRun: #TerniLapilliTest #test12GameIsOverWhenAPlayerWins stamp: 'DS 10/31/2020 23:03:27'!
PASSED!

!testRun: #TerniLapilliTest #test13XPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 23:03:27'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 23:03:27'!
PASSED!

!testRun: #TerniLapilliTest #test15DoAWinnerMovementOverTheGame stamp: 'DS 10/31/2020 23:03:27'!
PASSED!

!testRun: #TerniLapilliTest #test16XPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 10/31/2020 23:03:27'!
PASSED!

!testRun: #TerniLapilliTest #test17OPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 10/31/2020 23:03:27'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerCanNotPutOutOfBoard stamp: 'DS 10/31/2020 23:03:27'!
PASSED!

!testRun: #TerniLapilliTest #test19XPlayerCanNotMoveUpToNotEmptyPosition stamp: 'DS 10/31/2020 23:03:27'!
PASSED!

!testRun: #TerniLapilliTest #test20XPlayerCanNotMoveRightToNotEmptyPosition stamp: 'DS 10/31/2020 23:03:27'!
PASSED!

!testRun: #TerniLapilliTest #test21XPlayerCanNotMoveDownToNotEmptyPosition stamp: 'DS 10/31/2020 23:03:27'!
PASSED!

!testRun: #TerniLapilliTest #test22XPlayerCanNotMoveLeftToNotEmptyPosition stamp: 'DS 10/31/2020 23:03:27'!
PASSED!

!testRun: #TerniLapilliTest #test23 stamp: 'DS 10/31/2020 23:03:27'!
PASSED!

!testRun: #TerniLapilliTest #test23XPlayerCanNotMoveLeftDownToNotEmptyPosition stamp: 'DS 10/31/2020 23:03:27'!
PASSED!

!testRun: #TerniLapilliTest #test24 stamp: 'DS 10/31/2020 23:03:27'!
PASSED!

!testRun: #TerniLapilliTest #test24XPlayerCanNotMoveRightDownToNotEmptyPosition stamp: 'DS 10/31/2020 23:03:27'!
PASSED!

!testRun: #TerniLapilliTest #test25 stamp: 'DS 10/31/2020 23:03:27'!
PASSED!

!testRun: #TerniLapilliTest #test26 stamp: 'DS 10/31/2020 23:03:27'!
PASSED!

!testRun: #TerniLapilliTest #test27 stamp: 'DS 10/31/2020 23:03:27'!
PASSED!

!testRun: #TerniLapilliTest #test28 stamp: 'DS 10/31/2020 23:03:27'!
PASSED!
!TerniLapilliTest methodsFor: 'movements' stamp: 'DS 10/31/2020 23:04:12'!
test25XPlayerCanNotMoveLeftUpToNotEmptyPosition

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: 1@-1.
	aTerniLapilli putOAt: -1@1.

	self
		should: [ aTerniLapilli moveLeftUpXFrom: 1@-1. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.	! !

!testRun: #TerniLapilliTest #test25XPlayerCanNotMoveLeftUpToNotEmptyPosition stamp: 'DS 10/31/2020 23:04:13'!
ERROR!
!TerniLapilliTest methodsFor: 'movements' stamp: 'DS 10/31/2020 23:04:31' prior: 50901840!
test25XPlayerCanNotMoveLeftUpToNotEmptyPosition

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: 1@-1.
	aTerniLapilli putOAt: -1@0.

	self
		should: [ aTerniLapilli moveLeftUpXFrom: 1@-1. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.	! !

!testRun: #TerniLapilliTest #test25XPlayerCanNotMoveLeftUpToNotEmptyPosition stamp: 'DS 10/31/2020 23:04:33'!
ERROR!

!testRun: #TerniLapilliTest #test25XPlayerCanNotMoveLeftUpToNotEmptyPosition stamp: 'DS 10/31/2020 23:06:40'!
ERROR!

aPosition!

aPosition!

!testRun: #TerniLapilliTest #test25XPlayerCanNotMoveLeftUpToNotEmptyPosition stamp: 'DS 10/31/2020 23:08:05'!
ERROR!

!testRun: #TerniLapilliTest #test25XPlayerCanNotMoveLeftUpToNotEmptyPosition stamp: 'DS 10/31/2020 23:08:14'!
ERROR!

!testRun: #TerniLapilliTest #test25XPlayerCanNotMoveLeftUpToNotEmptyPosition stamp: 'DS 10/31/2020 23:08:49'!
ERROR!

self hasPlayerXWon!

positionsOccupiedByXPlayer!

i := 1.
	isHorizontalWinner := false.
	[i < (positionsOccupiedByXPlayer size - 1) ]	 whileTrue: [
		isHorizontalWinner := ((positionsOccupiedByXPlayer at: i)	 + (1@	0)) = (positionsOccupiedByXPlayer at: i+1)	.
		i := i+1.
	].!

isHorizontalWinner!
!TerniLapilli methodsFor: 'testing' stamp: 'DS 10/31/2020 23:13:16' prior: 50896187!
hasPlayerOWon

	| positionsOccupiedByOPlayer i isHorizontalWinner isVerticalWinner isInvertedDiagonalWinner isDiagonalWinner |

	positionsOccupiedByOPlayer := ( ( positionsOccupied select: [ :aOccupiedPosition | aOccupiedPosition first = #O ] ) 
							  	collect: [ :aOccupiedPositionByOPlayer | aOccupiedPositionByOPlayer second] ) sort.
	
	i := 1.
	isHorizontalWinner := false.
	[i < (positionsOccupiedByOPlayer size - 1) ]	 whileTrue: [
		isHorizontalWinner := [isHorizontalWinner] and: [((positionsOccupiedByOPlayer at: i)	 + (1@	0)) = (positionsOccupiedByOPlayer at: i+1)	].
		i := i+1.
	].

	i := 1.
	isVerticalWinner := false.
	[i < (positionsOccupiedByOPlayer size - 1) ]	 whileTrue: [
		isVerticalWinner := [isVerticalWinner] and: [((positionsOccupiedByOPlayer  at: i)	 + (0@	1)) = (positionsOccupiedByOPlayer  at: i+1)	].
		i := i+1.
	].

	isInvertedDiagonalWinner := positionsOccupiedByOPlayer includesAllOf: {-1@1. 0@0. 1@-1}.
	isDiagonalWinner := positionsOccupiedByOPlayer includesAllOf: {-1@-1. 0@0. 1@1}.

	^isHorizontalWinner or: isVerticalWinner or: isInvertedDiagonalWinner or: isDiagonalWinner.! !

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 10/31/2020 23:13:19'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/31/2020 23:13:19'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/31/2020 23:13:19'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/31/2020 23:13:19'!
PASSED!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/31/2020 23:13:19'!
PASSED!

!testRun: #TerniLapilliTest #test06OPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 23:13:19'!
PASSED!

!testRun: #TerniLapilliTest #test07XPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 23:13:19'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerWonWithHorizontalPlay stamp: 'DS 10/31/2020 23:13:19'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerWonWithVerticalPlay stamp: 'DS 10/31/2020 23:13:19'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerWonWithInvertedDiagonalPlay stamp: 'DS 10/31/2020 23:13:19'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerWonWithDiagonalPlay stamp: 'DS 10/31/2020 23:13:19'!
PASSED!

!testRun: #TerniLapilliTest #test12GameIsOverWhenAPlayerWins stamp: 'DS 10/31/2020 23:13:19'!
FAILURE!

!testRun: #TerniLapilliTest #test13XPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 23:13:19'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 23:13:19'!
ERROR!

!testRun: #TerniLapilliTest #test15DoAWinnerMovementOverTheGame stamp: 'DS 10/31/2020 23:13:19'!
ERROR!

!testRun: #TerniLapilliTest #test16XPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 10/31/2020 23:13:19'!
PASSED!

!testRun: #TerniLapilliTest #test17OPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 10/31/2020 23:13:19'!
ERROR!

!testRun: #TerniLapilliTest #test18PlayerCanNotPutOutOfBoard stamp: 'DS 10/31/2020 23:13:19'!
PASSED!

!testRun: #TerniLapilliTest #test19XPlayerCanNotMoveUpToNotEmptyPosition stamp: 'DS 10/31/2020 23:13:19'!
FAILURE!

!testRun: #TerniLapilliTest #test20XPlayerCanNotMoveRightToNotEmptyPosition stamp: 'DS 10/31/2020 23:13:19'!
FAILURE!

!testRun: #TerniLapilliTest #test21XPlayerCanNotMoveDownToNotEmptyPosition stamp: 'DS 10/31/2020 23:13:19'!
FAILURE!

!testRun: #TerniLapilliTest #test22XPlayerCanNotMoveLeftToNotEmptyPosition stamp: 'DS 10/31/2020 23:13:19'!
FAILURE!

!testRun: #TerniLapilliTest #test23 stamp: 'DS 10/31/2020 23:13:19'!
PASSED!

!testRun: #TerniLapilliTest #test23XPlayerCanNotMoveLeftDownToNotEmptyPosition stamp: 'DS 10/31/2020 23:13:19'!
FAILURE!

!testRun: #TerniLapilliTest #test24 stamp: 'DS 10/31/2020 23:13:19'!
PASSED!

!testRun: #TerniLapilliTest #test24XPlayerCanNotMoveRightDownToNotEmptyPosition stamp: 'DS 10/31/2020 23:13:19'!
FAILURE!

!testRun: #TerniLapilliTest #test25 stamp: 'DS 10/31/2020 23:13:19'!
PASSED!

!testRun: #TerniLapilliTest #test25XPlayerCanNotMoveLeftUpToNotEmptyPosition stamp: 'DS 10/31/2020 23:13:19'!
ERROR!

!testRun: #TerniLapilliTest #test26 stamp: 'DS 10/31/2020 23:13:19'!
PASSED!

!testRun: #TerniLapilliTest #test27 stamp: 'DS 10/31/2020 23:13:19'!
PASSED!

!testRun: #TerniLapilliTest #test28 stamp: 'DS 10/31/2020 23:13:19'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 10/31/2020 23:13:27'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/31/2020 23:13:27'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/31/2020 23:13:27'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/31/2020 23:13:27'!
PASSED!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/31/2020 23:13:27'!
PASSED!

!testRun: #TerniLapilliTest #test06OPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 23:13:27'!
PASSED!

!testRun: #TerniLapilliTest #test07XPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 23:13:27'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerWonWithHorizontalPlay stamp: 'DS 10/31/2020 23:13:27'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerWonWithVerticalPlay stamp: 'DS 10/31/2020 23:13:27'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerWonWithInvertedDiagonalPlay stamp: 'DS 10/31/2020 23:13:27'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerWonWithDiagonalPlay stamp: 'DS 10/31/2020 23:13:27'!
PASSED!

!testRun: #TerniLapilliTest #test12GameIsOverWhenAPlayerWins stamp: 'DS 10/31/2020 23:13:27'!
FAILURE!

!testRun: #TerniLapilliTest #test13XPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 23:13:27'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 23:13:27'!
ERROR!

!testRun: #TerniLapilliTest #test15DoAWinnerMovementOverTheGame stamp: 'DS 10/31/2020 23:13:27'!
ERROR!

!testRun: #TerniLapilliTest #test16XPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 10/31/2020 23:13:27'!
PASSED!

!testRun: #TerniLapilliTest #test17OPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 10/31/2020 23:13:27'!
ERROR!

!testRun: #TerniLapilliTest #test18PlayerCanNotPutOutOfBoard stamp: 'DS 10/31/2020 23:13:27'!
PASSED!

!testRun: #TerniLapilliTest #test19XPlayerCanNotMoveUpToNotEmptyPosition stamp: 'DS 10/31/2020 23:13:27'!
FAILURE!

!testRun: #TerniLapilliTest #test20XPlayerCanNotMoveRightToNotEmptyPosition stamp: 'DS 10/31/2020 23:13:27'!
FAILURE!

!testRun: #TerniLapilliTest #test21XPlayerCanNotMoveDownToNotEmptyPosition stamp: 'DS 10/31/2020 23:13:27'!
FAILURE!

!testRun: #TerniLapilliTest #test22XPlayerCanNotMoveLeftToNotEmptyPosition stamp: 'DS 10/31/2020 23:13:27'!
FAILURE!

!testRun: #TerniLapilliTest #test23 stamp: 'DS 10/31/2020 23:13:27'!
PASSED!

!testRun: #TerniLapilliTest #test23XPlayerCanNotMoveLeftDownToNotEmptyPosition stamp: 'DS 10/31/2020 23:13:27'!
FAILURE!

!testRun: #TerniLapilliTest #test24 stamp: 'DS 10/31/2020 23:13:27'!
PASSED!

!testRun: #TerniLapilliTest #test24XPlayerCanNotMoveRightDownToNotEmptyPosition stamp: 'DS 10/31/2020 23:13:27'!
FAILURE!

!testRun: #TerniLapilliTest #test25 stamp: 'DS 10/31/2020 23:13:27'!
PASSED!

!testRun: #TerniLapilliTest #test25XPlayerCanNotMoveLeftUpToNotEmptyPosition stamp: 'DS 10/31/2020 23:13:27'!
ERROR!

!testRun: #TerniLapilliTest #test26 stamp: 'DS 10/31/2020 23:13:27'!
PASSED!

!testRun: #TerniLapilliTest #test27 stamp: 'DS 10/31/2020 23:13:27'!
PASSED!

!testRun: #TerniLapilliTest #test28 stamp: 'DS 10/31/2020 23:13:27'!
PASSED!
!TerniLapilli methodsFor: 'testing' stamp: 'DS 10/29/2020 21:20:47' prior: 50901905!
hasPlayerOWon

	| positionsOccupiedByOPlayer i isHorizontalWinner isVerticalWinner isInvertedDiagonalWinner isDiagonalWinner |

	positionsOccupiedByOPlayer := ( ( positionsOccupied select: [ :aOccupiedPosition | aOccupiedPosition first = #O ] ) 
							  	collect: [ :aOccupiedPositionByOPlayer | aOccupiedPositionByOPlayer second] ) sort.
	
	i := 1.
	isHorizontalWinner := false.
	[i < (positionsOccupiedByOPlayer size - 1) ]	 whileTrue: [
		isHorizontalWinner := ((positionsOccupiedByOPlayer at: i)	 + (1@	0)) = (positionsOccupiedByOPlayer at: i+1)	.
		i := i+1.
	].

	i := 1.
	isVerticalWinner := false.
	[i < (positionsOccupiedByOPlayer size - 1) ]	 whileTrue: [
		isVerticalWinner := ((positionsOccupiedByOPlayer  at: i)	 + (0@	1)) = (positionsOccupiedByOPlayer  at: i+1)	.
		i := i+1.
	].

	isInvertedDiagonalWinner := positionsOccupiedByOPlayer includesAllOf: {-1@1. 0@0. 1@-1}.
	isDiagonalWinner := positionsOccupiedByOPlayer includesAllOf: {-1@-1. 0@0. 1@1}.

	^isHorizontalWinner or: isVerticalWinner or: isInvertedDiagonalWinner or: isDiagonalWinner.! !
!TerniLapilli methodsFor: 'testing' stamp: 'DS 10/31/2020 23:14:54' prior: 50895658!
hasPlayerXWon

	| positionsOccupiedByXPlayer i isHorizontalWinner isVerticalWinner isInvertedDiagonalWinner isDiagonalWinner |

	positionsOccupiedByXPlayer := ( ( positionsOccupied select: [ :aOccupiedPosition | aOccupiedPosition first = #X ] ) 
							  	collect: [ :aOccupiedPositionByX | aOccupiedPositionByX second] ) sort.
	
	i := 1.
	isHorizontalWinner := true.
	[i < (positionsOccupiedByXPlayer size - 1) ]	 whileTrue: [
		isHorizontalWinner := ((positionsOccupiedByXPlayer at: i)	 + (1@	0)) = (positionsOccupiedByXPlayer at: i+1)	.
		i := i+1.
	].

	i := 1.
	isVerticalWinner := true.
	[i < (positionsOccupiedByXPlayer size - 1) ]	 whileTrue: [
		isVerticalWinner := ((positionsOccupiedByXPlayer  at: i)	 + (0@	1)) = (positionsOccupiedByXPlayer  at: i+1)	.
		i := i+1.
	].

	isInvertedDiagonalWinner := positionsOccupiedByXPlayer includesAllOf: {-1@1. 0@0. 1@-1}.
	isDiagonalWinner := positionsOccupiedByXPlayer includesAllOf: {-1@-1. 0@0. 1@1}.

	^isHorizontalWinner or: isVerticalWinner or: isInvertedDiagonalWinner or: isDiagonalWinner.! !

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 10/31/2020 23:14:56'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/31/2020 23:14:56'!
ERROR!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/31/2020 23:14:56'!
ERROR!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/31/2020 23:14:56'!
ERROR!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/31/2020 23:14:56'!
FAILURE!

!testRun: #TerniLapilliTest #test06OPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 23:14:56'!
ERROR!

!testRun: #TerniLapilliTest #test07XPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 23:14:56'!
ERROR!

!testRun: #TerniLapilliTest #test08PlayerWonWithHorizontalPlay stamp: 'DS 10/31/2020 23:14:56'!
ERROR!

!testRun: #TerniLapilliTest #test09PlayerWonWithVerticalPlay stamp: 'DS 10/31/2020 23:14:56'!
ERROR!

!testRun: #TerniLapilliTest #test10PlayerWonWithInvertedDiagonalPlay stamp: 'DS 10/31/2020 23:14:56'!
ERROR!

!testRun: #TerniLapilliTest #test11PlayerWonWithDiagonalPlay stamp: 'DS 10/31/2020 23:14:56'!
ERROR!

!testRun: #TerniLapilliTest #test12GameIsOverWhenAPlayerWins stamp: 'DS 10/31/2020 23:14:56'!
ERROR!

!testRun: #TerniLapilliTest #test13XPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 23:14:56'!
ERROR!

!testRun: #TerniLapilliTest #test14OPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 23:14:56'!
ERROR!

!testRun: #TerniLapilliTest #test15DoAWinnerMovementOverTheGame stamp: 'DS 10/31/2020 23:14:56'!
ERROR!

!testRun: #TerniLapilliTest #test16XPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 10/31/2020 23:14:56'!
ERROR!

!testRun: #TerniLapilliTest #test17OPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 10/31/2020 23:14:56'!
ERROR!

!testRun: #TerniLapilliTest #test18PlayerCanNotPutOutOfBoard stamp: 'DS 10/31/2020 23:14:56'!
PASSED!

!testRun: #TerniLapilliTest #test19XPlayerCanNotMoveUpToNotEmptyPosition stamp: 'DS 10/31/2020 23:14:56'!
ERROR!

!testRun: #TerniLapilliTest #test20XPlayerCanNotMoveRightToNotEmptyPosition stamp: 'DS 10/31/2020 23:14:56'!
ERROR!

!testRun: #TerniLapilliTest #test21XPlayerCanNotMoveDownToNotEmptyPosition stamp: 'DS 10/31/2020 23:14:56'!
ERROR!

!testRun: #TerniLapilliTest #test22XPlayerCanNotMoveLeftToNotEmptyPosition stamp: 'DS 10/31/2020 23:14:56'!
ERROR!

!testRun: #TerniLapilliTest #test23 stamp: 'DS 10/31/2020 23:14:56'!
ERROR!

!testRun: #TerniLapilliTest #test23XPlayerCanNotMoveLeftDownToNotEmptyPosition stamp: 'DS 10/31/2020 23:14:56'!
ERROR!

!testRun: #TerniLapilliTest #test24 stamp: 'DS 10/31/2020 23:14:56'!
ERROR!

!testRun: #TerniLapilliTest #test24XPlayerCanNotMoveRightDownToNotEmptyPosition stamp: 'DS 10/31/2020 23:14:56'!
ERROR!

!testRun: #TerniLapilliTest #test25 stamp: 'DS 10/31/2020 23:14:56'!
ERROR!

!testRun: #TerniLapilliTest #test25XPlayerCanNotMoveLeftUpToNotEmptyPosition stamp: 'DS 10/31/2020 23:14:56'!
ERROR!

!testRun: #TerniLapilliTest #test26 stamp: 'DS 10/31/2020 23:14:56'!
ERROR!

!testRun: #TerniLapilliTest #test27 stamp: 'DS 10/31/2020 23:14:56'!
ERROR!

!testRun: #TerniLapilliTest #test28 stamp: 'DS 10/31/2020 23:14:56'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'DS 10/31/2020 23:15:10' prior: 50902182!
hasPlayerXWon

	| positionsOccupiedByXPlayer i isHorizontalWinner isVerticalWinner isInvertedDiagonalWinner isDiagonalWinner |

	positionsOccupiedByXPlayer := ( ( positionsOccupied select: [ :aOccupiedPosition | aOccupiedPosition first = #X ] ) 
							  	collect: [ :aOccupiedPositionByX | aOccupiedPositionByX second] ) sort.
	
	i := 1.
	isHorizontalWinner := false.
	[i < (positionsOccupiedByXPlayer size - 1) ]	 whileTrue: [
		isHorizontalWinner := ((positionsOccupiedByXPlayer at: i)	 + (1@	0)) = (positionsOccupiedByXPlayer at: i+1)	.
		i := i+1.
	].

	i := 1.
	isVerticalWinner := false.
	[i < (positionsOccupiedByXPlayer size - 1) ]	 whileTrue: [
		isVerticalWinner := ((positionsOccupiedByXPlayer  at: i)	 + (0@	1)) = (positionsOccupiedByXPlayer  at: i+1)	.
		i := i+1.
	].

	isInvertedDiagonalWinner := positionsOccupiedByXPlayer includesAllOf: {-1@1. 0@0. 1@-1}.
	isDiagonalWinner := positionsOccupiedByXPlayer includesAllOf: {-1@-1. 0@0. 1@1}.

	^isHorizontalWinner or: isVerticalWinner or: isInvertedDiagonalWinner or: isDiagonalWinner.! !

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 10/31/2020 23:15:11'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/31/2020 23:15:11'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/31/2020 23:15:11'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/31/2020 23:15:11'!
PASSED!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/31/2020 23:15:11'!
PASSED!

!testRun: #TerniLapilliTest #test06OPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 23:15:11'!
PASSED!

!testRun: #TerniLapilliTest #test07XPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 23:15:11'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerWonWithHorizontalPlay stamp: 'DS 10/31/2020 23:15:11'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerWonWithVerticalPlay stamp: 'DS 10/31/2020 23:15:11'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerWonWithInvertedDiagonalPlay stamp: 'DS 10/31/2020 23:15:11'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerWonWithDiagonalPlay stamp: 'DS 10/31/2020 23:15:11'!
PASSED!

!testRun: #TerniLapilliTest #test12GameIsOverWhenAPlayerWins stamp: 'DS 10/31/2020 23:15:11'!
PASSED!

!testRun: #TerniLapilliTest #test13XPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 23:15:11'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 23:15:11'!
PASSED!

!testRun: #TerniLapilliTest #test15DoAWinnerMovementOverTheGame stamp: 'DS 10/31/2020 23:15:11'!
PASSED!

!testRun: #TerniLapilliTest #test16XPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 10/31/2020 23:15:11'!
PASSED!

!testRun: #TerniLapilliTest #test17OPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 10/31/2020 23:15:11'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerCanNotPutOutOfBoard stamp: 'DS 10/31/2020 23:15:11'!
PASSED!

!testRun: #TerniLapilliTest #test19XPlayerCanNotMoveUpToNotEmptyPosition stamp: 'DS 10/31/2020 23:15:11'!
PASSED!

!testRun: #TerniLapilliTest #test20XPlayerCanNotMoveRightToNotEmptyPosition stamp: 'DS 10/31/2020 23:15:11'!
PASSED!

!testRun: #TerniLapilliTest #test21XPlayerCanNotMoveDownToNotEmptyPosition stamp: 'DS 10/31/2020 23:15:11'!
PASSED!

!testRun: #TerniLapilliTest #test22XPlayerCanNotMoveLeftToNotEmptyPosition stamp: 'DS 10/31/2020 23:15:11'!
PASSED!

!testRun: #TerniLapilliTest #test23 stamp: 'DS 10/31/2020 23:15:11'!
PASSED!

!testRun: #TerniLapilliTest #test23XPlayerCanNotMoveLeftDownToNotEmptyPosition stamp: 'DS 10/31/2020 23:15:11'!
PASSED!

!testRun: #TerniLapilliTest #test24 stamp: 'DS 10/31/2020 23:15:11'!
PASSED!

!testRun: #TerniLapilliTest #test24XPlayerCanNotMoveRightDownToNotEmptyPosition stamp: 'DS 10/31/2020 23:15:11'!
PASSED!

!testRun: #TerniLapilliTest #test25 stamp: 'DS 10/31/2020 23:15:11'!
PASSED!

!testRun: #TerniLapilliTest #test25XPlayerCanNotMoveLeftUpToNotEmptyPosition stamp: 'DS 10/31/2020 23:15:11'!
ERROR!

!testRun: #TerniLapilliTest #test26 stamp: 'DS 10/31/2020 23:15:11'!
PASSED!

!testRun: #TerniLapilliTest #test27 stamp: 'DS 10/31/2020 23:15:11'!
PASSED!

!testRun: #TerniLapilliTest #test28 stamp: 'DS 10/31/2020 23:15:11'!
PASSED!

!testRun: #TerniLapilliTest #test25XPlayerCanNotMoveLeftUpToNotEmptyPosition stamp: 'DS 10/31/2020 23:15:11'!
ERROR!
!TerniLapilliTest methodsFor: 'movements' stamp: 'DS 10/31/2020 23:17:57'!
test29

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: -1@0.
	aTerniLapilli putOAt: 1@-1.

	self
		should: [ aTerniLapilli moveRightUpXFrom: 0@-1. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.	! !
!TerniLapilliTest methodsFor: 'movements' stamp: 'DS 10/31/2020 22:48:10' prior: 50900928!
test28

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: -1@0.
	aTerniLapilli putOAt: 1@-1.

	self
		should: [ aTerniLapilli moveRightUpXFrom: -1@0. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.	! !

!testRun: #TerniLapilliTest #test28 stamp: 'DS 10/31/2020 23:18:07'!
PASSED!

!testRun: #TerniLapilliTest #test29 stamp: 'DS 10/31/2020 23:18:09'!
PASSED!
!TerniLapilliTest methodsFor: 'movements' stamp: 'DS 10/31/2020 23:19:35'!
test26XPlayerCanNotMoveRightUpToNotEmptyPosition

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: -1@0.
	aTerniLapilli putOAt: 1@0.

	self
		should: [ aTerniLapilli moveRightUpXFrom: 0@-1. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.	! !

!testRun: #TerniLapilliTest #test26XPlayerCanNotMoveRightUpToNotEmptyPosition stamp: 'DS 10/31/2020 23:19:38'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 10/31/2020 23:19:38'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/31/2020 23:19:38'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/31/2020 23:19:38'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/31/2020 23:19:38'!
PASSED!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/31/2020 23:19:38'!
PASSED!

!testRun: #TerniLapilliTest #test06OPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 23:19:38'!
PASSED!

!testRun: #TerniLapilliTest #test07XPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 23:19:38'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerWonWithHorizontalPlay stamp: 'DS 10/31/2020 23:19:38'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerWonWithVerticalPlay stamp: 'DS 10/31/2020 23:19:38'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerWonWithInvertedDiagonalPlay stamp: 'DS 10/31/2020 23:19:38'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerWonWithDiagonalPlay stamp: 'DS 10/31/2020 23:19:38'!
PASSED!

!testRun: #TerniLapilliTest #test12GameIsOverWhenAPlayerWins stamp: 'DS 10/31/2020 23:19:38'!
PASSED!

!testRun: #TerniLapilliTest #test13XPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 23:19:38'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 23:19:38'!
PASSED!

!testRun: #TerniLapilliTest #test15DoAWinnerMovementOverTheGame stamp: 'DS 10/31/2020 23:19:38'!
PASSED!

!testRun: #TerniLapilliTest #test16XPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 10/31/2020 23:19:38'!
PASSED!

!testRun: #TerniLapilliTest #test17OPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 10/31/2020 23:19:38'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerCanNotPutOutOfBoard stamp: 'DS 10/31/2020 23:19:38'!
PASSED!

!testRun: #TerniLapilliTest #test19XPlayerCanNotMoveUpToNotEmptyPosition stamp: 'DS 10/31/2020 23:19:38'!
PASSED!

!testRun: #TerniLapilliTest #test20XPlayerCanNotMoveRightToNotEmptyPosition stamp: 'DS 10/31/2020 23:19:38'!
PASSED!

!testRun: #TerniLapilliTest #test21XPlayerCanNotMoveDownToNotEmptyPosition stamp: 'DS 10/31/2020 23:19:38'!
PASSED!

!testRun: #TerniLapilliTest #test22XPlayerCanNotMoveLeftToNotEmptyPosition stamp: 'DS 10/31/2020 23:19:38'!
PASSED!

!testRun: #TerniLapilliTest #test23 stamp: 'DS 10/31/2020 23:19:38'!
PASSED!

!testRun: #TerniLapilliTest #test23XPlayerCanNotMoveLeftDownToNotEmptyPosition stamp: 'DS 10/31/2020 23:19:38'!
PASSED!

!testRun: #TerniLapilliTest #test24 stamp: 'DS 10/31/2020 23:19:38'!
PASSED!

!testRun: #TerniLapilliTest #test24XPlayerCanNotMoveRightDownToNotEmptyPosition stamp: 'DS 10/31/2020 23:19:38'!
PASSED!

!testRun: #TerniLapilliTest #test25 stamp: 'DS 10/31/2020 23:19:38'!
PASSED!

!testRun: #TerniLapilliTest #test25XPlayerCanNotMoveLeftUpToNotEmptyPosition stamp: 'DS 10/31/2020 23:19:38'!
ERROR!

!testRun: #TerniLapilliTest #test26 stamp: 'DS 10/31/2020 23:19:38'!
PASSED!

!testRun: #TerniLapilliTest #test26XPlayerCanNotMoveRightUpToNotEmptyPosition stamp: 'DS 10/31/2020 23:19:38'!
PASSED!

!testRun: #TerniLapilliTest #test27 stamp: 'DS 10/31/2020 23:19:38'!
PASSED!

!testRun: #TerniLapilliTest #test28 stamp: 'DS 10/31/2020 23:19:38'!
PASSED!

!testRun: #TerniLapilliTest #test29 stamp: 'DS 10/31/2020 23:19:38'!
PASSED!

!testRun: #TerniLapilliTest #test25XPlayerCanNotMoveLeftUpToNotEmptyPosition stamp: 'DS 10/31/2020 23:19:38'!
ERROR!

!testRun: #TerniLapilliTest #test26XPlayerCanNotMoveRightUpToNotEmptyPosition stamp: 'DS 10/31/2020 23:19:42'!
PASSED!
!TerniLapilliTest methodsFor: 'movements' stamp: 'DS 10/31/2020 23:21:12'!
test27XPlayerCanNotMoveLeftDownToNotPoint0at1

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: -1@1.
	aTerniLapilli putOAt: 1@-1.

	self
		should: [ aTerniLapilli moveLeftDownXFrom: 0@1. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.	! !

!testRun: #TerniLapilliTest #test27XPlayerCanNotMoveLeftDownToNotPoint0at1 stamp: 'DS 10/31/2020 23:21:15'!
PASSED!
!TerniLapilliTest methodsFor: 'movements' stamp: 'DS 10/31/2020 23:21:41'!
test28XPlayerCanNotMoveLeftDownToNotPoint1at0

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: 1@0.
	aTerniLapilli putOAt: 1@-1.

	self
		should: [ aTerniLapilli moveLeftDownXFrom: 1@0. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.	! !

!testRun: #TerniLapilliTest #test28XPlayerCanNotMoveLeftDownToNotPoint1at0 stamp: 'DS 10/31/2020 23:21:42'!
PASSED!
!TerniLapilliTest methodsFor: 'movements' stamp: 'DS 10/31/2020 23:22:55'!
test27XPlayerCanNotMoveLeftDownToCenterUpPosition

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: -1@1.
	aTerniLapilli putOAt: 1@-1.

	self
		should: [ aTerniLapilli moveLeftDownXFrom: 0@1. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.	! !

!methodRemoval: TerniLapilliTest #test27XPlayerCanNotMoveLeftDownToNotPoint0at1 stamp: 'DS 10/31/2020 23:22:57'!
test27XPlayerCanNotMoveLeftDownToNotPoint0at1

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: -1@1.
	aTerniLapilli putOAt: 1@-1.

	self
		should: [ aTerniLapilli moveLeftDownXFrom: 0@1. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.	!
!TerniLapilliTest methodsFor: 'movements' stamp: 'DS 10/31/2020 23:23:32'!
test27XPlayerCanNotMoveLeftDownFromCenterUpPosition

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: -1@1.
	aTerniLapilli putOAt: 1@-1.

	self
		should: [ aTerniLapilli moveLeftDownXFrom: 0@1. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.	! !

!methodRemoval: TerniLapilliTest #test27XPlayerCanNotMoveLeftDownToCenterUpPosition stamp: 'DS 10/31/2020 23:23:34'!
test27XPlayerCanNotMoveLeftDownToCenterUpPosition

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: -1@1.
	aTerniLapilli putOAt: 1@-1.

	self
		should: [ aTerniLapilli moveLeftDownXFrom: 0@1. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.	!
!TerniLapilliTest methodsFor: 'movements' stamp: 'DS 10/31/2020 23:24:35'!
test28XPlayerCanNotMoveLeftDownFromRightCenterPosition

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: 1@0.
	aTerniLapilli putOAt: 1@-1.

	self
		should: [ aTerniLapilli moveLeftDownXFrom: 1@0. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.	! !

!methodRemoval: TerniLapilliTest #test28XPlayerCanNotMoveLeftDownToNotPoint1at0 stamp: 'DS 10/31/2020 23:24:35'!
test28XPlayerCanNotMoveLeftDownToNotPoint1at0

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: 1@0.
	aTerniLapilli putOAt: 1@-1.

	self
		should: [ aTerniLapilli moveLeftDownXFrom: 1@0. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.	!

!methodRemoval: TerniLapilliTest #test23 stamp: 'DS 10/31/2020 23:24:52'!
test23

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: -1@1.
	aTerniLapilli putOAt: 1@-1.

	self
		should: [ aTerniLapilli moveLeftDownXFrom: 0@1. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.	!

!methodRemoval: TerniLapilliTest #test26 stamp: 'DS 10/31/2020 23:25:20'!
test26

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: 1@0.
	aTerniLapilli putOAt: 1@-1.

	self
		should: [ aTerniLapilli moveLeftDownXFrom: 1@0. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.	!

!testRun: #TerniLapilliTest #test24 stamp: 'DS 10/31/2020 23:25:31'!
PASSED!
!TerniLapilliTest methodsFor: 'movements' stamp: 'DS 10/31/2020 23:26:16'!
test29XPlayerCanNotMoveRIghtDownFromCenterUpPosition

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: -1@1.
	aTerniLapilli putOAt: 1@-1.

	self
		should: [ aTerniLapilli moveRightDownXFrom: 0@1. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.	! !

!methodRemoval: TerniLapilliTest #test24 stamp: 'DS 10/31/2020 23:26:18'!
test24

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: -1@1.
	aTerniLapilli putOAt: 1@-1.

	self
		should: [ aTerniLapilli moveRightDownXFrom: 0@1. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.	!
!TerniLapilliTest methodsFor: 'movements' stamp: 'DS 10/31/2020 23:28:03'!
test30XPlayerCanNotMoveRightDownFromLeftCenterPosition

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: -1@0.
	aTerniLapilli putOAt: 1@-1.

	self
		should: [ aTerniLapilli moveRightDownXFrom: -1@0. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.	! !

!methodRemoval: TerniLapilliTest #test27 stamp: 'DS 10/31/2020 23:28:36'!
test27

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: -1@0.
	aTerniLapilli putOAt: 1@-1.

	self
		should: [ aTerniLapilli moveRightDownXFrom: -1@0. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.	!
!TerniLapilliTest methodsFor: 'movements' stamp: 'DS 10/31/2020 23:32:47'!
test31XPlayerCanNotMoveLeftUpFromCenterDownPosition

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: -1@1.
	aTerniLapilli putOAt: 1@-1.

	self
		should: [ aTerniLapilli moveLeftUpXFrom: 0@-1. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.	! !
!TerniLapilliTest methodsFor: 'movements' stamp: 'DS 10/31/2020 23:33:11'!
test32XPlayerCanNotMoveLeftUpFromRightCenterPosition

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: -1@1.
	aTerniLapilli putOAt: 1@-1.

	self
		should: [ aTerniLapilli moveLeftUpXFrom: 1@0. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.	! !

!testRun: #TerniLapilliTest #test31XPlayerCanNotMoveLeftUpFromCenterDownPosition stamp: 'DS 10/31/2020 23:33:14'!
PASSED!

!testRun: #TerniLapilliTest #test32XPlayerCanNotMoveLeftUpFromRightCenterPosition stamp: 'DS 10/31/2020 23:33:15'!
PASSED!

!methodRemoval: TerniLapilliTest #test25 stamp: 'DS 10/31/2020 23:33:25'!
test25

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: -1@1.
	aTerniLapilli putOAt: 1@-1.

	self
		should: [ aTerniLapilli moveLeftUpXFrom: 0@-1. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.	!
!TerniLapilliTest methodsFor: 'movements' stamp: 'DS 10/31/2020 23:34:26'!
test33XPlayerCanNotMoveRightUpFromLeftCenterPosition

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: -1@0.
	aTerniLapilli putOAt: 1@-1.

	self
		should: [ aTerniLapilli moveRightUpXFrom: -1@0. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.	! !

!methodRemoval: TerniLapilliTest #test28 stamp: 'DS 10/31/2020 23:34:28'!
test28

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: -1@0.
	aTerniLapilli putOAt: 1@-1.

	self
		should: [ aTerniLapilli moveRightUpXFrom: -1@0. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.	!
!TerniLapilliTest methodsFor: 'movements' stamp: 'DS 10/31/2020 23:34:47'!
test34XPlayerCanNotMoveLeftDownFromDownCenterPosition

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: -1@0.
	aTerniLapilli putOAt: 1@-1.

	self
		should: [ aTerniLapilli moveRightUpXFrom: 0@-1. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.	! !

!methodRemoval: TerniLapilliTest #test29 stamp: 'DS 10/31/2020 23:34:48'!
test29

	| aTerniLapilli |
	
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: -1@0.
	aTerniLapilli putOAt: 1@-1.

	self
		should: [ aTerniLapilli moveRightUpXFrom: 0@-1. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.	!

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 10/31/2020 23:36:26'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/31/2020 23:36:26'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/31/2020 23:36:26'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/31/2020 23:36:26'!
PASSED!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/31/2020 23:36:26'!
PASSED!

!testRun: #TerniLapilliTest #test06OPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 23:36:26'!
PASSED!

!testRun: #TerniLapilliTest #test07XPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 23:36:26'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerWonWithHorizontalPlay stamp: 'DS 10/31/2020 23:36:26'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerWonWithVerticalPlay stamp: 'DS 10/31/2020 23:36:26'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerWonWithInvertedDiagonalPlay stamp: 'DS 10/31/2020 23:36:26'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerWonWithDiagonalPlay stamp: 'DS 10/31/2020 23:36:26'!
PASSED!

!testRun: #TerniLapilliTest #test12GameIsOverWhenAPlayerWins stamp: 'DS 10/31/2020 23:36:26'!
PASSED!

!testRun: #TerniLapilliTest #test13XPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 23:36:26'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 23:36:26'!
PASSED!

!testRun: #TerniLapilliTest #test15DoAWinnerMovementOverTheGame stamp: 'DS 10/31/2020 23:36:26'!
PASSED!

!testRun: #TerniLapilliTest #test16XPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 10/31/2020 23:36:26'!
PASSED!

!testRun: #TerniLapilliTest #test17OPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 10/31/2020 23:36:26'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerCanNotPutOutOfBoard stamp: 'DS 10/31/2020 23:36:26'!
PASSED!

!testRun: #TerniLapilliTest #test19XPlayerCanNotMoveUpToNotEmptyPosition stamp: 'DS 10/31/2020 23:36:26'!
PASSED!

!testRun: #TerniLapilliTest #test20XPlayerCanNotMoveRightToNotEmptyPosition stamp: 'DS 10/31/2020 23:36:26'!
PASSED!

!testRun: #TerniLapilliTest #test21XPlayerCanNotMoveDownToNotEmptyPosition stamp: 'DS 10/31/2020 23:36:26'!
PASSED!

!testRun: #TerniLapilliTest #test22XPlayerCanNotMoveLeftToNotEmptyPosition stamp: 'DS 10/31/2020 23:36:26'!
PASSED!

!testRun: #TerniLapilliTest #test23XPlayerCanNotMoveLeftDownToNotEmptyPosition stamp: 'DS 10/31/2020 23:36:26'!
PASSED!

!testRun: #TerniLapilliTest #test24XPlayerCanNotMoveRightDownToNotEmptyPosition stamp: 'DS 10/31/2020 23:36:26'!
PASSED!

!testRun: #TerniLapilliTest #test25XPlayerCanNotMoveLeftUpToNotEmptyPosition stamp: 'DS 10/31/2020 23:36:26'!
ERROR!

!testRun: #TerniLapilliTest #test26XPlayerCanNotMoveRightUpToNotEmptyPosition stamp: 'DS 10/31/2020 23:36:26'!
PASSED!

!testRun: #TerniLapilliTest #test27XPlayerCanNotMoveLeftDownFromCenterUpPosition stamp: 'DS 10/31/2020 23:36:26'!
PASSED!

!testRun: #TerniLapilliTest #test28XPlayerCanNotMoveLeftDownFromRightCenterPosition stamp: 'DS 10/31/2020 23:36:26'!
PASSED!

!testRun: #TerniLapilliTest #test29XPlayerCanNotMoveRIghtDownFromCenterUpPosition stamp: 'DS 10/31/2020 23:36:26'!
PASSED!

!testRun: #TerniLapilliTest #test30XPlayerCanNotMoveRightDownFromLeftCenterPosition stamp: 'DS 10/31/2020 23:36:26'!
PASSED!

!testRun: #TerniLapilliTest #test31XPlayerCanNotMoveLeftUpFromCenterDownPosition stamp: 'DS 10/31/2020 23:36:26'!
PASSED!

!testRun: #TerniLapilliTest #test32XPlayerCanNotMoveLeftUpFromRightCenterPosition stamp: 'DS 10/31/2020 23:36:26'!
PASSED!

!testRun: #TerniLapilliTest #test33XPlayerCanNotMoveRightUpFromLeftCenterPosition stamp: 'DS 10/31/2020 23:36:26'!
PASSED!

!testRun: #TerniLapilliTest #test34XPlayerCanNotMoveLeftDownFromDownCenterPosition stamp: 'DS 10/31/2020 23:36:26'!
PASSED!

!testRun: #TerniLapilliTest #test25XPlayerCanNotMoveLeftUpToNotEmptyPosition stamp: 'DS 10/31/2020 23:36:26'!
ERROR!

----SNAPSHOT----(31 October 2020 23:36:30) CuisUniversity-4384.image priorSource: 18220525!
!TerniLapilli methodsFor: 'testing' stamp: 'DS 10/31/2020 23:50:00' prior: 50902319!
hasPlayerXWon

	| positionsOccupiedByXPlayer i isHorizontalWinner isVerticalWinner isInvertedDiagonalWinner isDiagonalWinner |

	positionsOccupiedByXPlayer := ( ( positionsOccupied select: [ :aOccupiedPosition | aOccupiedPosition first = #X ] ) 
							  	collect: [ :aOccupiedPositionByX | aOccupiedPositionByX second] ) sort.
	
	i := 1.
	isHorizontalWinner := true.
	[i < (positionsOccupiedByXPlayer size - 1) ]	 whileTrue: [
		isHorizontalWinner := ((positionsOccupiedByXPlayer at: i)	 + (1@	0)) = (positionsOccupiedByXPlayer at: i+1)	.
		i := i+1.
	].

	i := 1.
	isVerticalWinner := true.
	[i < (positionsOccupiedByXPlayer size - 1) ]	 whileTrue: [
		isVerticalWinner := ((positionsOccupiedByXPlayer  at: i)	 + (0@	1)) = (positionsOccupiedByXPlayer  at: i+1)	.
		i := i+1.
	].

	isInvertedDiagonalWinner := positionsOccupiedByXPlayer includesAllOf: {-1@1. 0@0. 1@-1}.
	isDiagonalWinner := positionsOccupiedByXPlayer includesAllOf: {-1@-1. 0@0. 1@1}.

	^isHorizontalWinner or: isVerticalWinner or: isInvertedDiagonalWinner or: isDiagonalWinner.! !

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 10/31/2020 23:50:01'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/31/2020 23:50:01'!
ERROR!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/31/2020 23:50:01'!
ERROR!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/31/2020 23:50:01'!
ERROR!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/31/2020 23:50:01'!
FAILURE!

!testRun: #TerniLapilliTest #test06OPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 23:50:01'!
ERROR!

!testRun: #TerniLapilliTest #test07XPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 23:50:01'!
ERROR!

!testRun: #TerniLapilliTest #test08PlayerWonWithHorizontalPlay stamp: 'DS 10/31/2020 23:50:01'!
ERROR!

!testRun: #TerniLapilliTest #test09PlayerWonWithVerticalPlay stamp: 'DS 10/31/2020 23:50:01'!
ERROR!

!testRun: #TerniLapilliTest #test10PlayerWonWithInvertedDiagonalPlay stamp: 'DS 10/31/2020 23:50:01'!
ERROR!

!testRun: #TerniLapilliTest #test11PlayerWonWithDiagonalPlay stamp: 'DS 10/31/2020 23:50:01'!
ERROR!

!testRun: #TerniLapilliTest #test12GameIsOverWhenAPlayerWins stamp: 'DS 10/31/2020 23:50:01'!
ERROR!

!testRun: #TerniLapilliTest #test13XPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 23:50:01'!
ERROR!

!testRun: #TerniLapilliTest #test14OPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 23:50:01'!
ERROR!

!testRun: #TerniLapilliTest #test15DoAWinnerMovementOverTheGame stamp: 'DS 10/31/2020 23:50:01'!
ERROR!

!testRun: #TerniLapilliTest #test16XPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 10/31/2020 23:50:01'!
ERROR!

!testRun: #TerniLapilliTest #test17OPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 10/31/2020 23:50:01'!
ERROR!

!testRun: #TerniLapilliTest #test18PlayerCanNotPutOutOfBoard stamp: 'DS 10/31/2020 23:50:01'!
PASSED!

!testRun: #TerniLapilliTest #test19XPlayerCanNotMoveUpToNotEmptyPosition stamp: 'DS 10/31/2020 23:50:01'!
ERROR!

!testRun: #TerniLapilliTest #test20XPlayerCanNotMoveRightToNotEmptyPosition stamp: 'DS 10/31/2020 23:50:01'!
ERROR!

!testRun: #TerniLapilliTest #test21XPlayerCanNotMoveDownToNotEmptyPosition stamp: 'DS 10/31/2020 23:50:01'!
ERROR!

!testRun: #TerniLapilliTest #test22XPlayerCanNotMoveLeftToNotEmptyPosition stamp: 'DS 10/31/2020 23:50:01'!
ERROR!

!testRun: #TerniLapilliTest #test23XPlayerCanNotMoveLeftDownToNotEmptyPosition stamp: 'DS 10/31/2020 23:50:01'!
ERROR!

!testRun: #TerniLapilliTest #test24XPlayerCanNotMoveRightDownToNotEmptyPosition stamp: 'DS 10/31/2020 23:50:01'!
ERROR!

!testRun: #TerniLapilliTest #test25XPlayerCanNotMoveLeftUpToNotEmptyPosition stamp: 'DS 10/31/2020 23:50:01'!
ERROR!

!testRun: #TerniLapilliTest #test26XPlayerCanNotMoveRightUpToNotEmptyPosition stamp: 'DS 10/31/2020 23:50:01'!
ERROR!

!testRun: #TerniLapilliTest #test27XPlayerCanNotMoveLeftDownFromCenterUpPosition stamp: 'DS 10/31/2020 23:50:01'!
ERROR!

!testRun: #TerniLapilliTest #test28XPlayerCanNotMoveLeftDownFromRightCenterPosition stamp: 'DS 10/31/2020 23:50:01'!
ERROR!

!testRun: #TerniLapilliTest #test29XPlayerCanNotMoveRIghtDownFromCenterUpPosition stamp: 'DS 10/31/2020 23:50:01'!
ERROR!

!testRun: #TerniLapilliTest #test30XPlayerCanNotMoveRightDownFromLeftCenterPosition stamp: 'DS 10/31/2020 23:50:01'!
ERROR!

!testRun: #TerniLapilliTest #test31XPlayerCanNotMoveLeftUpFromCenterDownPosition stamp: 'DS 10/31/2020 23:50:01'!
ERROR!

!testRun: #TerniLapilliTest #test32XPlayerCanNotMoveLeftUpFromRightCenterPosition stamp: 'DS 10/31/2020 23:50:01'!
ERROR!

!testRun: #TerniLapilliTest #test33XPlayerCanNotMoveRightUpFromLeftCenterPosition stamp: 'DS 10/31/2020 23:50:01'!
ERROR!

!testRun: #TerniLapilliTest #test34XPlayerCanNotMoveLeftDownFromDownCenterPosition stamp: 'DS 10/31/2020 23:50:01'!
ERROR!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/31/2020 23:50:08'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'DS 10/31/2020 23:15:10' prior: 50903104!
hasPlayerXWon

	| positionsOccupiedByXPlayer i isHorizontalWinner isVerticalWinner isInvertedDiagonalWinner isDiagonalWinner |

	positionsOccupiedByXPlayer := ( ( positionsOccupied select: [ :aOccupiedPosition | aOccupiedPosition first = #X ] ) 
							  	collect: [ :aOccupiedPositionByX | aOccupiedPositionByX second] ) sort.
	
	i := 1.
	isHorizontalWinner := false.
	[i < (positionsOccupiedByXPlayer size - 1) ]	 whileTrue: [
		isHorizontalWinner := ((positionsOccupiedByXPlayer at: i)	 + (1@	0)) = (positionsOccupiedByXPlayer at: i+1)	.
		i := i+1.
	].

	i := 1.
	isVerticalWinner := false.
	[i < (positionsOccupiedByXPlayer size - 1) ]	 whileTrue: [
		isVerticalWinner := ((positionsOccupiedByXPlayer  at: i)	 + (0@	1)) = (positionsOccupiedByXPlayer  at: i+1)	.
		i := i+1.
	].

	isInvertedDiagonalWinner := positionsOccupiedByXPlayer includesAllOf: {-1@1. 0@0. 1@-1}.
	isDiagonalWinner := positionsOccupiedByXPlayer includesAllOf: {-1@-1. 0@0. 1@1}.

	^isHorizontalWinner or: isVerticalWinner or: isInvertedDiagonalWinner or: isDiagonalWinner.! !
!TerniLapilli methodsFor: 'testing' stamp: 'DS 10/31/2020 23:51:50' prior: 50903264!
hasPlayerXWon

	| positionsOccupiedByXPlayer i isHorizontalWinner isVerticalWinner isInvertedDiagonalWinner isDiagonalWinner |

	positionsOccupiedByXPlayer := ( ( positionsOccupied select: [ :aOccupiedPosition | aOccupiedPosition first = #X ] ) 
							  	collect: [ :aOccupiedPositionByX | aOccupiedPositionByX second] ) sort.
	
	i := 1.
	isHorizontalWinner := true.
	[i < (positionsOccupiedByXPlayer size - 1) ]	 whileTrue: [
		isHorizontalWinner := ((positionsOccupiedByXPlayer at: i)	 + (1@	0)) = (positionsOccupiedByXPlayer at: i+1)	.
		i := i+1.
	].

	i := 1.
	isVerticalWinner := true.
	[i < (positionsOccupiedByXPlayer size - 1) ]	 whileTrue: [
		isVerticalWinner := ((positionsOccupiedByXPlayer  at: i)	 + (0@	1)) = (positionsOccupiedByXPlayer  at: i+1)	.
		i := i+1.
	].

	isInvertedDiagonalWinner := positionsOccupiedByXPlayer includesAllOf: {-1@1. 0@0. 1@-1}.
	isDiagonalWinner := positionsOccupiedByXPlayer includesAllOf: {-1@-1. 0@0. 1@1}.

	^ [positionsOccupiedByXPlayer size = 3] and: [isHorizontalWinner or: isVerticalWinner or: isInvertedDiagonalWinner or: isDiagonalWinner].! !

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 10/31/2020 23:51:51'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/31/2020 23:51:51'!
ERROR!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/31/2020 23:51:51'!
ERROR!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/31/2020 23:51:51'!
ERROR!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/31/2020 23:51:51'!
FAILURE!

!testRun: #TerniLapilliTest #test06OPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 23:51:51'!
ERROR!

!testRun: #TerniLapilliTest #test07XPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 23:51:51'!
ERROR!

!testRun: #TerniLapilliTest #test08PlayerWonWithHorizontalPlay stamp: 'DS 10/31/2020 23:51:51'!
ERROR!

!testRun: #TerniLapilliTest #test09PlayerWonWithVerticalPlay stamp: 'DS 10/31/2020 23:51:51'!
ERROR!

!testRun: #TerniLapilliTest #test10PlayerWonWithInvertedDiagonalPlay stamp: 'DS 10/31/2020 23:51:51'!
ERROR!

!testRun: #TerniLapilliTest #test11PlayerWonWithDiagonalPlay stamp: 'DS 10/31/2020 23:51:51'!
ERROR!

!testRun: #TerniLapilliTest #test12GameIsOverWhenAPlayerWins stamp: 'DS 10/31/2020 23:51:51'!
ERROR!

!testRun: #TerniLapilliTest #test13XPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 23:51:51'!
ERROR!

!testRun: #TerniLapilliTest #test14OPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 23:51:51'!
ERROR!

!testRun: #TerniLapilliTest #test15DoAWinnerMovementOverTheGame stamp: 'DS 10/31/2020 23:51:51'!
ERROR!

!testRun: #TerniLapilliTest #test16XPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 10/31/2020 23:51:51'!
ERROR!

!testRun: #TerniLapilliTest #test17OPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 10/31/2020 23:51:51'!
ERROR!

!testRun: #TerniLapilliTest #test18PlayerCanNotPutOutOfBoard stamp: 'DS 10/31/2020 23:51:51'!
PASSED!

!testRun: #TerniLapilliTest #test19XPlayerCanNotMoveUpToNotEmptyPosition stamp: 'DS 10/31/2020 23:51:51'!
ERROR!

!testRun: #TerniLapilliTest #test20XPlayerCanNotMoveRightToNotEmptyPosition stamp: 'DS 10/31/2020 23:51:51'!
ERROR!

!testRun: #TerniLapilliTest #test21XPlayerCanNotMoveDownToNotEmptyPosition stamp: 'DS 10/31/2020 23:51:51'!
ERROR!

!testRun: #TerniLapilliTest #test22XPlayerCanNotMoveLeftToNotEmptyPosition stamp: 'DS 10/31/2020 23:51:51'!
ERROR!

!testRun: #TerniLapilliTest #test23XPlayerCanNotMoveLeftDownToNotEmptyPosition stamp: 'DS 10/31/2020 23:51:51'!
ERROR!

!testRun: #TerniLapilliTest #test24XPlayerCanNotMoveRightDownToNotEmptyPosition stamp: 'DS 10/31/2020 23:51:51'!
ERROR!

!testRun: #TerniLapilliTest #test25XPlayerCanNotMoveLeftUpToNotEmptyPosition stamp: 'DS 10/31/2020 23:51:51'!
ERROR!

!testRun: #TerniLapilliTest #test26XPlayerCanNotMoveRightUpToNotEmptyPosition stamp: 'DS 10/31/2020 23:51:51'!
ERROR!

!testRun: #TerniLapilliTest #test27XPlayerCanNotMoveLeftDownFromCenterUpPosition stamp: 'DS 10/31/2020 23:51:51'!
ERROR!

!testRun: #TerniLapilliTest #test28XPlayerCanNotMoveLeftDownFromRightCenterPosition stamp: 'DS 10/31/2020 23:51:51'!
ERROR!

!testRun: #TerniLapilliTest #test29XPlayerCanNotMoveRIghtDownFromCenterUpPosition stamp: 'DS 10/31/2020 23:51:51'!
ERROR!

!testRun: #TerniLapilliTest #test30XPlayerCanNotMoveRightDownFromLeftCenterPosition stamp: 'DS 10/31/2020 23:51:51'!
ERROR!

!testRun: #TerniLapilliTest #test31XPlayerCanNotMoveLeftUpFromCenterDownPosition stamp: 'DS 10/31/2020 23:51:51'!
ERROR!

!testRun: #TerniLapilliTest #test32XPlayerCanNotMoveLeftUpFromRightCenterPosition stamp: 'DS 10/31/2020 23:51:51'!
ERROR!

!testRun: #TerniLapilliTest #test33XPlayerCanNotMoveRightUpFromLeftCenterPosition stamp: 'DS 10/31/2020 23:51:51'!
ERROR!

!testRun: #TerniLapilliTest #test34XPlayerCanNotMoveLeftDownFromDownCenterPosition stamp: 'DS 10/31/2020 23:51:51'!
ERROR!

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 10/31/2020 23:52:08'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/31/2020 23:52:08'!
ERROR!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/31/2020 23:52:08'!
ERROR!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/31/2020 23:52:08'!
ERROR!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/31/2020 23:52:08'!
FAILURE!

!testRun: #TerniLapilliTest #test06OPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 23:52:08'!
ERROR!

!testRun: #TerniLapilliTest #test07XPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 23:52:08'!
ERROR!

!testRun: #TerniLapilliTest #test08PlayerWonWithHorizontalPlay stamp: 'DS 10/31/2020 23:52:08'!
ERROR!

!testRun: #TerniLapilliTest #test09PlayerWonWithVerticalPlay stamp: 'DS 10/31/2020 23:52:08'!
ERROR!

!testRun: #TerniLapilliTest #test10PlayerWonWithInvertedDiagonalPlay stamp: 'DS 10/31/2020 23:52:08'!
ERROR!

!testRun: #TerniLapilliTest #test11PlayerWonWithDiagonalPlay stamp: 'DS 10/31/2020 23:52:08'!
ERROR!

!testRun: #TerniLapilliTest #test12GameIsOverWhenAPlayerWins stamp: 'DS 10/31/2020 23:52:08'!
ERROR!

!testRun: #TerniLapilliTest #test13XPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 23:52:08'!
ERROR!

!testRun: #TerniLapilliTest #test14OPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 23:52:08'!
ERROR!

!testRun: #TerniLapilliTest #test15DoAWinnerMovementOverTheGame stamp: 'DS 10/31/2020 23:52:08'!
ERROR!

!testRun: #TerniLapilliTest #test16XPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 10/31/2020 23:52:08'!
ERROR!

!testRun: #TerniLapilliTest #test17OPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 10/31/2020 23:52:08'!
ERROR!

!testRun: #TerniLapilliTest #test18PlayerCanNotPutOutOfBoard stamp: 'DS 10/31/2020 23:52:08'!
PASSED!

!testRun: #TerniLapilliTest #test19XPlayerCanNotMoveUpToNotEmptyPosition stamp: 'DS 10/31/2020 23:52:08'!
ERROR!

!testRun: #TerniLapilliTest #test20XPlayerCanNotMoveRightToNotEmptyPosition stamp: 'DS 10/31/2020 23:52:08'!
ERROR!

!testRun: #TerniLapilliTest #test21XPlayerCanNotMoveDownToNotEmptyPosition stamp: 'DS 10/31/2020 23:52:08'!
ERROR!

!testRun: #TerniLapilliTest #test22XPlayerCanNotMoveLeftToNotEmptyPosition stamp: 'DS 10/31/2020 23:52:08'!
ERROR!

!testRun: #TerniLapilliTest #test23XPlayerCanNotMoveLeftDownToNotEmptyPosition stamp: 'DS 10/31/2020 23:52:08'!
ERROR!

!testRun: #TerniLapilliTest #test24XPlayerCanNotMoveRightDownToNotEmptyPosition stamp: 'DS 10/31/2020 23:52:08'!
ERROR!

!testRun: #TerniLapilliTest #test25XPlayerCanNotMoveLeftUpToNotEmptyPosition stamp: 'DS 10/31/2020 23:52:08'!
ERROR!

!testRun: #TerniLapilliTest #test26XPlayerCanNotMoveRightUpToNotEmptyPosition stamp: 'DS 10/31/2020 23:52:08'!
ERROR!

!testRun: #TerniLapilliTest #test27XPlayerCanNotMoveLeftDownFromCenterUpPosition stamp: 'DS 10/31/2020 23:52:08'!
ERROR!

!testRun: #TerniLapilliTest #test28XPlayerCanNotMoveLeftDownFromRightCenterPosition stamp: 'DS 10/31/2020 23:52:08'!
ERROR!

!testRun: #TerniLapilliTest #test29XPlayerCanNotMoveRIghtDownFromCenterUpPosition stamp: 'DS 10/31/2020 23:52:08'!
ERROR!

!testRun: #TerniLapilliTest #test30XPlayerCanNotMoveRightDownFromLeftCenterPosition stamp: 'DS 10/31/2020 23:52:08'!
ERROR!

!testRun: #TerniLapilliTest #test31XPlayerCanNotMoveLeftUpFromCenterDownPosition stamp: 'DS 10/31/2020 23:52:08'!
ERROR!

!testRun: #TerniLapilliTest #test32XPlayerCanNotMoveLeftUpFromRightCenterPosition stamp: 'DS 10/31/2020 23:52:08'!
ERROR!

!testRun: #TerniLapilliTest #test33XPlayerCanNotMoveRightUpFromLeftCenterPosition stamp: 'DS 10/31/2020 23:52:08'!
ERROR!

!testRun: #TerniLapilliTest #test34XPlayerCanNotMoveLeftDownFromDownCenterPosition stamp: 'DS 10/31/2020 23:52:08'!
ERROR!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/31/2020 23:52:09'!
ERROR!

positionsOccupiedByXPlayer!

self size!

positionsOccupiedByXPlayer size = 3!

[positionsOccupiedByXPlayer size = 3] and: [isHorizontalWinner or: isVerticalWinner or: isInvertedDiagonalWinner or: isDiagonalWinner]!

[positionsOccupiedByXPlayer size = 3]!
!TerniLapilli methodsFor: 'testing' stamp: 'DS 10/31/2020 23:53:10' prior: 50903300!
hasPlayerXWon

	| positionsOccupiedByXPlayer i isHorizontalWinner isVerticalWinner isInvertedDiagonalWinner isDiagonalWinner |

	positionsOccupiedByXPlayer := ( ( positionsOccupied select: [ :aOccupiedPosition | aOccupiedPosition first = #X ] ) 
							  	collect: [ :aOccupiedPositionByX | aOccupiedPositionByX second] ) sort.
	
	i := 1.
	isHorizontalWinner := true.
	[i < (positionsOccupiedByXPlayer size - 1) ]	 whileTrue: [
		isHorizontalWinner := ((positionsOccupiedByXPlayer at: i)	 + (1@	0)) = (positionsOccupiedByXPlayer at: i+1)	.
		i := i+1.
	].

	i := 1.
	isVerticalWinner := true.
	[i < (positionsOccupiedByXPlayer size - 1) ]	 whileTrue: [
		isVerticalWinner := ((positionsOccupiedByXPlayer  at: i)	 + (0@	1)) = (positionsOccupiedByXPlayer  at: i+1)	.
		i := i+1.
	].

	isInvertedDiagonalWinner := positionsOccupiedByXPlayer includesAllOf: {-1@1. 0@0. 1@-1}.
	isDiagonalWinner := positionsOccupiedByXPlayer includesAllOf: {-1@-1. 0@0. 1@1}.

	^ (positionsOccupiedByXPlayer size = 3) and: [isHorizontalWinner or: isVerticalWinner or: isInvertedDiagonalWinner or: isDiagonalWinner].! !

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/31/2020 23:53:12'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 10/31/2020 23:53:15'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/31/2020 23:53:15'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/31/2020 23:53:15'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/31/2020 23:53:15'!
PASSED!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/31/2020 23:53:15'!
PASSED!

!testRun: #TerniLapilliTest #test06OPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 23:53:15'!
PASSED!

!testRun: #TerniLapilliTest #test07XPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 23:53:15'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerWonWithHorizontalPlay stamp: 'DS 10/31/2020 23:53:15'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerWonWithVerticalPlay stamp: 'DS 10/31/2020 23:53:15'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerWonWithInvertedDiagonalPlay stamp: 'DS 10/31/2020 23:53:15'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerWonWithDiagonalPlay stamp: 'DS 10/31/2020 23:53:15'!
PASSED!

!testRun: #TerniLapilliTest #test12GameIsOverWhenAPlayerWins stamp: 'DS 10/31/2020 23:53:15'!
PASSED!

!testRun: #TerniLapilliTest #test13XPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 23:53:15'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 23:53:15'!
PASSED!

!testRun: #TerniLapilliTest #test15DoAWinnerMovementOverTheGame stamp: 'DS 10/31/2020 23:53:15'!
PASSED!

!testRun: #TerniLapilliTest #test16XPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 10/31/2020 23:53:15'!
PASSED!

!testRun: #TerniLapilliTest #test17OPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 10/31/2020 23:53:15'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerCanNotPutOutOfBoard stamp: 'DS 10/31/2020 23:53:15'!
PASSED!

!testRun: #TerniLapilliTest #test19XPlayerCanNotMoveUpToNotEmptyPosition stamp: 'DS 10/31/2020 23:53:15'!
PASSED!

!testRun: #TerniLapilliTest #test20XPlayerCanNotMoveRightToNotEmptyPosition stamp: 'DS 10/31/2020 23:53:15'!
PASSED!

!testRun: #TerniLapilliTest #test21XPlayerCanNotMoveDownToNotEmptyPosition stamp: 'DS 10/31/2020 23:53:15'!
PASSED!

!testRun: #TerniLapilliTest #test22XPlayerCanNotMoveLeftToNotEmptyPosition stamp: 'DS 10/31/2020 23:53:15'!
PASSED!

!testRun: #TerniLapilliTest #test23XPlayerCanNotMoveLeftDownToNotEmptyPosition stamp: 'DS 10/31/2020 23:53:15'!
PASSED!

!testRun: #TerniLapilliTest #test24XPlayerCanNotMoveRightDownToNotEmptyPosition stamp: 'DS 10/31/2020 23:53:15'!
PASSED!

!testRun: #TerniLapilliTest #test25XPlayerCanNotMoveLeftUpToNotEmptyPosition stamp: 'DS 10/31/2020 23:53:15'!
ERROR!

!testRun: #TerniLapilliTest #test26XPlayerCanNotMoveRightUpToNotEmptyPosition stamp: 'DS 10/31/2020 23:53:15'!
PASSED!

!testRun: #TerniLapilliTest #test27XPlayerCanNotMoveLeftDownFromCenterUpPosition stamp: 'DS 10/31/2020 23:53:15'!
PASSED!

!testRun: #TerniLapilliTest #test28XPlayerCanNotMoveLeftDownFromRightCenterPosition stamp: 'DS 10/31/2020 23:53:15'!
PASSED!

!testRun: #TerniLapilliTest #test29XPlayerCanNotMoveRIghtDownFromCenterUpPosition stamp: 'DS 10/31/2020 23:53:15'!
PASSED!

!testRun: #TerniLapilliTest #test30XPlayerCanNotMoveRightDownFromLeftCenterPosition stamp: 'DS 10/31/2020 23:53:15'!
PASSED!

!testRun: #TerniLapilliTest #test31XPlayerCanNotMoveLeftUpFromCenterDownPosition stamp: 'DS 10/31/2020 23:53:15'!
PASSED!

!testRun: #TerniLapilliTest #test32XPlayerCanNotMoveLeftUpFromRightCenterPosition stamp: 'DS 10/31/2020 23:53:15'!
PASSED!

!testRun: #TerniLapilliTest #test33XPlayerCanNotMoveRightUpFromLeftCenterPosition stamp: 'DS 10/31/2020 23:53:15'!
PASSED!

!testRun: #TerniLapilliTest #test34XPlayerCanNotMoveLeftDownFromDownCenterPosition stamp: 'DS 10/31/2020 23:53:15'!
PASSED!

!testRun: #TerniLapilliTest #test25XPlayerCanNotMoveLeftUpToNotEmptyPosition stamp: 'DS 10/31/2020 23:53:15'!
ERROR!

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 10/31/2020 23:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/31/2020 23:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/31/2020 23:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/31/2020 23:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/31/2020 23:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test06OPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 23:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test07XPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 23:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerWonWithHorizontalPlay stamp: 'DS 10/31/2020 23:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerWonWithVerticalPlay stamp: 'DS 10/31/2020 23:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerWonWithInvertedDiagonalPlay stamp: 'DS 10/31/2020 23:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerWonWithDiagonalPlay stamp: 'DS 10/31/2020 23:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test12GameIsOverWhenAPlayerWins stamp: 'DS 10/31/2020 23:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test13XPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 23:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 23:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test15DoAWinnerMovementOverTheGame stamp: 'DS 10/31/2020 23:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test16XPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 10/31/2020 23:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test17OPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 10/31/2020 23:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerCanNotPutOutOfBoard stamp: 'DS 10/31/2020 23:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test19XPlayerCanNotMoveUpToNotEmptyPosition stamp: 'DS 10/31/2020 23:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test20XPlayerCanNotMoveRightToNotEmptyPosition stamp: 'DS 10/31/2020 23:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test21XPlayerCanNotMoveDownToNotEmptyPosition stamp: 'DS 10/31/2020 23:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test22XPlayerCanNotMoveLeftToNotEmptyPosition stamp: 'DS 10/31/2020 23:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test23XPlayerCanNotMoveLeftDownToNotEmptyPosition stamp: 'DS 10/31/2020 23:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test24XPlayerCanNotMoveRightDownToNotEmptyPosition stamp: 'DS 10/31/2020 23:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test25XPlayerCanNotMoveLeftUpToNotEmptyPosition stamp: 'DS 10/31/2020 23:53:33'!
ERROR!

!testRun: #TerniLapilliTest #test26XPlayerCanNotMoveRightUpToNotEmptyPosition stamp: 'DS 10/31/2020 23:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test27XPlayerCanNotMoveLeftDownFromCenterUpPosition stamp: 'DS 10/31/2020 23:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test28XPlayerCanNotMoveLeftDownFromRightCenterPosition stamp: 'DS 10/31/2020 23:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test29XPlayerCanNotMoveRIghtDownFromCenterUpPosition stamp: 'DS 10/31/2020 23:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test30XPlayerCanNotMoveRightDownFromLeftCenterPosition stamp: 'DS 10/31/2020 23:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test31XPlayerCanNotMoveLeftUpFromCenterDownPosition stamp: 'DS 10/31/2020 23:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test32XPlayerCanNotMoveLeftUpFromRightCenterPosition stamp: 'DS 10/31/2020 23:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test33XPlayerCanNotMoveRightUpFromLeftCenterPosition stamp: 'DS 10/31/2020 23:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test34XPlayerCanNotMoveLeftDownFromDownCenterPosition stamp: 'DS 10/31/2020 23:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test25XPlayerCanNotMoveLeftUpToNotEmptyPosition stamp: 'DS 10/31/2020 23:53:33'!
ERROR!

self hasPlayerXWon!

positionsOccupiedByXPlayer!

positionsOccupiedByXPlayer!

self at: 1!

(self at: 1) + (1@0)!

|i|
i := 1.!

|i|
i := 1.
((self at: i)	 + (1@	0)) = (self at: i+1)!

|i|
i := 2.
((self at: i)	 + (1@	0)) = (self at: i+1)!

isHorizontalWinner!

 ((positionsOccupiedByXPlayer at: i)	 + (1@	0)) = (positionsOccupiedByXPlayer at: i+1)!
!TerniLapilli methodsFor: 'testing' stamp: 'DS 10/31/2020 23:59:02' prior: 50903590!
hasPlayerXWon

	| positionsOccupiedByXPlayer i isHorizontalWinner isVerticalWinner isInvertedDiagonalWinner isDiagonalWinner |

	positionsOccupiedByXPlayer := ( ( positionsOccupied select: [ :aOccupiedPosition | aOccupiedPosition first = #X ] ) 
							  	collect: [ :aOccupiedPositionByX | aOccupiedPositionByX second] ) sort.
	
	i := 1.
	isHorizontalWinner := true.
	[i < (positionsOccupiedByXPlayer size) ]	 whileTrue: [
		isHorizontalWinner := ((positionsOccupiedByXPlayer at: i)	 + (1@	0)) = (positionsOccupiedByXPlayer at: i+1)	.
		i := i+1.
	].

	i := 1.
	isVerticalWinner := true.
	[i < (positionsOccupiedByXPlayer size) ]	 whileTrue: [
		isVerticalWinner := ((positionsOccupiedByXPlayer  at: i)	 + (0@	1)) = (positionsOccupiedByXPlayer  at: i+1)	.
		i := i+1.
	].

	isInvertedDiagonalWinner := positionsOccupiedByXPlayer includesAllOf: {-1@1. 0@0. 1@-1}.
	isDiagonalWinner := positionsOccupiedByXPlayer includesAllOf: {-1@-1. 0@0. 1@1}.

	^ (positionsOccupiedByXPlayer size = 3) and: [isHorizontalWinner or: isVerticalWinner or: isInvertedDiagonalWinner or: isDiagonalWinner].! !

!testRun: #TerniLapilliTest #test25XPlayerCanNotMoveLeftUpToNotEmptyPosition stamp: 'DS 10/31/2020 23:59:09'!
FAILURE!

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 10/31/2020 23:59:14'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/31/2020 23:59:14'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/31/2020 23:59:14'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/31/2020 23:59:14'!
PASSED!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/31/2020 23:59:14'!
PASSED!

!testRun: #TerniLapilliTest #test06OPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 23:59:14'!
PASSED!

!testRun: #TerniLapilliTest #test07XPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 23:59:14'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerWonWithHorizontalPlay stamp: 'DS 10/31/2020 23:59:14'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerWonWithVerticalPlay stamp: 'DS 10/31/2020 23:59:14'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerWonWithInvertedDiagonalPlay stamp: 'DS 10/31/2020 23:59:14'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerWonWithDiagonalPlay stamp: 'DS 10/31/2020 23:59:14'!
PASSED!

!testRun: #TerniLapilliTest #test12GameIsOverWhenAPlayerWins stamp: 'DS 10/31/2020 23:59:14'!
PASSED!

!testRun: #TerniLapilliTest #test13XPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 23:59:14'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 23:59:14'!
PASSED!

!testRun: #TerniLapilliTest #test15DoAWinnerMovementOverTheGame stamp: 'DS 10/31/2020 23:59:14'!
PASSED!

!testRun: #TerniLapilliTest #test16XPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 10/31/2020 23:59:14'!
PASSED!

!testRun: #TerniLapilliTest #test17OPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 10/31/2020 23:59:14'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerCanNotPutOutOfBoard stamp: 'DS 10/31/2020 23:59:14'!
PASSED!

!testRun: #TerniLapilliTest #test19XPlayerCanNotMoveUpToNotEmptyPosition stamp: 'DS 10/31/2020 23:59:14'!
PASSED!

!testRun: #TerniLapilliTest #test20XPlayerCanNotMoveRightToNotEmptyPosition stamp: 'DS 10/31/2020 23:59:14'!
PASSED!

!testRun: #TerniLapilliTest #test21XPlayerCanNotMoveDownToNotEmptyPosition stamp: 'DS 10/31/2020 23:59:14'!
PASSED!

!testRun: #TerniLapilliTest #test22XPlayerCanNotMoveLeftToNotEmptyPosition stamp: 'DS 10/31/2020 23:59:14'!
PASSED!

!testRun: #TerniLapilliTest #test23XPlayerCanNotMoveLeftDownToNotEmptyPosition stamp: 'DS 10/31/2020 23:59:14'!
ERROR!

!testRun: #TerniLapilliTest #test24XPlayerCanNotMoveRightDownToNotEmptyPosition stamp: 'DS 10/31/2020 23:59:14'!
PASSED!

!testRun: #TerniLapilliTest #test25XPlayerCanNotMoveLeftUpToNotEmptyPosition stamp: 'DS 10/31/2020 23:59:14'!
FAILURE!

!testRun: #TerniLapilliTest #test26XPlayerCanNotMoveRightUpToNotEmptyPosition stamp: 'DS 10/31/2020 23:59:14'!
PASSED!

!testRun: #TerniLapilliTest #test27XPlayerCanNotMoveLeftDownFromCenterUpPosition stamp: 'DS 10/31/2020 23:59:14'!
PASSED!

!testRun: #TerniLapilliTest #test28XPlayerCanNotMoveLeftDownFromRightCenterPosition stamp: 'DS 10/31/2020 23:59:14'!
PASSED!

!testRun: #TerniLapilliTest #test29XPlayerCanNotMoveRIghtDownFromCenterUpPosition stamp: 'DS 10/31/2020 23:59:14'!
PASSED!

!testRun: #TerniLapilliTest #test30XPlayerCanNotMoveRightDownFromLeftCenterPosition stamp: 'DS 10/31/2020 23:59:14'!
PASSED!

!testRun: #TerniLapilliTest #test31XPlayerCanNotMoveLeftUpFromCenterDownPosition stamp: 'DS 10/31/2020 23:59:14'!
PASSED!

!testRun: #TerniLapilliTest #test32XPlayerCanNotMoveLeftUpFromRightCenterPosition stamp: 'DS 10/31/2020 23:59:14'!
PASSED!

!testRun: #TerniLapilliTest #test33XPlayerCanNotMoveRightUpFromLeftCenterPosition stamp: 'DS 10/31/2020 23:59:14'!
PASSED!

!testRun: #TerniLapilliTest #test34XPlayerCanNotMoveLeftDownFromDownCenterPosition stamp: 'DS 10/31/2020 23:59:14'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 10/31/2020 23:59:55'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 10/31/2020 23:59:55'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 10/31/2020 23:59:55'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 10/31/2020 23:59:55'!
PASSED!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 10/31/2020 23:59:55'!
PASSED!

!testRun: #TerniLapilliTest #test06OPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 23:59:55'!
PASSED!

!testRun: #TerniLapilliTest #test07XPlayerCanNotPutOnOccupiedPosition stamp: 'DS 10/31/2020 23:59:55'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerWonWithHorizontalPlay stamp: 'DS 10/31/2020 23:59:55'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerWonWithVerticalPlay stamp: 'DS 10/31/2020 23:59:55'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerWonWithInvertedDiagonalPlay stamp: 'DS 10/31/2020 23:59:55'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerWonWithDiagonalPlay stamp: 'DS 10/31/2020 23:59:55'!
PASSED!

!testRun: #TerniLapilliTest #test12GameIsOverWhenAPlayerWins stamp: 'DS 10/31/2020 23:59:55'!
PASSED!

!testRun: #TerniLapilliTest #test13XPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 23:59:55'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 10/31/2020 23:59:55'!
PASSED!

!testRun: #TerniLapilliTest #test15DoAWinnerMovementOverTheGame stamp: 'DS 10/31/2020 23:59:55'!
PASSED!

!testRun: #TerniLapilliTest #test16XPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 10/31/2020 23:59:55'!
PASSED!

!testRun: #TerniLapilliTest #test17OPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 10/31/2020 23:59:55'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerCanNotPutOutOfBoard stamp: 'DS 10/31/2020 23:59:55'!
PASSED!

!testRun: #TerniLapilliTest #test19XPlayerCanNotMoveUpToNotEmptyPosition stamp: 'DS 10/31/2020 23:59:55'!
PASSED!

!testRun: #TerniLapilliTest #test20XPlayerCanNotMoveRightToNotEmptyPosition stamp: 'DS 10/31/2020 23:59:55'!
PASSED!

!testRun: #TerniLapilliTest #test21XPlayerCanNotMoveDownToNotEmptyPosition stamp: 'DS 10/31/2020 23:59:55'!
PASSED!

!testRun: #TerniLapilliTest #test22XPlayerCanNotMoveLeftToNotEmptyPosition stamp: 'DS 10/31/2020 23:59:55'!
PASSED!

!testRun: #TerniLapilliTest #test23XPlayerCanNotMoveLeftDownToNotEmptyPosition stamp: 'DS 10/31/2020 23:59:55'!
ERROR!

!testRun: #TerniLapilliTest #test24XPlayerCanNotMoveRightDownToNotEmptyPosition stamp: 'DS 10/31/2020 23:59:55'!
PASSED!

!testRun: #TerniLapilliTest #test25XPlayerCanNotMoveLeftUpToNotEmptyPosition stamp: 'DS 10/31/2020 23:59:55'!
FAILURE!

!testRun: #TerniLapilliTest #test26XPlayerCanNotMoveRightUpToNotEmptyPosition stamp: 'DS 10/31/2020 23:59:55'!
PASSED!

!testRun: #TerniLapilliTest #test27XPlayerCanNotMoveLeftDownFromCenterUpPosition stamp: 'DS 10/31/2020 23:59:55'!
PASSED!

!testRun: #TerniLapilliTest #test28XPlayerCanNotMoveLeftDownFromRightCenterPosition stamp: 'DS 10/31/2020 23:59:55'!
PASSED!

!testRun: #TerniLapilliTest #test29XPlayerCanNotMoveRIghtDownFromCenterUpPosition stamp: 'DS 10/31/2020 23:59:55'!
PASSED!

!testRun: #TerniLapilliTest #test30XPlayerCanNotMoveRightDownFromLeftCenterPosition stamp: 'DS 10/31/2020 23:59:55'!
PASSED!

!testRun: #TerniLapilliTest #test31XPlayerCanNotMoveLeftUpFromCenterDownPosition stamp: 'DS 10/31/2020 23:59:55'!
PASSED!

!testRun: #TerniLapilliTest #test32XPlayerCanNotMoveLeftUpFromRightCenterPosition stamp: 'DS 10/31/2020 23:59:55'!
PASSED!

!testRun: #TerniLapilliTest #test33XPlayerCanNotMoveRightUpFromLeftCenterPosition stamp: 'DS 10/31/2020 23:59:55'!
PASSED!

!testRun: #TerniLapilliTest #test34XPlayerCanNotMoveLeftDownFromDownCenterPosition stamp: 'DS 10/31/2020 23:59:55'!
PASSED!

!testRun: #TerniLapilliTest #test23XPlayerCanNotMoveLeftDownToNotEmptyPosition stamp: 'DS 10/31/2020 23:59:56'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'DS 11/1/2020 00:00:18' prior: 50902146!
hasPlayerOWon

	| positionsOccupiedByOPlayer i isHorizontalWinner isVerticalWinner isInvertedDiagonalWinner isDiagonalWinner |

	positionsOccupiedByOPlayer := ( ( positionsOccupied select: [ :aOccupiedPosition | aOccupiedPosition first = #O ] ) 
							  	collect: [ :aOccupiedPositionByOPlayer | aOccupiedPositionByOPlayer second] ) sort.
	
	i := 1.
	isHorizontalWinner := true.
	[i < (positionsOccupiedByOPlayer size) ]	 whileTrue: [
		isHorizontalWinner := ((positionsOccupiedByOPlayer at: i)	 + (1@	0)) = (positionsOccupiedByOPlayer at: i+1)	.
		i := i+1.
	].

	i := 1.
	isVerticalWinner := true.
	[i < (positionsOccupiedByOPlayer size) ]	 whileTrue: [
		isVerticalWinner := ((positionsOccupiedByOPlayer  at: i)	 + (0@	1)) = (positionsOccupiedByOPlayer  at: i+1)	.
		i := i+1.
	].

	isInvertedDiagonalWinner := positionsOccupiedByOPlayer includesAllOf: {-1@1. 0@0. 1@-1}.
	isDiagonalWinner := positionsOccupiedByOPlayer includesAllOf: {-1@-1. 0@0. 1@1}.

	^isHorizontalWinner or: isVerticalWinner or: isInvertedDiagonalWinner or: isDiagonalWinner.! !

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 11/1/2020 00:00:19'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 11/1/2020 00:00:19'!
ERROR!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 11/1/2020 00:00:19'!
ERROR!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 11/1/2020 00:00:19'!
ERROR!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 11/1/2020 00:00:19'!
FAILURE!

!testRun: #TerniLapilliTest #test06OPlayerCanNotPutOnOccupiedPosition stamp: 'DS 11/1/2020 00:00:19'!
ERROR!

!testRun: #TerniLapilliTest #test07XPlayerCanNotPutOnOccupiedPosition stamp: 'DS 11/1/2020 00:00:19'!
ERROR!

!testRun: #TerniLapilliTest #test08PlayerWonWithHorizontalPlay stamp: 'DS 11/1/2020 00:00:19'!
ERROR!

!testRun: #TerniLapilliTest #test09PlayerWonWithVerticalPlay stamp: 'DS 11/1/2020 00:00:19'!
ERROR!

!testRun: #TerniLapilliTest #test10PlayerWonWithInvertedDiagonalPlay stamp: 'DS 11/1/2020 00:00:19'!
ERROR!

!testRun: #TerniLapilliTest #test11PlayerWonWithDiagonalPlay stamp: 'DS 11/1/2020 00:00:19'!
ERROR!

!testRun: #TerniLapilliTest #test12GameIsOverWhenAPlayerWins stamp: 'DS 11/1/2020 00:00:19'!
ERROR!

!testRun: #TerniLapilliTest #test13XPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 11/1/2020 00:00:19'!
ERROR!

!testRun: #TerniLapilliTest #test14OPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 11/1/2020 00:00:19'!
ERROR!

!testRun: #TerniLapilliTest #test15DoAWinnerMovementOverTheGame stamp: 'DS 11/1/2020 00:00:19'!
ERROR!

!testRun: #TerniLapilliTest #test16XPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 11/1/2020 00:00:19'!
ERROR!

!testRun: #TerniLapilliTest #test17OPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 11/1/2020 00:00:19'!
ERROR!

!testRun: #TerniLapilliTest #test18PlayerCanNotPutOutOfBoard stamp: 'DS 11/1/2020 00:00:19'!
PASSED!

!testRun: #TerniLapilliTest #test19XPlayerCanNotMoveUpToNotEmptyPosition stamp: 'DS 11/1/2020 00:00:19'!
ERROR!

!testRun: #TerniLapilliTest #test20XPlayerCanNotMoveRightToNotEmptyPosition stamp: 'DS 11/1/2020 00:00:19'!
ERROR!

!testRun: #TerniLapilliTest #test21XPlayerCanNotMoveDownToNotEmptyPosition stamp: 'DS 11/1/2020 00:00:19'!
ERROR!

!testRun: #TerniLapilliTest #test22XPlayerCanNotMoveLeftToNotEmptyPosition stamp: 'DS 11/1/2020 00:00:19'!
ERROR!

!testRun: #TerniLapilliTest #test23XPlayerCanNotMoveLeftDownToNotEmptyPosition stamp: 'DS 11/1/2020 00:00:19'!
ERROR!

!testRun: #TerniLapilliTest #test24XPlayerCanNotMoveRightDownToNotEmptyPosition stamp: 'DS 11/1/2020 00:00:19'!
ERROR!

!testRun: #TerniLapilliTest #test25XPlayerCanNotMoveLeftUpToNotEmptyPosition stamp: 'DS 11/1/2020 00:00:19'!
ERROR!

!testRun: #TerniLapilliTest #test26XPlayerCanNotMoveRightUpToNotEmptyPosition stamp: 'DS 11/1/2020 00:00:19'!
ERROR!

!testRun: #TerniLapilliTest #test27XPlayerCanNotMoveLeftDownFromCenterUpPosition stamp: 'DS 11/1/2020 00:00:19'!
ERROR!

!testRun: #TerniLapilliTest #test28XPlayerCanNotMoveLeftDownFromRightCenterPosition stamp: 'DS 11/1/2020 00:00:19'!
ERROR!

!testRun: #TerniLapilliTest #test29XPlayerCanNotMoveRIghtDownFromCenterUpPosition stamp: 'DS 11/1/2020 00:00:19'!
ERROR!

!testRun: #TerniLapilliTest #test30XPlayerCanNotMoveRightDownFromLeftCenterPosition stamp: 'DS 11/1/2020 00:00:19'!
ERROR!

!testRun: #TerniLapilliTest #test31XPlayerCanNotMoveLeftUpFromCenterDownPosition stamp: 'DS 11/1/2020 00:00:19'!
ERROR!

!testRun: #TerniLapilliTest #test32XPlayerCanNotMoveLeftUpFromRightCenterPosition stamp: 'DS 11/1/2020 00:00:19'!
ERROR!

!testRun: #TerniLapilliTest #test33XPlayerCanNotMoveRightUpFromLeftCenterPosition stamp: 'DS 11/1/2020 00:00:19'!
ERROR!

!testRun: #TerniLapilliTest #test34XPlayerCanNotMoveLeftDownFromDownCenterPosition stamp: 'DS 11/1/2020 00:00:19'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'DS 11/1/2020 00:00:47' prior: 50904180!
hasPlayerOWon

	| positionsOccupiedByOPlayer i isHorizontalWinner isVerticalWinner isInvertedDiagonalWinner isDiagonalWinner |

	positionsOccupiedByOPlayer := ( ( positionsOccupied select: [ :aOccupiedPosition | aOccupiedPosition first = #O ] ) 
							  	collect: [ :aOccupiedPositionByOPlayer | aOccupiedPositionByOPlayer second] ) sort.
	
	i := 1.
	isHorizontalWinner := true.
	[i < (positionsOccupiedByOPlayer size) ]	 whileTrue: [
		isHorizontalWinner := ((positionsOccupiedByOPlayer at: i)	 + (1@	0)) = (positionsOccupiedByOPlayer at: i+1)	.
		i := i+1.
	].

	i := 1.
	isVerticalWinner := true.
	[i < (positionsOccupiedByOPlayer size) ]	 whileTrue: [
		isVerticalWinner := ((positionsOccupiedByOPlayer  at: i)	 + (0@	1)) = (positionsOccupiedByOPlayer  at: i+1)	.
		i := i+1.
	].

	isInvertedDiagonalWinner := positionsOccupiedByOPlayer includesAllOf: {-1@1. 0@0. 1@-1}.
	isDiagonalWinner := positionsOccupiedByOPlayer includesAllOf: {-1@-1. 0@0. 1@1}.

	^(positionsOccupiedByOPlayer size = 3) and: [isHorizontalWinner or: isVerticalWinner or: isInvertedDiagonalWinner or: isDiagonalWinner].! !

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 11/1/2020 00:00:50'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 11/1/2020 00:00:50'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 11/1/2020 00:00:50'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 11/1/2020 00:00:50'!
PASSED!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 11/1/2020 00:00:50'!
PASSED!

!testRun: #TerniLapilliTest #test06OPlayerCanNotPutOnOccupiedPosition stamp: 'DS 11/1/2020 00:00:50'!
PASSED!

!testRun: #TerniLapilliTest #test07XPlayerCanNotPutOnOccupiedPosition stamp: 'DS 11/1/2020 00:00:50'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerWonWithHorizontalPlay stamp: 'DS 11/1/2020 00:00:50'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerWonWithVerticalPlay stamp: 'DS 11/1/2020 00:00:50'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerWonWithInvertedDiagonalPlay stamp: 'DS 11/1/2020 00:00:50'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerWonWithDiagonalPlay stamp: 'DS 11/1/2020 00:00:50'!
PASSED!

!testRun: #TerniLapilliTest #test12GameIsOverWhenAPlayerWins stamp: 'DS 11/1/2020 00:00:50'!
PASSED!

!testRun: #TerniLapilliTest #test13XPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 11/1/2020 00:00:50'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 11/1/2020 00:00:50'!
PASSED!

!testRun: #TerniLapilliTest #test15DoAWinnerMovementOverTheGame stamp: 'DS 11/1/2020 00:00:50'!
PASSED!

!testRun: #TerniLapilliTest #test16XPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 11/1/2020 00:00:50'!
PASSED!

!testRun: #TerniLapilliTest #test17OPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 11/1/2020 00:00:50'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerCanNotPutOutOfBoard stamp: 'DS 11/1/2020 00:00:50'!
PASSED!

!testRun: #TerniLapilliTest #test19XPlayerCanNotMoveUpToNotEmptyPosition stamp: 'DS 11/1/2020 00:00:50'!
PASSED!

!testRun: #TerniLapilliTest #test20XPlayerCanNotMoveRightToNotEmptyPosition stamp: 'DS 11/1/2020 00:00:50'!
PASSED!

!testRun: #TerniLapilliTest #test21XPlayerCanNotMoveDownToNotEmptyPosition stamp: 'DS 11/1/2020 00:00:50'!
PASSED!

!testRun: #TerniLapilliTest #test22XPlayerCanNotMoveLeftToNotEmptyPosition stamp: 'DS 11/1/2020 00:00:50'!
PASSED!

!testRun: #TerniLapilliTest #test23XPlayerCanNotMoveLeftDownToNotEmptyPosition stamp: 'DS 11/1/2020 00:00:50'!
ERROR!

!testRun: #TerniLapilliTest #test24XPlayerCanNotMoveRightDownToNotEmptyPosition stamp: 'DS 11/1/2020 00:00:50'!
PASSED!

!testRun: #TerniLapilliTest #test25XPlayerCanNotMoveLeftUpToNotEmptyPosition stamp: 'DS 11/1/2020 00:00:50'!
FAILURE!

!testRun: #TerniLapilliTest #test26XPlayerCanNotMoveRightUpToNotEmptyPosition stamp: 'DS 11/1/2020 00:00:50'!
PASSED!

!testRun: #TerniLapilliTest #test27XPlayerCanNotMoveLeftDownFromCenterUpPosition stamp: 'DS 11/1/2020 00:00:50'!
PASSED!

!testRun: #TerniLapilliTest #test28XPlayerCanNotMoveLeftDownFromRightCenterPosition stamp: 'DS 11/1/2020 00:00:50'!
PASSED!

!testRun: #TerniLapilliTest #test29XPlayerCanNotMoveRIghtDownFromCenterUpPosition stamp: 'DS 11/1/2020 00:00:50'!
PASSED!

!testRun: #TerniLapilliTest #test30XPlayerCanNotMoveRightDownFromLeftCenterPosition stamp: 'DS 11/1/2020 00:00:50'!
PASSED!

!testRun: #TerniLapilliTest #test31XPlayerCanNotMoveLeftUpFromCenterDownPosition stamp: 'DS 11/1/2020 00:00:50'!
PASSED!

!testRun: #TerniLapilliTest #test32XPlayerCanNotMoveLeftUpFromRightCenterPosition stamp: 'DS 11/1/2020 00:00:50'!
PASSED!

!testRun: #TerniLapilliTest #test33XPlayerCanNotMoveRightUpFromLeftCenterPosition stamp: 'DS 11/1/2020 00:00:50'!
PASSED!

!testRun: #TerniLapilliTest #test34XPlayerCanNotMoveLeftDownFromDownCenterPosition stamp: 'DS 11/1/2020 00:00:50'!
PASSED!

!testRun: #TerniLapilliTest #test23XPlayerCanNotMoveLeftDownToNotEmptyPosition stamp: 'DS 11/1/2020 00:00:55'!
ERROR!

!testRun: #TerniLapilliTest #test23XPlayerCanNotMoveLeftDownToNotEmptyPosition stamp: 'DS 11/1/2020 00:01:10'!
ERROR!

!testRun: #TerniLapilliTest #test23XPlayerCanNotMoveLeftDownToNotEmptyPosition stamp: 'DS 11/1/2020 00:01:17'!
ERROR!

self hasPlayerXWon!

positionsOccupiedByXPlayer!

((positionsOccupiedByXPlayer at: i)	 + (1@	0)) = (positionsOccupiedByXPlayer at: i+1)	!

((positionsOccupiedByXPlayer at: i)	 + (1@	0)) = (positionsOccupiedByXPlayer at: i+1)	!

(positionsOccupiedByXPlayer at: i)!

(positionsOccupiedByXPlayer at: i+1)!
!TerniLapilli methodsFor: 'testing' stamp: 'DS 11/1/2020 00:06:24'!
hasWonPlayer: aPlayer

	| positionsOccupiedByPlayer i isHorizontalWinner isVerticalWinner isInvertedDiagonalWinner isDiagonalWinner |

	positionsOccupiedByPlayer := ( ( positionsOccupied select: [ :aOccupiedPosition | aOccupiedPosition first = aPlayer ] ) 
							  	collect: [ :aOccupiedPositionByPlayer | aOccupiedPositionByPlayer second] ) sort.
	
	i := 1.
	isHorizontalWinner := true.
	[i < (positionsOccupiedByPlayer size) ]	 whileTrue: [
		isHorizontalWinner := ((positionsOccupiedByPlayer at: i)	 + (1@	0)) = (positionsOccupiedByPlayer at: i+1)	.
		i := i+1.
	].

	i := 1.
	isVerticalWinner := true.
	[i < (positionsOccupiedByPlayer size) ]	 whileTrue: [
		isVerticalWinner := ((positionsOccupiedByPlayer  at: i)	 + (0@	1)) = (positionsOccupiedByPlayer  at: i+1)	.
		i := i+1.
	].

	isInvertedDiagonalWinner := positionsOccupiedByPlayer includesAllOf: {-1@1. 0@0. 1@-1}.
	isDiagonalWinner := positionsOccupiedByPlayer includesAllOf: {-1@-1. 0@0. 1@1}.

	^(positionsOccupiedByPlayer size = 3) and: [isHorizontalWinner or: isVerticalWinner or: isInvertedDiagonalWinner or: isDiagonalWinner].! !
!TerniLapilli methodsFor: 'testing' stamp: 'DS 11/1/2020 00:06:42' prior: 50904336!
hasPlayerOWon

	^self hasWonPlayer: #O.! !
!TerniLapilli methodsFor: 'testing' stamp: 'DS 11/1/2020 00:06:54' prior: 50903892!
hasPlayerXWon

	^self hasWonPlayer: #X.! !

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 11/1/2020 00:06:55'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 11/1/2020 00:06:55'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 11/1/2020 00:06:55'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 11/1/2020 00:06:55'!
PASSED!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 11/1/2020 00:06:55'!
PASSED!

!testRun: #TerniLapilliTest #test06OPlayerCanNotPutOnOccupiedPosition stamp: 'DS 11/1/2020 00:06:55'!
PASSED!

!testRun: #TerniLapilliTest #test07XPlayerCanNotPutOnOccupiedPosition stamp: 'DS 11/1/2020 00:06:55'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerWonWithHorizontalPlay stamp: 'DS 11/1/2020 00:06:55'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerWonWithVerticalPlay stamp: 'DS 11/1/2020 00:06:55'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerWonWithInvertedDiagonalPlay stamp: 'DS 11/1/2020 00:06:55'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerWonWithDiagonalPlay stamp: 'DS 11/1/2020 00:06:55'!
PASSED!

!testRun: #TerniLapilliTest #test12GameIsOverWhenAPlayerWins stamp: 'DS 11/1/2020 00:06:55'!
PASSED!

!testRun: #TerniLapilliTest #test13XPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 11/1/2020 00:06:55'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 11/1/2020 00:06:55'!
PASSED!

!testRun: #TerniLapilliTest #test15DoAWinnerMovementOverTheGame stamp: 'DS 11/1/2020 00:06:55'!
PASSED!

!testRun: #TerniLapilliTest #test16XPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 11/1/2020 00:06:55'!
PASSED!

!testRun: #TerniLapilliTest #test17OPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 11/1/2020 00:06:55'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerCanNotPutOutOfBoard stamp: 'DS 11/1/2020 00:06:55'!
PASSED!

!testRun: #TerniLapilliTest #test19XPlayerCanNotMoveUpToNotEmptyPosition stamp: 'DS 11/1/2020 00:06:55'!
PASSED!

!testRun: #TerniLapilliTest #test20XPlayerCanNotMoveRightToNotEmptyPosition stamp: 'DS 11/1/2020 00:06:55'!
PASSED!

!testRun: #TerniLapilliTest #test21XPlayerCanNotMoveDownToNotEmptyPosition stamp: 'DS 11/1/2020 00:06:55'!
PASSED!

!testRun: #TerniLapilliTest #test22XPlayerCanNotMoveLeftToNotEmptyPosition stamp: 'DS 11/1/2020 00:06:55'!
PASSED!

!testRun: #TerniLapilliTest #test23XPlayerCanNotMoveLeftDownToNotEmptyPosition stamp: 'DS 11/1/2020 00:06:55'!
ERROR!

!testRun: #TerniLapilliTest #test24XPlayerCanNotMoveRightDownToNotEmptyPosition stamp: 'DS 11/1/2020 00:06:55'!
PASSED!

!testRun: #TerniLapilliTest #test25XPlayerCanNotMoveLeftUpToNotEmptyPosition stamp: 'DS 11/1/2020 00:06:55'!
FAILURE!

!testRun: #TerniLapilliTest #test26XPlayerCanNotMoveRightUpToNotEmptyPosition stamp: 'DS 11/1/2020 00:06:55'!
PASSED!

!testRun: #TerniLapilliTest #test27XPlayerCanNotMoveLeftDownFromCenterUpPosition stamp: 'DS 11/1/2020 00:06:55'!
PASSED!

!testRun: #TerniLapilliTest #test28XPlayerCanNotMoveLeftDownFromRightCenterPosition stamp: 'DS 11/1/2020 00:06:55'!
PASSED!

!testRun: #TerniLapilliTest #test29XPlayerCanNotMoveRIghtDownFromCenterUpPosition stamp: 'DS 11/1/2020 00:06:55'!
PASSED!

!testRun: #TerniLapilliTest #test30XPlayerCanNotMoveRightDownFromLeftCenterPosition stamp: 'DS 11/1/2020 00:06:55'!
PASSED!

!testRun: #TerniLapilliTest #test31XPlayerCanNotMoveLeftUpFromCenterDownPosition stamp: 'DS 11/1/2020 00:06:55'!
PASSED!

!testRun: #TerniLapilliTest #test32XPlayerCanNotMoveLeftUpFromRightCenterPosition stamp: 'DS 11/1/2020 00:06:55'!
PASSED!

!testRun: #TerniLapilliTest #test33XPlayerCanNotMoveRightUpFromLeftCenterPosition stamp: 'DS 11/1/2020 00:06:55'!
PASSED!

!testRun: #TerniLapilliTest #test34XPlayerCanNotMoveLeftDownFromDownCenterPosition stamp: 'DS 11/1/2020 00:06:55'!
PASSED!
!TerniLapilli methodsFor: 'testing' stamp: 'DS 11/1/2020 00:07:31' prior: 50904514!
hasWonPlayer: aPlayer

	| positionsOccupiedByPlayer i isHorizontalWinner isVerticalWinner isInvertedDiagonalWinner isDiagonalWinner |

	positionsOccupiedByPlayer := ( ( positionsOccupied select: [ :aOccupiedPosition | aOccupiedPosition first = aPlayer ] ) 
							  	collect: [ :aOccupiedPositionByPlayer | aOccupiedPositionByPlayer second] ) sort.
	
	i := 1.
	isHorizontalWinner := true.
	[i < (positionsOccupiedByPlayer size) ]	 whileTrue: [
		isHorizontalWinner := isHorizontalWinner and: [ ((positionsOccupiedByPlayer at: i)	 + (1@	0)) = (positionsOccupiedByPlayer at: i+1)	 ].
		i := i+1.
	].

	i := 1.
	isVerticalWinner := true.
	[i < (positionsOccupiedByPlayer size) ]	 whileTrue: [
		isVerticalWinner := isVerticalWinner and: [ ((positionsOccupiedByPlayer  at: i)	 + (0@	1)) = (positionsOccupiedByPlayer  at: i+1)	 ].
		i := i+1.
	].

	isInvertedDiagonalWinner := positionsOccupiedByPlayer includesAllOf: {-1@1. 0@0. 1@-1}.
	isDiagonalWinner := positionsOccupiedByPlayer includesAllOf: {-1@-1. 0@0. 1@1}.

	^(positionsOccupiedByPlayer size = 3) and: [isHorizontalWinner or: isVerticalWinner or: isInvertedDiagonalWinner or: isDiagonalWinner].! !

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 11/1/2020 00:07:33'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 11/1/2020 00:07:33'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 11/1/2020 00:07:33'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 11/1/2020 00:07:33'!
PASSED!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 11/1/2020 00:07:33'!
PASSED!

!testRun: #TerniLapilliTest #test06OPlayerCanNotPutOnOccupiedPosition stamp: 'DS 11/1/2020 00:07:33'!
PASSED!

!testRun: #TerniLapilliTest #test07XPlayerCanNotPutOnOccupiedPosition stamp: 'DS 11/1/2020 00:07:33'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerWonWithHorizontalPlay stamp: 'DS 11/1/2020 00:07:33'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerWonWithVerticalPlay stamp: 'DS 11/1/2020 00:07:33'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerWonWithInvertedDiagonalPlay stamp: 'DS 11/1/2020 00:07:33'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerWonWithDiagonalPlay stamp: 'DS 11/1/2020 00:07:33'!
PASSED!

!testRun: #TerniLapilliTest #test12GameIsOverWhenAPlayerWins stamp: 'DS 11/1/2020 00:07:33'!
PASSED!

!testRun: #TerniLapilliTest #test13XPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 11/1/2020 00:07:33'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 11/1/2020 00:07:33'!
PASSED!

!testRun: #TerniLapilliTest #test15DoAWinnerMovementOverTheGame stamp: 'DS 11/1/2020 00:07:33'!
PASSED!

!testRun: #TerniLapilliTest #test16XPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 11/1/2020 00:07:33'!
PASSED!

!testRun: #TerniLapilliTest #test17OPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 11/1/2020 00:07:33'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerCanNotPutOutOfBoard stamp: 'DS 11/1/2020 00:07:33'!
PASSED!

!testRun: #TerniLapilliTest #test19XPlayerCanNotMoveUpToNotEmptyPosition stamp: 'DS 11/1/2020 00:07:33'!
PASSED!

!testRun: #TerniLapilliTest #test20XPlayerCanNotMoveRightToNotEmptyPosition stamp: 'DS 11/1/2020 00:07:33'!
PASSED!

!testRun: #TerniLapilliTest #test21XPlayerCanNotMoveDownToNotEmptyPosition stamp: 'DS 11/1/2020 00:07:33'!
PASSED!

!testRun: #TerniLapilliTest #test22XPlayerCanNotMoveLeftToNotEmptyPosition stamp: 'DS 11/1/2020 00:07:33'!
PASSED!

!testRun: #TerniLapilliTest #test23XPlayerCanNotMoveLeftDownToNotEmptyPosition stamp: 'DS 11/1/2020 00:07:33'!
PASSED!

!testRun: #TerniLapilliTest #test24XPlayerCanNotMoveRightDownToNotEmptyPosition stamp: 'DS 11/1/2020 00:07:33'!
PASSED!

!testRun: #TerniLapilliTest #test25XPlayerCanNotMoveLeftUpToNotEmptyPosition stamp: 'DS 11/1/2020 00:07:33'!
FAILURE!

!testRun: #TerniLapilliTest #test26XPlayerCanNotMoveRightUpToNotEmptyPosition stamp: 'DS 11/1/2020 00:07:33'!
PASSED!

!testRun: #TerniLapilliTest #test27XPlayerCanNotMoveLeftDownFromCenterUpPosition stamp: 'DS 11/1/2020 00:07:33'!
PASSED!

!testRun: #TerniLapilliTest #test28XPlayerCanNotMoveLeftDownFromRightCenterPosition stamp: 'DS 11/1/2020 00:07:33'!
PASSED!

!testRun: #TerniLapilliTest #test29XPlayerCanNotMoveRIghtDownFromCenterUpPosition stamp: 'DS 11/1/2020 00:07:33'!
PASSED!

!testRun: #TerniLapilliTest #test30XPlayerCanNotMoveRightDownFromLeftCenterPosition stamp: 'DS 11/1/2020 00:07:33'!
PASSED!

!testRun: #TerniLapilliTest #test31XPlayerCanNotMoveLeftUpFromCenterDownPosition stamp: 'DS 11/1/2020 00:07:33'!
PASSED!

!testRun: #TerniLapilliTest #test32XPlayerCanNotMoveLeftUpFromRightCenterPosition stamp: 'DS 11/1/2020 00:07:33'!
PASSED!

!testRun: #TerniLapilliTest #test33XPlayerCanNotMoveRightUpFromLeftCenterPosition stamp: 'DS 11/1/2020 00:07:33'!
PASSED!

!testRun: #TerniLapilliTest #test34XPlayerCanNotMoveLeftDownFromDownCenterPosition stamp: 'DS 11/1/2020 00:07:33'!
PASSED!

!testRun: #TerniLapilliTest #test25XPlayerCanNotMoveLeftUpToNotEmptyPosition stamp: 'DS 11/1/2020 00:07:33'!
FAILURE!

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 11/1/2020 00:07:39'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 11/1/2020 00:07:39'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 11/1/2020 00:07:39'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 11/1/2020 00:07:39'!
PASSED!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 11/1/2020 00:07:39'!
PASSED!

!testRun: #TerniLapilliTest #test06OPlayerCanNotPutOnOccupiedPosition stamp: 'DS 11/1/2020 00:07:39'!
PASSED!

!testRun: #TerniLapilliTest #test07XPlayerCanNotPutOnOccupiedPosition stamp: 'DS 11/1/2020 00:07:39'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerWonWithHorizontalPlay stamp: 'DS 11/1/2020 00:07:39'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerWonWithVerticalPlay stamp: 'DS 11/1/2020 00:07:39'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerWonWithInvertedDiagonalPlay stamp: 'DS 11/1/2020 00:07:39'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerWonWithDiagonalPlay stamp: 'DS 11/1/2020 00:07:39'!
PASSED!

!testRun: #TerniLapilliTest #test12GameIsOverWhenAPlayerWins stamp: 'DS 11/1/2020 00:07:39'!
PASSED!

!testRun: #TerniLapilliTest #test13XPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 11/1/2020 00:07:39'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 11/1/2020 00:07:39'!
PASSED!

!testRun: #TerniLapilliTest #test15DoAWinnerMovementOverTheGame stamp: 'DS 11/1/2020 00:07:39'!
PASSED!

!testRun: #TerniLapilliTest #test16XPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 11/1/2020 00:07:39'!
PASSED!

!testRun: #TerniLapilliTest #test17OPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 11/1/2020 00:07:39'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerCanNotPutOutOfBoard stamp: 'DS 11/1/2020 00:07:39'!
PASSED!

!testRun: #TerniLapilliTest #test19XPlayerCanNotMoveUpToNotEmptyPosition stamp: 'DS 11/1/2020 00:07:39'!
PASSED!

!testRun: #TerniLapilliTest #test20XPlayerCanNotMoveRightToNotEmptyPosition stamp: 'DS 11/1/2020 00:07:39'!
PASSED!

!testRun: #TerniLapilliTest #test21XPlayerCanNotMoveDownToNotEmptyPosition stamp: 'DS 11/1/2020 00:07:39'!
PASSED!

!testRun: #TerniLapilliTest #test22XPlayerCanNotMoveLeftToNotEmptyPosition stamp: 'DS 11/1/2020 00:07:39'!
PASSED!

!testRun: #TerniLapilliTest #test23XPlayerCanNotMoveLeftDownToNotEmptyPosition stamp: 'DS 11/1/2020 00:07:39'!
PASSED!

!testRun: #TerniLapilliTest #test24XPlayerCanNotMoveRightDownToNotEmptyPosition stamp: 'DS 11/1/2020 00:07:39'!
PASSED!

!testRun: #TerniLapilliTest #test25XPlayerCanNotMoveLeftUpToNotEmptyPosition stamp: 'DS 11/1/2020 00:07:39'!
FAILURE!

!testRun: #TerniLapilliTest #test26XPlayerCanNotMoveRightUpToNotEmptyPosition stamp: 'DS 11/1/2020 00:07:39'!
PASSED!

!testRun: #TerniLapilliTest #test27XPlayerCanNotMoveLeftDownFromCenterUpPosition stamp: 'DS 11/1/2020 00:07:39'!
PASSED!

!testRun: #TerniLapilliTest #test28XPlayerCanNotMoveLeftDownFromRightCenterPosition stamp: 'DS 11/1/2020 00:07:39'!
PASSED!

!testRun: #TerniLapilliTest #test29XPlayerCanNotMoveRIghtDownFromCenterUpPosition stamp: 'DS 11/1/2020 00:07:39'!
PASSED!

!testRun: #TerniLapilliTest #test30XPlayerCanNotMoveRightDownFromLeftCenterPosition stamp: 'DS 11/1/2020 00:07:39'!
PASSED!

!testRun: #TerniLapilliTest #test31XPlayerCanNotMoveLeftUpFromCenterDownPosition stamp: 'DS 11/1/2020 00:07:39'!
PASSED!

!testRun: #TerniLapilliTest #test32XPlayerCanNotMoveLeftUpFromRightCenterPosition stamp: 'DS 11/1/2020 00:07:39'!
PASSED!

!testRun: #TerniLapilliTest #test33XPlayerCanNotMoveRightUpFromLeftCenterPosition stamp: 'DS 11/1/2020 00:07:39'!
PASSED!

!testRun: #TerniLapilliTest #test34XPlayerCanNotMoveLeftDownFromDownCenterPosition stamp: 'DS 11/1/2020 00:07:39'!
PASSED!

!testRun: #TerniLapilliTest #test25XPlayerCanNotMoveLeftUpToNotEmptyPosition stamp: 'DS 11/1/2020 00:07:39'!
FAILURE!

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 11/1/2020 00:08:42'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 11/1/2020 00:08:42'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 11/1/2020 00:08:42'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 11/1/2020 00:08:42'!
PASSED!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 11/1/2020 00:08:42'!
PASSED!

!testRun: #TerniLapilliTest #test06OPlayerCanNotPutOnOccupiedPosition stamp: 'DS 11/1/2020 00:08:42'!
PASSED!

!testRun: #TerniLapilliTest #test07XPlayerCanNotPutOnOccupiedPosition stamp: 'DS 11/1/2020 00:08:42'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerWonWithHorizontalPlay stamp: 'DS 11/1/2020 00:08:42'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerWonWithVerticalPlay stamp: 'DS 11/1/2020 00:08:42'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerWonWithInvertedDiagonalPlay stamp: 'DS 11/1/2020 00:08:42'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerWonWithDiagonalPlay stamp: 'DS 11/1/2020 00:08:42'!
PASSED!

!testRun: #TerniLapilliTest #test12GameIsOverWhenAPlayerWins stamp: 'DS 11/1/2020 00:08:42'!
PASSED!

!testRun: #TerniLapilliTest #test13XPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 11/1/2020 00:08:42'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 11/1/2020 00:08:42'!
PASSED!

!testRun: #TerniLapilliTest #test15DoAWinnerMovementOverTheGame stamp: 'DS 11/1/2020 00:08:42'!
PASSED!

!testRun: #TerniLapilliTest #test16XPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 11/1/2020 00:08:42'!
PASSED!

!testRun: #TerniLapilliTest #test17OPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 11/1/2020 00:08:42'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerCanNotPutOutOfBoard stamp: 'DS 11/1/2020 00:08:42'!
PASSED!

!testRun: #TerniLapilliTest #test19XPlayerCanNotMoveUpToNotEmptyPosition stamp: 'DS 11/1/2020 00:08:42'!
PASSED!

!testRun: #TerniLapilliTest #test20XPlayerCanNotMoveRightToNotEmptyPosition stamp: 'DS 11/1/2020 00:08:42'!
PASSED!

!testRun: #TerniLapilliTest #test21XPlayerCanNotMoveDownToNotEmptyPosition stamp: 'DS 11/1/2020 00:08:42'!
PASSED!

!testRun: #TerniLapilliTest #test22XPlayerCanNotMoveLeftToNotEmptyPosition stamp: 'DS 11/1/2020 00:08:42'!
PASSED!

!testRun: #TerniLapilliTest #test23XPlayerCanNotMoveLeftDownToNotEmptyPosition stamp: 'DS 11/1/2020 00:08:42'!
PASSED!

!testRun: #TerniLapilliTest #test24XPlayerCanNotMoveRightDownToNotEmptyPosition stamp: 'DS 11/1/2020 00:08:42'!
PASSED!

!testRun: #TerniLapilliTest #test25XPlayerCanNotMoveLeftUpToNotEmptyPosition stamp: 'DS 11/1/2020 00:08:42'!
FAILURE!

!testRun: #TerniLapilliTest #test26XPlayerCanNotMoveRightUpToNotEmptyPosition stamp: 'DS 11/1/2020 00:08:42'!
PASSED!

!testRun: #TerniLapilliTest #test27XPlayerCanNotMoveLeftDownFromCenterUpPosition stamp: 'DS 11/1/2020 00:08:42'!
PASSED!

!testRun: #TerniLapilliTest #test28XPlayerCanNotMoveLeftDownFromRightCenterPosition stamp: 'DS 11/1/2020 00:08:42'!
PASSED!

!testRun: #TerniLapilliTest #test29XPlayerCanNotMoveRIghtDownFromCenterUpPosition stamp: 'DS 11/1/2020 00:08:42'!
PASSED!

!testRun: #TerniLapilliTest #test30XPlayerCanNotMoveRightDownFromLeftCenterPosition stamp: 'DS 11/1/2020 00:08:42'!
PASSED!

!testRun: #TerniLapilliTest #test31XPlayerCanNotMoveLeftUpFromCenterDownPosition stamp: 'DS 11/1/2020 00:08:42'!
PASSED!

!testRun: #TerniLapilliTest #test32XPlayerCanNotMoveLeftUpFromRightCenterPosition stamp: 'DS 11/1/2020 00:08:42'!
PASSED!

!testRun: #TerniLapilliTest #test33XPlayerCanNotMoveRightUpFromLeftCenterPosition stamp: 'DS 11/1/2020 00:08:42'!
PASSED!

!testRun: #TerniLapilliTest #test34XPlayerCanNotMoveLeftDownFromDownCenterPosition stamp: 'DS 11/1/2020 00:08:42'!
PASSED!

!testRun: #TerniLapilliTest #test25XPlayerCanNotMoveLeftUpToNotEmptyPosition stamp: 'DS 11/1/2020 00:08:42'!
FAILURE!
!TerniLapilli methodsFor: 'movements' stamp: 'DS 11/1/2020 00:08:55' prior: 50899835!
moveLeftUpXFrom: aPosition

	| direction |

	(0@-1 = aPosition) ifTrue: [ self error: self class ilegalMovementErrorDescription ].

	direction := -1@1.

	self put: #X at: aPosition + direction.
	positionsOccupied remove: {#X. aPosition}.

	! !

!testRun: #TerniLapilliTest #test25XPlayerCanNotMoveLeftUpToNotEmptyPosition stamp: 'DS 11/1/2020 00:08:56'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 11/1/2020 00:08:58'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 11/1/2020 00:08:58'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 11/1/2020 00:08:58'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 11/1/2020 00:08:58'!
PASSED!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 11/1/2020 00:08:58'!
PASSED!

!testRun: #TerniLapilliTest #test06OPlayerCanNotPutOnOccupiedPosition stamp: 'DS 11/1/2020 00:08:58'!
PASSED!

!testRun: #TerniLapilliTest #test07XPlayerCanNotPutOnOccupiedPosition stamp: 'DS 11/1/2020 00:08:58'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerWonWithHorizontalPlay stamp: 'DS 11/1/2020 00:08:58'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerWonWithVerticalPlay stamp: 'DS 11/1/2020 00:08:58'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerWonWithInvertedDiagonalPlay stamp: 'DS 11/1/2020 00:08:58'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerWonWithDiagonalPlay stamp: 'DS 11/1/2020 00:08:58'!
PASSED!

!testRun: #TerniLapilliTest #test12GameIsOverWhenAPlayerWins stamp: 'DS 11/1/2020 00:08:58'!
PASSED!

!testRun: #TerniLapilliTest #test13XPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 11/1/2020 00:08:58'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 11/1/2020 00:08:58'!
PASSED!

!testRun: #TerniLapilliTest #test15DoAWinnerMovementOverTheGame stamp: 'DS 11/1/2020 00:08:58'!
PASSED!

!testRun: #TerniLapilliTest #test16XPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 11/1/2020 00:08:58'!
PASSED!

!testRun: #TerniLapilliTest #test17OPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 11/1/2020 00:08:58'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerCanNotPutOutOfBoard stamp: 'DS 11/1/2020 00:08:58'!
PASSED!

!testRun: #TerniLapilliTest #test19XPlayerCanNotMoveUpToNotEmptyPosition stamp: 'DS 11/1/2020 00:08:58'!
PASSED!

!testRun: #TerniLapilliTest #test20XPlayerCanNotMoveRightToNotEmptyPosition stamp: 'DS 11/1/2020 00:08:58'!
PASSED!

!testRun: #TerniLapilliTest #test21XPlayerCanNotMoveDownToNotEmptyPosition stamp: 'DS 11/1/2020 00:08:58'!
PASSED!

!testRun: #TerniLapilliTest #test22XPlayerCanNotMoveLeftToNotEmptyPosition stamp: 'DS 11/1/2020 00:08:58'!
PASSED!

!testRun: #TerniLapilliTest #test23XPlayerCanNotMoveLeftDownToNotEmptyPosition stamp: 'DS 11/1/2020 00:08:58'!
PASSED!

!testRun: #TerniLapilliTest #test24XPlayerCanNotMoveRightDownToNotEmptyPosition stamp: 'DS 11/1/2020 00:08:58'!
PASSED!

!testRun: #TerniLapilliTest #test25XPlayerCanNotMoveLeftUpToNotEmptyPosition stamp: 'DS 11/1/2020 00:08:58'!
PASSED!

!testRun: #TerniLapilliTest #test26XPlayerCanNotMoveRightUpToNotEmptyPosition stamp: 'DS 11/1/2020 00:08:58'!
PASSED!

!testRun: #TerniLapilliTest #test27XPlayerCanNotMoveLeftDownFromCenterUpPosition stamp: 'DS 11/1/2020 00:08:58'!
PASSED!

!testRun: #TerniLapilliTest #test28XPlayerCanNotMoveLeftDownFromRightCenterPosition stamp: 'DS 11/1/2020 00:08:58'!
PASSED!

!testRun: #TerniLapilliTest #test29XPlayerCanNotMoveRIghtDownFromCenterUpPosition stamp: 'DS 11/1/2020 00:08:58'!
PASSED!

!testRun: #TerniLapilliTest #test30XPlayerCanNotMoveRightDownFromLeftCenterPosition stamp: 'DS 11/1/2020 00:08:58'!
PASSED!

!testRun: #TerniLapilliTest #test31XPlayerCanNotMoveLeftUpFromCenterDownPosition stamp: 'DS 11/1/2020 00:08:58'!
PASSED!

!testRun: #TerniLapilliTest #test32XPlayerCanNotMoveLeftUpFromRightCenterPosition stamp: 'DS 11/1/2020 00:08:58'!
PASSED!

!testRun: #TerniLapilliTest #test33XPlayerCanNotMoveRightUpFromLeftCenterPosition stamp: 'DS 11/1/2020 00:08:58'!
PASSED!

!testRun: #TerniLapilliTest #test34XPlayerCanNotMoveLeftDownFromDownCenterPosition stamp: 'DS 11/1/2020 00:08:58'!
PASSED!

----SNAPSHOT----(1 November 2020 00:09:00) CuisUniversity-4384.image priorSource: 18286396!
!TerniLapilliTest methodsFor: 'movements' stamp: 'DS 11/1/2020 00:15:51'!
test35OPlayerCanNotMoveUpToNotEmptyPosition

	| aTerniLapilli |

	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 0@-1.
	aTerniLapilli putOAt: 0@0.
	
	aTerniLapilli putXAt: 0@1.
	aTerniLapilli putOAt: 1@1.
	
	aTerniLapilli putXAt: -1@1.
	aTerniLapilli putOAt: 1@-1.
	
	aTerniLapilli moveLeftXFrom: 0@-1.

	self
		should: [ aTerniLapilli moveUpOFrom: 0@0. ]
		raise: Error
		withMessageText: TerniLapilli ilegalMovementErrorDescription.	! !

!testRun: #TerniLapilliTest #test35OPlayerCanNotMoveUpToNotEmptyPosition stamp: 'DS 11/1/2020 00:15:55'!
FAILURE!
!TerniLapilli methodsFor: 'movements' stamp: 'DS 11/1/2020 00:16:16'!
moveUpOFrom: aPoint 
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'movements' stamp: 'DS 11/1/2020 00:16:47' prior: 50905250!
moveUpOFrom: aPosition
	
	| direction |
	direction := 0@1.

	self put: #X at: aPosition + direction.
	positionsOccupied remove: {#O. aPosition}.! !

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 11/1/2020 00:16:51'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 11/1/2020 00:16:51'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 11/1/2020 00:16:51'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 11/1/2020 00:16:51'!
PASSED!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 11/1/2020 00:16:51'!
PASSED!

!testRun: #TerniLapilliTest #test06OPlayerCanNotPutOnOccupiedPosition stamp: 'DS 11/1/2020 00:16:51'!
PASSED!

!testRun: #TerniLapilliTest #test07XPlayerCanNotPutOnOccupiedPosition stamp: 'DS 11/1/2020 00:16:51'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerWonWithHorizontalPlay stamp: 'DS 11/1/2020 00:16:51'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerWonWithVerticalPlay stamp: 'DS 11/1/2020 00:16:51'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerWonWithInvertedDiagonalPlay stamp: 'DS 11/1/2020 00:16:51'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerWonWithDiagonalPlay stamp: 'DS 11/1/2020 00:16:51'!
PASSED!

!testRun: #TerniLapilliTest #test12GameIsOverWhenAPlayerWins stamp: 'DS 11/1/2020 00:16:51'!
PASSED!

!testRun: #TerniLapilliTest #test13XPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 11/1/2020 00:16:51'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 11/1/2020 00:16:51'!
PASSED!

!testRun: #TerniLapilliTest #test15DoAWinnerMovementOverTheGame stamp: 'DS 11/1/2020 00:16:51'!
PASSED!

!testRun: #TerniLapilliTest #test16XPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 11/1/2020 00:16:51'!
PASSED!

!testRun: #TerniLapilliTest #test17OPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 11/1/2020 00:16:51'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerCanNotPutOutOfBoard stamp: 'DS 11/1/2020 00:16:51'!
PASSED!

!testRun: #TerniLapilliTest #test19XPlayerCanNotMoveUpToNotEmptyPosition stamp: 'DS 11/1/2020 00:16:51'!
PASSED!

!testRun: #TerniLapilliTest #test20XPlayerCanNotMoveRightToNotEmptyPosition stamp: 'DS 11/1/2020 00:16:51'!
PASSED!

!testRun: #TerniLapilliTest #test21XPlayerCanNotMoveDownToNotEmptyPosition stamp: 'DS 11/1/2020 00:16:51'!
PASSED!

!testRun: #TerniLapilliTest #test22XPlayerCanNotMoveLeftToNotEmptyPosition stamp: 'DS 11/1/2020 00:16:51'!
PASSED!

!testRun: #TerniLapilliTest #test23XPlayerCanNotMoveLeftDownToNotEmptyPosition stamp: 'DS 11/1/2020 00:16:51'!
PASSED!

!testRun: #TerniLapilliTest #test24XPlayerCanNotMoveRightDownToNotEmptyPosition stamp: 'DS 11/1/2020 00:16:51'!
PASSED!

!testRun: #TerniLapilliTest #test25XPlayerCanNotMoveLeftUpToNotEmptyPosition stamp: 'DS 11/1/2020 00:16:51'!
PASSED!

!testRun: #TerniLapilliTest #test26XPlayerCanNotMoveRightUpToNotEmptyPosition stamp: 'DS 11/1/2020 00:16:51'!
PASSED!

!testRun: #TerniLapilliTest #test27XPlayerCanNotMoveLeftDownFromCenterUpPosition stamp: 'DS 11/1/2020 00:16:51'!
PASSED!

!testRun: #TerniLapilliTest #test28XPlayerCanNotMoveLeftDownFromRightCenterPosition stamp: 'DS 11/1/2020 00:16:51'!
PASSED!

!testRun: #TerniLapilliTest #test29XPlayerCanNotMoveRIghtDownFromCenterUpPosition stamp: 'DS 11/1/2020 00:16:51'!
PASSED!

!testRun: #TerniLapilliTest #test30XPlayerCanNotMoveRightDownFromLeftCenterPosition stamp: 'DS 11/1/2020 00:16:51'!
PASSED!

!testRun: #TerniLapilliTest #test31XPlayerCanNotMoveLeftUpFromCenterDownPosition stamp: 'DS 11/1/2020 00:16:51'!
PASSED!

!testRun: #TerniLapilliTest #test32XPlayerCanNotMoveLeftUpFromRightCenterPosition stamp: 'DS 11/1/2020 00:16:51'!
PASSED!

!testRun: #TerniLapilliTest #test33XPlayerCanNotMoveRightUpFromLeftCenterPosition stamp: 'DS 11/1/2020 00:16:51'!
PASSED!

!testRun: #TerniLapilliTest #test34XPlayerCanNotMoveLeftDownFromDownCenterPosition stamp: 'DS 11/1/2020 00:16:51'!
PASSED!

!testRun: #TerniLapilliTest #test35OPlayerCanNotMoveUpToNotEmptyPosition stamp: 'DS 11/1/2020 00:16:51'!
FAILURE!

!testRun: #TerniLapilliTest #test35OPlayerCanNotMoveUpToNotEmptyPosition stamp: 'DS 11/1/2020 00:16:51'!
FAILURE!
!TerniLapilli methodsFor: 'movements' stamp: 'DS 11/1/2020 00:17:51' prior: 50905255!
moveUpOFrom: aPosition
	
	| direction |
	direction := 0@1.

	self put: #O at: aPosition + direction.
	positionsOccupied remove: {#O. aPosition}.! !

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 11/1/2020 00:17:53'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 11/1/2020 00:17:53'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 11/1/2020 00:17:53'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 11/1/2020 00:17:53'!
PASSED!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 11/1/2020 00:17:53'!
PASSED!

!testRun: #TerniLapilliTest #test06OPlayerCanNotPutOnOccupiedPosition stamp: 'DS 11/1/2020 00:17:53'!
PASSED!

!testRun: #TerniLapilliTest #test07XPlayerCanNotPutOnOccupiedPosition stamp: 'DS 11/1/2020 00:17:53'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerWonWithHorizontalPlay stamp: 'DS 11/1/2020 00:17:53'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerWonWithVerticalPlay stamp: 'DS 11/1/2020 00:17:53'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerWonWithInvertedDiagonalPlay stamp: 'DS 11/1/2020 00:17:53'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerWonWithDiagonalPlay stamp: 'DS 11/1/2020 00:17:53'!
PASSED!

!testRun: #TerniLapilliTest #test12GameIsOverWhenAPlayerWins stamp: 'DS 11/1/2020 00:17:53'!
PASSED!

!testRun: #TerniLapilliTest #test13XPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 11/1/2020 00:17:53'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 11/1/2020 00:17:53'!
PASSED!

!testRun: #TerniLapilliTest #test15DoAWinnerMovementOverTheGame stamp: 'DS 11/1/2020 00:17:53'!
PASSED!

!testRun: #TerniLapilliTest #test16XPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 11/1/2020 00:17:53'!
PASSED!

!testRun: #TerniLapilliTest #test17OPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 11/1/2020 00:17:53'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerCanNotPutOutOfBoard stamp: 'DS 11/1/2020 00:17:53'!
PASSED!

!testRun: #TerniLapilliTest #test19XPlayerCanNotMoveUpToNotEmptyPosition stamp: 'DS 11/1/2020 00:17:53'!
PASSED!

!testRun: #TerniLapilliTest #test20XPlayerCanNotMoveRightToNotEmptyPosition stamp: 'DS 11/1/2020 00:17:53'!
PASSED!

!testRun: #TerniLapilliTest #test21XPlayerCanNotMoveDownToNotEmptyPosition stamp: 'DS 11/1/2020 00:17:53'!
PASSED!

!testRun: #TerniLapilliTest #test22XPlayerCanNotMoveLeftToNotEmptyPosition stamp: 'DS 11/1/2020 00:17:53'!
PASSED!

!testRun: #TerniLapilliTest #test23XPlayerCanNotMoveLeftDownToNotEmptyPosition stamp: 'DS 11/1/2020 00:17:53'!
PASSED!

!testRun: #TerniLapilliTest #test24XPlayerCanNotMoveRightDownToNotEmptyPosition stamp: 'DS 11/1/2020 00:17:53'!
PASSED!

!testRun: #TerniLapilliTest #test25XPlayerCanNotMoveLeftUpToNotEmptyPosition stamp: 'DS 11/1/2020 00:17:53'!
PASSED!

!testRun: #TerniLapilliTest #test26XPlayerCanNotMoveRightUpToNotEmptyPosition stamp: 'DS 11/1/2020 00:17:53'!
PASSED!

!testRun: #TerniLapilliTest #test27XPlayerCanNotMoveLeftDownFromCenterUpPosition stamp: 'DS 11/1/2020 00:17:53'!
PASSED!

!testRun: #TerniLapilliTest #test28XPlayerCanNotMoveLeftDownFromRightCenterPosition stamp: 'DS 11/1/2020 00:17:53'!
PASSED!

!testRun: #TerniLapilliTest #test29XPlayerCanNotMoveRIghtDownFromCenterUpPosition stamp: 'DS 11/1/2020 00:17:53'!
PASSED!

!testRun: #TerniLapilliTest #test30XPlayerCanNotMoveRightDownFromLeftCenterPosition stamp: 'DS 11/1/2020 00:17:53'!
PASSED!

!testRun: #TerniLapilliTest #test31XPlayerCanNotMoveLeftUpFromCenterDownPosition stamp: 'DS 11/1/2020 00:17:53'!
PASSED!

!testRun: #TerniLapilliTest #test32XPlayerCanNotMoveLeftUpFromRightCenterPosition stamp: 'DS 11/1/2020 00:17:53'!
PASSED!

!testRun: #TerniLapilliTest #test33XPlayerCanNotMoveRightUpFromLeftCenterPosition stamp: 'DS 11/1/2020 00:17:53'!
PASSED!

!testRun: #TerniLapilliTest #test34XPlayerCanNotMoveLeftDownFromDownCenterPosition stamp: 'DS 11/1/2020 00:17:53'!
PASSED!

!testRun: #TerniLapilliTest #test35OPlayerCanNotMoveUpToNotEmptyPosition stamp: 'DS 11/1/2020 00:17:53'!
PASSED!

----SNAPSHOT----(1 November 2020 00:17:56) CuisUniversity-4384.image priorSource: 18354427!
!TerniLapilli methodsFor: 'movements' stamp: 'DS 11/1/2020 00:19:24'!
move: aPlayer on: aDirection from: aPosition

	self put: aPlayer at: aPosition + aDirection.
	positionsOccupied remove: {aPlayer. aPosition}.! !

!methodRemoval: TerniLapilli #move:on:from: stamp: 'DS 11/1/2020 00:21:26'!
move: aPlayer on: aDirection from: aPosition

	self put: aPlayer at: aPosition + aDirection.
	positionsOccupied remove: {aPlayer. aPosition}.!

!testRun: #TerniLapilliTest #test01GameStartWithXPlayerTurn stamp: 'DS 11/1/2020 00:21:28'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterFirstTurnIsOPlayerTurn stamp: 'DS 11/1/2020 00:21:28'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlayerTurnIsXPlayerTurn stamp: 'DS 11/1/2020 00:21:28'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlayerCanNotPlayOnOPlayerTurn stamp: 'DS 11/1/2020 00:21:28'!
PASSED!

!testRun: #TerniLapilliTest #test05OPlayerCanNotPlayOnXPlayerTurn stamp: 'DS 11/1/2020 00:21:28'!
PASSED!

!testRun: #TerniLapilliTest #test06OPlayerCanNotPutOnOccupiedPosition stamp: 'DS 11/1/2020 00:21:28'!
PASSED!

!testRun: #TerniLapilliTest #test07XPlayerCanNotPutOnOccupiedPosition stamp: 'DS 11/1/2020 00:21:28'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerWonWithHorizontalPlay stamp: 'DS 11/1/2020 00:21:28'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerWonWithVerticalPlay stamp: 'DS 11/1/2020 00:21:28'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerWonWithInvertedDiagonalPlay stamp: 'DS 11/1/2020 00:21:28'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerWonWithDiagonalPlay stamp: 'DS 11/1/2020 00:21:28'!
PASSED!

!testRun: #TerniLapilliTest #test12GameIsOverWhenAPlayerWins stamp: 'DS 11/1/2020 00:21:28'!
PASSED!

!testRun: #TerniLapilliTest #test13XPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 11/1/2020 00:21:28'!
PASSED!

!testRun: #TerniLapilliTest #test14OPlayerCanNotMoveFromNotOwnPosition stamp: 'DS 11/1/2020 00:21:28'!
PASSED!

!testRun: #TerniLapilliTest #test15DoAWinnerMovementOverTheGame stamp: 'DS 11/1/2020 00:21:28'!
PASSED!

!testRun: #TerniLapilliTest #test16XPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 11/1/2020 00:21:28'!
PASSED!

!testRun: #TerniLapilliTest #test17OPlayerCanNotPutWhenHasNotTokenRemained stamp: 'DS 11/1/2020 00:21:28'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerCanNotPutOutOfBoard stamp: 'DS 11/1/2020 00:21:28'!
PASSED!

!testRun: #TerniLapilliTest #test19XPlayerCanNotMoveUpToNotEmptyPosition stamp: 'DS 11/1/2020 00:21:28'!
PASSED!

!testRun: #TerniLapilliTest #test20XPlayerCanNotMoveRightToNotEmptyPosition stamp: 'DS 11/1/2020 00:21:28'!
PASSED!

!testRun: #TerniLapilliTest #test21XPlayerCanNotMoveDownToNotEmptyPosition stamp: 'DS 11/1/2020 00:21:28'!
PASSED!

!testRun: #TerniLapilliTest #test22XPlayerCanNotMoveLeftToNotEmptyPosition stamp: 'DS 11/1/2020 00:21:28'!
PASSED!

!testRun: #TerniLapilliTest #test23XPlayerCanNotMoveLeftDownToNotEmptyPosition stamp: 'DS 11/1/2020 00:21:28'!
PASSED!

!testRun: #TerniLapilliTest #test24XPlayerCanNotMoveRightDownToNotEmptyPosition stamp: 'DS 11/1/2020 00:21:28'!
PASSED!

!testRun: #TerniLapilliTest #test25XPlayerCanNotMoveLeftUpToNotEmptyPosition stamp: 'DS 11/1/2020 00:21:28'!
PASSED!

!testRun: #TerniLapilliTest #test26XPlayerCanNotMoveRightUpToNotEmptyPosition stamp: 'DS 11/1/2020 00:21:28'!
PASSED!

!testRun: #TerniLapilliTest #test27XPlayerCanNotMoveLeftDownFromCenterUpPosition stamp: 'DS 11/1/2020 00:21:28'!
PASSED!

!testRun: #TerniLapilliTest #test28XPlayerCanNotMoveLeftDownFromRightCenterPosition stamp: 'DS 11/1/2020 00:21:28'!
PASSED!

!testRun: #TerniLapilliTest #test29XPlayerCanNotMoveRIghtDownFromCenterUpPosition stamp: 'DS 11/1/2020 00:21:28'!
PASSED!

!testRun: #TerniLapilliTest #test30XPlayerCanNotMoveRightDownFromLeftCenterPosition stamp: 'DS 11/1/2020 00:21:28'!
PASSED!

!testRun: #TerniLapilliTest #test31XPlayerCanNotMoveLeftUpFromCenterDownPosition stamp: 'DS 11/1/2020 00:21:28'!
PASSED!

!testRun: #TerniLapilliTest #test32XPlayerCanNotMoveLeftUpFromRightCenterPosition stamp: 'DS 11/1/2020 00:21:28'!
PASSED!

!testRun: #TerniLapilliTest #test33XPlayerCanNotMoveRightUpFromLeftCenterPosition stamp: 'DS 11/1/2020 00:21:28'!
PASSED!

!testRun: #TerniLapilliTest #test34XPlayerCanNotMoveLeftDownFromDownCenterPosition stamp: 'DS 11/1/2020 00:21:28'!
PASSED!

!testRun: #TerniLapilliTest #test35OPlayerCanNotMoveUpToNotEmptyPosition stamp: 'DS 11/1/2020 00:21:28'!
PASSED!